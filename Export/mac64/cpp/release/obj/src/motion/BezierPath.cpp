// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_motion_BezierPath
#include <motion/BezierPath.h>
#endif

namespace motion{

void BezierPath_obj::__construct(Float end,Float control,Float strength){
            	HX_STACK_FRAME("motion.BezierPath","new",0x3a535fae,"motion.BezierPath.new","motion/MotionPath.hx",204,0x95e57daa)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(end,"end")
            	HX_STACK_ARG(control,"control")
            	HX_STACK_ARG(strength,"strength")
HXLINE( 206)		this->end = end;
HXLINE( 207)		this->control = control;
HXLINE( 208)		this->strength = strength;
            	}

Dynamic BezierPath_obj::__CreateEmpty() { return new BezierPath_obj; }

hx::ObjectPtr< BezierPath_obj > BezierPath_obj::__new(Float end,Float control,Float strength)
{
	hx::ObjectPtr< BezierPath_obj > _hx_result = new BezierPath_obj();
	_hx_result->__construct(end,control,strength);
	return _hx_result;
}

Dynamic BezierPath_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< BezierPath_obj > _hx_result = new BezierPath_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

Float BezierPath_obj::calculate(Float start,Float k){
            	HX_STACK_FRAME("motion.BezierPath","calculate",0x71899334,"motion.BezierPath.calculate","motion/MotionPath.hx",215,0x95e57daa)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(start,"start")
            	HX_STACK_ARG(k,"k")
HXLINE( 215)		return ((((((int)1 - k) * ((int)1 - k)) * start) + ((((int)2 * ((int)1 - k)) * k) * this->control)) + ((k * k) * this->end));
            	}


HX_DEFINE_DYNAMIC_FUNC2(BezierPath_obj,calculate,return )


BezierPath_obj::BezierPath_obj()
{
}

hx::Val BezierPath_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"end") ) { return hx::Val( end); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"control") ) { return hx::Val( control); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"strength") ) { return hx::Val( strength); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"calculate") ) { return hx::Val( calculate_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val BezierPath_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"end") ) { end=inValue.Cast< Float >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"control") ) { control=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"strength") ) { strength=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void BezierPath_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("control","\x5d","\x6b","\x81","\x19"));
	outFields->push(HX_HCSTRING("end","\xdb","\x03","\x4d","\x00"));
	outFields->push(HX_HCSTRING("strength","\x81","\xd2","\x8e","\x8e"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo BezierPath_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(BezierPath_obj,control),HX_HCSTRING("control","\x5d","\x6b","\x81","\x19")},
	{hx::fsFloat,(int)offsetof(BezierPath_obj,end),HX_HCSTRING("end","\xdb","\x03","\x4d","\x00")},
	{hx::fsFloat,(int)offsetof(BezierPath_obj,strength),HX_HCSTRING("strength","\x81","\xd2","\x8e","\x8e")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *BezierPath_obj_sStaticStorageInfo = 0;
#endif

static ::String BezierPath_obj_sMemberFields[] = {
	HX_HCSTRING("control","\x5d","\x6b","\x81","\x19"),
	HX_HCSTRING("end","\xdb","\x03","\x4d","\x00"),
	HX_HCSTRING("strength","\x81","\xd2","\x8e","\x8e"),
	HX_HCSTRING("calculate","\x66","\x95","\x6a","\x05"),
	::String(null()) };

static void BezierPath_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(BezierPath_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void BezierPath_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(BezierPath_obj::__mClass,"__mClass");
};

#endif

hx::Class BezierPath_obj::__mClass;

void BezierPath_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("motion.BezierPath","\xbc","\xb0","\x2a","\x79");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = BezierPath_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(BezierPath_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< BezierPath_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = BezierPath_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BezierPath_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BezierPath_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace motion
