// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_motion_easing_ElasticEaseInOut
#include <motion/easing/ElasticEaseInOut.h>
#endif
#ifndef INCLUDED_motion_easing_IEasing
#include <motion/easing/IEasing.h>
#endif

namespace motion{
namespace easing{

void ElasticEaseInOut_obj::__construct(Float a,Float p){
            	HX_STACK_FRAME("motion.easing.ElasticEaseInOut","new",0x6a75d0c3,"motion.easing.ElasticEaseInOut.new","motion/easing/Elastic.hx",101,0x73ac9cf4)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(p,"p")
HXLINE( 103)		this->a = a;
HXLINE( 104)		this->p = p;
            	}

Dynamic ElasticEaseInOut_obj::__CreateEmpty() { return new ElasticEaseInOut_obj; }

hx::ObjectPtr< ElasticEaseInOut_obj > ElasticEaseInOut_obj::__new(Float a,Float p)
{
	hx::ObjectPtr< ElasticEaseInOut_obj > _hx_result = new ElasticEaseInOut_obj();
	_hx_result->__construct(a,p);
	return _hx_result;
}

Dynamic ElasticEaseInOut_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ElasticEaseInOut_obj > _hx_result = new ElasticEaseInOut_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

static ::motion::easing::IEasing_obj _hx_motion_easing_ElasticEaseInOut__hx_motion_easing_IEasing= {
	( Float (hx::Object::*)(Float))&::motion::easing::ElasticEaseInOut_obj::calculate,
	( Float (hx::Object::*)(Float,Float,Float,Float))&::motion::easing::ElasticEaseInOut_obj::ease,
};

void *ElasticEaseInOut_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x864e8b53: return &_hx_motion_easing_ElasticEaseInOut__hx_motion_easing_IEasing;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

Float ElasticEaseInOut_obj::calculate(Float k){
            	HX_STACK_FRAME("motion.easing.ElasticEaseInOut","calculate",0xc9d98209,"motion.easing.ElasticEaseInOut.calculate","motion/easing/Elastic.hx",108,0x73ac9cf4)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(k,"k")
HXLINE( 110)		if ((k == (int)0)) {
HXLINE( 111)			return (int)0;
            		}
HXLINE( 113)		hx::DivEq(k,((Float)0.5));
HXDLIN( 113)		if ((k == (int)2)) {
HXLINE( 114)			return (int)1;
            		}
HXLINE( 121)		if ((k < (int)1)) {
HXLINE( 122)			Float _hx_tmp = --k;
HXDLIN( 122)			Float _hx_tmp1 = ::Math_obj::pow((int)2,((int)10 * _hx_tmp));
HXDLIN( 122)			Float _hx_tmp2 = ((k - ((Float)0.112499999999999989)) * ((int)2 * ::Math_obj::PI));
HXDLIN( 122)			Float _hx_tmp3 = ::Math_obj::sin(((Float)_hx_tmp2 / (Float)((Float)0.449999999999999956)));
HXDLIN( 122)			return (((Float)-0.5) * (_hx_tmp1 * _hx_tmp3));
            		}
HXLINE( 124)		Float _hx_tmp4 = --k;
HXDLIN( 124)		Float _hx_tmp5 = ::Math_obj::pow((int)2,((int)-10 * _hx_tmp4));
HXDLIN( 124)		Float _hx_tmp6 = ((k - ((Float)0.112499999999999989)) * ((int)2 * ::Math_obj::PI));
HXDLIN( 124)		Float _hx_tmp7 = ::Math_obj::sin(((Float)_hx_tmp6 / (Float)((Float)0.449999999999999956)));
HXDLIN( 124)		return (((_hx_tmp5 * _hx_tmp7) * ((Float)0.5)) + (int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ElasticEaseInOut_obj,calculate,return )

Float ElasticEaseInOut_obj::ease(Float t,Float b,Float c,Float d){
            	HX_STACK_FRAME("motion.easing.ElasticEaseInOut","ease",0xb6aae22b,"motion.easing.ElasticEaseInOut.ease","motion/easing/Elastic.hx",129,0x73ac9cf4)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(t,"t")
            	HX_STACK_ARG(b,"b")
            	HX_STACK_ARG(c,"c")
            	HX_STACK_ARG(d,"d")
HXLINE( 131)		if ((t == (int)0)) {
HXLINE( 132)			return b;
            		}
HXLINE( 134)		hx::DivEq(t,((Float)d / (Float)(int)2));
HXDLIN( 134)		if ((t == (int)2)) {
HXLINE( 135)			return (b + c);
            		}
HXLINE( 137)		HX_VAR( Float,s);
HXLINE( 138)		Float _hx_tmp = this->a;
HXDLIN( 138)		Float _hx_tmp1 = ::Math_obj::abs(c);
HXDLIN( 138)		if ((_hx_tmp < _hx_tmp1)) {
HXLINE( 139)			this->a = c;
HXLINE( 140)			s = ((Float)this->p / (Float)(int)4);
            		}
            		else {
HXLINE( 143)			Float _hx_tmp2 = ((Float)this->p / (Float)((int)2 * ::Math_obj::PI));
HXDLIN( 143)			Float _hx_tmp3 = ((Float)c / (Float)this->a);
HXDLIN( 143)			Float _hx_tmp4 = ::Math_obj::asin(_hx_tmp3);
HXDLIN( 143)			s = (_hx_tmp2 * _hx_tmp4);
            		}
HXLINE( 145)		if ((t < (int)1)) {
HXLINE( 146)			Float _hx_tmp5 = this->a;
HXDLIN( 146)			Float _hx_tmp6 = --t;
HXDLIN( 146)			Float _hx_tmp7 = ::Math_obj::pow((int)2,((int)10 * _hx_tmp6));
HXDLIN( 146)			Float _hx_tmp8 = (_hx_tmp5 * _hx_tmp7);
HXDLIN( 146)			Float _hx_tmp9 = ((Float)(((t * d) - s) * ((int)2 * ::Math_obj::PI)) / (Float)this->p);
HXDLIN( 146)			Float _hx_tmp10 = ::Math_obj::sin(_hx_tmp9);
HXDLIN( 146)			return ((((Float)-0.5) * (_hx_tmp8 * _hx_tmp10)) + b);
            		}
HXLINE( 148)		Float _hx_tmp11 = this->a;
HXDLIN( 148)		Float _hx_tmp12 = --t;
HXDLIN( 148)		Float _hx_tmp13 = ::Math_obj::pow((int)2,((int)-10 * _hx_tmp12));
HXDLIN( 148)		Float _hx_tmp14 = (_hx_tmp11 * _hx_tmp13);
HXDLIN( 148)		Float _hx_tmp15 = ((Float)(((t * d) - s) * ((int)2 * ::Math_obj::PI)) / (Float)this->p);
HXDLIN( 148)		Float _hx_tmp16 = ::Math_obj::sin(_hx_tmp15);
HXDLIN( 148)		return ((((_hx_tmp14 * _hx_tmp16) * ((Float)0.5)) + c) + b);
            	}


HX_DEFINE_DYNAMIC_FUNC4(ElasticEaseInOut_obj,ease,return )


ElasticEaseInOut_obj::ElasticEaseInOut_obj()
{
}

hx::Val ElasticEaseInOut_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"a") ) { return hx::Val( a); }
		if (HX_FIELD_EQ(inName,"p") ) { return hx::Val( p); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"ease") ) { return hx::Val( ease_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"calculate") ) { return hx::Val( calculate_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ElasticEaseInOut_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"a") ) { a=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"p") ) { p=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ElasticEaseInOut_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("a","\x61","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("p","\x70","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ElasticEaseInOut_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(ElasticEaseInOut_obj,a),HX_HCSTRING("a","\x61","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(ElasticEaseInOut_obj,p),HX_HCSTRING("p","\x70","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ElasticEaseInOut_obj_sStaticStorageInfo = 0;
#endif

static ::String ElasticEaseInOut_obj_sMemberFields[] = {
	HX_HCSTRING("a","\x61","\x00","\x00","\x00"),
	HX_HCSTRING("p","\x70","\x00","\x00","\x00"),
	HX_HCSTRING("calculate","\x66","\x95","\x6a","\x05"),
	HX_HCSTRING("ease","\xee","\x8b","\x0c","\x43"),
	::String(null()) };

static void ElasticEaseInOut_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ElasticEaseInOut_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ElasticEaseInOut_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ElasticEaseInOut_obj::__mClass,"__mClass");
};

#endif

hx::Class ElasticEaseInOut_obj::__mClass;

void ElasticEaseInOut_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("motion.easing.ElasticEaseInOut","\x51","\xb3","\xef","\x4a");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ElasticEaseInOut_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ElasticEaseInOut_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ElasticEaseInOut_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ElasticEaseInOut_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ElasticEaseInOut_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ElasticEaseInOut_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace motion
} // end namespace easing
