// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_motion_easing_BackEaseInOut
#include <motion/easing/BackEaseInOut.h>
#endif
#ifndef INCLUDED_motion_easing_IEasing
#include <motion/easing/IEasing.h>
#endif

namespace motion{
namespace easing{

void BackEaseInOut_obj::__construct(Float s){
            	HX_STACK_FRAME("motion.easing.BackEaseInOut","new",0xfd1f833b,"motion.easing.BackEaseInOut.new","motion/easing/Back.hx",81,0x81c0c12c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(s,"s")
HXLINE(  81)		this->s = s;
            	}

Dynamic BackEaseInOut_obj::__CreateEmpty() { return new BackEaseInOut_obj; }

hx::ObjectPtr< BackEaseInOut_obj > BackEaseInOut_obj::__new(Float s)
{
	hx::ObjectPtr< BackEaseInOut_obj > _hx_result = new BackEaseInOut_obj();
	_hx_result->__construct(s);
	return _hx_result;
}

Dynamic BackEaseInOut_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< BackEaseInOut_obj > _hx_result = new BackEaseInOut_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

static ::motion::easing::IEasing_obj _hx_motion_easing_BackEaseInOut__hx_motion_easing_IEasing= {
	( Float (hx::Object::*)(Float))&::motion::easing::BackEaseInOut_obj::calculate,
	( Float (hx::Object::*)(Float,Float,Float,Float))&::motion::easing::BackEaseInOut_obj::ease,
};

void *BackEaseInOut_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x864e8b53: return &_hx_motion_easing_BackEaseInOut__hx_motion_easing_IEasing;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

Float BackEaseInOut_obj::calculate(Float k){
            	HX_STACK_FRAME("motion.easing.BackEaseInOut","calculate",0xabe45e81,"motion.easing.BackEaseInOut.calculate","motion/easing/Back.hx",86,0x81c0c12c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(k,"k")
HXLINE(  88)		hx::DivEq(k,((Float)0.5));
HXDLIN(  88)		if ((k < (int)1)) {
HXLINE(  88)			Float _hx_tmp = (k * k);
HXDLIN(  88)			Float _hx_tmp1 = hx::MultEq(this->s,((Float)1.525));
HXDLIN(  88)			return (((Float)0.5) * (_hx_tmp * (((_hx_tmp1 + (int)1) * k) - this->s)));
            		}
HXLINE(  89)		hx::SubEq(k,(int)2);
HXDLIN(  89)		Float _hx_tmp2 = (k * k);
HXDLIN(  89)		Float _hx_tmp3 = hx::MultEq(this->s,((Float)1.525));
HXDLIN(  89)		return (((Float)0.5) * ((_hx_tmp2 * (((_hx_tmp3 + (int)1) * k) + this->s)) + (int)2));
            	}


HX_DEFINE_DYNAMIC_FUNC1(BackEaseInOut_obj,calculate,return )

Float BackEaseInOut_obj::ease(Float t,Float b,Float c,Float d){
            	HX_STACK_FRAME("motion.easing.BackEaseInOut","ease",0x787d58b3,"motion.easing.BackEaseInOut.ease","motion/easing/Back.hx",94,0x81c0c12c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(t,"t")
            	HX_STACK_ARG(b,"b")
            	HX_STACK_ARG(c,"c")
            	HX_STACK_ARG(d,"d")
HXLINE(  96)		hx::DivEq(t,((Float)d / (Float)(int)2));
HXDLIN(  96)		if ((t < (int)1)) {
HXLINE(  96)			Float _hx_tmp = ((Float)c / (Float)(int)2);
HXDLIN(  96)			Float _hx_tmp1 = (t * t);
HXDLIN(  96)			Float _hx_tmp2 = hx::MultEq(this->s,((Float)1.525));
HXDLIN(  96)			return ((_hx_tmp * (_hx_tmp1 * (((_hx_tmp2 + (int)1) * t) - this->s))) + b);
            		}
HXLINE(  97)		Float _hx_tmp3 = ((Float)c / (Float)(int)2);
HXDLIN(  97)		hx::SubEq(t,(int)2);
HXDLIN(  97)		Float _hx_tmp4 = (t * t);
HXDLIN(  97)		Float _hx_tmp5 = hx::MultEq(this->s,((Float)1.525));
HXDLIN(  97)		return ((_hx_tmp3 * ((_hx_tmp4 * (((_hx_tmp5 + (int)1) * t) + this->s)) + (int)2)) + b);
            	}


HX_DEFINE_DYNAMIC_FUNC4(BackEaseInOut_obj,ease,return )


BackEaseInOut_obj::BackEaseInOut_obj()
{
}

hx::Val BackEaseInOut_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"s") ) { return hx::Val( s); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"ease") ) { return hx::Val( ease_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"calculate") ) { return hx::Val( calculate_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val BackEaseInOut_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"s") ) { s=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void BackEaseInOut_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("s","\x73","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo BackEaseInOut_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(BackEaseInOut_obj,s),HX_HCSTRING("s","\x73","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *BackEaseInOut_obj_sStaticStorageInfo = 0;
#endif

static ::String BackEaseInOut_obj_sMemberFields[] = {
	HX_HCSTRING("s","\x73","\x00","\x00","\x00"),
	HX_HCSTRING("calculate","\x66","\x95","\x6a","\x05"),
	HX_HCSTRING("ease","\xee","\x8b","\x0c","\x43"),
	::String(null()) };

static void BackEaseInOut_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(BackEaseInOut_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void BackEaseInOut_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(BackEaseInOut_obj::__mClass,"__mClass");
};

#endif

hx::Class BackEaseInOut_obj::__mClass;

void BackEaseInOut_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("motion.easing.BackEaseInOut","\xc9","\xc9","\x40","\x78");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = BackEaseInOut_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(BackEaseInOut_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< BackEaseInOut_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = BackEaseInOut_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BackEaseInOut_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BackEaseInOut_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace motion
} // end namespace easing
