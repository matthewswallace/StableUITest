// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_motion_easing_BounceEaseOut
#include <motion/easing/BounceEaseOut.h>
#endif
#ifndef INCLUDED_motion_easing_IEasing
#include <motion/easing/IEasing.h>
#endif

namespace motion{
namespace easing{

void BounceEaseOut_obj::__construct(){
            	HX_STACK_FRAME("motion.easing.BounceEaseOut","new",0x46bb761f,"motion.easing.BounceEaseOut.new","motion/easing/Bounce.hx",109,0xc6b45fab)
            	HX_STACK_THIS(this)
            	}

Dynamic BounceEaseOut_obj::__CreateEmpty() { return new BounceEaseOut_obj; }

hx::ObjectPtr< BounceEaseOut_obj > BounceEaseOut_obj::__new()
{
	hx::ObjectPtr< BounceEaseOut_obj > _hx_result = new BounceEaseOut_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic BounceEaseOut_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< BounceEaseOut_obj > _hx_result = new BounceEaseOut_obj();
	_hx_result->__construct();
	return _hx_result;
}

static ::motion::easing::IEasing_obj _hx_motion_easing_BounceEaseOut__hx_motion_easing_IEasing= {
	( Float (hx::Object::*)(Float))&::motion::easing::BounceEaseOut_obj::calculate,
	( Float (hx::Object::*)(Float,Float,Float,Float))&::motion::easing::BounceEaseOut_obj::ease,
};

void *BounceEaseOut_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x864e8b53: return &_hx_motion_easing_BounceEaseOut__hx_motion_easing_IEasing;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

Float BounceEaseOut_obj::calculate(Float k){
            	HX_STACK_FRAME("motion.easing.BounceEaseOut","calculate",0xef1f9465,"motion.easing.BounceEaseOut.calculate","motion/easing/Bounce.hx",117,0xc6b45fab)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(k,"k")
HXLINE( 117)		HX_VARI( Float,t) = k;
HXDLIN( 117)		t = ((Float)k / (Float)(int)1);
HXDLIN( 117)		Bool _hx_tmp = (t < ((Float)0.363636363636363646));
HXDLIN( 117)		if (_hx_tmp) {
HXLINE( 117)			return ((((Float)7.5625) * t) * t);
            		}
            		else {
HXLINE( 117)			Bool _hx_tmp1 = (t < ((Float)0.727272727272727293));
HXDLIN( 117)			if (_hx_tmp1) {
HXLINE( 117)				hx::SubEq(t,((Float)0.545454545454545414));
HXDLIN( 117)				return (((((Float)7.5625) * t) * t) + ((Float).75));
            			}
            			else {
HXLINE( 117)				Bool _hx_tmp2 = (t < ((Float)0.909090909090909061));
HXDLIN( 117)				if (_hx_tmp2) {
HXLINE( 117)					hx::SubEq(t,((Float)0.818181818181818232));
HXDLIN( 117)					return (((((Float)7.5625) * t) * t) + ((Float).9375));
            				}
            				else {
HXLINE( 117)					hx::SubEq(t,((Float)0.954545454545454586));
HXDLIN( 117)					return (((((Float)7.5625) * t) * t) + ((Float).984375));
            				}
            			}
            		}
HXDLIN( 117)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC1(BounceEaseOut_obj,calculate,return )

Float BounceEaseOut_obj::ease(Float t,Float b,Float c,Float d){
            	HX_STACK_FRAME("motion.easing.BounceEaseOut","ease",0x9755ed4f,"motion.easing.BounceEaseOut.ease","motion/easing/Bounce.hx",124,0xc6b45fab)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(t,"t")
            	HX_STACK_ARG(b,"b")
            	HX_STACK_ARG(c,"c")
            	HX_STACK_ARG(d,"d")
HXLINE( 124)		HX_VARI_NAME( Float,t1,"t") = t;
HXDLIN( 124)		t1 = ((Float)t / (Float)d);
HXDLIN( 124)		Bool _hx_tmp = (t1 < ((Float)0.363636363636363646));
HXDLIN( 124)		if (_hx_tmp) {
HXLINE( 124)			return ((c * ((((Float)7.5625) * t1) * t1)) + b);
            		}
            		else {
HXLINE( 124)			Bool _hx_tmp1 = (t1 < ((Float)0.727272727272727293));
HXDLIN( 124)			if (_hx_tmp1) {
HXLINE( 124)				hx::SubEq(t1,((Float)0.545454545454545414));
HXDLIN( 124)				return ((c * (((((Float)7.5625) * t1) * t1) + ((Float).75))) + b);
            			}
            			else {
HXLINE( 124)				Bool _hx_tmp2 = (t1 < ((Float)0.909090909090909061));
HXDLIN( 124)				if (_hx_tmp2) {
HXLINE( 124)					hx::SubEq(t1,((Float)0.818181818181818232));
HXDLIN( 124)					return ((c * (((((Float)7.5625) * t1) * t1) + ((Float).9375))) + b);
            				}
            				else {
HXLINE( 124)					hx::SubEq(t1,((Float)0.954545454545454586));
HXDLIN( 124)					return ((c * (((((Float)7.5625) * t1) * t1) + ((Float).984375))) + b);
            				}
            			}
            		}
HXDLIN( 124)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC4(BounceEaseOut_obj,ease,return )

Float BounceEaseOut_obj::_ease(Float t,Float b,Float c,Float d){
            	HX_STACK_FRAME("motion.easing.BounceEaseOut","_ease",0x62097b4c,"motion.easing.BounceEaseOut._ease","motion/easing/Bounce.hx",129,0xc6b45fab)
            	HX_STACK_ARG(t,"t")
            	HX_STACK_ARG(b,"b")
            	HX_STACK_ARG(c,"c")
            	HX_STACK_ARG(d,"d")
HXLINE( 129)		hx::DivEq(t,d);
HXDLIN( 129)		Bool _hx_tmp = (t < ((Float)0.363636363636363646));
HXDLIN( 129)		if (_hx_tmp) {
HXLINE( 130)			return ((c * ((((Float)7.5625) * t) * t)) + b);
            		}
            		else {
HXLINE( 131)			Bool _hx_tmp1 = (t < ((Float)0.727272727272727293));
HXDLIN( 131)			if (_hx_tmp1) {
HXLINE( 132)				hx::SubEq(t,((Float)0.545454545454545414));
HXDLIN( 132)				return ((c * (((((Float)7.5625) * t) * t) + ((Float).75))) + b);
            			}
            			else {
HXLINE( 133)				Bool _hx_tmp2 = (t < ((Float)0.909090909090909061));
HXDLIN( 133)				if (_hx_tmp2) {
HXLINE( 134)					hx::SubEq(t,((Float)0.818181818181818232));
HXDLIN( 134)					return ((c * (((((Float)7.5625) * t) * t) + ((Float).9375))) + b);
            				}
            				else {
HXLINE( 136)					hx::SubEq(t,((Float)0.954545454545454586));
HXDLIN( 136)					return ((c * (((((Float)7.5625) * t) * t) + ((Float).984375))) + b);
            				}
            			}
            		}
HXLINE( 129)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(BounceEaseOut_obj,_ease,return )


BounceEaseOut_obj::BounceEaseOut_obj()
{
}

hx::Val BounceEaseOut_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"ease") ) { return hx::Val( ease_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"calculate") ) { return hx::Val( calculate_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool BounceEaseOut_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_ease") ) { outValue = _ease_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *BounceEaseOut_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *BounceEaseOut_obj_sStaticStorageInfo = 0;
#endif

static ::String BounceEaseOut_obj_sMemberFields[] = {
	HX_HCSTRING("calculate","\x66","\x95","\x6a","\x05"),
	HX_HCSTRING("ease","\xee","\x8b","\x0c","\x43"),
	::String(null()) };

static void BounceEaseOut_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(BounceEaseOut_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void BounceEaseOut_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(BounceEaseOut_obj::__mClass,"__mClass");
};

#endif

hx::Class BounceEaseOut_obj::__mClass;

static ::String BounceEaseOut_obj_sStaticFields[] = {
	HX_HCSTRING("_ease","\xcd","\xa7","\x1d","\xf6"),
	::String(null())
};

void BounceEaseOut_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("motion.easing.BounceEaseOut","\xad","\x7a","\xe8","\x14");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &BounceEaseOut_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = BounceEaseOut_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(BounceEaseOut_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(BounceEaseOut_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< BounceEaseOut_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = BounceEaseOut_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BounceEaseOut_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BounceEaseOut_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace motion
} // end namespace easing
