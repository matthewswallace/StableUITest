// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_motion_easing_BounceEaseInOut
#include <motion/easing/BounceEaseInOut.h>
#endif
#ifndef INCLUDED_motion_easing_IEasing
#include <motion/easing/IEasing.h>
#endif

namespace motion{
namespace easing{

void BounceEaseInOut_obj::__construct(){
            	HX_STACK_FRAME("motion.easing.BounceEaseInOut","new",0x33d59e7a,"motion.easing.BounceEaseInOut.new","motion/easing/Bounce.hx",75,0xc6b45fab)
            	HX_STACK_THIS(this)
            	}

Dynamic BounceEaseInOut_obj::__CreateEmpty() { return new BounceEaseInOut_obj; }

hx::ObjectPtr< BounceEaseInOut_obj > BounceEaseInOut_obj::__new()
{
	hx::ObjectPtr< BounceEaseInOut_obj > _hx_result = new BounceEaseInOut_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic BounceEaseInOut_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< BounceEaseInOut_obj > _hx_result = new BounceEaseInOut_obj();
	_hx_result->__construct();
	return _hx_result;
}

static ::motion::easing::IEasing_obj _hx_motion_easing_BounceEaseInOut__hx_motion_easing_IEasing= {
	( Float (hx::Object::*)(Float))&::motion::easing::BounceEaseInOut_obj::calculate,
	( Float (hx::Object::*)(Float,Float,Float,Float))&::motion::easing::BounceEaseInOut_obj::ease,
};

void *BounceEaseInOut_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x864e8b53: return &_hx_motion_easing_BounceEaseInOut__hx_motion_easing_IEasing;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

Float BounceEaseInOut_obj::calculate(Float k){
            	HX_STACK_FRAME("motion.easing.BounceEaseInOut","calculate",0xce68f300,"motion.easing.BounceEaseInOut.calculate","motion/easing/Bounce.hx",83,0xc6b45fab)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(k,"k")
HXLINE(  83)		if ((k < ((Float).5))) {
HXLINE(  84)			HX_VARI( Float,t) = ((int)1 - (k * (int)2));
HXDLIN(  84)			Float _hx_tmp;
HXDLIN(  84)			hx::DivEq(t,(int)1);
HXDLIN(  84)			Bool _hx_tmp1 = (t < ((Float)0.363636363636363646));
HXDLIN(  84)			if (_hx_tmp1) {
HXLINE(  84)				_hx_tmp = ((((Float)7.5625) * t) * t);
            			}
            			else {
HXLINE(  84)				Bool _hx_tmp2 = (t < ((Float)0.727272727272727293));
HXDLIN(  84)				if (_hx_tmp2) {
HXLINE(  84)					hx::SubEq(t,((Float)0.545454545454545414));
HXDLIN(  84)					_hx_tmp = (((((Float)7.5625) * t) * t) + ((Float).75));
            				}
            				else {
HXLINE(  84)					Bool _hx_tmp3 = (t < ((Float)0.909090909090909061));
HXDLIN(  84)					if (_hx_tmp3) {
HXLINE(  84)						hx::SubEq(t,((Float)0.818181818181818232));
HXDLIN(  84)						_hx_tmp = (((((Float)7.5625) * t) * t) + ((Float).9375));
            					}
            					else {
HXLINE(  84)						hx::SubEq(t,((Float)0.954545454545454586));
HXDLIN(  84)						_hx_tmp = (((((Float)7.5625) * t) * t) + ((Float).984375));
            					}
            				}
            			}
HXDLIN(  84)			return (((int)1 - _hx_tmp) * ((Float).5));
            		}
            		else {
HXLINE(  86)			HX_VARI_NAME( Float,t1,"t") = ((k * (int)2) - (int)1);
HXDLIN(  86)			Float _hx_tmp4;
HXDLIN(  86)			hx::DivEq(t1,(int)1);
HXDLIN(  86)			Bool _hx_tmp5 = (t1 < ((Float)0.363636363636363646));
HXDLIN(  86)			if (_hx_tmp5) {
HXLINE(  86)				_hx_tmp4 = ((((Float)7.5625) * t1) * t1);
            			}
            			else {
HXLINE(  86)				Bool _hx_tmp6 = (t1 < ((Float)0.727272727272727293));
HXDLIN(  86)				if (_hx_tmp6) {
HXLINE(  86)					hx::SubEq(t1,((Float)0.545454545454545414));
HXDLIN(  86)					_hx_tmp4 = (((((Float)7.5625) * t1) * t1) + ((Float).75));
            				}
            				else {
HXLINE(  86)					Bool _hx_tmp7 = (t1 < ((Float)0.909090909090909061));
HXDLIN(  86)					if (_hx_tmp7) {
HXLINE(  86)						hx::SubEq(t1,((Float)0.818181818181818232));
HXDLIN(  86)						_hx_tmp4 = (((((Float)7.5625) * t1) * t1) + ((Float).9375));
            					}
            					else {
HXLINE(  86)						hx::SubEq(t1,((Float)0.954545454545454586));
HXDLIN(  86)						_hx_tmp4 = (((((Float)7.5625) * t1) * t1) + ((Float).984375));
            					}
            				}
            			}
HXDLIN(  86)			return ((_hx_tmp4 * ((Float).5)) + ((Float).5));
            		}
HXLINE(  83)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC1(BounceEaseInOut_obj,calculate,return )

Float BounceEaseInOut_obj::ease(Float t,Float b,Float c,Float d){
            	HX_STACK_FRAME("motion.easing.BounceEaseInOut","ease",0x211f1494,"motion.easing.BounceEaseInOut.ease","motion/easing/Bounce.hx",93,0xc6b45fab)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(t,"t")
            	HX_STACK_ARG(b,"b")
            	HX_STACK_ARG(c,"c")
            	HX_STACK_ARG(d,"d")
HXLINE(  93)		if ((t < ((Float)d / (Float)(int)2))) {
HXLINE(  94)			HX_VARI_NAME( Float,t1,"t") = (d - (t * (int)2));
HXDLIN(  94)			Float _hx_tmp;
HXDLIN(  94)			hx::DivEq(t1,d);
HXDLIN(  94)			Bool _hx_tmp1 = (t1 < ((Float)0.363636363636363646));
HXDLIN(  94)			if (_hx_tmp1) {
HXLINE(  94)				_hx_tmp = (c * ((((Float)7.5625) * t1) * t1));
            			}
            			else {
HXLINE(  94)				Bool _hx_tmp2 = (t1 < ((Float)0.727272727272727293));
HXDLIN(  94)				if (_hx_tmp2) {
HXLINE(  94)					hx::SubEq(t1,((Float)0.545454545454545414));
HXDLIN(  94)					_hx_tmp = (c * (((((Float)7.5625) * t1) * t1) + ((Float).75)));
            				}
            				else {
HXLINE(  94)					Bool _hx_tmp3 = (t1 < ((Float)0.909090909090909061));
HXDLIN(  94)					if (_hx_tmp3) {
HXLINE(  94)						hx::SubEq(t1,((Float)0.818181818181818232));
HXDLIN(  94)						_hx_tmp = (c * (((((Float)7.5625) * t1) * t1) + ((Float).9375)));
            					}
            					else {
HXLINE(  94)						hx::SubEq(t1,((Float)0.954545454545454586));
HXDLIN(  94)						_hx_tmp = (c * (((((Float)7.5625) * t1) * t1) + ((Float).984375)));
            					}
            				}
            			}
HXDLIN(  94)			return (((c - _hx_tmp) * ((Float).5)) + b);
            		}
            		else {
HXLINE(  96)			HX_VARI_NAME( Float,t2,"t") = ((t * (int)2) - d);
HXDLIN(  96)			Float _hx_tmp4;
HXDLIN(  96)			hx::DivEq(t2,d);
HXDLIN(  96)			Bool _hx_tmp5 = (t2 < ((Float)0.363636363636363646));
HXDLIN(  96)			if (_hx_tmp5) {
HXLINE(  96)				_hx_tmp4 = (c * ((((Float)7.5625) * t2) * t2));
            			}
            			else {
HXLINE(  96)				Bool _hx_tmp6 = (t2 < ((Float)0.727272727272727293));
HXDLIN(  96)				if (_hx_tmp6) {
HXLINE(  96)					hx::SubEq(t2,((Float)0.545454545454545414));
HXDLIN(  96)					_hx_tmp4 = (c * (((((Float)7.5625) * t2) * t2) + ((Float).75)));
            				}
            				else {
HXLINE(  96)					Bool _hx_tmp7 = (t2 < ((Float)0.909090909090909061));
HXDLIN(  96)					if (_hx_tmp7) {
HXLINE(  96)						hx::SubEq(t2,((Float)0.818181818181818232));
HXDLIN(  96)						_hx_tmp4 = (c * (((((Float)7.5625) * t2) * t2) + ((Float).9375)));
            					}
            					else {
HXLINE(  96)						hx::SubEq(t2,((Float)0.954545454545454586));
HXDLIN(  96)						_hx_tmp4 = (c * (((((Float)7.5625) * t2) * t2) + ((Float).984375)));
            					}
            				}
            			}
HXDLIN(  96)			return (((_hx_tmp4 * ((Float).5)) + (c * ((Float).5))) + b);
            		}
HXLINE(  93)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC4(BounceEaseInOut_obj,ease,return )


BounceEaseInOut_obj::BounceEaseInOut_obj()
{
}

hx::Val BounceEaseInOut_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"ease") ) { return hx::Val( ease_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"calculate") ) { return hx::Val( calculate_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *BounceEaseInOut_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *BounceEaseInOut_obj_sStaticStorageInfo = 0;
#endif

static ::String BounceEaseInOut_obj_sMemberFields[] = {
	HX_HCSTRING("calculate","\x66","\x95","\x6a","\x05"),
	HX_HCSTRING("ease","\xee","\x8b","\x0c","\x43"),
	::String(null()) };

static void BounceEaseInOut_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(BounceEaseInOut_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void BounceEaseInOut_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(BounceEaseInOut_obj::__mClass,"__mClass");
};

#endif

hx::Class BounceEaseInOut_obj::__mClass;

void BounceEaseInOut_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("motion.easing.BounceEaseInOut","\x88","\x99","\xda","\x02");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = BounceEaseInOut_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(BounceEaseInOut_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< BounceEaseInOut_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = BounceEaseInOut_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BounceEaseInOut_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BounceEaseInOut_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace motion
} // end namespace easing
