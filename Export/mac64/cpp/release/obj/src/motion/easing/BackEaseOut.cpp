// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_motion_easing_BackEaseOut
#include <motion/easing/BackEaseOut.h>
#endif
#ifndef INCLUDED_motion_easing_IEasing
#include <motion/easing/IEasing.h>
#endif

namespace motion{
namespace easing{

void BackEaseOut_obj::__construct(Float s){
            	HX_STACK_FRAME("motion.easing.BackEaseOut","new",0x863ef8a0,"motion.easing.BackEaseOut.new","motion/easing/Back.hx",113,0x81c0c12c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(s,"s")
HXLINE( 113)		this->s = s;
            	}

Dynamic BackEaseOut_obj::__CreateEmpty() { return new BackEaseOut_obj; }

hx::ObjectPtr< BackEaseOut_obj > BackEaseOut_obj::__new(Float s)
{
	hx::ObjectPtr< BackEaseOut_obj > _hx_result = new BackEaseOut_obj();
	_hx_result->__construct(s);
	return _hx_result;
}

Dynamic BackEaseOut_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< BackEaseOut_obj > _hx_result = new BackEaseOut_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

static ::motion::easing::IEasing_obj _hx_motion_easing_BackEaseOut__hx_motion_easing_IEasing= {
	( Float (hx::Object::*)(Float))&::motion::easing::BackEaseOut_obj::calculate,
	( Float (hx::Object::*)(Float,Float,Float,Float))&::motion::easing::BackEaseOut_obj::ease,
};

void *BackEaseOut_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x864e8b53: return &_hx_motion_easing_BackEaseOut__hx_motion_easing_IEasing;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

Float BackEaseOut_obj::calculate(Float k){
            	HX_STACK_FRAME("motion.easing.BackEaseOut","calculate",0x0d816da6,"motion.easing.BackEaseOut.calculate","motion/easing/Back.hx",120,0x81c0c12c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(k,"k")
HXLINE( 120)		Float _hx_tmp = --k;
HXDLIN( 120)		return (((_hx_tmp * k) * (((this->s + (int)1) * k) + this->s)) + (int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC1(BackEaseOut_obj,calculate,return )

Float BackEaseOut_obj::ease(Float t,Float b,Float c,Float d){
            	HX_STACK_FRAME("motion.easing.BackEaseOut","ease",0xeae49bae,"motion.easing.BackEaseOut.ease","motion/easing/Back.hx",127,0x81c0c12c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(t,"t")
            	HX_STACK_ARG(b,"b")
            	HX_STACK_ARG(c,"c")
            	HX_STACK_ARG(d,"d")
HXLINE( 127)		Float _hx_tmp = ((Float)t / (Float)d);
HXDLIN( 127)		t = (_hx_tmp - (int)1);
HXDLIN( 127)		return ((c * (((t * t) * (((this->s + (int)1) * t) + this->s)) + (int)1)) + b);
            	}


HX_DEFINE_DYNAMIC_FUNC4(BackEaseOut_obj,ease,return )


BackEaseOut_obj::BackEaseOut_obj()
{
}

hx::Val BackEaseOut_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"s") ) { return hx::Val( s); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"ease") ) { return hx::Val( ease_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"calculate") ) { return hx::Val( calculate_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val BackEaseOut_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"s") ) { s=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void BackEaseOut_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("s","\x73","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo BackEaseOut_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(BackEaseOut_obj,s),HX_HCSTRING("s","\x73","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *BackEaseOut_obj_sStaticStorageInfo = 0;
#endif

static ::String BackEaseOut_obj_sMemberFields[] = {
	HX_HCSTRING("s","\x73","\x00","\x00","\x00"),
	HX_HCSTRING("calculate","\x66","\x95","\x6a","\x05"),
	HX_HCSTRING("ease","\xee","\x8b","\x0c","\x43"),
	::String(null()) };

static void BackEaseOut_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(BackEaseOut_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void BackEaseOut_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(BackEaseOut_obj::__mClass,"__mClass");
};

#endif

hx::Class BackEaseOut_obj::__mClass;

void BackEaseOut_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("motion.easing.BackEaseOut","\xae","\x68","\x76","\x18");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = BackEaseOut_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(BackEaseOut_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< BackEaseOut_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = BackEaseOut_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BackEaseOut_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BackEaseOut_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace motion
} // end namespace easing
