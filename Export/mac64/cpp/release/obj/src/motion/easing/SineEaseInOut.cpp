// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_motion_easing_IEasing
#include <motion/easing/IEasing.h>
#endif
#ifndef INCLUDED_motion_easing_SineEaseInOut
#include <motion/easing/SineEaseInOut.h>
#endif

namespace motion{
namespace easing{

void SineEaseInOut_obj::__construct(){
            	HX_STACK_FRAME("motion.easing.SineEaseInOut","new",0xbf91a755,"motion.easing.SineEaseInOut.new","motion/easing/Sine.hx",72,0xc8f9a0c6)
            	HX_STACK_THIS(this)
            	}

Dynamic SineEaseInOut_obj::__CreateEmpty() { return new SineEaseInOut_obj; }

hx::ObjectPtr< SineEaseInOut_obj > SineEaseInOut_obj::__new()
{
	hx::ObjectPtr< SineEaseInOut_obj > _hx_result = new SineEaseInOut_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic SineEaseInOut_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< SineEaseInOut_obj > _hx_result = new SineEaseInOut_obj();
	_hx_result->__construct();
	return _hx_result;
}

static ::motion::easing::IEasing_obj _hx_motion_easing_SineEaseInOut__hx_motion_easing_IEasing= {
	( Float (hx::Object::*)(Float))&::motion::easing::SineEaseInOut_obj::calculate,
	( Float (hx::Object::*)(Float,Float,Float,Float))&::motion::easing::SineEaseInOut_obj::ease,
};

void *SineEaseInOut_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x864e8b53: return &_hx_motion_easing_SineEaseInOut__hx_motion_easing_IEasing;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

Float SineEaseInOut_obj::calculate(Float k){
            	HX_STACK_FRAME("motion.easing.SineEaseInOut","calculate",0x0db7921b,"motion.easing.SineEaseInOut.calculate","motion/easing/Sine.hx",81,0xc8f9a0c6)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(k,"k")
HXLINE(  81)		Float _hx_tmp = (::Math_obj::PI * k);
HXDLIN(  81)		Float _hx_tmp1 = ::Math_obj::cos(_hx_tmp);
HXDLIN(  81)		return ((Float)-((_hx_tmp1 - (int)1)) / (Float)(int)2);
            	}


HX_DEFINE_DYNAMIC_FUNC1(SineEaseInOut_obj,calculate,return )

Float SineEaseInOut_obj::ease(Float t,Float b,Float c,Float d){
            	HX_STACK_FRAME("motion.easing.SineEaseInOut","ease",0xd9eacb59,"motion.easing.SineEaseInOut.ease","motion/easing/Sine.hx",88,0xc8f9a0c6)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(t,"t")
            	HX_STACK_ARG(b,"b")
            	HX_STACK_ARG(c,"c")
            	HX_STACK_ARG(d,"d")
HXLINE(  88)		Float _hx_tmp = ((Float)-(c) / (Float)(int)2);
HXDLIN(  88)		Float _hx_tmp1 = ((Float)(::Math_obj::PI * t) / (Float)d);
HXDLIN(  88)		Float _hx_tmp2 = ::Math_obj::cos(_hx_tmp1);
HXDLIN(  88)		return ((_hx_tmp * (_hx_tmp2 - (int)1)) + b);
            	}


HX_DEFINE_DYNAMIC_FUNC4(SineEaseInOut_obj,ease,return )


SineEaseInOut_obj::SineEaseInOut_obj()
{
}

hx::Val SineEaseInOut_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"ease") ) { return hx::Val( ease_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"calculate") ) { return hx::Val( calculate_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *SineEaseInOut_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *SineEaseInOut_obj_sStaticStorageInfo = 0;
#endif

static ::String SineEaseInOut_obj_sMemberFields[] = {
	HX_HCSTRING("calculate","\x66","\x95","\x6a","\x05"),
	HX_HCSTRING("ease","\xee","\x8b","\x0c","\x43"),
	::String(null()) };

static void SineEaseInOut_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(SineEaseInOut_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void SineEaseInOut_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(SineEaseInOut_obj::__mClass,"__mClass");
};

#endif

hx::Class SineEaseInOut_obj::__mClass;

void SineEaseInOut_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("motion.easing.SineEaseInOut","\xe3","\x58","\xd4","\x2f");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = SineEaseInOut_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(SineEaseInOut_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< SineEaseInOut_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = SineEaseInOut_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SineEaseInOut_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SineEaseInOut_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace motion
} // end namespace easing
