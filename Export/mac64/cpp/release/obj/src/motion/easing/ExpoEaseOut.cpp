// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_motion_easing_ExpoEaseOut
#include <motion/easing/ExpoEaseOut.h>
#endif
#ifndef INCLUDED_motion_easing_IEasing
#include <motion/easing/IEasing.h>
#endif

namespace motion{
namespace easing{

void ExpoEaseOut_obj::__construct(){
            	HX_STACK_FRAME("motion.easing.ExpoEaseOut","new",0x54886b75,"motion.easing.ExpoEaseOut.new","motion/easing/Expo.hx",114,0xaf90d701)
            	HX_STACK_THIS(this)
            	}

Dynamic ExpoEaseOut_obj::__CreateEmpty() { return new ExpoEaseOut_obj; }

hx::ObjectPtr< ExpoEaseOut_obj > ExpoEaseOut_obj::__new()
{
	hx::ObjectPtr< ExpoEaseOut_obj > _hx_result = new ExpoEaseOut_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic ExpoEaseOut_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ExpoEaseOut_obj > _hx_result = new ExpoEaseOut_obj();
	_hx_result->__construct();
	return _hx_result;
}

static ::motion::easing::IEasing_obj _hx_motion_easing_ExpoEaseOut__hx_motion_easing_IEasing= {
	( Float (hx::Object::*)(Float))&::motion::easing::ExpoEaseOut_obj::calculate,
	( Float (hx::Object::*)(Float,Float,Float,Float))&::motion::easing::ExpoEaseOut_obj::ease,
};

void *ExpoEaseOut_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x864e8b53: return &_hx_motion_easing_ExpoEaseOut__hx_motion_easing_IEasing;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

Float ExpoEaseOut_obj::calculate(Float k){
            	HX_STACK_FRAME("motion.easing.ExpoEaseOut","calculate",0x60c82e3b,"motion.easing.ExpoEaseOut.calculate","motion/easing/Expo.hx",123,0xaf90d701)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(k,"k")
HXLINE( 123)		if ((k == (int)1)) {
HXLINE( 123)			return (int)1;
            		}
            		else {
HXLINE( 123)			Float _hx_tmp = ::Math_obj::pow((int)2,((int)-10 * k));
HXDLIN( 123)			return ((int)1 - _hx_tmp);
            		}
HXDLIN( 123)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ExpoEaseOut_obj,calculate,return )

Float ExpoEaseOut_obj::ease(Float t,Float b,Float c,Float d){
            	HX_STACK_FRAME("motion.easing.ExpoEaseOut","ease",0x9cdfa339,"motion.easing.ExpoEaseOut.ease","motion/easing/Expo.hx",130,0xaf90d701)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(t,"t")
            	HX_STACK_ARG(b,"b")
            	HX_STACK_ARG(c,"c")
            	HX_STACK_ARG(d,"d")
HXLINE( 130)		if ((t == d)) {
HXLINE( 130)			return (b + c);
            		}
            		else {
HXLINE( 130)			Float _hx_tmp = ::Math_obj::pow((int)2,((Float)((int)-10 * t) / (Float)d));
HXDLIN( 130)			return ((c * ((int)1 - _hx_tmp)) + b);
            		}
HXDLIN( 130)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC4(ExpoEaseOut_obj,ease,return )


ExpoEaseOut_obj::ExpoEaseOut_obj()
{
}

hx::Val ExpoEaseOut_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"ease") ) { return hx::Val( ease_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"calculate") ) { return hx::Val( calculate_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *ExpoEaseOut_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *ExpoEaseOut_obj_sStaticStorageInfo = 0;
#endif

static ::String ExpoEaseOut_obj_sMemberFields[] = {
	HX_HCSTRING("calculate","\x66","\x95","\x6a","\x05"),
	HX_HCSTRING("ease","\xee","\x8b","\x0c","\x43"),
	::String(null()) };

static void ExpoEaseOut_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ExpoEaseOut_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ExpoEaseOut_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ExpoEaseOut_obj::__mClass,"__mClass");
};

#endif

hx::Class ExpoEaseOut_obj::__mClass;

void ExpoEaseOut_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("motion.easing.ExpoEaseOut","\x03","\x8d","\xce","\x7c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ExpoEaseOut_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ExpoEaseOut_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ExpoEaseOut_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ExpoEaseOut_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ExpoEaseOut_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ExpoEaseOut_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace motion
} // end namespace easing
