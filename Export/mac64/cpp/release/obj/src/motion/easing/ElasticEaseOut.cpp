// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_motion_easing_ElasticEaseOut
#include <motion/easing/ElasticEaseOut.h>
#endif
#ifndef INCLUDED_motion_easing_IEasing
#include <motion/easing/IEasing.h>
#endif

namespace motion{
namespace easing{

void ElasticEaseOut_obj::__construct(Float a,Float p){
            	HX_STACK_FRAME("motion.easing.ElasticEaseOut","new",0x91a15428,"motion.easing.ElasticEaseOut.new","motion/easing/Elastic.hx",163,0x73ac9cf4)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(p,"p")
HXLINE( 165)		this->a = a;
HXLINE( 166)		this->p = p;
            	}

Dynamic ElasticEaseOut_obj::__CreateEmpty() { return new ElasticEaseOut_obj; }

hx::ObjectPtr< ElasticEaseOut_obj > ElasticEaseOut_obj::__new(Float a,Float p)
{
	hx::ObjectPtr< ElasticEaseOut_obj > _hx_result = new ElasticEaseOut_obj();
	_hx_result->__construct(a,p);
	return _hx_result;
}

Dynamic ElasticEaseOut_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ElasticEaseOut_obj > _hx_result = new ElasticEaseOut_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

static ::motion::easing::IEasing_obj _hx_motion_easing_ElasticEaseOut__hx_motion_easing_IEasing= {
	( Float (hx::Object::*)(Float))&::motion::easing::ElasticEaseOut_obj::calculate,
	( Float (hx::Object::*)(Float,Float,Float,Float))&::motion::easing::ElasticEaseOut_obj::ease,
};

void *ElasticEaseOut_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x864e8b53: return &_hx_motion_easing_ElasticEaseOut__hx_motion_easing_IEasing;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

Float ElasticEaseOut_obj::calculate(Float k){
            	HX_STACK_FRAME("motion.easing.ElasticEaseOut","calculate",0x07011f2e,"motion.easing.ElasticEaseOut.calculate","motion/easing/Elastic.hx",171,0x73ac9cf4)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(k,"k")
HXLINE( 173)		if ((k == (int)0)) {
HXLINE( 173)			return (int)0;
            		}
HXDLIN( 173)		if ((k == (int)1)) {
HXLINE( 173)			return (int)1;
            		}
HXLINE( 174)		HX_VAR( Float,s);
HXLINE( 175)		Bool _hx_tmp = (this->a < (int)1);
HXDLIN( 175)		if (_hx_tmp) {
HXLINE( 175)			this->a = (int)1;
HXDLIN( 175)			s = ((Float)this->p / (Float)(int)4);
            		}
            		else {
HXLINE( 176)			Float _hx_tmp1 = ((Float)this->p / (Float)((int)2 * ::Math_obj::PI));
HXDLIN( 176)			Float _hx_tmp2 = ((Float)(int)1 / (Float)this->a);
HXDLIN( 176)			Float _hx_tmp3 = ::Math_obj::asin(_hx_tmp2);
HXDLIN( 176)			s = (_hx_tmp1 * _hx_tmp3);
            		}
HXLINE( 177)		Float _hx_tmp4 = this->a;
HXDLIN( 177)		Float _hx_tmp5 = ::Math_obj::pow((int)2,((int)-10 * k));
HXDLIN( 177)		Float _hx_tmp6 = (_hx_tmp4 * _hx_tmp5);
HXDLIN( 177)		Float _hx_tmp7 = ((Float)((k - s) * ((int)2 * ::Math_obj::PI)) / (Float)this->p);
HXDLIN( 177)		Float _hx_tmp8 = ::Math_obj::sin(_hx_tmp7);
HXDLIN( 177)		return ((_hx_tmp6 * _hx_tmp8) + (int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ElasticEaseOut_obj,calculate,return )

Float ElasticEaseOut_obj::ease(Float t,Float b,Float c,Float d){
            	HX_STACK_FRAME("motion.easing.ElasticEaseOut","ease",0xd5925726,"motion.easing.ElasticEaseOut.ease","motion/easing/Elastic.hx",182,0x73ac9cf4)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(t,"t")
            	HX_STACK_ARG(b,"b")
            	HX_STACK_ARG(c,"c")
            	HX_STACK_ARG(d,"d")
HXLINE( 184)		if ((t == (int)0)) {
HXLINE( 185)			return b;
            		}
HXLINE( 187)		hx::DivEq(t,d);
HXDLIN( 187)		if ((t == (int)1)) {
HXLINE( 188)			return (b + c);
            		}
HXLINE( 190)		HX_VAR( Float,s);
HXLINE( 191)		Float _hx_tmp = this->a;
HXDLIN( 191)		Float _hx_tmp1 = ::Math_obj::abs(c);
HXDLIN( 191)		if ((_hx_tmp < _hx_tmp1)) {
HXLINE( 192)			this->a = c;
HXLINE( 193)			s = ((Float)this->p / (Float)(int)4);
            		}
            		else {
HXLINE( 196)			Float _hx_tmp2 = ((Float)this->p / (Float)((int)2 * ::Math_obj::PI));
HXDLIN( 196)			Float _hx_tmp3 = ((Float)c / (Float)this->a);
HXDLIN( 196)			Float _hx_tmp4 = ::Math_obj::asin(_hx_tmp3);
HXDLIN( 196)			s = (_hx_tmp2 * _hx_tmp4);
            		}
HXLINE( 198)		Float _hx_tmp5 = this->a;
HXDLIN( 198)		Float _hx_tmp6 = ::Math_obj::pow((int)2,((int)-10 * t));
HXDLIN( 198)		Float _hx_tmp7 = (_hx_tmp5 * _hx_tmp6);
HXDLIN( 198)		Float _hx_tmp8 = ((Float)(((t * d) - s) * ((int)2 * ::Math_obj::PI)) / (Float)this->p);
HXDLIN( 198)		Float _hx_tmp9 = ::Math_obj::sin(_hx_tmp8);
HXDLIN( 198)		return (((_hx_tmp7 * _hx_tmp9) + c) + b);
            	}


HX_DEFINE_DYNAMIC_FUNC4(ElasticEaseOut_obj,ease,return )


ElasticEaseOut_obj::ElasticEaseOut_obj()
{
}

hx::Val ElasticEaseOut_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"a") ) { return hx::Val( a); }
		if (HX_FIELD_EQ(inName,"p") ) { return hx::Val( p); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"ease") ) { return hx::Val( ease_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"calculate") ) { return hx::Val( calculate_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ElasticEaseOut_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"a") ) { a=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"p") ) { p=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ElasticEaseOut_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("a","\x61","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("p","\x70","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ElasticEaseOut_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(ElasticEaseOut_obj,a),HX_HCSTRING("a","\x61","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(ElasticEaseOut_obj,p),HX_HCSTRING("p","\x70","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ElasticEaseOut_obj_sStaticStorageInfo = 0;
#endif

static ::String ElasticEaseOut_obj_sMemberFields[] = {
	HX_HCSTRING("a","\x61","\x00","\x00","\x00"),
	HX_HCSTRING("p","\x70","\x00","\x00","\x00"),
	HX_HCSTRING("calculate","\x66","\x95","\x6a","\x05"),
	HX_HCSTRING("ease","\xee","\x8b","\x0c","\x43"),
	::String(null()) };

static void ElasticEaseOut_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ElasticEaseOut_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ElasticEaseOut_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ElasticEaseOut_obj::__mClass,"__mClass");
};

#endif

hx::Class ElasticEaseOut_obj::__mClass;

void ElasticEaseOut_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("motion.easing.ElasticEaseOut","\x36","\x60","\x92","\x32");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ElasticEaseOut_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ElasticEaseOut_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ElasticEaseOut_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ElasticEaseOut_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ElasticEaseOut_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ElasticEaseOut_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace motion
} // end namespace easing
