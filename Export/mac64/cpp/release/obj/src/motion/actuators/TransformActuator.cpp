// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_motion_actuators_GenericActuator
#include <motion/actuators/GenericActuator.h>
#endif
#ifndef INCLUDED_motion_actuators_IGenericActuator
#include <motion/actuators/IGenericActuator.h>
#endif
#ifndef INCLUDED_motion_actuators_PropertyDetails
#include <motion/actuators/PropertyDetails.h>
#endif
#ifndef INCLUDED_motion_actuators_SimpleActuator
#include <motion/actuators/SimpleActuator.h>
#endif
#ifndef INCLUDED_motion_actuators_TransformActuator
#include <motion/actuators/TransformActuator.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Transform
#include <openfl/geom/Transform.h>
#endif
#ifndef INCLUDED_openfl_media_SoundTransform
#include <openfl/media/SoundTransform.h>
#endif

static const ::String _hx_array_data_1[] = {
	HX_("redMultiplier",32,f4,e9,4e),HX_("greenMultiplier",24,2c,40,6f),HX_("blueMultiplier",bb,32,96,cf),HX_("redOffset",c4,37,9e,53),HX_("greenOffset",b6,0e,d9,b7),HX_("blueOffset",cd,3d,34,bb),
};
namespace motion{
namespace actuators{

void TransformActuator_obj::__construct( ::Dynamic target,Float duration, ::Dynamic properties){
            	HX_STACK_FRAME("motion.actuators.TransformActuator","new",0x47f6a58b,"motion.actuators.TransformActuator.new","motion/actuators/TransformActuator.hx",23,0x0795ec87)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(target,"target")
            	HX_STACK_ARG(duration,"duration")
            	HX_STACK_ARG(properties,"properties")
HXLINE(  23)		super::__construct(target,duration,properties);
            	}

Dynamic TransformActuator_obj::__CreateEmpty() { return new TransformActuator_obj; }

hx::ObjectPtr< TransformActuator_obj > TransformActuator_obj::__new( ::Dynamic target,Float duration, ::Dynamic properties)
{
	hx::ObjectPtr< TransformActuator_obj > _hx_result = new TransformActuator_obj();
	_hx_result->__construct(target,duration,properties);
	return _hx_result;
}

Dynamic TransformActuator_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TransformActuator_obj > _hx_result = new TransformActuator_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

void TransformActuator_obj::apply(){
            	HX_STACK_FRAME("motion.actuators.TransformActuator","apply",0xba1e3b59,"motion.actuators.TransformActuator.apply","motion/actuators/TransformActuator.hx",28,0x0795ec87)
            	HX_STACK_THIS(this)
HXLINE(  30)		this->initialize();
HXLINE(  32)		Bool _hx_tmp = hx::IsNotNull( this->endColorTransform );
HXDLIN(  32)		if (_hx_tmp) {
HXLINE(  34)			HX_VARI(  ::Dynamic,target) = this->target;
HXDLIN(  34)			HX_VARI(  ::Dynamic,value) = null();
HXDLIN(  34)			Bool _hx_tmp1 = ::Reflect_obj::hasField(target,HX_("transform",6c,2d,93,45));
HXDLIN(  34)			if (_hx_tmp1) {
HXLINE(  34)				value = ::Reflect_obj::field(target,HX_("transform",6c,2d,93,45));
            			}
            			else {
HXLINE(  34)				value = ::Reflect_obj::getProperty(target,HX_("transform",6c,2d,93,45));
            			}
HXDLIN(  34)			HX_VARI(  ::openfl::geom::Transform,transform) = ( ( ::openfl::geom::Transform)(value) );
HXLINE(  35)			{
HXLINE(  35)				HX_VARI_NAME(  ::Dynamic,value1,"value") = this->endColorTransform;
HXDLIN(  35)				Bool _hx_tmp2 = ::Reflect_obj::hasField(transform,HX_("colorTransform",89,d7,3f,ad));
HXDLIN(  35)				if (_hx_tmp2) {
HXLINE(  35)					::Reflect_obj::setField(transform,HX_("colorTransform",89,d7,3f,ad),value1);
            				}
            				else {
HXLINE(  35)					::Reflect_obj::setProperty(transform,HX_("colorTransform",89,d7,3f,ad),value1);
            				}
            			}
            		}
HXLINE(  39)		Bool _hx_tmp3 = hx::IsNotNull( this->endSoundTransform );
HXDLIN(  39)		if (_hx_tmp3) {
HXLINE(  41)			HX_VARI_NAME(  ::Dynamic,target1,"target") = this->target;
HXDLIN(  41)			HX_VARI_NAME(  ::Dynamic,value2,"value") = this->endSoundTransform;
HXDLIN(  41)			Bool _hx_tmp4 = ::Reflect_obj::hasField(target1,HX_("soundTransform",9d,ee,de,22));
HXDLIN(  41)			if (_hx_tmp4) {
HXLINE(  41)				::Reflect_obj::setField(target1,HX_("soundTransform",9d,ee,de,22),value2);
            			}
            			else {
HXLINE(  41)				::Reflect_obj::setProperty(target1,HX_("soundTransform",9d,ee,de,22),value2);
            			}
            		}
            	}


void TransformActuator_obj::initialize(){
            	HX_STACK_FRAME("motion.actuators.TransformActuator","initialize",0x51c62785,"motion.actuators.TransformActuator.initialize","motion/actuators/TransformActuator.hx",48,0x0795ec87)
            	HX_STACK_THIS(this)
HXLINE(  50)		Bool _hx_tmp;
HXDLIN(  50)		Bool _hx_tmp1 = ::Reflect_obj::hasField(this->properties,HX_("colorValue",0e,97,24,56));
HXDLIN(  50)		if (_hx_tmp1) {
HXLINE(  50)			_hx_tmp = ::Std_obj::is(this->target,hx::ClassOf< ::openfl::display::DisplayObject >());
            		}
            		else {
HXLINE(  50)			_hx_tmp = false;
            		}
HXDLIN(  50)		if (_hx_tmp) {
HXLINE(  52)			this->initializeColor();
            		}
HXLINE(  56)		Bool _hx_tmp2;
HXDLIN(  56)		Bool _hx_tmp3 = !(::Reflect_obj::hasField(this->properties,HX_("soundVolume",09,30,80,12)));
HXDLIN(  56)		if (_hx_tmp3) {
HXLINE(  56)			_hx_tmp2 = ::Reflect_obj::hasField(this->properties,HX_("soundPan",ce,27,a3,19));
            		}
            		else {
HXLINE(  56)			_hx_tmp2 = true;
            		}
HXDLIN(  56)		if (_hx_tmp2) {
HXLINE(  58)			this->initializeSound();
            		}
HXLINE(  62)		this->detailsLength = this->propertyDetails->length;
HXLINE(  63)		this->initialized = true;
            	}


void TransformActuator_obj::initializeColor(){
            	HX_STACK_FRAME("motion.actuators.TransformActuator","initializeColor",0x768d579e,"motion.actuators.TransformActuator.initializeColor","motion/actuators/TransformActuator.hx",68,0x0795ec87)
            	HX_STACK_THIS(this)
HXLINE(  70)		this->endColorTransform =  ::openfl::geom::ColorTransform_obj::__new(null(),null(),null(),null(),null(),null(),null(),null());
HXLINE(  72)		HX_VARI( Int,color) = ( (Int)(this->properties->__Field(HX_("colorValue",0e,97,24,56),hx::paccDynamic)) );
HXLINE(  73)		HX_VARI( Float,strength) = ( (Float)(this->properties->__Field(HX_("colorStrength",04,9b,51,91),hx::paccDynamic)) );
HXLINE(  75)		if ((strength < (int)1)) {
HXLINE(  77)			HX_VAR( Float,multiplier);
HXLINE(  78)			HX_VAR( Float,offset);
HXLINE(  80)			if ((strength < ((Float)0.5))) {
HXLINE(  82)				multiplier = (int)1;
HXLINE(  83)				offset = (strength * (int)2);
            			}
            			else {
HXLINE(  87)				multiplier = ((int)1 - ((strength - ((Float)0.5)) * (int)2));
HXLINE(  88)				offset = (int)1;
            			}
HXLINE(  92)			this->endColorTransform->redMultiplier = multiplier;
HXLINE(  93)			this->endColorTransform->greenMultiplier = multiplier;
HXLINE(  94)			this->endColorTransform->blueMultiplier = multiplier;
HXLINE(  96)			this->endColorTransform->redOffset = (offset * ((int)((int)color >> (int)(int)16) & (int)(int)255));
HXLINE(  97)			this->endColorTransform->greenOffset = (offset * ((int)((int)color >> (int)(int)8) & (int)(int)255));
HXLINE(  98)			this->endColorTransform->blueOffset = (offset * ((int)color & (int)(int)255));
            		}
            		else {
HXLINE( 104)			this->endColorTransform->redMultiplier = (int)0;
HXLINE( 105)			this->endColorTransform->greenMultiplier = (int)0;
HXLINE( 106)			this->endColorTransform->blueMultiplier = (int)0;
HXLINE( 108)			this->endColorTransform->redOffset = ((int)((int)color >> (int)(int)16) & (int)(int)255);
HXLINE( 109)			this->endColorTransform->greenOffset = ((int)((int)color >> (int)(int)8) & (int)(int)255);
HXLINE( 110)			this->endColorTransform->blueOffset = ((int)color & (int)(int)255);
            		}
HXLINE( 114)		HX_VARI( ::Array< ::String >,propertyNames) = ::Array_obj< ::String >::fromData( _hx_array_data_1,6);
HXLINE( 116)		Bool _hx_tmp = ::Reflect_obj::hasField(this->properties,HX_("colorAlpha",fb,be,02,46));
HXDLIN( 116)		if (_hx_tmp) {
HXLINE( 118)			this->endColorTransform->alphaMultiplier =  ::Dynamic(this->properties->__Field(HX_("colorAlpha",fb,be,02,46),hx::paccDynamic));
HXLINE( 119)			propertyNames->push(HX_("alphaMultiplier",7f,b4,82,9a));
            		}
            		else {
HXLINE( 123)			HX_VARI(  ::Dynamic,target) = this->target;
HXDLIN( 123)			HX_VARI(  ::Dynamic,value) = null();
HXDLIN( 123)			Bool _hx_tmp1 = ::Reflect_obj::hasField(target,HX_("alpha",5e,a7,96,21));
HXDLIN( 123)			if (_hx_tmp1) {
HXLINE( 123)				value = ::Reflect_obj::field(target,HX_("alpha",5e,a7,96,21));
            			}
            			else {
HXLINE( 123)				value = ::Reflect_obj::getProperty(target,HX_("alpha",5e,a7,96,21));
            			}
HXDLIN( 123)			this->endColorTransform->alphaMultiplier = value;
            		}
HXLINE( 127)		HX_VARI_NAME(  ::Dynamic,target1,"target") = this->target;
HXDLIN( 127)		HX_VARI_NAME(  ::Dynamic,value1,"value") = null();
HXDLIN( 127)		Bool _hx_tmp2 = ::Reflect_obj::hasField(target1,HX_("transform",6c,2d,93,45));
HXDLIN( 127)		if (_hx_tmp2) {
HXLINE( 127)			value1 = ::Reflect_obj::field(target1,HX_("transform",6c,2d,93,45));
            		}
            		else {
HXLINE( 127)			value1 = ::Reflect_obj::getProperty(target1,HX_("transform",6c,2d,93,45));
            		}
HXDLIN( 127)		HX_VARI(  ::openfl::geom::Transform,transform) = ( ( ::openfl::geom::Transform)(value1) );
HXLINE( 128)		HX_VARI_NAME(  ::Dynamic,value2,"value") = null();
HXDLIN( 128)		Bool _hx_tmp3 = ::Reflect_obj::hasField(transform,HX_("colorTransform",89,d7,3f,ad));
HXDLIN( 128)		if (_hx_tmp3) {
HXLINE( 128)			value2 = ::Reflect_obj::field(transform,HX_("colorTransform",89,d7,3f,ad));
            		}
            		else {
HXLINE( 128)			value2 = ::Reflect_obj::getProperty(transform,HX_("colorTransform",89,d7,3f,ad));
            		}
HXDLIN( 128)		HX_VARI(  ::openfl::geom::ColorTransform,begin) = ( ( ::openfl::geom::ColorTransform)(value2) );
HXLINE( 129)		this->tweenColorTransform =  ::openfl::geom::ColorTransform_obj::__new(null(),null(),null(),null(),null(),null(),null(),null());
HXLINE( 131)		HX_VAR(  ::motion::actuators::PropertyDetails,details);
HXLINE( 132)		HX_VAR( Float,start);
HXLINE( 134)		{
HXLINE( 134)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 134)			while((_g < propertyNames->length)){
HXLINE( 134)				HX_VARI( ::String,propertyName) = propertyNames->__get(_g);
HXDLIN( 134)				++_g;
HXLINE( 136)				HX_VARI_NAME(  ::Dynamic,value3,"value") = null();
HXDLIN( 136)				Bool _hx_tmp4 = ::Reflect_obj::hasField(begin,propertyName);
HXDLIN( 136)				if (_hx_tmp4) {
HXLINE( 136)					value3 = ::Reflect_obj::field(begin,propertyName);
            				}
            				else {
HXLINE( 136)					value3 = ::Reflect_obj::getProperty(begin,propertyName);
            				}
HXDLIN( 136)				start = value3;
HXLINE( 137)				HX_VARI_NAME(  ::openfl::geom::ColorTransform,target2,"target") = this->endColorTransform;
HXDLIN( 137)				HX_VARI_NAME(  ::Dynamic,value4,"value") = null();
HXDLIN( 137)				Bool _hx_tmp5 = ::Reflect_obj::hasField(target2,propertyName);
HXDLIN( 137)				if (_hx_tmp5) {
HXLINE( 137)					value4 = ::Reflect_obj::field(target2,propertyName);
            				}
            				else {
HXLINE( 137)					value4 = ::Reflect_obj::getProperty(target2,propertyName);
            				}
HXDLIN( 137)				details =  ::motion::actuators::PropertyDetails_obj::__new(this->tweenColorTransform,propertyName,start,(value4 - start),null());
HXLINE( 138)				this->propertyDetails->push(details);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TransformActuator_obj,initializeColor,(void))

void TransformActuator_obj::initializeSound(){
            	HX_STACK_FRAME("motion.actuators.TransformActuator","initializeSound",0xacfd730a,"motion.actuators.TransformActuator.initializeSound","motion/actuators/TransformActuator.hx",145,0x0795ec87)
            	HX_STACK_THIS(this)
HXLINE( 147)		HX_VARI(  ::Dynamic,target) = this->target;
HXDLIN( 147)		HX_VARI(  ::Dynamic,value) = null();
HXDLIN( 147)		Bool _hx_tmp = ::Reflect_obj::hasField(target,HX_("soundTransform",9d,ee,de,22));
HXDLIN( 147)		if (_hx_tmp) {
HXLINE( 147)			value = ::Reflect_obj::field(target,HX_("soundTransform",9d,ee,de,22));
            		}
            		else {
HXLINE( 147)			value = ::Reflect_obj::getProperty(target,HX_("soundTransform",9d,ee,de,22));
            		}
HXDLIN( 147)		Bool _hx_tmp1 = hx::IsNull( value );
HXDLIN( 147)		if (_hx_tmp1) {
HXLINE( 149)			HX_VARI_NAME(  ::Dynamic,target1,"target") = this->target;
HXDLIN( 149)			HX_VARI_NAME(  ::Dynamic,value1,"value") =  ::openfl::media::SoundTransform_obj::__new(null(),null());
HXDLIN( 149)			Bool _hx_tmp2 = ::Reflect_obj::hasField(target1,HX_("soundTransform",9d,ee,de,22));
HXDLIN( 149)			if (_hx_tmp2) {
HXLINE( 149)				::Reflect_obj::setField(target1,HX_("soundTransform",9d,ee,de,22),value1);
            			}
            			else {
HXLINE( 149)				::Reflect_obj::setProperty(target1,HX_("soundTransform",9d,ee,de,22),value1);
            			}
            		}
HXLINE( 153)		HX_VARI_NAME(  ::Dynamic,target2,"target") = this->target;
HXDLIN( 153)		HX_VARI_NAME(  ::Dynamic,value2,"value") = null();
HXDLIN( 153)		Bool _hx_tmp3 = ::Reflect_obj::hasField(target2,HX_("soundTransform",9d,ee,de,22));
HXDLIN( 153)		if (_hx_tmp3) {
HXLINE( 153)			value2 = ::Reflect_obj::field(target2,HX_("soundTransform",9d,ee,de,22));
            		}
            		else {
HXLINE( 153)			value2 = ::Reflect_obj::getProperty(target2,HX_("soundTransform",9d,ee,de,22));
            		}
HXDLIN( 153)		HX_VARI(  ::openfl::media::SoundTransform,start) = ( ( ::openfl::media::SoundTransform)(value2) );
HXLINE( 154)		HX_VARI_NAME(  ::Dynamic,target3,"target") = this->target;
HXDLIN( 154)		HX_VARI_NAME(  ::Dynamic,value3,"value") = null();
HXDLIN( 154)		Bool _hx_tmp4 = ::Reflect_obj::hasField(target3,HX_("soundTransform",9d,ee,de,22));
HXDLIN( 154)		if (_hx_tmp4) {
HXLINE( 154)			value3 = ::Reflect_obj::field(target3,HX_("soundTransform",9d,ee,de,22));
            		}
            		else {
HXLINE( 154)			value3 = ::Reflect_obj::getProperty(target3,HX_("soundTransform",9d,ee,de,22));
            		}
HXDLIN( 154)		this->endSoundTransform = value3;
HXLINE( 155)		this->tweenSoundTransform =  ::openfl::media::SoundTransform_obj::__new(null(),null());
HXLINE( 157)		Bool _hx_tmp5 = ::Reflect_obj::hasField(this->properties,HX_("soundVolume",09,30,80,12));
HXDLIN( 157)		if (_hx_tmp5) {
HXLINE( 159)			this->endSoundTransform->volume =  ::Dynamic(this->properties->__Field(HX_("soundVolume",09,30,80,12),hx::paccDynamic));
HXLINE( 160)			Float _hx_tmp6 = start->volume;
HXDLIN( 160)			Float _hx_tmp7 = (this->endSoundTransform->volume - start->volume);
HXDLIN( 160)			this->propertyDetails->push( ::motion::actuators::PropertyDetails_obj::__new(this->tweenSoundTransform,HX_("volume",da,29,53,5f),_hx_tmp6,_hx_tmp7,null()));
            		}
HXLINE( 164)		Bool _hx_tmp8 = ::Reflect_obj::hasField(this->properties,HX_("soundPan",ce,27,a3,19));
HXDLIN( 164)		if (_hx_tmp8) {
HXLINE( 166)			this->endSoundTransform->pan =  ::Dynamic(this->properties->__Field(HX_("soundPan",ce,27,a3,19),hx::paccDynamic));
HXLINE( 167)			Float _hx_tmp9 = start->pan;
HXDLIN( 167)			Float _hx_tmp10 = (this->endSoundTransform->pan - start->pan);
HXDLIN( 167)			this->propertyDetails->push( ::motion::actuators::PropertyDetails_obj::__new(this->tweenSoundTransform,HX_("pan",5d,51,55,00),_hx_tmp9,_hx_tmp10,null()));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TransformActuator_obj,initializeSound,(void))

void TransformActuator_obj::update(Float currentTime){
            	HX_STACK_FRAME("motion.actuators.TransformActuator","update",0x1781fdbe,"motion.actuators.TransformActuator.update","motion/actuators/TransformActuator.hx",174,0x0795ec87)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(currentTime,"currentTime")
HXLINE( 176)		this->super::update(currentTime);
HXLINE( 178)		Bool _hx_tmp = hx::IsNotNull( this->endColorTransform );
HXDLIN( 178)		if (_hx_tmp) {
HXLINE( 180)			HX_VARI(  ::Dynamic,target) = this->target;
HXDLIN( 180)			HX_VARI(  ::Dynamic,value) = null();
HXDLIN( 180)			Bool _hx_tmp1 = ::Reflect_obj::hasField(target,HX_("transform",6c,2d,93,45));
HXDLIN( 180)			if (_hx_tmp1) {
HXLINE( 180)				value = ::Reflect_obj::field(target,HX_("transform",6c,2d,93,45));
            			}
            			else {
HXLINE( 180)				value = ::Reflect_obj::getProperty(target,HX_("transform",6c,2d,93,45));
            			}
HXDLIN( 180)			HX_VARI(  ::openfl::geom::Transform,transform) = ( ( ::openfl::geom::Transform)(value) );
HXLINE( 181)			{
HXLINE( 181)				HX_VARI_NAME(  ::Dynamic,value1,"value") = this->tweenColorTransform;
HXDLIN( 181)				Bool _hx_tmp2 = ::Reflect_obj::hasField(transform,HX_("colorTransform",89,d7,3f,ad));
HXDLIN( 181)				if (_hx_tmp2) {
HXLINE( 181)					::Reflect_obj::setField(transform,HX_("colorTransform",89,d7,3f,ad),value1);
            				}
            				else {
HXLINE( 181)					::Reflect_obj::setProperty(transform,HX_("colorTransform",89,d7,3f,ad),value1);
            				}
            			}
            		}
HXLINE( 185)		Bool _hx_tmp3 = hx::IsNotNull( this->endSoundTransform );
HXDLIN( 185)		if (_hx_tmp3) {
HXLINE( 187)			HX_VARI_NAME(  ::Dynamic,target1,"target") = this->target;
HXDLIN( 187)			HX_VARI_NAME(  ::Dynamic,value2,"value") = this->tweenSoundTransform;
HXDLIN( 187)			Bool _hx_tmp4 = ::Reflect_obj::hasField(target1,HX_("soundTransform",9d,ee,de,22));
HXDLIN( 187)			if (_hx_tmp4) {
HXLINE( 187)				::Reflect_obj::setField(target1,HX_("soundTransform",9d,ee,de,22),value2);
            			}
            			else {
HXLINE( 187)				::Reflect_obj::setProperty(target1,HX_("soundTransform",9d,ee,de,22),value2);
            			}
            		}
            	}



TransformActuator_obj::TransformActuator_obj()
{
}

void TransformActuator_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TransformActuator);
	HX_MARK_MEMBER_NAME(endColorTransform,"endColorTransform");
	HX_MARK_MEMBER_NAME(endSoundTransform,"endSoundTransform");
	HX_MARK_MEMBER_NAME(tweenColorTransform,"tweenColorTransform");
	HX_MARK_MEMBER_NAME(tweenSoundTransform,"tweenSoundTransform");
	 ::motion::actuators::SimpleActuator_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void TransformActuator_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(endColorTransform,"endColorTransform");
	HX_VISIT_MEMBER_NAME(endSoundTransform,"endSoundTransform");
	HX_VISIT_MEMBER_NAME(tweenColorTransform,"tweenColorTransform");
	HX_VISIT_MEMBER_NAME(tweenSoundTransform,"tweenSoundTransform");
	 ::motion::actuators::SimpleActuator_obj::__Visit(HX_VISIT_ARG);
}

hx::Val TransformActuator_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"apply") ) { return hx::Val( apply_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"initialize") ) { return hx::Val( initialize_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"initializeColor") ) { return hx::Val( initializeColor_dyn()); }
		if (HX_FIELD_EQ(inName,"initializeSound") ) { return hx::Val( initializeSound_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"endColorTransform") ) { return hx::Val( endColorTransform); }
		if (HX_FIELD_EQ(inName,"endSoundTransform") ) { return hx::Val( endSoundTransform); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"tweenColorTransform") ) { return hx::Val( tweenColorTransform); }
		if (HX_FIELD_EQ(inName,"tweenSoundTransform") ) { return hx::Val( tweenSoundTransform); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TransformActuator_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 17:
		if (HX_FIELD_EQ(inName,"endColorTransform") ) { endColorTransform=inValue.Cast<  ::openfl::geom::ColorTransform >(); return inValue; }
		if (HX_FIELD_EQ(inName,"endSoundTransform") ) { endSoundTransform=inValue.Cast<  ::openfl::media::SoundTransform >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"tweenColorTransform") ) { tweenColorTransform=inValue.Cast<  ::openfl::geom::ColorTransform >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tweenSoundTransform") ) { tweenSoundTransform=inValue.Cast<  ::openfl::media::SoundTransform >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TransformActuator_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("endColorTransform","\xc4","\x58","\xc3","\xca"));
	outFields->push(HX_HCSTRING("endSoundTransform","\xd8","\x6f","\x62","\x40"));
	outFields->push(HX_HCSTRING("tweenColorTransform","\x54","\x5b","\x47","\x72"));
	outFields->push(HX_HCSTRING("tweenSoundTransform","\x68","\x72","\xe6","\xe7"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TransformActuator_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::openfl::geom::ColorTransform*/ ,(int)offsetof(TransformActuator_obj,endColorTransform),HX_HCSTRING("endColorTransform","\xc4","\x58","\xc3","\xca")},
	{hx::fsObject /*::openfl::media::SoundTransform*/ ,(int)offsetof(TransformActuator_obj,endSoundTransform),HX_HCSTRING("endSoundTransform","\xd8","\x6f","\x62","\x40")},
	{hx::fsObject /*::openfl::geom::ColorTransform*/ ,(int)offsetof(TransformActuator_obj,tweenColorTransform),HX_HCSTRING("tweenColorTransform","\x54","\x5b","\x47","\x72")},
	{hx::fsObject /*::openfl::media::SoundTransform*/ ,(int)offsetof(TransformActuator_obj,tweenSoundTransform),HX_HCSTRING("tweenSoundTransform","\x68","\x72","\xe6","\xe7")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TransformActuator_obj_sStaticStorageInfo = 0;
#endif

static ::String TransformActuator_obj_sMemberFields[] = {
	HX_HCSTRING("endColorTransform","\xc4","\x58","\xc3","\xca"),
	HX_HCSTRING("endSoundTransform","\xd8","\x6f","\x62","\x40"),
	HX_HCSTRING("tweenColorTransform","\x54","\x5b","\x47","\x72"),
	HX_HCSTRING("tweenSoundTransform","\x68","\x72","\xe6","\xe7"),
	HX_HCSTRING("apply","\x6e","\x85","\x3b","\x24"),
	HX_HCSTRING("initialize","\x50","\x31","\xbb","\xec"),
	HX_HCSTRING("initializeColor","\xf3","\xed","\x29","\x64"),
	HX_HCSTRING("initializeSound","\x5f","\x09","\x9a","\x9a"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	::String(null()) };

static void TransformActuator_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TransformActuator_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TransformActuator_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TransformActuator_obj::__mClass,"__mClass");
};

#endif

hx::Class TransformActuator_obj::__mClass;

void TransformActuator_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("motion.actuators.TransformActuator","\x19","\x84","\xa4","\x3d");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TransformActuator_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TransformActuator_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TransformActuator_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TransformActuator_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TransformActuator_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TransformActuator_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace motion
} // end namespace actuators
