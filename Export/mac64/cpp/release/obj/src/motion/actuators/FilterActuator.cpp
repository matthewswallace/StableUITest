// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_motion_actuators_FilterActuator
#include <motion/actuators/FilterActuator.h>
#endif
#ifndef INCLUDED_motion_actuators_GenericActuator
#include <motion/actuators/GenericActuator.h>
#endif
#ifndef INCLUDED_motion_actuators_IGenericActuator
#include <motion/actuators/IGenericActuator.h>
#endif
#ifndef INCLUDED_motion_actuators_PropertyDetails
#include <motion/actuators/PropertyDetails.h>
#endif
#ifndef INCLUDED_motion_actuators_SimpleActuator
#include <motion/actuators/SimpleActuator.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif

namespace motion{
namespace actuators{

void FilterActuator_obj::__construct( ::openfl::display::DisplayObject target,Float duration, ::Dynamic properties){
            	HX_STACK_FRAME("motion.actuators.FilterActuator","new",0x436e26af,"motion.actuators.FilterActuator.new","motion/actuators/FilterActuator.hx",17,0xb0e64e1f)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(target,"target")
            	HX_STACK_ARG(duration,"duration")
            	HX_STACK_ARG(properties,"properties")
HXLINE(  19)		this->filterIndex = (int)-1;
HXLINE(  21)		super::__construct(target,duration,properties);
HXLINE(  23)		Bool _hx_tmp = ::Std_obj::is( ::Dynamic(properties->__Field(HX_("filter",b8,1f,35,85),hx::paccDynamic)),hx::ClassOf< ::hx::Class >());
HXDLIN(  23)		if (_hx_tmp) {
HXLINE(  25)			this->filterClass =  ::Dynamic(properties->__Field(HX_("filter",b8,1f,35,85),hx::paccDynamic));
HXLINE(  27)			Bool _hx_tmp1 = (target->get_filters()->length == (int)0);
HXDLIN(  27)			if (_hx_tmp1) {
HXLINE(  28)				 ::openfl::filters::BitmapFilter _hx_tmp2 = ( ( ::openfl::filters::BitmapFilter)(::Type_obj::createInstance(this->filterClass,::cpp::VirtualArray_obj::__new(0))) );
HXDLIN(  28)				target->set_filters(::Array_obj< ::Dynamic>::__new(1)->init(0,_hx_tmp2));
            			}
HXLINE(  31)			{
HXLINE(  31)				HX_VARI( Int,_g) = (int)0;
HXDLIN(  31)				HX_VARI( ::Array< ::Dynamic>,_g1) = target->get_filters();
HXDLIN(  31)				while((_g < _g1->length)){
HXLINE(  31)					HX_VARI(  ::openfl::filters::BitmapFilter,filter) = _g1->__get(_g).StaticCast<  ::openfl::filters::BitmapFilter >();
HXDLIN(  31)					++_g;
HXLINE(  33)					Bool _hx_tmp3 = ::Std_obj::is(filter,this->filterClass);
HXDLIN(  33)					if (_hx_tmp3) {
HXLINE(  35)						this->filter = filter;
            					}
            				}
            			}
            		}
            		else {
HXLINE(  43)			this->filterIndex =  ::Dynamic(properties->__Field(HX_("filter",b8,1f,35,85),hx::paccDynamic));
HXLINE(  44)			::Array< ::Dynamic> _hx_tmp4 = target->get_filters();
HXDLIN(  44)			this->filter = _hx_tmp4->__get(this->filterIndex).StaticCast<  ::openfl::filters::BitmapFilter >();
            		}
            	}

Dynamic FilterActuator_obj::__CreateEmpty() { return new FilterActuator_obj; }

hx::ObjectPtr< FilterActuator_obj > FilterActuator_obj::__new( ::openfl::display::DisplayObject target,Float duration, ::Dynamic properties)
{
	hx::ObjectPtr< FilterActuator_obj > _hx_result = new FilterActuator_obj();
	_hx_result->__construct(target,duration,properties);
	return _hx_result;
}

Dynamic FilterActuator_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FilterActuator_obj > _hx_result = new FilterActuator_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

void FilterActuator_obj::apply(){
            	HX_STACK_FRAME("motion.actuators.FilterActuator","apply",0x23534d7d,"motion.actuators.FilterActuator.apply","motion/actuators/FilterActuator.hx",51,0xb0e64e1f)
            	HX_STACK_THIS(this)
HXLINE(  53)		{
HXLINE(  53)			HX_VARI( Int,_g) = (int)0;
HXDLIN(  53)			HX_VARI( ::Array< ::String >,_g1) = ::Reflect_obj::fields(this->properties);
HXDLIN(  53)			while((_g < _g1->length)){
HXLINE(  53)				HX_VARI( ::String,propertyName) = _g1->__get(_g);
HXDLIN(  53)				++_g;
HXLINE(  55)				if ((propertyName != HX_("filter",b8,1f,35,85))) {
HXLINE(  57)					 ::Dynamic _hx_tmp = ::Reflect_obj::field(this->properties,propertyName);
HXDLIN(  57)					::Reflect_obj::setField(this->filter,propertyName,_hx_tmp);
            				}
            			}
            		}
HXLINE(  63)		HX_VARI(  ::openfl::display::DisplayObject,target) = ( ( ::openfl::display::DisplayObject)(this->target) );
HXDLIN(  63)		HX_VARI(  ::Dynamic,value) = null();
HXDLIN(  63)		Bool _hx_tmp1 = ::Reflect_obj::hasField(target,HX_("filters",bb,a1,46,09));
HXDLIN(  63)		if (_hx_tmp1) {
HXLINE(  63)			value = ::Reflect_obj::field(target,HX_("filters",bb,a1,46,09));
            		}
            		else {
HXLINE(  63)			value = ::Reflect_obj::getProperty(target,HX_("filters",bb,a1,46,09));
            		}
HXDLIN(  63)		HX_VARI( ::Array< ::Dynamic>,filters) = ( (::Array< ::Dynamic>)(value) );
HXLINE(  64)		::Reflect_obj::setField(filters, ::Dynamic(this->properties->__Field(HX_("filter",b8,1f,35,85),hx::paccDynamic)),this->filter);
HXLINE(  65)		{
HXLINE(  65)			HX_VARI_NAME(  ::openfl::display::DisplayObject,target1,"target") = ( ( ::openfl::display::DisplayObject)(this->target) );
HXDLIN(  65)			Bool _hx_tmp2 = ::Reflect_obj::hasField(target1,HX_("filters",bb,a1,46,09));
HXDLIN(  65)			if (_hx_tmp2) {
HXLINE(  65)				::Reflect_obj::setField(target1,HX_("filters",bb,a1,46,09),filters);
            			}
            			else {
HXLINE(  65)				::Reflect_obj::setProperty(target1,HX_("filters",bb,a1,46,09),filters);
            			}
            		}
            	}


void FilterActuator_obj::initialize(){
            	HX_STACK_FRAME("motion.actuators.FilterActuator","initialize",0x39c8d2e1,"motion.actuators.FilterActuator.initialize","motion/actuators/FilterActuator.hx",70,0xb0e64e1f)
            	HX_STACK_THIS(this)
HXLINE(  72)		HX_VAR(  ::motion::actuators::PropertyDetails,details);
HXLINE(  73)		HX_VAR( Float,start);
HXLINE(  75)		{
HXLINE(  75)			HX_VARI( Int,_g) = (int)0;
HXDLIN(  75)			HX_VARI( ::Array< ::String >,_g1) = ::Reflect_obj::fields(this->properties);
HXDLIN(  75)			while((_g < _g1->length)){
HXLINE(  75)				HX_VARI( ::String,propertyName) = _g1->__get(_g);
HXDLIN(  75)				++_g;
HXLINE(  77)				if ((propertyName != HX_("filter",b8,1f,35,85))) {
HXLINE(  79)					HX_VARI(  ::openfl::filters::BitmapFilter,target) = this->filter;
HXDLIN(  79)					HX_VARI(  ::Dynamic,value) = null();
HXDLIN(  79)					Bool _hx_tmp = ::Reflect_obj::hasField(target,propertyName);
HXDLIN(  79)					if (_hx_tmp) {
HXLINE(  79)						value = ::Reflect_obj::field(target,propertyName);
            					}
            					else {
HXLINE(  79)						value = ::Reflect_obj::getProperty(target,propertyName);
            					}
HXDLIN(  79)					start = value;
HXLINE(  80)					 ::Dynamic _hx_tmp1 = ::Reflect_obj::field(this->properties,propertyName);
HXDLIN(  80)					details =  ::motion::actuators::PropertyDetails_obj::__new(this->filter,propertyName,start,(_hx_tmp1 - start),null());
HXLINE(  81)					this->propertyDetails->push(details);
            				}
            			}
            		}
HXLINE(  87)		this->detailsLength = this->propertyDetails->length;
HXLINE(  88)		this->initialized = true;
            	}


void FilterActuator_obj::update(Float currentTime){
            	HX_STACK_FRAME("motion.actuators.FilterActuator","update",0xbcbccb1a,"motion.actuators.FilterActuator.update","motion/actuators/FilterActuator.hx",93,0xb0e64e1f)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(currentTime,"currentTime")
HXLINE(  95)		this->super::update(currentTime);
HXLINE(  97)		HX_VARI( ::Array< ::Dynamic>,filters) = ( ( ::openfl::display::DisplayObject)(this->target) )->get_filters();
HXLINE(  99)		Bool _hx_tmp = (this->filterIndex > (int)-1);
HXDLIN(  99)		if (_hx_tmp) {
HXLINE( 101)			::Reflect_obj::setField(filters, ::Dynamic(this->properties->__Field(HX_("filter",b8,1f,35,85),hx::paccDynamic)),this->filter);
            		}
            		else {
HXLINE( 105)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 105)			HX_VARI( Int,_g) = filters->length;
HXDLIN( 105)			while((_g1 < _g)){
HXLINE( 105)				HX_VARI( Int,i) = _g1++;
HXLINE( 107)				 ::openfl::filters::BitmapFilter _hx_tmp1 = filters->__get(i).StaticCast<  ::openfl::filters::BitmapFilter >();
HXDLIN( 107)				Bool _hx_tmp2 = ::Std_obj::is(_hx_tmp1,this->filterClass);
HXDLIN( 107)				if (_hx_tmp2) {
HXLINE( 109)					filters[i] = this->filter;
            				}
            			}
            		}
HXLINE( 117)		{
HXLINE( 117)			HX_VARI(  ::openfl::display::DisplayObject,target) = ( ( ::openfl::display::DisplayObject)(this->target) );
HXDLIN( 117)			Bool _hx_tmp3 = ::Reflect_obj::hasField(target,HX_("filters",bb,a1,46,09));
HXDLIN( 117)			if (_hx_tmp3) {
HXLINE( 117)				::Reflect_obj::setField(target,HX_("filters",bb,a1,46,09),filters);
            			}
            			else {
HXLINE( 117)				::Reflect_obj::setProperty(target,HX_("filters",bb,a1,46,09),filters);
            			}
            		}
            	}



FilterActuator_obj::FilterActuator_obj()
{
}

void FilterActuator_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FilterActuator);
	HX_MARK_MEMBER_NAME(filter,"filter");
	HX_MARK_MEMBER_NAME(filterClass,"filterClass");
	HX_MARK_MEMBER_NAME(filterIndex,"filterIndex");
	 ::motion::actuators::SimpleActuator_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FilterActuator_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(filter,"filter");
	HX_VISIT_MEMBER_NAME(filterClass,"filterClass");
	HX_VISIT_MEMBER_NAME(filterIndex,"filterIndex");
	 ::motion::actuators::SimpleActuator_obj::__Visit(HX_VISIT_ARG);
}

hx::Val FilterActuator_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"apply") ) { return hx::Val( apply_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"filter") ) { return hx::Val( filter); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"initialize") ) { return hx::Val( initialize_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"filterClass") ) { return hx::Val( filterClass); }
		if (HX_FIELD_EQ(inName,"filterIndex") ) { return hx::Val( filterIndex); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FilterActuator_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"filter") ) { filter=inValue.Cast<  ::openfl::filters::BitmapFilter >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"filterClass") ) { filterClass=inValue.Cast< hx::Class >(); return inValue; }
		if (HX_FIELD_EQ(inName,"filterIndex") ) { filterIndex=inValue.Cast< Int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FilterActuator_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("filter","\xb8","\x1f","\x35","\x85"));
	outFields->push(HX_HCSTRING("filterClass","\x60","\xcd","\x0a","\xf8"));
	outFields->push(HX_HCSTRING("filterIndex","\x3a","\xf0","\xc6","\x6d"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FilterActuator_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::openfl::filters::BitmapFilter*/ ,(int)offsetof(FilterActuator_obj,filter),HX_HCSTRING("filter","\xb8","\x1f","\x35","\x85")},
	{hx::fsObject /*::hx::Class*/ ,(int)offsetof(FilterActuator_obj,filterClass),HX_HCSTRING("filterClass","\x60","\xcd","\x0a","\xf8")},
	{hx::fsInt,(int)offsetof(FilterActuator_obj,filterIndex),HX_HCSTRING("filterIndex","\x3a","\xf0","\xc6","\x6d")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FilterActuator_obj_sStaticStorageInfo = 0;
#endif

static ::String FilterActuator_obj_sMemberFields[] = {
	HX_HCSTRING("filter","\xb8","\x1f","\x35","\x85"),
	HX_HCSTRING("filterClass","\x60","\xcd","\x0a","\xf8"),
	HX_HCSTRING("filterIndex","\x3a","\xf0","\xc6","\x6d"),
	HX_HCSTRING("apply","\x6e","\x85","\x3b","\x24"),
	HX_HCSTRING("initialize","\x50","\x31","\xbb","\xec"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	::String(null()) };

static void FilterActuator_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FilterActuator_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FilterActuator_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FilterActuator_obj::__mClass,"__mClass");
};

#endif

hx::Class FilterActuator_obj::__mClass;

void FilterActuator_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("motion.actuators.FilterActuator","\x3d","\xa3","\x33","\x9f");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FilterActuator_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FilterActuator_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FilterActuator_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FilterActuator_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FilterActuator_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FilterActuator_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace motion
} // end namespace actuators
