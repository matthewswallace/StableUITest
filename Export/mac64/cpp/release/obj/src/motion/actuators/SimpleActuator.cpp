// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_motion_actuators_GenericActuator
#include <motion/actuators/GenericActuator.h>
#endif
#ifndef INCLUDED_motion_actuators_IGenericActuator
#include <motion/actuators/IGenericActuator.h>
#endif
#ifndef INCLUDED_motion_actuators_PropertyDetails
#include <motion/actuators/PropertyDetails.h>
#endif
#ifndef INCLUDED_motion_actuators_SimpleActuator
#include <motion/actuators/SimpleActuator.h>
#endif
#ifndef INCLUDED_motion_easing_IEasing
#include <motion/easing/IEasing.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Transform
#include <openfl/geom/Transform.h>
#endif

namespace motion{
namespace actuators{

void SimpleActuator_obj::__construct( ::Dynamic target,Float duration, ::Dynamic properties){
            	HX_STACK_FRAME("motion.actuators.SimpleActuator","new",0x6db9da29,"motion.actuators.SimpleActuator.new","motion/actuators/SimpleActuator.hx",51,0x731927e5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(target,"target")
            	HX_STACK_ARG(duration,"duration")
            	HX_STACK_ARG(properties,"properties")
HXLINE(  53)		this->active = true;
HXLINE(  54)		this->propertyDetails = ::Array_obj< ::Dynamic>::__new();
HXLINE(  55)		this->sendChange = false;
HXLINE(  56)		this->paused = false;
HXLINE(  57)		this->cacheVisible = false;
HXLINE(  58)		this->initialized = false;
HXLINE(  59)		this->setVisible = false;
HXLINE(  60)		this->toggleVisible = false;
HXLINE(  64)		Int _hx_tmp = ::openfl::Lib_obj::getTimer();
HXDLIN(  64)		this->startTime = ((Float)_hx_tmp / (Float)(int)1000);
HXLINE(  74)		super::__construct(target,duration,properties);
HXLINE(  76)		Bool _hx_tmp1 = !(::motion::actuators::SimpleActuator_obj::addedEvent);
HXDLIN(  76)		if (_hx_tmp1) {
HXLINE(  78)			::motion::actuators::SimpleActuator_obj::addedEvent = true;
HXLINE(  81)			::openfl::Lib_obj::current->stage->addEventListener(HX_("enterFrame",f5,03,50,02),::motion::actuators::SimpleActuator_obj::stage_onEnterFrame_dyn(),null(),null(),null());
            		}
            	}

Dynamic SimpleActuator_obj::__CreateEmpty() { return new SimpleActuator_obj; }

hx::ObjectPtr< SimpleActuator_obj > SimpleActuator_obj::__new( ::Dynamic target,Float duration, ::Dynamic properties)
{
	hx::ObjectPtr< SimpleActuator_obj > _hx_result = new SimpleActuator_obj();
	_hx_result->__construct(target,duration,properties);
	return _hx_result;
}

Dynamic SimpleActuator_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< SimpleActuator_obj > _hx_result = new SimpleActuator_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

void SimpleActuator_obj::setField_openfl_geom_Transform( ::openfl::geom::Transform target,::String propertyName, ::Dynamic value){
            	HX_STACK_FRAME("motion.actuators.SimpleActuator","setField_openfl_geom_Transform",0x08c7d9a8,"motion.actuators.SimpleActuator.setField_openfl_geom_Transform","motion/actuators/SimpleActuator.hx",319,0x731927e5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(target,"target")
            	HX_STACK_ARG(propertyName,"propertyName")
            	HX_STACK_ARG(value,"value")
HXLINE( 319)		Bool _hx_tmp = ::Reflect_obj::hasField(target,propertyName);
HXDLIN( 319)		if (_hx_tmp) {
HXLINE( 324)			::Reflect_obj::setField(target,propertyName,value);
            		}
            		else {
HXLINE( 330)			::Reflect_obj::setProperty(target,propertyName,value);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(SimpleActuator_obj,setField_openfl_geom_Transform,(void))

void SimpleActuator_obj::setField_motion_actuators_TransformActuator_T( ::Dynamic target,::String propertyName, ::Dynamic value){
            	HX_STACK_FRAME("motion.actuators.SimpleActuator","setField_motion_actuators_TransformActuator_T",0x5d31773c,"motion.actuators.SimpleActuator.setField_motion_actuators_TransformActuator_T","motion/actuators/SimpleActuator.hx",319,0x731927e5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(target,"target")
            	HX_STACK_ARG(propertyName,"propertyName")
            	HX_STACK_ARG(value,"value")
HXLINE( 319)		Bool _hx_tmp = ::Reflect_obj::hasField(target,propertyName);
HXDLIN( 319)		if (_hx_tmp) {
HXLINE( 324)			::Reflect_obj::setField(target,propertyName,value);
            		}
            		else {
HXLINE( 330)			::Reflect_obj::setProperty(target,propertyName,value);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(SimpleActuator_obj,setField_motion_actuators_TransformActuator_T,(void))

void SimpleActuator_obj::setField_motion_actuators_MotionPathActuator_T( ::Dynamic target,::String propertyName, ::Dynamic value){
            	HX_STACK_FRAME("motion.actuators.SimpleActuator","setField_motion_actuators_MotionPathActuator_T",0xa626cf07,"motion.actuators.SimpleActuator.setField_motion_actuators_MotionPathActuator_T","motion/actuators/SimpleActuator.hx",319,0x731927e5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(target,"target")
            	HX_STACK_ARG(propertyName,"propertyName")
            	HX_STACK_ARG(value,"value")
HXLINE( 319)		Bool _hx_tmp = ::Reflect_obj::hasField(target,propertyName);
HXDLIN( 319)		if (_hx_tmp) {
HXLINE( 324)			::Reflect_obj::setField(target,propertyName,value);
            		}
            		else {
HXLINE( 330)			::Reflect_obj::setProperty(target,propertyName,value);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(SimpleActuator_obj,setField_motion_actuators_MotionPathActuator_T,(void))

void SimpleActuator_obj::setField_openfl_display_DisplayObject( ::openfl::display::DisplayObject target,::String propertyName, ::Dynamic value){
            	HX_STACK_FRAME("motion.actuators.SimpleActuator","setField_openfl_display_DisplayObject",0x35356f85,"motion.actuators.SimpleActuator.setField_openfl_display_DisplayObject","motion/actuators/SimpleActuator.hx",319,0x731927e5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(target,"target")
            	HX_STACK_ARG(propertyName,"propertyName")
            	HX_STACK_ARG(value,"value")
HXLINE( 319)		Bool _hx_tmp = ::Reflect_obj::hasField(target,propertyName);
HXDLIN( 319)		if (_hx_tmp) {
HXLINE( 324)			::Reflect_obj::setField(target,propertyName,value);
            		}
            		else {
HXLINE( 330)			::Reflect_obj::setProperty(target,propertyName,value);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(SimpleActuator_obj,setField_openfl_display_DisplayObject,(void))

void SimpleActuator_obj::setField_motion_actuators_SimpleActuator_T( ::Dynamic target,::String propertyName, ::Dynamic value){
            	HX_STACK_FRAME("motion.actuators.SimpleActuator","setField_motion_actuators_SimpleActuator_T",0xdcd18bfe,"motion.actuators.SimpleActuator.setField_motion_actuators_SimpleActuator_T","motion/actuators/SimpleActuator.hx",319,0x731927e5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(target,"target")
            	HX_STACK_ARG(propertyName,"propertyName")
            	HX_STACK_ARG(value,"value")
HXLINE( 319)		Bool _hx_tmp = ::Reflect_obj::hasField(target,propertyName);
HXDLIN( 319)		if (_hx_tmp) {
HXLINE( 324)			::Reflect_obj::setField(target,propertyName,value);
            		}
            		else {
HXLINE( 330)			::Reflect_obj::setProperty(target,propertyName,value);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(SimpleActuator_obj,setField_motion_actuators_SimpleActuator_T,(void))

 ::motion::actuators::GenericActuator SimpleActuator_obj::autoVisible( ::Dynamic value){
            	HX_STACK_FRAME("motion.actuators.SimpleActuator","autoVisible",0xe8aa978c,"motion.actuators.SimpleActuator.autoVisible","motion/actuators/SimpleActuator.hx",97,0x731927e5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(  99)		Bool _hx_tmp = hx::IsNull( value );
HXDLIN(  99)		if (_hx_tmp) {
HXLINE( 101)			value = true;
            		}
HXLINE( 105)		this->_autoVisible = value;
HXLINE( 107)		if (!(value)) {
HXLINE( 109)			this->toggleVisible = false;
HXLINE( 111)			Bool _hx_tmp1 = this->setVisible;
HXDLIN( 111)			if (_hx_tmp1) {
HXLINE( 113)				HX_VARI(  ::Dynamic,target) = this->target;
HXDLIN( 113)				HX_VARI_NAME(  ::Dynamic,value1,"value") = this->cacheVisible;
HXDLIN( 113)				Bool _hx_tmp2 = ::Reflect_obj::hasField(target,HX_("visible",72,78,24,a3));
HXDLIN( 113)				if (_hx_tmp2) {
HXLINE( 113)					::Reflect_obj::setField(target,HX_("visible",72,78,24,a3),value1);
            				}
            				else {
HXLINE( 113)					::Reflect_obj::setProperty(target,HX_("visible",72,78,24,a3),value1);
            				}
            			}
            		}
HXLINE( 119)		return hx::ObjectPtr<OBJ_>(this);
            	}


 ::motion::actuators::GenericActuator SimpleActuator_obj::delay(Float duration){
            	HX_STACK_FRAME("motion.actuators.SimpleActuator","delay",0xf179a58c,"motion.actuators.SimpleActuator.delay","motion/actuators/SimpleActuator.hx",127,0x731927e5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(duration,"duration")
HXLINE( 129)		this->_delay = duration;
HXLINE( 130)		this->timeOffset = (this->startTime + duration);
HXLINE( 132)		return hx::ObjectPtr<OBJ_>(this);
            	}


 ::Dynamic SimpleActuator_obj::getField( ::Dynamic target,::String propertyName){
            	HX_STACK_FRAME("motion.actuators.SimpleActuator","getField",0x353f81db,"motion.actuators.SimpleActuator.getField","motion/actuators/SimpleActuator.hx",137,0x731927e5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(target,"target")
            	HX_STACK_ARG(propertyName,"propertyName")
HXLINE( 141)		HX_VARI(  ::Dynamic,value) = null();
HXLINE( 143)		Bool _hx_tmp = ::Reflect_obj::hasField(target,propertyName);
HXDLIN( 143)		if (_hx_tmp) {
HXLINE( 148)			value = ::Reflect_obj::field(target,propertyName);
            		}
            		else {
HXLINE( 153)			value = ::Reflect_obj::getProperty(target,propertyName);
            		}
HXLINE( 157)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC2(SimpleActuator_obj,getField,return )

void SimpleActuator_obj::initialize(){
            	HX_STACK_FRAME("motion.actuators.SimpleActuator","initialize",0x46b3e2a7,"motion.actuators.SimpleActuator.initialize","motion/actuators/SimpleActuator.hx",168,0x731927e5)
            	HX_STACK_THIS(this)
HXLINE( 170)		HX_VAR(  ::motion::actuators::PropertyDetails,details);
HXLINE( 171)		HX_VAR(  ::Dynamic,start);
HXLINE( 173)		{
HXLINE( 173)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 173)			HX_VARI( ::Array< ::String >,_g1) = ::Reflect_obj::fields(this->properties);
HXDLIN( 173)			while((_g < _g1->length)){
HXLINE( 173)				HX_VARI( ::String,i) = _g1->__get(_g);
HXDLIN( 173)				++_g;
HXLINE( 175)				HX_VARI( Bool,isField) = true;
HXLINE( 179)				Bool _hx_tmp = ::Reflect_obj::hasField(this->target,i);
HXDLIN( 179)				if (_hx_tmp) {
HXLINE( 181)					start = ::Reflect_obj::field(this->target,i);
            				}
            				else {
HXLINE( 185)					isField = false;
HXLINE( 186)					start = ::Reflect_obj::getProperty(this->target,i);
            				}
HXLINE( 196)				Bool _hx_tmp1 = ::Std_obj::is(start,hx::ClassOf< ::Float >());
HXDLIN( 196)				if (_hx_tmp1) {
HXLINE( 198)					HX_VARI(  ::Dynamic,target) = this->properties;
HXDLIN( 198)					HX_VARI(  ::Dynamic,value) = null();
HXDLIN( 198)					Bool _hx_tmp2 = ::Reflect_obj::hasField(target,i);
HXDLIN( 198)					if (_hx_tmp2) {
HXLINE( 198)						value = ::Reflect_obj::field(target,i);
            					}
            					else {
HXLINE( 198)						value = ::Reflect_obj::getProperty(target,i);
            					}
HXLINE( 205)					details =  ::motion::actuators::PropertyDetails_obj::__new(this->target,i,start,(value - start),isField);
HXLINE( 206)					this->propertyDetails->push(details);
            				}
            			}
            		}
HXLINE( 212)		this->detailsLength = this->propertyDetails->length;
HXLINE( 213)		this->initialized = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(SimpleActuator_obj,initialize,(void))

void SimpleActuator_obj::move(){
            	HX_STACK_FRAME("motion.actuators.SimpleActuator","move",0x94436928,"motion.actuators.SimpleActuator.move","motion/actuators/SimpleActuator.hx",218,0x731927e5)
            	HX_STACK_THIS(this)
HXLINE( 221)		Bool _hx_tmp;
HXDLIN( 221)		Bool _hx_tmp1 = ::Reflect_obj::hasField(this->properties,HX_("alpha",5e,a7,96,21));
HXDLIN( 221)		if (_hx_tmp1) {
HXLINE( 221)			_hx_tmp = ::Std_obj::is(this->target,hx::ClassOf< ::openfl::display::DisplayObject >());
            		}
            		else {
HXLINE( 221)			_hx_tmp = false;
            		}
HXDLIN( 221)		this->toggleVisible = _hx_tmp;
HXLINE( 226)		Bool _hx_tmp2;
HXDLIN( 226)		Bool _hx_tmp3;
HXDLIN( 226)		if (this->toggleVisible) {
HXLINE( 226)			_hx_tmp3 = hx::IsNotEq(  ::Dynamic(this->properties->__Field(HX_("alpha",5e,a7,96,21),hx::paccDynamic)),(int)0 );
            		}
            		else {
HXLINE( 226)			_hx_tmp3 = false;
            		}
HXDLIN( 226)		if (_hx_tmp3) {
HXLINE( 226)			HX_VARI(  ::Dynamic,target) = this->target;
HXDLIN( 226)			HX_VARI(  ::Dynamic,value) = null();
HXDLIN( 226)			Bool _hx_tmp4 = ::Reflect_obj::hasField(target,HX_("visible",72,78,24,a3));
HXDLIN( 226)			if (_hx_tmp4) {
HXLINE( 226)				value = ::Reflect_obj::field(target,HX_("visible",72,78,24,a3));
            			}
            			else {
HXLINE( 226)				value = ::Reflect_obj::getProperty(target,HX_("visible",72,78,24,a3));
            			}
HXDLIN( 226)			_hx_tmp2 = !(( (Bool)(value) ));
            		}
            		else {
HXLINE( 226)			_hx_tmp2 = false;
            		}
HXDLIN( 226)		if (_hx_tmp2) {
HXLINE( 228)			this->setVisible = true;
HXLINE( 229)			HX_VARI_NAME(  ::Dynamic,target1,"target") = this->target;
HXDLIN( 229)			HX_VARI_NAME(  ::Dynamic,value1,"value") = null();
HXDLIN( 229)			Bool _hx_tmp5 = ::Reflect_obj::hasField(target1,HX_("visible",72,78,24,a3));
HXDLIN( 229)			if (_hx_tmp5) {
HXLINE( 229)				value1 = ::Reflect_obj::field(target1,HX_("visible",72,78,24,a3));
            			}
            			else {
HXLINE( 229)				value1 = ::Reflect_obj::getProperty(target1,HX_("visible",72,78,24,a3));
            			}
HXDLIN( 229)			this->cacheVisible = value1;
HXLINE( 230)			{
HXLINE( 230)				HX_VARI_NAME(  ::Dynamic,target2,"target") = this->target;
HXDLIN( 230)				Bool _hx_tmp6 = ::Reflect_obj::hasField(target2,HX_("visible",72,78,24,a3));
HXDLIN( 230)				if (_hx_tmp6) {
HXLINE( 230)					::Reflect_obj::setField(target2,HX_("visible",72,78,24,a3),true);
            				}
            				else {
HXLINE( 230)					::Reflect_obj::setProperty(target2,HX_("visible",72,78,24,a3),true);
            				}
            			}
            		}
HXLINE( 234)		this->timeOffset = this->startTime;
HXLINE( 235)		::motion::actuators::SimpleActuator_obj::actuators->push(hx::ObjectPtr<OBJ_>(this));
HXLINE( 236)		++::motion::actuators::SimpleActuator_obj::actuatorsLength;
            	}


 ::motion::actuators::GenericActuator SimpleActuator_obj::onUpdate( ::Dynamic handler,::cpp::VirtualArray parameters){
            	HX_STACK_FRAME("motion.actuators.SimpleActuator","onUpdate",0x3b875a1f,"motion.actuators.SimpleActuator.onUpdate","motion/actuators/SimpleActuator.hx",244,0x731927e5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(handler,"handler")
            	HX_STACK_ARG(parameters,"parameters")
HXLINE( 246)		this->_onUpdate = handler;
HXLINE( 248)		Bool _hx_tmp = hx::IsNull( parameters );
HXDLIN( 248)		if (_hx_tmp) {
HXLINE( 250)			this->_onUpdateParams = ::cpp::VirtualArray_obj::__new(0);
            		}
            		else {
HXLINE( 254)			this->_onUpdateParams = parameters;
            		}
HXLINE( 258)		this->sendChange = true;
HXLINE( 260)		return hx::ObjectPtr<OBJ_>(this);
            	}


void SimpleActuator_obj::pause(){
            	HX_STACK_FRAME("motion.actuators.SimpleActuator","pause",0xd7aaa4ff,"motion.actuators.SimpleActuator.pause","motion/actuators/SimpleActuator.hx",267,0x731927e5)
            	HX_STACK_THIS(this)
HXLINE( 267)		Bool _hx_tmp = !(this->paused);
HXDLIN( 267)		if (_hx_tmp) {
HXLINE( 269)			this->paused = true;
HXLINE( 271)			this->super::pause();
HXLINE( 276)			this->pauseTime = ::openfl::Lib_obj::getTimer();
            		}
            	}


void SimpleActuator_obj::resume(){
            	HX_STACK_FRAME("motion.actuators.SimpleActuator","resume",0xf6a5e384,"motion.actuators.SimpleActuator.resume","motion/actuators/SimpleActuator.hx",293,0x731927e5)
            	HX_STACK_THIS(this)
HXLINE( 293)		Bool _hx_tmp = this->paused;
HXDLIN( 293)		if (_hx_tmp) {
HXLINE( 295)			this->paused = false;
HXLINE( 299)			Int _hx_tmp1 = ::openfl::Lib_obj::getTimer();
HXDLIN( 299)			Float _hx_tmp2 = (_hx_tmp1 - this->pauseTime);
HXDLIN( 299)			hx::AddEq(this->timeOffset,((Float)_hx_tmp2 / (Float)(int)1000));
HXLINE( 309)			this->super::resume();
            		}
            	}


void SimpleActuator_obj::setProperty( ::motion::actuators::PropertyDetails details, ::Dynamic value){
            	HX_STACK_FRAME("motion.actuators.SimpleActuator","setProperty",0x3c3b8ce0,"motion.actuators.SimpleActuator.setProperty","motion/actuators/SimpleActuator.hx",340,0x731927e5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(details,"details")
            	HX_STACK_ARG(value,"value")
HXLINE( 340)		Bool _hx_tmp = details->isField;
HXDLIN( 340)		if (_hx_tmp) {
HXLINE( 345)			::Reflect_obj::setField(details->target,details->propertyName,value);
            		}
            		else {
HXLINE( 351)			::Reflect_obj::setProperty(details->target,details->propertyName,value);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(SimpleActuator_obj,setProperty,(void))

void SimpleActuator_obj::stop( ::Dynamic properties,Bool complete,Bool sendEvent){
            	HX_STACK_FRAME("motion.actuators.SimpleActuator","stop",0x983e7619,"motion.actuators.SimpleActuator.stop","motion/actuators/SimpleActuator.hx",361,0x731927e5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(properties,"properties")
            	HX_STACK_ARG(complete,"complete")
            	HX_STACK_ARG(sendEvent,"sendEvent")
HXLINE( 361)		Bool _hx_tmp = this->active;
HXDLIN( 361)		if (_hx_tmp) {
HXLINE( 363)			Bool _hx_tmp1 = hx::IsNull( properties );
HXDLIN( 363)			if (_hx_tmp1) {
HXLINE( 365)				this->active = false;
HXLINE( 367)				if (complete) {
HXLINE( 369)					this->apply();
            				}
HXLINE( 373)				this->complete(sendEvent);
HXLINE( 374)				return;
            			}
HXLINE( 378)			{
HXLINE( 378)				HX_VARI( Int,_g) = (int)0;
HXDLIN( 378)				HX_VARI( ::Array< ::String >,_g1) = ::Reflect_obj::fields(properties);
HXDLIN( 378)				while((_g < _g1->length)){
HXLINE( 378)					HX_VARI( ::String,i) = _g1->__get(_g);
HXDLIN( 378)					++_g;
HXLINE( 380)					Bool _hx_tmp2 = ::Reflect_obj::hasField(this->properties,i);
HXDLIN( 380)					if (_hx_tmp2) {
HXLINE( 382)						this->active = false;
HXLINE( 384)						if (complete) {
HXLINE( 386)							this->apply();
            						}
HXLINE( 390)						this->complete(sendEvent);
HXLINE( 391)						return;
            					}
            				}
            			}
            		}
            	}


void SimpleActuator_obj::update(Float currentTime){
            	HX_STACK_FRAME("motion.actuators.SimpleActuator","update",0x7526ffe0,"motion.actuators.SimpleActuator.update","motion/actuators/SimpleActuator.hx",404,0x731927e5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(currentTime,"currentTime")
HXLINE( 404)		Bool _hx_tmp = !(this->paused);
HXDLIN( 404)		if (_hx_tmp) {
HXLINE( 406)			HX_VAR(  ::motion::actuators::PropertyDetails,details);
HXLINE( 407)			HX_VAR( Float,easing);
HXLINE( 410)			HX_VARI( Float,tweenPosition) = ((Float)(currentTime - this->timeOffset) / (Float)this->duration);
HXLINE( 412)			Bool _hx_tmp1 = (tweenPosition > (int)1);
HXDLIN( 412)			if (_hx_tmp1) {
HXLINE( 414)				tweenPosition = (int)1;
            			}
HXLINE( 418)			Bool _hx_tmp2 = !(this->initialized);
HXDLIN( 418)			if (_hx_tmp2) {
HXLINE( 420)				this->initialize();
            			}
HXLINE( 424)			Bool _hx_tmp3 = !(this->special);
HXDLIN( 424)			if (_hx_tmp3) {
HXLINE( 426)				easing = ::motion::easing::IEasing_obj::calculate(this->_ease,tweenPosition);
HXLINE( 428)				{
HXLINE( 428)					HX_VARI( Int,_g1) = (int)0;
HXDLIN( 428)					HX_VARI( Int,_g) = this->detailsLength;
HXDLIN( 428)					while((_g1 < _g)){
HXLINE( 428)						HX_VARI( Int,i) = _g1++;
HXLINE( 430)						details = this->propertyDetails->__get(i).StaticCast<  ::motion::actuators::PropertyDetails >();
HXLINE( 431)						{
HXLINE( 431)							HX_VARI(  ::Dynamic,value) = (details->start + (details->change * easing));
HXDLIN( 431)							Bool _hx_tmp4 = details->isField;
HXDLIN( 431)							if (_hx_tmp4) {
HXLINE( 431)								::Reflect_obj::setField(details->target,details->propertyName,value);
            							}
            							else {
HXLINE( 431)								::Reflect_obj::setProperty(details->target,details->propertyName,value);
            							}
            						}
            					}
            				}
            			}
            			else {
HXLINE( 437)				Bool _hx_tmp5 = !(this->_reverse);
HXDLIN( 437)				if (_hx_tmp5) {
HXLINE( 439)					easing = ::motion::easing::IEasing_obj::calculate(this->_ease,tweenPosition);
            				}
            				else {
HXLINE( 443)					easing = ::motion::easing::IEasing_obj::calculate(this->_ease,((int)1 - tweenPosition));
            				}
HXLINE( 447)				HX_VAR( Float,endValue);
HXLINE( 449)				{
HXLINE( 449)					HX_VARI_NAME( Int,_g11,"_g1") = (int)0;
HXDLIN( 449)					HX_VARI_NAME( Int,_g2,"_g") = this->detailsLength;
HXDLIN( 449)					while((_g11 < _g2)){
HXLINE( 449)						HX_VARI_NAME( Int,i1,"i") = _g11++;
HXLINE( 451)						details = this->propertyDetails->__get(i1).StaticCast<  ::motion::actuators::PropertyDetails >();
HXLINE( 453)						Bool _hx_tmp6;
HXDLIN( 453)						if (this->_smartRotation) {
HXLINE( 453)							Bool _hx_tmp7;
HXDLIN( 453)							Bool _hx_tmp8;
HXDLIN( 453)							if ((details->propertyName != HX_("rotation",3e,3d,86,08))) {
HXLINE( 453)								_hx_tmp8 = (details->propertyName == HX_("rotationX",5a,59,ef,6c));
            							}
            							else {
HXLINE( 453)								_hx_tmp8 = true;
            							}
HXDLIN( 453)							if (!(_hx_tmp8)) {
HXLINE( 453)								_hx_tmp7 = (details->propertyName == HX_("rotationY",5b,59,ef,6c));
            							}
            							else {
HXLINE( 453)								_hx_tmp7 = true;
            							}
HXDLIN( 453)							if (!(_hx_tmp7)) {
HXLINE( 453)								_hx_tmp6 = (details->propertyName == HX_("rotationZ",5c,59,ef,6c));
            							}
            							else {
HXLINE( 453)								_hx_tmp6 = true;
            							}
            						}
            						else {
HXLINE( 453)							_hx_tmp6 = false;
            						}
HXDLIN( 453)						if (_hx_tmp6) {
HXLINE( 455)							HX_VARI( Float,rotation) = hx::Mod(details->change,(int)360);
HXLINE( 457)							Bool _hx_tmp9 = (rotation > (int)180);
HXDLIN( 457)							if (_hx_tmp9) {
HXLINE( 459)								hx::SubEq(rotation,(int)360);
            							}
            							else {
HXLINE( 461)								Bool _hx_tmp10 = (rotation < (int)-180);
HXDLIN( 461)								if (_hx_tmp10) {
HXLINE( 463)									hx::AddEq(rotation,(int)360);
            								}
            							}
HXLINE( 467)							endValue = (details->start + (rotation * easing));
            						}
            						else {
HXLINE( 471)							endValue = (details->start + (details->change * easing));
            						}
HXLINE( 475)						Bool _hx_tmp11 = !(this->_snapping);
HXDLIN( 475)						if (_hx_tmp11) {
HXLINE( 477)							Bool _hx_tmp12 = details->isField;
HXDLIN( 477)							if (_hx_tmp12) {
HXLINE( 477)								::Reflect_obj::setField(details->target,details->propertyName,endValue);
            							}
            							else {
HXLINE( 477)								::Reflect_obj::setProperty(details->target,details->propertyName,endValue);
            							}
            						}
            						else {
HXLINE( 481)							HX_VARI_NAME(  ::Dynamic,value1,"value") = ::Math_obj::round(endValue);
HXDLIN( 481)							Bool _hx_tmp13 = details->isField;
HXDLIN( 481)							if (_hx_tmp13) {
HXLINE( 481)								::Reflect_obj::setField(details->target,details->propertyName,value1);
            							}
            							else {
HXLINE( 481)								::Reflect_obj::setProperty(details->target,details->propertyName,value1);
            							}
            						}
            					}
            				}
            			}
HXLINE( 489)			if ((tweenPosition == (int)1)) {
HXLINE( 491)				Bool _hx_tmp14 = (this->_repeat == (int)0);
HXDLIN( 491)				if (_hx_tmp14) {
HXLINE( 493)					this->active = false;
HXLINE( 495)					Bool _hx_tmp15;
HXDLIN( 495)					Bool _hx_tmp16 = this->toggleVisible;
HXDLIN( 495)					if (_hx_tmp16) {
HXLINE( 495)						HX_VARI(  ::Dynamic,target) = this->target;
HXDLIN( 495)						HX_VARI_NAME(  ::Dynamic,value2,"value") = null();
HXDLIN( 495)						Bool _hx_tmp17 = ::Reflect_obj::hasField(target,HX_("alpha",5e,a7,96,21));
HXDLIN( 495)						if (_hx_tmp17) {
HXLINE( 495)							value2 = ::Reflect_obj::field(target,HX_("alpha",5e,a7,96,21));
            						}
            						else {
HXLINE( 495)							value2 = ::Reflect_obj::getProperty(target,HX_("alpha",5e,a7,96,21));
            						}
HXDLIN( 495)						_hx_tmp15 = hx::IsEq( value2,(int)0 );
            					}
            					else {
HXLINE( 495)						_hx_tmp15 = false;
            					}
HXDLIN( 495)					if (_hx_tmp15) {
HXLINE( 497)						HX_VARI_NAME(  ::Dynamic,target1,"target") = this->target;
HXDLIN( 497)						Bool _hx_tmp18 = ::Reflect_obj::hasField(target1,HX_("visible",72,78,24,a3));
HXDLIN( 497)						if (_hx_tmp18) {
HXLINE( 497)							::Reflect_obj::setField(target1,HX_("visible",72,78,24,a3),false);
            						}
            						else {
HXLINE( 497)							::Reflect_obj::setProperty(target1,HX_("visible",72,78,24,a3),false);
            						}
            					}
HXLINE( 501)					this->complete(true);
HXLINE( 502)					return;
            				}
            				else {
HXLINE( 506)					Bool _hx_tmp19 = hx::IsNotNull( this->_onRepeat );
HXDLIN( 506)					if (_hx_tmp19) {
HXLINE( 508)						HX_VARI(  ::Dynamic,method) = this->_onRepeat;
HXDLIN( 508)						HX_VARI( ::cpp::VirtualArray,params) = this->_onRepeatParams;
HXDLIN( 508)						Bool _hx_tmp20 = hx::IsNull( params );
HXDLIN( 508)						if (_hx_tmp20) {
HXLINE( 508)							params = ::cpp::VirtualArray_obj::__new(0);
            						}
HXDLIN( 508)						::Reflect_obj::callMethod(method,method,params);
            					}
HXLINE( 512)					Bool _hx_tmp21 = this->_reflect;
HXDLIN( 512)					if (_hx_tmp21) {
HXLINE( 514)						this->_reverse = !(this->_reverse);
            					}
HXLINE( 518)					this->startTime = currentTime;
HXLINE( 519)					this->timeOffset = (this->startTime + this->_delay);
HXLINE( 521)					Bool _hx_tmp22 = (this->_repeat > (int)0);
HXDLIN( 521)					if (_hx_tmp22) {
HXLINE( 523)						this->_repeat--;
            					}
            				}
            			}
HXLINE( 531)			Bool _hx_tmp23 = this->sendChange;
HXDLIN( 531)			if (_hx_tmp23) {
HXLINE( 533)				this->change();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(SimpleActuator_obj,update,(void))

::Array< ::Dynamic> SimpleActuator_obj::actuators;

Int SimpleActuator_obj::actuatorsLength;

Bool SimpleActuator_obj::addedEvent;

void SimpleActuator_obj::stage_onEnterFrame( ::openfl::events::Event event){
            	HX_STACK_FRAME("motion.actuators.SimpleActuator","stage_onEnterFrame",0x3adccfac,"motion.actuators.SimpleActuator.stage_onEnterFrame","motion/actuators/SimpleActuator.hx",552,0x731927e5)
            	HX_STACK_ARG(event,"event")
HXLINE( 556)		Int _hx_tmp = ::openfl::Lib_obj::getTimer();
HXDLIN( 556)		HX_VARI( Float,currentTime) = ((Float)_hx_tmp / (Float)(int)1000);
HXLINE( 566)		HX_VAR(  ::motion::actuators::SimpleActuator,actuator);
HXLINE( 568)		HX_VARI( Int,j) = (int)0;
HXLINE( 571)		{
HXLINE( 571)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 571)			HX_VARI( Int,_g) = ::motion::actuators::SimpleActuator_obj::actuatorsLength;
HXDLIN( 571)			while((_g1 < _g)){
HXLINE( 571)				++_g1;
HXLINE( 573)				actuator = ::motion::actuators::SimpleActuator_obj::actuators->__get(j).StaticCast<  ::motion::actuators::SimpleActuator >();
HXLINE( 575)				Bool _hx_tmp1;
HXDLIN( 575)				Bool _hx_tmp2 = hx::IsNotNull( actuator );
HXDLIN( 575)				if (_hx_tmp2) {
HXLINE( 575)					_hx_tmp1 = actuator->active;
            				}
            				else {
HXLINE( 575)					_hx_tmp1 = false;
            				}
HXDLIN( 575)				if (_hx_tmp1) {
HXLINE( 577)					Bool _hx_tmp3 = (currentTime >= actuator->timeOffset);
HXDLIN( 577)					if (_hx_tmp3) {
HXLINE( 579)						actuator->update(currentTime);
            					}
HXLINE( 583)					++j;
            				}
            				else {
HXLINE( 587)					::motion::actuators::SimpleActuator_obj::actuators->removeRange(j,(int)1);
HXLINE( 588)					--::motion::actuators::SimpleActuator_obj::actuatorsLength;
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SimpleActuator_obj,stage_onEnterFrame,(void))


SimpleActuator_obj::SimpleActuator_obj()
{
}

void SimpleActuator_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SimpleActuator);
	HX_MARK_MEMBER_NAME(timeOffset,"timeOffset");
	HX_MARK_MEMBER_NAME(active,"active");
	HX_MARK_MEMBER_NAME(cacheVisible,"cacheVisible");
	HX_MARK_MEMBER_NAME(detailsLength,"detailsLength");
	HX_MARK_MEMBER_NAME(initialized,"initialized");
	HX_MARK_MEMBER_NAME(paused,"paused");
	HX_MARK_MEMBER_NAME(pauseTime,"pauseTime");
	HX_MARK_MEMBER_NAME(propertyDetails,"propertyDetails");
	HX_MARK_MEMBER_NAME(sendChange,"sendChange");
	HX_MARK_MEMBER_NAME(setVisible,"setVisible");
	HX_MARK_MEMBER_NAME(startTime,"startTime");
	HX_MARK_MEMBER_NAME(toggleVisible,"toggleVisible");
	 ::motion::actuators::GenericActuator_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void SimpleActuator_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(timeOffset,"timeOffset");
	HX_VISIT_MEMBER_NAME(active,"active");
	HX_VISIT_MEMBER_NAME(cacheVisible,"cacheVisible");
	HX_VISIT_MEMBER_NAME(detailsLength,"detailsLength");
	HX_VISIT_MEMBER_NAME(initialized,"initialized");
	HX_VISIT_MEMBER_NAME(paused,"paused");
	HX_VISIT_MEMBER_NAME(pauseTime,"pauseTime");
	HX_VISIT_MEMBER_NAME(propertyDetails,"propertyDetails");
	HX_VISIT_MEMBER_NAME(sendChange,"sendChange");
	HX_VISIT_MEMBER_NAME(setVisible,"setVisible");
	HX_VISIT_MEMBER_NAME(startTime,"startTime");
	HX_VISIT_MEMBER_NAME(toggleVisible,"toggleVisible");
	 ::motion::actuators::GenericActuator_obj::__Visit(HX_VISIT_ARG);
}

hx::Val SimpleActuator_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"move") ) { return hx::Val( move_dyn()); }
		if (HX_FIELD_EQ(inName,"stop") ) { return hx::Val( stop_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"delay") ) { return hx::Val( delay_dyn()); }
		if (HX_FIELD_EQ(inName,"pause") ) { return hx::Val( pause_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"active") ) { return hx::Val( active); }
		if (HX_FIELD_EQ(inName,"paused") ) { return hx::Val( paused); }
		if (HX_FIELD_EQ(inName,"resume") ) { return hx::Val( resume_dyn()); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"getField") ) { return hx::Val( getField_dyn()); }
		if (HX_FIELD_EQ(inName,"onUpdate") ) { return hx::Val( onUpdate_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"pauseTime") ) { return hx::Val( pauseTime); }
		if (HX_FIELD_EQ(inName,"startTime") ) { return hx::Val( startTime); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"timeOffset") ) { return hx::Val( timeOffset); }
		if (HX_FIELD_EQ(inName,"sendChange") ) { return hx::Val( sendChange); }
		if (HX_FIELD_EQ(inName,"setVisible") ) { return hx::Val( setVisible); }
		if (HX_FIELD_EQ(inName,"initialize") ) { return hx::Val( initialize_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"initialized") ) { return hx::Val( initialized); }
		if (HX_FIELD_EQ(inName,"autoVisible") ) { return hx::Val( autoVisible_dyn()); }
		if (HX_FIELD_EQ(inName,"setProperty") ) { return hx::Val( setProperty_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"cacheVisible") ) { return hx::Val( cacheVisible); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"detailsLength") ) { return hx::Val( detailsLength); }
		if (HX_FIELD_EQ(inName,"toggleVisible") ) { return hx::Val( toggleVisible); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"propertyDetails") ) { return hx::Val( propertyDetails); }
		break;
	case 30:
		if (HX_FIELD_EQ(inName,"setField_openfl_geom_Transform") ) { return hx::Val( setField_openfl_geom_Transform_dyn()); }
		break;
	case 37:
		if (HX_FIELD_EQ(inName,"setField_openfl_display_DisplayObject") ) { return hx::Val( setField_openfl_display_DisplayObject_dyn()); }
		break;
	case 42:
		if (HX_FIELD_EQ(inName,"setField_motion_actuators_SimpleActuator_T") ) { return hx::Val( setField_motion_actuators_SimpleActuator_T_dyn()); }
		break;
	case 45:
		if (HX_FIELD_EQ(inName,"setField_motion_actuators_TransformActuator_T") ) { return hx::Val( setField_motion_actuators_TransformActuator_T_dyn()); }
		break;
	case 46:
		if (HX_FIELD_EQ(inName,"setField_motion_actuators_MotionPathActuator_T") ) { return hx::Val( setField_motion_actuators_MotionPathActuator_T_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool SimpleActuator_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"actuators") ) { outValue = actuators; return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"addedEvent") ) { outValue = addedEvent; return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"actuatorsLength") ) { outValue = actuatorsLength; return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"stage_onEnterFrame") ) { outValue = stage_onEnterFrame_dyn(); return true; }
	}
	return false;
}

hx::Val SimpleActuator_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"active") ) { active=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"paused") ) { paused=inValue.Cast< Bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"pauseTime") ) { pauseTime=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"startTime") ) { startTime=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"timeOffset") ) { timeOffset=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sendChange") ) { sendChange=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"setVisible") ) { setVisible=inValue.Cast< Bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"initialized") ) { initialized=inValue.Cast< Bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"cacheVisible") ) { cacheVisible=inValue.Cast< Bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"detailsLength") ) { detailsLength=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"toggleVisible") ) { toggleVisible=inValue.Cast< Bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"propertyDetails") ) { propertyDetails=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool SimpleActuator_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"actuators") ) { actuators=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"addedEvent") ) { addedEvent=ioValue.Cast< Bool >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"actuatorsLength") ) { actuatorsLength=ioValue.Cast< Int >(); return true; }
	}
	return false;
}

void SimpleActuator_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("timeOffset","\x80","\xdf","\x08","\xfe"));
	outFields->push(HX_HCSTRING("active","\xc6","\x41","\x46","\x16"));
	outFields->push(HX_HCSTRING("cacheVisible","\x50","\xb2","\x89","\x51"));
	outFields->push(HX_HCSTRING("detailsLength","\x48","\xe3","\xc3","\x98"));
	outFields->push(HX_HCSTRING("initialized","\x14","\xf5","\x0f","\x37"));
	outFields->push(HX_HCSTRING("paused","\xae","\x40","\x84","\xef"));
	outFields->push(HX_HCSTRING("pauseTime","\x23","\x82","\x63","\x51"));
	outFields->push(HX_HCSTRING("propertyDetails","\xed","\xa0","\x48","\x71"));
	outFields->push(HX_HCSTRING("sendChange","\xd8","\xb8","\xc8","\x58"));
	outFields->push(HX_HCSTRING("setVisible","\xf0","\x9c","\x03","\xf6"));
	outFields->push(HX_HCSTRING("startTime","\x8f","\x45","\xf0","\x05"));
	outFields->push(HX_HCSTRING("toggleVisible","\x3e","\xbb","\xe1","\x53"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo SimpleActuator_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(SimpleActuator_obj,timeOffset),HX_HCSTRING("timeOffset","\x80","\xdf","\x08","\xfe")},
	{hx::fsBool,(int)offsetof(SimpleActuator_obj,active),HX_HCSTRING("active","\xc6","\x41","\x46","\x16")},
	{hx::fsBool,(int)offsetof(SimpleActuator_obj,cacheVisible),HX_HCSTRING("cacheVisible","\x50","\xb2","\x89","\x51")},
	{hx::fsInt,(int)offsetof(SimpleActuator_obj,detailsLength),HX_HCSTRING("detailsLength","\x48","\xe3","\xc3","\x98")},
	{hx::fsBool,(int)offsetof(SimpleActuator_obj,initialized),HX_HCSTRING("initialized","\x14","\xf5","\x0f","\x37")},
	{hx::fsBool,(int)offsetof(SimpleActuator_obj,paused),HX_HCSTRING("paused","\xae","\x40","\x84","\xef")},
	{hx::fsFloat,(int)offsetof(SimpleActuator_obj,pauseTime),HX_HCSTRING("pauseTime","\x23","\x82","\x63","\x51")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(SimpleActuator_obj,propertyDetails),HX_HCSTRING("propertyDetails","\xed","\xa0","\x48","\x71")},
	{hx::fsBool,(int)offsetof(SimpleActuator_obj,sendChange),HX_HCSTRING("sendChange","\xd8","\xb8","\xc8","\x58")},
	{hx::fsBool,(int)offsetof(SimpleActuator_obj,setVisible),HX_HCSTRING("setVisible","\xf0","\x9c","\x03","\xf6")},
	{hx::fsFloat,(int)offsetof(SimpleActuator_obj,startTime),HX_HCSTRING("startTime","\x8f","\x45","\xf0","\x05")},
	{hx::fsBool,(int)offsetof(SimpleActuator_obj,toggleVisible),HX_HCSTRING("toggleVisible","\x3e","\xbb","\xe1","\x53")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo SimpleActuator_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*Array< ::Dynamic >*/ ,(void *) &SimpleActuator_obj::actuators,HX_HCSTRING("actuators","\x1a","\x95","\x55","\xd2")},
	{hx::fsInt,(void *) &SimpleActuator_obj::actuatorsLength,HX_HCSTRING("actuatorsLength","\xa0","\x6d","\xfd","\xca")},
	{hx::fsBool,(void *) &SimpleActuator_obj::addedEvent,HX_HCSTRING("addedEvent","\x3a","\x2b","\xd3","\x06")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String SimpleActuator_obj_sMemberFields[] = {
	HX_HCSTRING("setField_openfl_geom_Transform","\xd1","\xd2","\xb0","\x7f"),
	HX_HCSTRING("setField_motion_actuators_TransformActuator_T","\x33","\x34","\xff","\xa9"),
	HX_HCSTRING("setField_motion_actuators_MotionPathActuator_T","\x30","\x6a","\x5e","\x8d"),
	HX_HCSTRING("setField_openfl_display_DisplayObject","\x7c","\xdd","\x61","\x25"),
	HX_HCSTRING("setField_motion_actuators_SimpleActuator_T","\xa7","\x1e","\xa0","\x75"),
	HX_HCSTRING("timeOffset","\x80","\xdf","\x08","\xfe"),
	HX_HCSTRING("active","\xc6","\x41","\x46","\x16"),
	HX_HCSTRING("cacheVisible","\x50","\xb2","\x89","\x51"),
	HX_HCSTRING("detailsLength","\x48","\xe3","\xc3","\x98"),
	HX_HCSTRING("initialized","\x14","\xf5","\x0f","\x37"),
	HX_HCSTRING("paused","\xae","\x40","\x84","\xef"),
	HX_HCSTRING("pauseTime","\x23","\x82","\x63","\x51"),
	HX_HCSTRING("propertyDetails","\xed","\xa0","\x48","\x71"),
	HX_HCSTRING("sendChange","\xd8","\xb8","\xc8","\x58"),
	HX_HCSTRING("setVisible","\xf0","\x9c","\x03","\xf6"),
	HX_HCSTRING("startTime","\x8f","\x45","\xf0","\x05"),
	HX_HCSTRING("toggleVisible","\x3e","\xbb","\xe1","\x53"),
	HX_HCSTRING("autoVisible","\xc3","\x1c","\x08","\x89"),
	HX_HCSTRING("delay","\x83","\xd7","\x26","\xd7"),
	HX_HCSTRING("getField","\x44","\xa4","\x6a","\x60"),
	HX_HCSTRING("initialize","\x50","\x31","\xbb","\xec"),
	HX_HCSTRING("move","\x11","\xe3","\x60","\x48"),
	HX_HCSTRING("onUpdate","\x88","\x7c","\xb2","\x66"),
	HX_HCSTRING("pause","\xf6","\xd6","\x57","\xbd"),
	HX_HCSTRING("resume","\xad","\x69","\x84","\x08"),
	HX_HCSTRING("setProperty","\x17","\x12","\x99","\xdc"),
	HX_HCSTRING("stop","\x02","\xf0","\x5b","\x4c"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	::String(null()) };

static void SimpleActuator_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(SimpleActuator_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(SimpleActuator_obj::actuators,"actuators");
	HX_MARK_MEMBER_NAME(SimpleActuator_obj::actuatorsLength,"actuatorsLength");
	HX_MARK_MEMBER_NAME(SimpleActuator_obj::addedEvent,"addedEvent");
};

#ifdef HXCPP_VISIT_ALLOCS
static void SimpleActuator_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(SimpleActuator_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(SimpleActuator_obj::actuators,"actuators");
	HX_VISIT_MEMBER_NAME(SimpleActuator_obj::actuatorsLength,"actuatorsLength");
	HX_VISIT_MEMBER_NAME(SimpleActuator_obj::addedEvent,"addedEvent");
};

#endif

hx::Class SimpleActuator_obj::__mClass;

static ::String SimpleActuator_obj_sStaticFields[] = {
	HX_HCSTRING("actuators","\x1a","\x95","\x55","\xd2"),
	HX_HCSTRING("actuatorsLength","\xa0","\x6d","\xfd","\xca"),
	HX_HCSTRING("addedEvent","\x3a","\x2b","\xd3","\x06"),
	HX_HCSTRING("stage_onEnterFrame","\x55","\x6f","\x40","\x8f"),
	::String(null())
};

void SimpleActuator_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("motion.actuators.SimpleActuator","\xb7","\x91","\x0d","\x4c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &SimpleActuator_obj::__GetStatic;
	__mClass->mSetStaticField = &SimpleActuator_obj::__SetStatic;
	__mClass->mMarkFunc = SimpleActuator_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(SimpleActuator_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(SimpleActuator_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< SimpleActuator_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = SimpleActuator_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SimpleActuator_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SimpleActuator_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void SimpleActuator_obj::__boot()
{
{
            	HX_STACK_FRAME("motion.actuators.SimpleActuator","boot",0x8cfe0a49,"motion.actuators.SimpleActuator.boot","motion/actuators/SimpleActuator.hx",30,0x731927e5)
HXLINE(  30)		actuators = ::Array_obj< ::Dynamic>::__new();
            	}
{
            	HX_STACK_FRAME("motion.actuators.SimpleActuator","boot",0x8cfe0a49,"motion.actuators.SimpleActuator.boot","motion/actuators/SimpleActuator.hx",31,0x731927e5)
HXLINE(  31)		actuatorsLength = (int)0;
            	}
{
            	HX_STACK_FRAME("motion.actuators.SimpleActuator","boot",0x8cfe0a49,"motion.actuators.SimpleActuator.boot","motion/actuators/SimpleActuator.hx",32,0x731927e5)
HXLINE(  32)		addedEvent = false;
            	}
}

} // end namespace motion
} // end namespace actuators
