// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_ru_stablex_TweenSprite
#include <ru/stablex/TweenSprite.h>
#endif
#ifndef INCLUDED_ru_stablex_ui_UIBuilder
#include <ru/stablex/ui/UIBuilder.h>
#endif
#ifndef INCLUDED_ru_stablex_ui_widgets_Box
#include <ru/stablex/ui/widgets/Box.h>
#endif
#ifndef INCLUDED_ru_stablex_ui_widgets_Floating
#include <ru/stablex/ui/widgets/Floating.h>
#endif
#ifndef INCLUDED_ru_stablex_ui_widgets_Widget
#include <ru/stablex/ui/widgets/Widget.h>
#endif

namespace ru{
namespace stablex{
namespace ui{
namespace widgets{

void Floating_obj::__construct(){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Floating","new",0x8ec23e15,"ru.stablex.ui.widgets.Floating.new","ru/stablex/ui/widgets/Floating.hx",15,0x4373a7bb)
            	HX_STACK_THIS(this)
HXLINE(  22)		this->scaleContent = ((Float)1);
HXLINE(  20)		this->renderTo = null();
HXLINE(  18)		this->shown = false;
HXLINE(  30)		super::__construct();
HXLINE(  31)		this->set_visible(false);
            	}

Dynamic Floating_obj::__CreateEmpty() { return new Floating_obj; }

hx::ObjectPtr< Floating_obj > Floating_obj::__new()
{
	hx::ObjectPtr< Floating_obj > _hx_result = new Floating_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Floating_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Floating_obj > _hx_result = new Floating_obj();
	_hx_result->__construct();
	return _hx_result;
}

void Floating_obj::show(){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Floating","show",0x5e8465a8,"ru.stablex.ui.widgets.Floating.show","ru/stablex/ui/widgets/Floating.hx",41,0x4373a7bb)
            	HX_STACK_THIS(this)
HXLINE(  41)		Bool _hx_tmp = hx::IsNull( this->renderTo );
HXDLIN(  41)		if (_hx_tmp) {
HXLINE(  42)			this->shown = true;
HXDLIN(  42)			this->set_visible(true);
HXLINE(  45)			Bool _hx_tmp1;
HXDLIN(  45)			Bool _hx_tmp2;
HXDLIN(  45)			Bool _hx_tmp3;
HXDLIN(  45)			Bool _hx_tmp4;
HXDLIN(  45)			Bool _hx_tmp5;
HXDLIN(  45)			Bool _hx_tmp6;
HXDLIN(  45)			Bool _hx_tmp7;
HXDLIN(  45)			if (!(this->_widthUsePercent)) {
HXLINE(  45)				_hx_tmp7 = this->_heightUsePercent;
            			}
            			else {
HXLINE(  45)				_hx_tmp7 = true;
            			}
HXDLIN(  45)			if (!(_hx_tmp7)) {
HXLINE(  45)				_hx_tmp6 = (this->_xUse == (int)2);
            			}
            			else {
HXLINE(  45)				_hx_tmp6 = true;
            			}
HXDLIN(  45)			if (!(_hx_tmp6)) {
HXLINE(  45)				_hx_tmp5 = (this->_xUse == (int)4);
            			}
            			else {
HXLINE(  45)				_hx_tmp5 = true;
            			}
HXDLIN(  45)			if (!(_hx_tmp5)) {
HXLINE(  45)				_hx_tmp4 = (this->_xUse == (int)3);
            			}
            			else {
HXLINE(  45)				_hx_tmp4 = true;
            			}
HXDLIN(  45)			if (!(_hx_tmp4)) {
HXLINE(  45)				_hx_tmp3 = (this->_yUse == (int)6);
            			}
            			else {
HXLINE(  45)				_hx_tmp3 = true;
            			}
HXDLIN(  45)			if (!(_hx_tmp3)) {
HXLINE(  45)				_hx_tmp2 = (this->_yUse == (int)8);
            			}
            			else {
HXLINE(  45)				_hx_tmp2 = true;
            			}
HXDLIN(  45)			if (!(_hx_tmp2)) {
HXLINE(  45)				_hx_tmp1 = (this->_yUse == (int)7);
            			}
            			else {
HXLINE(  45)				_hx_tmp1 = true;
            			}
HXDLIN(  45)			if (_hx_tmp1) {
HXLINE(  46)				::openfl::Lib_obj::current->stage->removeEventListener(HX_("resize",f4,59,7b,08),this->_onStageResize_dyn(),null());
HXLINE(  47)				::openfl::Lib_obj::current->stage->addEventListener(HX_("resize",f4,59,7b,08),this->_onStageResize_dyn(),null(),null(),null());
            			}
HXLINE(  50)			if (hx::IsEq( this->parent,::openfl::Lib_obj::current->stage )) {
HXLINE(  51)				Int _hx_tmp8 = ::openfl::Lib_obj::current->stage->get_numChildren();
HXDLIN(  51)				::openfl::Lib_obj::current->stage->setChildIndex(hx::ObjectPtr<OBJ_>(this),(_hx_tmp8 - (int)1));
            			}
            			else {
HXLINE(  53)				Bool _hx_tmp9 = hx::IsNotNull( this->parent );
HXDLIN(  53)				if (_hx_tmp9) {
HXLINE(  53)					this->parent->removeChild(hx::ObjectPtr<OBJ_>(this));
            				}
HXLINE(  54)				::openfl::Lib_obj::current->stage->addChild(hx::ObjectPtr<OBJ_>(this));
            			}
HXLINE(  57)			this->_onStageResize(null());
            		}
            		else {
HXLINE(  61)			HX_VARI(  ::ru::stablex::ui::widgets::Widget,to) = ::ru::stablex::ui::UIBuilder_obj::_objects->get(this->renderTo).StaticCast<  ::ru::stablex::ui::widgets::Widget >();
HXLINE(  62)			Bool _hx_tmp10 = hx::IsNotNull( to );
HXDLIN(  62)			if (_hx_tmp10) {
HXLINE(  63)				this->shown = true;
HXDLIN(  63)				this->set_visible(true);
HXLINE(  64)				if (hx::IsEq( this->parent,to )) {
HXLINE(  65)					Int _hx_tmp11 = to->get_numChildren();
HXDLIN(  65)					to->setChildIndex(hx::ObjectPtr<OBJ_>(this),(_hx_tmp11 - (int)1));
            				}
            				else {
HXLINE(  67)					Bool _hx_tmp12 = hx::IsNotNull( this->parent );
HXDLIN(  67)					if (_hx_tmp12) {
HXLINE(  67)						this->parent->removeChild(hx::ObjectPtr<OBJ_>(this));
            					}
HXLINE(  68)					to->addChild(hx::ObjectPtr<OBJ_>(this));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Floating_obj,show,(void))

void Floating_obj::hide(){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Floating","hide",0x573fc56d,"ru.stablex.ui.widgets.Floating.hide","ru/stablex/ui/widgets/Floating.hx",79,0x4373a7bb)
            	HX_STACK_THIS(this)
HXLINE(  80)		::openfl::Lib_obj::current->stage->removeEventListener(HX_("resize",f4,59,7b,08),this->_onStageResize_dyn(),null());
HXLINE(  82)		Bool _hx_tmp = hx::IsNotNull( this->parent );
HXDLIN(  82)		if (_hx_tmp) {
HXLINE(  83)			this->parent->removeChild(hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE(  86)		this->shown = false;
HXDLIN(  86)		this->set_visible(false);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Floating_obj,hide,(void))

Bool Floating_obj::_usingParentSize(){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Floating","_usingParentSize",0x03618d1b,"ru.stablex.ui.widgets.Floating._usingParentSize","ru/stablex/ui/widgets/Floating.hx",95,0x4373a7bb)
            	HX_STACK_THIS(this)
HXLINE(  96)		Bool _hx_tmp;
HXDLIN(  96)		Bool _hx_tmp1;
HXDLIN(  96)		Bool _hx_tmp2;
HXDLIN(  96)		Bool _hx_tmp3;
HXDLIN(  96)		Bool _hx_tmp4;
HXDLIN(  96)		Bool _hx_tmp5;
HXDLIN(  96)		if (!(this->_widthUsePercent)) {
HXLINE(  96)			_hx_tmp5 = this->_heightUsePercent;
            		}
            		else {
HXLINE(  96)			_hx_tmp5 = true;
            		}
HXDLIN(  96)		if (!(_hx_tmp5)) {
HXLINE(  96)			_hx_tmp4 = (this->_xUse == (int)2);
            		}
            		else {
HXLINE(  96)			_hx_tmp4 = true;
            		}
HXDLIN(  96)		if (!(_hx_tmp4)) {
HXLINE(  96)			_hx_tmp3 = (this->_xUse == (int)4);
            		}
            		else {
HXLINE(  96)			_hx_tmp3 = true;
            		}
HXDLIN(  96)		if (!(_hx_tmp3)) {
HXLINE(  96)			_hx_tmp2 = (this->_xUse == (int)3);
            		}
            		else {
HXLINE(  96)			_hx_tmp2 = true;
            		}
HXDLIN(  96)		if (!(_hx_tmp2)) {
HXLINE(  96)			_hx_tmp1 = (this->_yUse == (int)6);
            		}
            		else {
HXLINE(  96)			_hx_tmp1 = true;
            		}
HXDLIN(  96)		if (!(_hx_tmp1)) {
HXLINE(  96)			_hx_tmp = (this->_yUse == (int)8);
            		}
            		else {
HXLINE(  96)			_hx_tmp = true;
            		}
HXLINE(  95)		if (!(_hx_tmp)) {
HXLINE(  95)			return (this->_yUse == (int)7);
            		}
            		else {
HXLINE(  95)			return true;
            		}
HXDLIN(  95)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Floating_obj,_usingParentSize,return )

void Floating_obj::_onStageResize( ::openfl::events::Event e){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Floating","_onStageResize",0x87081d1f,"ru.stablex.ui.widgets.Floating._onStageResize","ru/stablex/ui/widgets/Floating.hx",107,0x4373a7bb)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(e,"e")
HXLINE( 108)		if (hx::IsNotEq( this->parent,::openfl::Lib_obj::current->stage )) {
HXLINE( 108)			return;
            		}
HXLINE( 110)		HX_VAR( Float,scale);
HXDLIN( 110)		if ((this->scaleContent == (int)0)) {
HXLINE( 110)			scale = ((Float)0.001);
            		}
            		else {
HXLINE( 110)			scale = this->scaleContent;
            		}
HXLINE( 111)		HX_VARI( Float,width) = ((Float)::openfl::Lib_obj::current->stage->stageWidth / (Float)scale);
HXLINE( 112)		HX_VARI( Float,height) = ((Float)::openfl::Lib_obj::current->stage->stageHeight / (Float)scale);
HXLINE( 116)		Bool _hx_tmp;
HXDLIN( 116)		if (this->_widthUsePercent) {
HXLINE( 116)			_hx_tmp = this->_heightUsePercent;
            		}
            		else {
HXLINE( 116)			_hx_tmp = false;
            		}
HXDLIN( 116)		if (_hx_tmp) {
HXLINE( 117)			Float _hx_tmp1 = ((Float)(width * this->_widthPercent) / (Float)(int)100);
HXDLIN( 117)			Float _hx_tmp2 = ((Float)(height * this->_heightPercent) / (Float)(int)100);
HXDLIN( 117)			this->resize(_hx_tmp1,_hx_tmp2,true);
            		}
            		else {
HXLINE( 120)			Bool _hx_tmp3 = this->_widthUsePercent;
HXDLIN( 120)			if (_hx_tmp3) {
HXLINE( 121)				Float _hx_tmp4 = ((Float)(width * this->_widthPercent) / (Float)(int)100);
HXDLIN( 121)				this->resize(_hx_tmp4,this->_height,true);
            			}
            			else {
HXLINE( 124)				Bool _hx_tmp5 = this->_heightUsePercent;
HXDLIN( 124)				if (_hx_tmp5) {
HXLINE( 125)					Float _hx_tmp6 = this->_width;
HXDLIN( 125)					Float _hx_tmp7 = ((Float)(height * this->_heightPercent) / (Float)(int)100);
HXDLIN( 125)					this->resize(_hx_tmp6,_hx_tmp7,true);
            				}
            			}
            		}
HXLINE( 130)		{
HXLINE( 130)			HX_VARI( Int,_g) = this->_xUse;
HXDLIN( 130)			switch((int)(_g)){
            				case (int)2: {
HXLINE( 136)					Float _hx_tmp8 = ((Float)(width * this->_leftPercent) / (Float)(int)100);
HXDLIN( 136)					this->set_x(_hx_tmp8);
            				}
            				break;
            				case (int)3: {
HXLINE( 132)					Float _hx_tmp9 = ((width - this->_right) - this->_width);
HXDLIN( 132)					this->set_x(_hx_tmp9);
            				}
            				break;
            				case (int)4: {
HXLINE( 134)					Float _hx_tmp10 = (width - ((Float)(width * this->_rightPercent) / (Float)(int)100));
HXDLIN( 134)					Float _hx_tmp11 = this->get_w();
HXDLIN( 134)					this->set_x((_hx_tmp10 - _hx_tmp11));
            				}
            				break;
            			}
            		}
HXLINE( 139)		{
HXLINE( 139)			HX_VARI( Int,_g1) = this->_yUse;
HXDLIN( 139)			switch((int)(_g1)){
            				case (int)6: {
HXLINE( 145)					Float _hx_tmp12 = ((Float)(height * this->_topPercent) / (Float)(int)100);
HXDLIN( 145)					this->set_y(_hx_tmp12);
            				}
            				break;
            				case (int)7: {
HXLINE( 141)					Float _hx_tmp13 = ((height - this->_bottom) - this->_height);
HXDLIN( 141)					this->set_y(_hx_tmp13);
            				}
            				break;
            				case (int)8: {
HXLINE( 143)					Float _hx_tmp14 = ((height - ((Float)(height * this->_bottomPercent) / (Float)(int)100)) - this->_height);
HXDLIN( 143)					this->set_y(_hx_tmp14);
            				}
            				break;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Floating_obj,_onStageResize,(void))

 ::openfl::display::DisplayObject Floating_obj::getRenderTarget(){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Floating","getRenderTarget",0xdb23f632,"ru.stablex.ui.widgets.Floating.getRenderTarget","ru/stablex/ui/widgets/Floating.hx",156,0x4373a7bb)
            	HX_STACK_THIS(this)
HXLINE( 156)		Bool _hx_tmp = hx::IsNull( this->renderTo );
HXDLIN( 156)		if (_hx_tmp) {
HXLINE( 156)			return ::openfl::Lib_obj::current->stage;
            		}
            		else {
HXLINE( 156)			return ::ru::stablex::ui::UIBuilder_obj::_objects->get(this->renderTo).StaticCast<  ::ru::stablex::ui::widgets::Widget >();
            		}
HXDLIN( 156)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Floating_obj,getRenderTarget,return )

void Floating_obj::free(hx::Null< Bool >  __o_recursive){
Bool recursive = __o_recursive.Default(true);
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Floating","free",0x55f42d57,"ru.stablex.ui.widgets.Floating.free","ru/stablex/ui/widgets/Floating.hx",164,0x4373a7bb)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(recursive,"recursive")
HXLINE( 165)		::openfl::Lib_obj::current->stage->removeEventListener(HX_("resize",f4,59,7b,08),this->_onStageResize_dyn(),null());
HXLINE( 166)		this->super::free(recursive);
            	}


Float Floating_obj::set_scaleContent(Float scaleContent){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Floating","set_scaleContent",0x017f6af7,"ru.stablex.ui.widgets.Floating.set_scaleContent","ru/stablex/ui/widgets/Floating.hx",174,0x4373a7bb)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(scaleContent,"scaleContent")
HXLINE( 175)		Float _hx_tmp = this->set_scaleY(scaleContent);
HXDLIN( 175)		this->set_scaleX(_hx_tmp);
HXLINE( 176)		this->scaleContent = scaleContent;
HXLINE( 178)		Bool _hx_tmp1;
HXDLIN( 178)		Bool _hx_tmp2;
HXDLIN( 178)		Bool _hx_tmp3 = hx::IsNull( this->renderTo );
HXDLIN( 178)		if (_hx_tmp3) {
HXLINE( 178)			_hx_tmp2 = this->created;
            		}
            		else {
HXLINE( 178)			_hx_tmp2 = false;
            		}
HXDLIN( 178)		if (_hx_tmp2) {
HXLINE( 178)			_hx_tmp1 = hx::IsNotNull( this->parent );
            		}
            		else {
HXLINE( 178)			_hx_tmp1 = false;
            		}
HXDLIN( 178)		if (_hx_tmp1) {
HXLINE( 179)			this->_onStageResize(null());
            		}
HXLINE( 182)		return scaleContent;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Floating_obj,set_scaleContent,return )


Floating_obj::Floating_obj()
{
}

void Floating_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Floating);
	HX_MARK_MEMBER_NAME(shown,"shown");
	HX_MARK_MEMBER_NAME(renderTo,"renderTo");
	HX_MARK_MEMBER_NAME(scaleContent,"scaleContent");
	 ::ru::stablex::ui::widgets::Box_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Floating_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(shown,"shown");
	HX_VISIT_MEMBER_NAME(renderTo,"renderTo");
	HX_VISIT_MEMBER_NAME(scaleContent,"scaleContent");
	 ::ru::stablex::ui::widgets::Box_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Floating_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"show") ) { return hx::Val( show_dyn()); }
		if (HX_FIELD_EQ(inName,"hide") ) { return hx::Val( hide_dyn()); }
		if (HX_FIELD_EQ(inName,"free") ) { return hx::Val( free_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"shown") ) { return hx::Val( shown); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"renderTo") ) { return hx::Val( renderTo); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"scaleContent") ) { return hx::Val( scaleContent); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_onStageResize") ) { return hx::Val( _onStageResize_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"getRenderTarget") ) { return hx::Val( getRenderTarget_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_usingParentSize") ) { return hx::Val( _usingParentSize_dyn()); }
		if (HX_FIELD_EQ(inName,"set_scaleContent") ) { return hx::Val( set_scaleContent_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Floating_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"shown") ) { shown=inValue.Cast< Bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"renderTo") ) { renderTo=inValue.Cast< ::String >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"scaleContent") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_scaleContent(inValue) );scaleContent=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Floating_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("shown","\xd1","\x88","\x27","\x7c"));
	outFields->push(HX_HCSTRING("renderTo","\x71","\xb6","\xdb","\xb2"));
	outFields->push(HX_HCSTRING("scaleContent","\xcf","\x2b","\xc1","\xb0"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Floating_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(Floating_obj,shown),HX_HCSTRING("shown","\xd1","\x88","\x27","\x7c")},
	{hx::fsString,(int)offsetof(Floating_obj,renderTo),HX_HCSTRING("renderTo","\x71","\xb6","\xdb","\xb2")},
	{hx::fsFloat,(int)offsetof(Floating_obj,scaleContent),HX_HCSTRING("scaleContent","\xcf","\x2b","\xc1","\xb0")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Floating_obj_sStaticStorageInfo = 0;
#endif

static ::String Floating_obj_sMemberFields[] = {
	HX_HCSTRING("shown","\xd1","\x88","\x27","\x7c"),
	HX_HCSTRING("renderTo","\x71","\xb6","\xdb","\xb2"),
	HX_HCSTRING("scaleContent","\xcf","\x2b","\xc1","\xb0"),
	HX_HCSTRING("show","\xfd","\xd4","\x52","\x4c"),
	HX_HCSTRING("hide","\xc2","\x34","\x0e","\x45"),
	HX_HCSTRING("_usingParentSize","\xf0","\x27","\x84","\x0d"),
	HX_HCSTRING("_onStageResize","\xb4","\xe8","\xb0","\x3c"),
	HX_HCSTRING("getRenderTarget","\xfd","\x4c","\x2d","\x19"),
	HX_HCSTRING("free","\xac","\x9c","\xc2","\x43"),
	HX_HCSTRING("set_scaleContent","\xcc","\x05","\xa2","\x0b"),
	::String(null()) };

static void Floating_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Floating_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Floating_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Floating_obj::__mClass,"__mClass");
};

#endif

hx::Class Floating_obj::__mClass;

void Floating_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("ru.stablex.ui.widgets.Floating","\xa3","\x8f","\xc2","\x3f");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Floating_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Floating_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Floating_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Floating_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Floating_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Floating_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace ru
} // end namespace stablex
} // end namespace ui
} // end namespace widgets
