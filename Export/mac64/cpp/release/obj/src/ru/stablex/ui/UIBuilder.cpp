// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_List
#include <List.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_ValueType
#include <ValueType.h>
#endif
#ifndef INCLUDED__List_ListNode
#include <_List/ListNode.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_ru_stablex_TweenSprite
#include <ru/stablex/TweenSprite.h>
#endif
#ifndef INCLUDED_ru_stablex_ui_UIBuilder
#include <ru/stablex/ui/UIBuilder.h>
#endif
#ifndef INCLUDED_ru_stablex_ui_skins_Skin
#include <ru/stablex/ui/skins/Skin.h>
#endif
#ifndef INCLUDED_ru_stablex_ui_widgets_Widget
#include <ru/stablex/ui/widgets/Widget.h>
#endif

namespace ru{
namespace stablex{
namespace ui{

void UIBuilder_obj::__construct() { }

Dynamic UIBuilder_obj::__CreateEmpty() { return new UIBuilder_obj; }

hx::ObjectPtr< UIBuilder_obj > UIBuilder_obj::__new()
{
	hx::ObjectPtr< UIBuilder_obj > _hx_result = new UIBuilder_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic UIBuilder_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< UIBuilder_obj > _hx_result = new UIBuilder_obj();
	_hx_result->__construct();
	return _hx_result;
}

 ::haxe::ds::StringMap UIBuilder_obj::defaults;

 ::openfl::events::EventDispatcher UIBuilder_obj::dispatcher;

 ::haxe::ds::StringMap UIBuilder_obj::_objects;

 ::haxe::ds::StringMap UIBuilder_obj::skins;

Int UIBuilder_obj::_nextId;

 ::List UIBuilder_obj::_skinQueue;

::String UIBuilder_obj::pos( ::Dynamic pos){
            	HX_STACK_FRAME("ru.stablex.ui.UIBuilder","pos",0x9b2eab6f,"ru.stablex.ui.UIBuilder.pos","ru/stablex/ui/UIBuilder.hx",105,0xeeae4854)
            	HX_STACK_ARG(pos,"pos")
HXLINE( 105)		return ((( (::String)(pos->__Field(HX_("className",a3,92,3d,dc),hx::paccDynamic)) ) + HX_(":",3a,00,00,00)) + ( (Int)(pos->__Field(HX_("lineNumber",dd,81,22,76),hx::paccDynamic)) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(UIBuilder_obj,pos,return )

::String UIBuilder_obj::createId(){
            	HX_STACK_FRAME("ru.stablex.ui.UIBuilder","createId",0xa96bf63c,"ru.stablex.ui.UIBuilder.createId","ru/stablex/ui/UIBuilder.hx",912,0xeeae4854)
HXLINE( 912)		::String _hx_tmp = ::Std_obj::string(::ru::stablex::ui::UIBuilder_obj::_nextId++);
HXDLIN( 912)		return (HX_("__widget__",04,ef,09,d5) + _hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(UIBuilder_obj,createId,return )

 ::Dynamic UIBuilder_obj::create(hx::Class cls, ::Dynamic properties,::cpp::VirtualArray constructorArguments){
            	HX_STACK_FRAME("ru.stablex.ui.UIBuilder","create",0xe505f401,"ru.stablex.ui.UIBuilder.create","ru/stablex/ui/UIBuilder.hx",928,0xeeae4854)
            	HX_STACK_ARG(cls,"cls")
            	HX_STACK_ARG(properties,"properties")
            	HX_STACK_ARG(constructorArguments,"constructorArguments")
HXLINE( 930)		::cpp::VirtualArray _hx_tmp;
HXDLIN( 930)		Bool _hx_tmp1 = hx::IsNull( constructorArguments );
HXDLIN( 930)		if (_hx_tmp1) {
HXLINE( 930)			_hx_tmp = ::cpp::VirtualArray_obj::__new(0);
            		}
            		else {
HXLINE( 930)			_hx_tmp = constructorArguments;
            		}
HXDLIN( 930)		HX_VARI(  ::ru::stablex::ui::widgets::Widget,obj) = ( ( ::ru::stablex::ui::widgets::Widget)(::Type_obj::createInstance(cls,_hx_tmp)) );
HXLINE( 933)		obj->defaults = ::Reflect_obj::field(properties,HX_("defaults",92,d0,99,af));
HXLINE( 934)		Bool _hx_tmp2 = hx::IsNull( obj->defaults );
HXDLIN( 934)		if (_hx_tmp2) {
HXLINE( 934)			obj->defaults = HX_("Default",a1,00,15,69);
            		}
HXLINE( 935)		Bool _hx_tmp3 = !(::Std_obj::is(obj,hx::ClassOf< ::ru::stablex::ui::widgets::Widget >()));
HXDLIN( 935)		if (!(_hx_tmp3)) {
HXLINE( 935)			HX_VARI_NAME(  ::ru::stablex::ui::widgets::Widget,obj1,"obj") = obj;
HXDLIN( 935)			hx::Class _hx_tmp4 = ::Type_obj::getClass(obj1);
HXDLIN( 935)			HX_VARI( ::String,clsName) = ::Type_obj::getClassName(_hx_tmp4);
HXDLIN( 935)			Int _hx_tmp5 = (clsName.length - (int)1);
HXDLIN( 935)			Int _hx_tmp6 = clsName.lastIndexOf(HX_(".",2e,00,00,00),_hx_tmp5);
HXDLIN( 935)			::String key = clsName.substr((_hx_tmp6 + (int)1),null());
HXDLIN( 935)			HX_VARI(  ::haxe::ds::StringMap,widgetDefaults) = ::ru::stablex::ui::UIBuilder_obj::defaults->get(key).StaticCast<  ::haxe::ds::StringMap >();
HXDLIN( 935)			Bool _hx_tmp7 = hx::IsNotNull( widgetDefaults );
HXDLIN( 935)			if (_hx_tmp7) {
HXLINE( 935)				HX_VARI( ::Array< ::String >,defs) = obj1->defaults.split(HX_(",",2c,00,00,00));
HXDLIN( 935)				{
HXLINE( 935)					HX_VARI( Int,_g1) = (int)0;
HXDLIN( 935)					HX_VARI( Int,_g) = defs->length;
HXDLIN( 935)					while((_g1 < _g)){
HXLINE( 935)						HX_VARI( Int,i) = _g1++;
HXDLIN( 935)						::String _hx_tmp8 = defs->__get(i);
HXDLIN( 935)						HX_VARI(  ::Dynamic,defaultsFn) = widgetDefaults->get(_hx_tmp8);
HXDLIN( 935)						Bool _hx_tmp9 = hx::IsNotNull( defaultsFn );
HXDLIN( 935)						if (_hx_tmp9) {
HXLINE( 935)							defaultsFn(obj1);
            						}
            					}
            				}
            			}
            		}
HXLINE( 939)		HX_VARI( ::cpp::VirtualArray,children) = ( (::cpp::VirtualArray)(::Reflect_obj::field(properties,HX_("children",3f,19,6a,70))) );
HXLINE( 940)		Bool _hx_tmp10 = hx::IsNotNull( children );
HXDLIN( 940)		if (_hx_tmp10) {
HXLINE( 941)			::Reflect_obj::deleteField(properties,HX_("children",3f,19,6a,70));
            		}
HXLINE( 946)		Bool _hx_tmp11 = hx::IsNotNull( properties );
HXDLIN( 946)		if (_hx_tmp11) {
HXLINE( 947)			::ru::stablex::ui::UIBuilder_obj::apply(obj,properties);
            		}
HXLINE( 950)		obj->_onInitialize();
HXLINE( 953)		Bool _hx_tmp12 = hx::IsNotNull( children );
HXDLIN( 953)		if (_hx_tmp12) {
HXLINE( 954)			HX_VARI_NAME( Int,_g11,"_g1") = (int)0;
HXDLIN( 954)			HX_VARI_NAME( Int,_g2,"_g") = children->get_length();
HXDLIN( 954)			while((_g11 < _g2)){
HXLINE( 954)				HX_VARI_NAME( Int,i1,"i") = _g11++;
HXLINE( 955)				 ::Dynamic _hx_tmp13 = children->__get(i1);
HXDLIN( 955)				Bool _hx_tmp14 = ::Std_obj::is(_hx_tmp13,hx::ClassOf< ::ru::stablex::ui::widgets::Widget >());
HXDLIN( 955)				if (_hx_tmp14) {
HXLINE( 956)					 ::Dynamic _hx_tmp15 = children->__get(i1);
HXDLIN( 956)					obj->addChild(_hx_tmp15);
            				}
            			}
            		}
HXLINE( 961)		obj->_onCreate();
HXLINE( 963)		return obj;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(UIBuilder_obj,create,return )

void UIBuilder_obj::apply( ::Dynamic obj, ::Dynamic properties){
            	HX_STACK_FRAME("ru.stablex.ui.UIBuilder","apply",0x22684009,"ru.stablex.ui.UIBuilder.apply","ru/stablex/ui/UIBuilder.hx",988,0xeeae4854)
            	HX_STACK_ARG(obj,"obj")
            	HX_STACK_ARG(properties,"properties")
HXLINE( 988)		HX_VARI( Int,_g) = (int)0;
HXDLIN( 988)		HX_VARI( ::Array< ::String >,_g1) = ::Reflect_obj::fields(properties);
HXDLIN( 988)		while((_g < _g1->length)){
HXLINE( 988)			HX_VARI( ::String,property) = _g1->__get(_g);
HXDLIN( 988)			++_g;
HXLINE( 991)			 ::Dynamic _hx_tmp = ::Reflect_obj::field(properties,property);
HXDLIN( 991)			::hx::EnumBase _hx_tmp1 = ::Type_obj::_hx_typeof(_hx_tmp);
HXDLIN( 991)			if (hx::IsEq( _hx_tmp1,::ValueType_obj::TObject_dyn() )) {
HXLINE( 992)				 ::Dynamic _hx_tmp2 = ::Reflect_obj::getProperty(obj,property);
HXDLIN( 992)				 ::Dynamic _hx_tmp3 = ::Reflect_obj::field(properties,property);
HXDLIN( 992)				::ru::stablex::ui::UIBuilder_obj::apply(_hx_tmp2,_hx_tmp3);
            			}
            			else {
HXLINE( 996)				 ::Dynamic _hx_tmp4 = ::Reflect_obj::field(properties,property);
HXDLIN( 996)				::Reflect_obj::setProperty(obj,property,_hx_tmp4);
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(UIBuilder_obj,apply,(void))

void UIBuilder_obj::applyDefaults( ::Dynamic _obj){
            	HX_STACK_FRAME("ru.stablex.ui.UIBuilder","applyDefaults",0x18707dbb,"ru.stablex.ui.UIBuilder.applyDefaults","ru/stablex/ui/UIBuilder.hx",1007,0xeeae4854)
            	HX_STACK_ARG(_obj,"_obj")
HXLINE(1008)		Bool _hx_tmp = !(::Std_obj::is(_obj,hx::ClassOf< ::ru::stablex::ui::widgets::Widget >()));
HXDLIN(1008)		if (_hx_tmp) {
HXLINE(1008)			return;
            		}
HXLINE(1009)		HX_VARI(  ::ru::stablex::ui::widgets::Widget,obj) = hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(_obj);
HXLINE(1010)		hx::Class _hx_tmp1 = ::Type_obj::getClass(obj);
HXDLIN(1010)		HX_VARI( ::String,clsName) = ::Type_obj::getClassName(_hx_tmp1);
HXLINE(1011)		Int _hx_tmp2 = (clsName.length - (int)1);
HXDLIN(1011)		Int _hx_tmp3 = clsName.lastIndexOf(HX_(".",2e,00,00,00),_hx_tmp2);
HXDLIN(1011)		::String key = clsName.substr((_hx_tmp3 + (int)1),null());
HXDLIN(1011)		HX_VARI(  ::haxe::ds::StringMap,widgetDefaults) = ::ru::stablex::ui::UIBuilder_obj::defaults->get(key).StaticCast<  ::haxe::ds::StringMap >();
HXLINE(1013)		Bool _hx_tmp4 = hx::IsNotNull( widgetDefaults );
HXDLIN(1013)		if (_hx_tmp4) {
HXLINE(1014)			HX_VARI( ::Array< ::String >,defs) = obj->defaults.split(HX_(",",2c,00,00,00));
HXLINE(1015)			{
HXLINE(1015)				HX_VARI( Int,_g1) = (int)0;
HXDLIN(1015)				HX_VARI( Int,_g) = defs->length;
HXDLIN(1015)				while((_g1 < _g)){
HXLINE(1015)					HX_VARI( Int,i) = _g1++;
HXLINE(1016)					::String _hx_tmp5 = defs->__get(i);
HXDLIN(1016)					HX_VARI(  ::Dynamic,defaultsFn) = widgetDefaults->get(_hx_tmp5);
HXLINE(1017)					Bool _hx_tmp6 = hx::IsNotNull( defaultsFn );
HXDLIN(1017)					if (_hx_tmp6) {
HXLINE(1018)						defaultsFn(obj);
            					}
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(UIBuilder_obj,applyDefaults,(void))

void UIBuilder_obj::initCreatedWidget( ::Dynamic maybeWidget){
            	HX_STACK_FRAME("ru.stablex.ui.UIBuilder","initCreatedWidget",0x672459b7,"ru.stablex.ui.UIBuilder.initCreatedWidget","ru/stablex/ui/UIBuilder.hx",1025,0xeeae4854)
            	HX_STACK_ARG(maybeWidget,"maybeWidget")
HXLINE(1025)		Bool _hx_tmp = ::Std_obj::is(maybeWidget,hx::ClassOf< ::ru::stablex::ui::widgets::Widget >());
HXDLIN(1025)		if (_hx_tmp) {
HXLINE(1026)			HX_VARI(  ::ru::stablex::ui::widgets::Widget,widget) = hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(maybeWidget);
HXLINE(1027)			Bool _hx_tmp1 = !(::Std_obj::is(widget,hx::ClassOf< ::ru::stablex::ui::widgets::Widget >()));
HXDLIN(1027)			if (!(_hx_tmp1)) {
HXLINE(1027)				HX_VARI(  ::ru::stablex::ui::widgets::Widget,obj) = widget;
HXDLIN(1027)				hx::Class _hx_tmp2 = ::Type_obj::getClass(obj);
HXDLIN(1027)				HX_VARI( ::String,clsName) = ::Type_obj::getClassName(_hx_tmp2);
HXDLIN(1027)				Int _hx_tmp3 = (clsName.length - (int)1);
HXDLIN(1027)				Int _hx_tmp4 = clsName.lastIndexOf(HX_(".",2e,00,00,00),_hx_tmp3);
HXDLIN(1027)				::String key = clsName.substr((_hx_tmp4 + (int)1),null());
HXDLIN(1027)				HX_VARI(  ::haxe::ds::StringMap,widgetDefaults) = ::ru::stablex::ui::UIBuilder_obj::defaults->get(key).StaticCast<  ::haxe::ds::StringMap >();
HXDLIN(1027)				Bool _hx_tmp5 = hx::IsNotNull( widgetDefaults );
HXDLIN(1027)				if (_hx_tmp5) {
HXLINE(1027)					HX_VARI( ::Array< ::String >,defs) = obj->defaults.split(HX_(",",2c,00,00,00));
HXDLIN(1027)					{
HXLINE(1027)						HX_VARI( Int,_g1) = (int)0;
HXDLIN(1027)						HX_VARI( Int,_g) = defs->length;
HXDLIN(1027)						while((_g1 < _g)){
HXLINE(1027)							HX_VARI( Int,i) = _g1++;
HXDLIN(1027)							::String _hx_tmp6 = defs->__get(i);
HXDLIN(1027)							HX_VARI(  ::Dynamic,defaultsFn) = widgetDefaults->get(_hx_tmp6);
HXDLIN(1027)							Bool _hx_tmp7 = hx::IsNotNull( defaultsFn );
HXDLIN(1027)							if (_hx_tmp7) {
HXLINE(1027)								defaultsFn(obj);
            							}
            						}
            					}
            				}
            			}
HXLINE(1028)			widget->_onInitialize();
HXLINE(1029)			widget->_onCreate();
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(UIBuilder_obj,initCreatedWidget,(void))

 ::Dynamic UIBuilder_obj::skin(::String skinName){
            	HX_STACK_FRAME("ru.stablex.ui.UIBuilder","skin",0x2f9fe842,"ru.stablex.ui.UIBuilder.skin","ru/stablex/ui/UIBuilder.hx",1043,0xeeae4854)
            	HX_STACK_ARG(skinName,"skinName")
HXLINE(1043)		return ::ru::stablex::ui::UIBuilder_obj::skins->get(skinName);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(UIBuilder_obj,skin,return )

 ::ru::stablex::ui::widgets::Widget UIBuilder_obj::get(::String id){
            	HX_STACK_FRAME("ru.stablex.ui.UIBuilder","get",0x9b27ce71,"ru.stablex.ui.UIBuilder.get","ru/stablex/ui/UIBuilder.hx",1052,0xeeae4854)
            	HX_STACK_ARG(id,"id")
HXLINE(1052)		return ::ru::stablex::ui::UIBuilder_obj::_objects->get(id).StaticCast<  ::ru::stablex::ui::widgets::Widget >();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(UIBuilder_obj,get,return )

 ::Dynamic UIBuilder_obj::getAs(::String id,hx::Class cls){
            	HX_STACK_FRAME("ru.stablex.ui.UIBuilder","getAs",0x8f8d45c3,"ru.stablex.ui.UIBuilder.getAs","ru/stablex/ui/UIBuilder.hx",1060,0xeeae4854)
            	HX_STACK_ARG(id,"id")
            	HX_STACK_ARG(cls,"cls")
HXLINE(1061)		HX_VARI(  ::ru::stablex::ui::widgets::Widget,w) = ::ru::stablex::ui::UIBuilder_obj::_objects->get(id).StaticCast<  ::ru::stablex::ui::widgets::Widget >();
HXLINE(1062)		Bool _hx_tmp = ::Std_obj::is(w,cls);
HXDLIN(1062)		if (_hx_tmp) {
HXLINE(1062)			return w;
            		}
            		else {
HXLINE(1062)			return null();
            		}
HXDLIN(1062)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(UIBuilder_obj,getAs,return )

void UIBuilder_obj::save( ::ru::stablex::ui::widgets::Widget obj){
            	HX_STACK_FRAME("ru.stablex.ui.UIBuilder","save",0x2f985d02,"ru.stablex.ui.UIBuilder.save","ru/stablex/ui/UIBuilder.hx",1071,0xeeae4854)
            	HX_STACK_ARG(obj,"obj")
HXLINE(1071)		Bool _hx_tmp = ::ru::stablex::ui::UIBuilder_obj::_objects->exists(obj->id);
HXDLIN(1071)		if (_hx_tmp) {
HXLINE(1072)			HX_STACK_DO_THROW(((HX_("Widget id \"",59,36,9e,8f) + obj->id) + HX_("\" is already used",bd,b5,7b,b9)));
            		}
            		else {
HXLINE(1074)			::ru::stablex::ui::UIBuilder_obj::_objects->set(obj->id,obj);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(UIBuilder_obj,save,(void))

void UIBuilder_obj::forget(::String id){
            	HX_STACK_FRAME("ru.stablex.ui.UIBuilder","forget",0x66809232,"ru.stablex.ui.UIBuilder.forget","ru/stablex/ui/UIBuilder.hx",1084,0xeeae4854)
            	HX_STACK_ARG(id,"id")
HXLINE(1084)		::ru::stablex::ui::UIBuilder_obj::_objects->remove(id);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(UIBuilder_obj,forget,(void))

void UIBuilder_obj::queueSkin( ::ru::stablex::ui::widgets::Widget w){
            	HX_STACK_FRAME("ru.stablex.ui.UIBuilder","queueSkin",0x1a2b10c9,"ru.stablex.ui.UIBuilder.queueSkin","ru/stablex/ui/UIBuilder.hx",1093,0xeeae4854)
            	HX_STACK_ARG(w,"w")
HXLINE(1093)		Bool _hx_tmp;
HXDLIN(1093)		Bool _hx_tmp1 = hx::IsNotNull( w->skin );
HXDLIN(1093)		if (_hx_tmp1) {
HXLINE(1093)			_hx_tmp = !(w->_skinQueued);
            		}
            		else {
HXLINE(1093)			_hx_tmp = false;
            		}
HXDLIN(1093)		if (_hx_tmp) {
HXLINE(1094)			::ru::stablex::ui::UIBuilder_obj::_skinQueue->add(w);
HXLINE(1095)			w->_skinQueued = true;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(UIBuilder_obj,queueSkin,(void))

void UIBuilder_obj::skinQueue( ::openfl::events::Event e){
            	HX_STACK_FRAME("ru.stablex.ui.UIBuilder","skinQueue",0xf05ce5ef,"ru.stablex.ui.UIBuilder.skinQueue","ru/stablex/ui/UIBuilder.hx",1110,0xeeae4854)
            	HX_STACK_ARG(e,"e")
HXLINE(1110)		Bool _hx_tmp = (::ru::stablex::ui::UIBuilder_obj::_skinQueue->length > (int)0);
HXDLIN(1110)		if (_hx_tmp) {
HXLINE(1112)			HX_VARI(  ::List,lst) = ::ru::stablex::ui::UIBuilder_obj::_skinQueue;
HXLINE(1114)			::ru::stablex::ui::UIBuilder_obj::_skinQueue =  ::List_obj::__new();
HXLINE(1116)			{
HXLINE(1116)				HX_VARI(  ::_List::ListNode,_g_head) = lst->h;
HXDLIN(1116)				while(true){
HXLINE(1116)					Bool _hx_tmp1 = !(hx::IsNotNull( _g_head ));
HXDLIN(1116)					if (_hx_tmp1) {
HXLINE(1116)						goto _hx_goto_5;
            					}
HXDLIN(1116)					HX_VARI(  ::ru::stablex::ui::widgets::Widget,val) = ( ( ::ru::stablex::ui::widgets::Widget)(_g_head->item) );
HXLINE(1104)					_g_head = _g_head->next;
HXLINE(1117)					val->applySkin();
HXLINE(1118)					val->_skinQueued = false;
            				}
            				_hx_goto_5:;
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(UIBuilder_obj,skinQueue,(void))

HX_BEGIN_DEFAULT_FUNC(__default_customStringReplace,UIBuilder_obj)
::String _hx_run(::String s){
            	HX_STACK_FRAME("ru.stablex.ui.UIBuilder","__default_customStringReplace",0x13462baf,"ru.stablex.ui.UIBuilder.__default_customStringReplace","ru/stablex/ui/UIBuilder.hx",1132,0xeeae4854)
            	HX_STACK_ARG(s,"s")
HXLINE(1132)		return s;
            	}
HX_END_LOCAL_FUNC1(return )
HX_END_DEFAULT_FUNC

::Dynamic UIBuilder_obj::customStringReplace;


UIBuilder_obj::UIBuilder_obj()
{
}

bool UIBuilder_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"pos") ) { outValue = pos_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get") ) { outValue = get_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"skin") ) { outValue = skin_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"save") ) { outValue = save_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"skins") ) { outValue = skins; return true; }
		if (HX_FIELD_EQ(inName,"apply") ) { outValue = apply_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getAs") ) { outValue = getAs_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { outValue = create_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"forget") ) { outValue = forget_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_nextId") ) { outValue = _nextId; return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"defaults") ) { outValue = defaults; return true; }
		if (HX_FIELD_EQ(inName,"_objects") ) { outValue = _objects; return true; }
		if (HX_FIELD_EQ(inName,"createId") ) { outValue = createId_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"queueSkin") ) { outValue = queueSkin_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"skinQueue") ) { outValue = skinQueue_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"dispatcher") ) { outValue = dispatcher; return true; }
		if (HX_FIELD_EQ(inName,"_skinQueue") ) { outValue = _skinQueue; return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"applyDefaults") ) { outValue = applyDefaults_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"initCreatedWidget") ) { outValue = initCreatedWidget_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"customStringReplace") ) { outValue = customStringReplace; return true; }
	}
	return false;
}

bool UIBuilder_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"skins") ) { skins=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_nextId") ) { _nextId=ioValue.Cast< Int >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"defaults") ) { defaults=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		if (HX_FIELD_EQ(inName,"_objects") ) { _objects=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"dispatcher") ) { dispatcher=ioValue.Cast<  ::openfl::events::EventDispatcher >(); return true; }
		if (HX_FIELD_EQ(inName,"_skinQueue") ) { _skinQueue=ioValue.Cast<  ::List >(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"customStringReplace") ) { customStringReplace=ioValue.Cast<  ::Dynamic >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *UIBuilder_obj_sMemberStorageInfo = 0;
static hx::StaticInfo UIBuilder_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &UIBuilder_obj::defaults,HX_HCSTRING("defaults","\x92","\xd0","\x99","\xaf")},
	{hx::fsObject /*::openfl::events::EventDispatcher*/ ,(void *) &UIBuilder_obj::dispatcher,HX_HCSTRING("dispatcher","\xa7","\xc9","\x00","\x5a")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &UIBuilder_obj::_objects,HX_HCSTRING("_objects","\x55","\xc2","\x07","\xbc")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &UIBuilder_obj::skins,HX_HCSTRING("skins","\x56","\x97","\x1e","\x7e")},
	{hx::fsInt,(void *) &UIBuilder_obj::_nextId,HX_HCSTRING("_nextId","\x4d","\x39","\xdb","\xe0")},
	{hx::fsObject /*::List*/ ,(void *) &UIBuilder_obj::_skinQueue,HX_HCSTRING("_skinQueue","\x95","\xbd","\xd1","\x00")},
	{hx::fsObject /*Dynamic*/ ,(void *) &UIBuilder_obj::customStringReplace,HX_HCSTRING("customStringReplace","\xf2","\x80","\x39","\xb7")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void UIBuilder_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(UIBuilder_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(UIBuilder_obj::defaults,"defaults");
	HX_MARK_MEMBER_NAME(UIBuilder_obj::dispatcher,"dispatcher");
	HX_MARK_MEMBER_NAME(UIBuilder_obj::_objects,"_objects");
	HX_MARK_MEMBER_NAME(UIBuilder_obj::skins,"skins");
	HX_MARK_MEMBER_NAME(UIBuilder_obj::_nextId,"_nextId");
	HX_MARK_MEMBER_NAME(UIBuilder_obj::_skinQueue,"_skinQueue");
	HX_MARK_MEMBER_NAME(UIBuilder_obj::customStringReplace,"customStringReplace");
};

#ifdef HXCPP_VISIT_ALLOCS
static void UIBuilder_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(UIBuilder_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(UIBuilder_obj::defaults,"defaults");
	HX_VISIT_MEMBER_NAME(UIBuilder_obj::dispatcher,"dispatcher");
	HX_VISIT_MEMBER_NAME(UIBuilder_obj::_objects,"_objects");
	HX_VISIT_MEMBER_NAME(UIBuilder_obj::skins,"skins");
	HX_VISIT_MEMBER_NAME(UIBuilder_obj::_nextId,"_nextId");
	HX_VISIT_MEMBER_NAME(UIBuilder_obj::_skinQueue,"_skinQueue");
	HX_VISIT_MEMBER_NAME(UIBuilder_obj::customStringReplace,"customStringReplace");
};

#endif

hx::Class UIBuilder_obj::__mClass;

static ::String UIBuilder_obj_sStaticFields[] = {
	HX_HCSTRING("defaults","\x92","\xd0","\x99","\xaf"),
	HX_HCSTRING("dispatcher","\xa7","\xc9","\x00","\x5a"),
	HX_HCSTRING("_objects","\x55","\xc2","\x07","\xbc"),
	HX_HCSTRING("skins","\x56","\x97","\x1e","\x7e"),
	HX_HCSTRING("_nextId","\x4d","\x39","\xdb","\xe0"),
	HX_HCSTRING("_skinQueue","\x95","\xbd","\xd1","\x00"),
	HX_HCSTRING("pos","\x94","\x5d","\x55","\x00"),
	HX_HCSTRING("createId","\xf7","\x5d","\xf4","\x2b"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("apply","\x6e","\x85","\x3b","\x24"),
	HX_HCSTRING("applyDefaults","\x20","\x30","\xcf","\xef"),
	HX_HCSTRING("initCreatedWidget","\x9c","\xa2","\x3c","\xc0"),
	HX_HCSTRING("skin","\x7d","\x16","\x55","\x4c"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	HX_HCSTRING("getAs","\x28","\x8b","\x60","\x91"),
	HX_HCSTRING("save","\x3d","\x8b","\x4d","\x4c"),
	HX_HCSTRING("forget","\x2d","\x05","\x8a","\xfd"),
	HX_HCSTRING("queueSkin","\xae","\x6c","\xfd","\xce"),
	HX_HCSTRING("skinQueue","\xd4","\x41","\x2f","\xa5"),
	HX_HCSTRING("customStringReplace","\xf2","\x80","\x39","\xb7"),
	::String(null())
};

void UIBuilder_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("ru.stablex.ui.UIBuilder","\xc9","\xe4","\xa4","\x42");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &UIBuilder_obj::__GetStatic;
	__mClass->mSetStaticField = &UIBuilder_obj::__SetStatic;
	__mClass->mMarkFunc = UIBuilder_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(UIBuilder_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< UIBuilder_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = UIBuilder_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = UIBuilder_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = UIBuilder_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void UIBuilder_obj::__boot()
{
{
            	HX_STACK_FRAME("ru.stablex.ui.UIBuilder","boot",0x246655f7,"ru.stablex.ui.UIBuilder.boot","ru/stablex/ui/UIBuilder.hx",75,0xeeae4854)
HXLINE(  75)		defaults =  ::haxe::ds::StringMap_obj::__new();
            	}
{
            	HX_STACK_FRAME("ru.stablex.ui.UIBuilder","boot",0x246655f7,"ru.stablex.ui.UIBuilder.boot","ru/stablex/ui/UIBuilder.hx",78,0xeeae4854)
HXLINE(  78)		dispatcher =  ::openfl::events::EventDispatcher_obj::__new(null());
            	}
{
            	HX_STACK_FRAME("ru.stablex.ui.UIBuilder","boot",0x246655f7,"ru.stablex.ui.UIBuilder.boot","ru/stablex/ui/UIBuilder.hx",81,0xeeae4854)
HXLINE(  81)		_objects =  ::haxe::ds::StringMap_obj::__new();
            	}
{
            	HX_STACK_FRAME("ru.stablex.ui.UIBuilder","boot",0x246655f7,"ru.stablex.ui.UIBuilder.boot","ru/stablex/ui/UIBuilder.hx",84,0xeeae4854)
HXLINE(  84)		skins =  ::haxe::ds::StringMap_obj::__new();
            	}
{
            	HX_STACK_FRAME("ru.stablex.ui.UIBuilder","boot",0x246655f7,"ru.stablex.ui.UIBuilder.boot","ru/stablex/ui/UIBuilder.hx",87,0xeeae4854)
HXLINE(  87)		_nextId = (int)0;
            	}
{
            	HX_STACK_FRAME("ru.stablex.ui.UIBuilder","boot",0x246655f7,"ru.stablex.ui.UIBuilder.boot","ru/stablex/ui/UIBuilder.hx",90,0xeeae4854)
HXLINE(  90)		_skinQueue =  ::List_obj::__new();
            	}
	customStringReplace = new __default_customStringReplace;

}

} // end namespace ru
} // end namespace stablex
} // end namespace ui
