// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_List
#include <List.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_ru_stablex_TweenSprite
#include <ru/stablex/TweenSprite.h>
#endif
#ifndef INCLUDED_ru_stablex_ui_UIBuilder
#include <ru/stablex/ui/UIBuilder.h>
#endif
#ifndef INCLUDED_ru_stablex_ui_events_WidgetEvent
#include <ru/stablex/ui/events/WidgetEvent.h>
#endif
#ifndef INCLUDED_ru_stablex_ui_layouts_Layout
#include <ru/stablex/ui/layouts/Layout.h>
#endif
#ifndef INCLUDED_ru_stablex_ui_skins_Skin
#include <ru/stablex/ui/skins/Skin.h>
#endif
#ifndef INCLUDED_ru_stablex_ui_widgets_Box
#include <ru/stablex/ui/widgets/Box.h>
#endif
#ifndef INCLUDED_ru_stablex_ui_widgets_Floating
#include <ru/stablex/ui/widgets/Floating.h>
#endif
#ifndef INCLUDED_ru_stablex_ui_widgets_Tip
#include <ru/stablex/ui/widgets/Tip.h>
#endif
#ifndef INCLUDED_ru_stablex_ui_widgets_Widget
#include <ru/stablex/ui/widgets/Widget.h>
#endif

namespace ru{
namespace stablex{
namespace ui{
namespace widgets{

void Widget_obj::__construct(){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Widget","new",0x9d7992d3,"ru.stablex.ui.widgets.Widget.new","ru/stablex/ui/widgets/Widget.hx",22,0xb63704bd)
            	HX_STACK_THIS(this)
HXLINE( 124)		this->overflow = true;
HXLINE( 120)		this->_skinQueued = false;
HXLINE( 115)		this->_appliedSkin = null();
HXLINE( 110)		this->_bottomPercent = ((Float)0);
HXLINE( 109)		this->_bottom = ((Float)0);
HXLINE( 103)		this->_topPercent = ((Float)0);
HXLINE( 102)		this->_top = ((Float)0);
HXLINE(  93)		this->_yUse = (int)5;
HXLINE(  92)		this->_xUse = (int)1;
HXLINE(  89)		this->_rightPercent = ((Float)0);
HXLINE(  88)		this->_right = ((Float)0);
HXLINE(  82)		this->_leftPercent = ((Float)0);
HXLINE(  81)		this->_left = ((Float)0);
HXLINE(  72)		this->_resizing = false;
HXLINE(  70)		this->_silentResize = false;
HXLINE(  67)		this->_heightUsePercent = false;
HXLINE(  66)		this->_heightPercent = ((Float)0);
HXLINE(  65)		this->_height = ((Float)0);
HXLINE(  57)		this->minHeightByContent = false;
HXLINE(  55)		this->minWidthByContent = false;
HXLINE(  52)		this->_widthUsePercent = false;
HXLINE(  51)		this->_widthPercent = ((Float)0);
HXLINE(  50)		this->_width = ((Float)0);
HXLINE(  42)		this->destroyed = false;
HXLINE(  40)		this->created = false;
HXLINE(  38)		this->initialized = false;
HXLINE(  35)		this->defaults = HX_("Default",a1,00,15,69);
HXLINE( 148)		super::__construct();
HXLINE( 150)		::String _hx_tmp = ::Std_obj::string(::ru::stablex::ui::UIBuilder_obj::_nextId++);
HXDLIN( 150)		this->set_id((HX_("__widget__",04,ef,09,d5) + _hx_tmp));
            	}

Dynamic Widget_obj::__CreateEmpty() { return new Widget_obj; }

hx::ObjectPtr< Widget_obj > Widget_obj::__new()
{
	hx::ObjectPtr< Widget_obj > _hx_result = new Widget_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Widget_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Widget_obj > _hx_result = new Widget_obj();
	_hx_result->__construct();
	return _hx_result;
}

void Widget_obj::_onInitialize(){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Widget","_onInitialize",0x7603d661,"ru.stablex.ui.widgets.Widget._onInitialize","ru/stablex/ui/widgets/Widget.hx",159,0xb63704bd)
            	HX_STACK_THIS(this)
HXLINE( 160)		this->onInitialize();
HXLINE( 161)		this->initialized = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Widget_obj,_onInitialize,(void))

void Widget_obj::onInitialize(){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Widget","onInitialize",0xab84aa7c,"ru.stablex.ui.widgets.Widget.onInitialize","ru/stablex/ui/widgets/Widget.hx",170,0xb63704bd)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Widget_obj,onInitialize,(void))

void Widget_obj::_onCreate(){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Widget","_onCreate",0x1c59ef8d,"ru.stablex.ui.widgets.Widget._onCreate","ru/stablex/ui/widgets/Widget.hx",180,0xb63704bd)
            	HX_STACK_THIS(this)
HXLINE( 181)		this->onCreate();
HXLINE( 184)		this->refresh();
HXLINE( 187)		this->clearEvent(HX_("widgetInitialResize",34,2f,dc,47));
HXLINE( 189)		this->created = true;
HXLINE( 191)		this->dispatchEvent( ::ru::stablex::ui::events::WidgetEvent_obj::__new(HX_("widgetCreate",e0,b5,b2,80),null()));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Widget_obj,_onCreate,(void))

void Widget_obj::onCreate(){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Widget","onCreate",0x2f81da28,"ru.stablex.ui.widgets.Widget.onCreate","ru/stablex/ui/widgets/Widget.hx",200,0xb63704bd)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Widget_obj,onCreate,(void))

void Widget_obj::free(hx::Null< Bool >  __o_recursive){
Bool recursive = __o_recursive.Default(true);
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Widget","free",0x27a6fed9,"ru.stablex.ui.widgets.Widget.free","ru/stablex/ui/widgets/Widget.hx",209,0xb63704bd)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(recursive,"recursive")
HXLINE( 210)		this->destroyed = true;
HXLINE( 211)		this->dispatchEvent( ::ru::stablex::ui::events::WidgetEvent_obj::__new(HX_("widgetFree",90,aa,9b,55),null()));
HXLINE( 213)		this->super::free(recursive);
HXLINE( 216)		::ru::stablex::ui::UIBuilder_obj::_objects->remove(this->id);
            	}


void Widget_obj::applySkin(){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Widget","applySkin",0xaf2bb1be,"ru.stablex.ui.widgets.Widget.applySkin","ru/stablex/ui/widgets/Widget.hx",225,0xb63704bd)
            	HX_STACK_THIS(this)
HXLINE( 225)		Bool _hx_tmp;
HXDLIN( 225)		if (this->initialized) {
HXLINE( 225)			_hx_tmp = hx::IsNotNull( this->skin );
            		}
            		else {
HXLINE( 225)			_hx_tmp = false;
            		}
HXDLIN( 225)		if (_hx_tmp) {
HXLINE( 226)			this->skin->apply(hx::ObjectPtr<OBJ_>(this));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Widget_obj,applySkin,(void))

void Widget_obj::applyLayout(){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Widget","applyLayout",0x12dd5c2b,"ru.stablex.ui.widgets.Widget.applyLayout","ru/stablex/ui/widgets/Widget.hx",236,0xb63704bd)
            	HX_STACK_THIS(this)
HXLINE( 236)		Bool _hx_tmp = hx::IsNotNull( this->layout );
HXDLIN( 236)		if (_hx_tmp) {
HXLINE( 237)			this->layout->arrangeChildren(hx::ObjectPtr<OBJ_>(this));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Widget_obj,applyLayout,(void))

void Widget_obj::refresh(){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Widget","refresh",0x746451ce,"ru.stablex.ui.widgets.Widget.refresh","ru/stablex/ui/widgets/Widget.hx",246,0xb63704bd)
            	HX_STACK_THIS(this)
HXLINE( 247)		Bool _hx_tmp;
HXDLIN( 247)		Bool _hx_tmp1 = hx::IsNotNull( this->skin );
HXDLIN( 247)		if (_hx_tmp1) {
HXLINE( 247)			_hx_tmp = !(this->_skinQueued);
            		}
            		else {
HXLINE( 247)			_hx_tmp = false;
            		}
HXDLIN( 247)		if (_hx_tmp) {
HXLINE( 247)			::ru::stablex::ui::UIBuilder_obj::_skinQueue->add(hx::ObjectPtr<OBJ_>(this));
HXDLIN( 247)			this->_skinQueued = true;
            		}
HXLINE( 248)		this->applyLayout();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Widget_obj,refresh,(void))

void Widget_obj::_newParent( ::ru::stablex::ui::widgets::Widget newParent){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Widget","_newParent",0x74710f58,"ru.stablex.ui.widgets.Widget._newParent","ru/stablex/ui/widgets/Widget.hx",257,0xb63704bd)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(newParent,"newParent")
HXLINE( 257)		if (hx::IsNotEq( newParent,this->parent )) {
HXLINE( 257)			this->onNewParent(newParent);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Widget_obj,_newParent,(void))

void Widget_obj::_resizeWithPercent( ::ru::stablex::ui::widgets::Widget parent){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Widget","_resizeWithPercent",0x5e81bf79,"ru.stablex.ui.widgets.Widget._resizeWithPercent","ru/stablex/ui/widgets/Widget.hx",265,0xb63704bd)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(parent,"parent")
HXLINE( 266)		HX_VAR( Float,newWidth);
HXLINE( 267)		Bool _hx_tmp = this->_widthUsePercent;
HXLINE( 266)		if (_hx_tmp) {
HXLINE( 268)			Float _hx_tmp1 = parent->get_contentWidth();
HXLINE( 266)			newWidth = ((Float)(_hx_tmp1 * this->_widthPercent) / (Float)(int)100);
            		}
            		else {
HXLINE( 266)			newWidth = this->_width;
            		}
HXLINE( 271)		HX_VAR( Float,newHeight);
HXLINE( 272)		Bool _hx_tmp2 = this->_heightUsePercent;
HXLINE( 271)		if (_hx_tmp2) {
HXLINE( 273)			Float _hx_tmp3 = parent->get_contentHeight();
HXLINE( 271)			newHeight = ((Float)(_hx_tmp3 * this->_heightPercent) / (Float)(int)100);
            		}
            		else {
HXLINE( 271)			newHeight = this->_height;
            		}
HXLINE( 277)		Bool _hx_tmp4;
HXDLIN( 277)		Bool _hx_tmp5 = this->minWidthByContent;
HXDLIN( 277)		if (_hx_tmp5) {
HXLINE( 277)			Float _hx_tmp6 = this->get_contentWidth();
HXDLIN( 277)			_hx_tmp4 = (_hx_tmp6 < newWidth);
            		}
            		else {
HXLINE( 277)			_hx_tmp4 = false;
            		}
HXDLIN( 277)		if (_hx_tmp4) {
HXLINE( 278)			newWidth = this->get_contentWidth();
            		}
HXLINE( 280)		Bool _hx_tmp7;
HXDLIN( 280)		Bool _hx_tmp8 = this->minHeightByContent;
HXDLIN( 280)		if (_hx_tmp8) {
HXLINE( 280)			Float _hx_tmp9 = this->get_contentHeight();
HXDLIN( 280)			_hx_tmp7 = (_hx_tmp9 < newHeight);
            		}
            		else {
HXLINE( 280)			_hx_tmp7 = false;
            		}
HXDLIN( 280)		if (_hx_tmp7) {
HXLINE( 281)			newHeight = this->get_contentHeight();
            		}
HXLINE( 284)		this->resize(newWidth,newHeight,true);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Widget_obj,_resizeWithPercent,(void))

void Widget_obj::onNewParent( ::ru::stablex::ui::widgets::Widget newParent){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Widget","onNewParent",0x4b9ba1fe,"ru.stablex.ui.widgets.Widget.onNewParent","ru/stablex/ui/widgets/Widget.hx",292,0xb63704bd)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(newParent,"newParent")
HXLINE( 294)		Bool _hx_tmp;
HXDLIN( 294)		if (!(this->_widthUsePercent)) {
HXLINE( 294)			_hx_tmp = this->_heightUsePercent;
            		}
            		else {
HXLINE( 294)			_hx_tmp = true;
            		}
HXDLIN( 294)		if (_hx_tmp) {
HXLINE( 295)			this->_resizeWithPercent(newParent);
            		}
HXLINE( 299)		{
HXLINE( 299)			HX_VARI( Int,_g) = this->_xUse;
HXDLIN( 299)			switch((int)(_g)){
            				case (int)2: {
HXLINE( 305)					Float _hx_tmp1 = ((Float)(newParent->_width * this->_leftPercent) / (Float)(int)100);
HXDLIN( 305)					this->set_x(_hx_tmp1);
            				}
            				break;
            				case (int)3: {
HXLINE( 301)					Float _hx_tmp2 = ((newParent->_width - this->_right) - this->_width);
HXDLIN( 301)					this->set_x(_hx_tmp2);
            				}
            				break;
            				case (int)4: {
HXLINE( 303)					Float _hx_tmp3 = ((newParent->_width - ((Float)(newParent->_width * this->_rightPercent) / (Float)(int)100)) - this->_width);
HXDLIN( 303)					this->set_x(_hx_tmp3);
            				}
            				break;
            			}
            		}
HXLINE( 308)		{
HXLINE( 308)			HX_VARI( Int,_g1) = this->_yUse;
HXDLIN( 308)			switch((int)(_g1)){
            				case (int)6: {
HXLINE( 314)					Float _hx_tmp4 = ((Float)(newParent->_height * this->_topPercent) / (Float)(int)100);
HXDLIN( 314)					this->set_y(_hx_tmp4);
            				}
            				break;
            				case (int)7: {
HXLINE( 310)					Float _hx_tmp5 = ((newParent->_height - this->_bottom) - this->_height);
HXDLIN( 310)					this->set_y(_hx_tmp5);
            				}
            				break;
            				case (int)8: {
HXLINE( 312)					Float _hx_tmp6 = ((newParent->_height - ((Float)(newParent->_height * this->_bottomPercent) / (Float)(int)100)) - this->_height);
HXDLIN( 312)					this->set_y(_hx_tmp6);
            				}
            				break;
            			}
            		}
HXLINE( 319)		::ru::stablex::ui::UIBuilder_obj::dispatcher->dispatchEvent( ::ru::stablex::ui::events::WidgetEvent_obj::__new(HX_("widgetAdded",5c,ee,56,a8),hx::ObjectPtr<OBJ_>(this)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Widget_obj,onNewParent,(void))

void Widget_obj::_onParentResize( ::ru::stablex::ui::events::WidgetEvent e){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Widget","_onParentResize",0x036dda0f,"ru.stablex.ui.widgets.Widget._onParentResize","ru/stablex/ui/widgets/Widget.hx",327,0xb63704bd)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(e,"e")
HXLINE( 328)		HX_VARI(  ::ru::stablex::ui::widgets::Widget,parent) = hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(e->currentTarget);
HXLINE( 331)		Bool _hx_tmp;
HXDLIN( 331)		if (!(this->_widthUsePercent)) {
HXLINE( 331)			_hx_tmp = this->_heightUsePercent;
            		}
            		else {
HXLINE( 331)			_hx_tmp = true;
            		}
HXDLIN( 331)		if (_hx_tmp) {
HXLINE( 332)			this->_resizeWithPercent(parent);
            		}
HXLINE( 336)		{
HXLINE( 336)			HX_VARI( Int,_g) = this->_xUse;
HXDLIN( 336)			switch((int)(_g)){
            				case (int)2: {
HXLINE( 342)					Float _hx_tmp1 = ((Float)(parent->_width * this->_leftPercent) / (Float)(int)100);
HXDLIN( 342)					this->set_x(_hx_tmp1);
            				}
            				break;
            				case (int)3: {
HXLINE( 338)					Float _hx_tmp2 = ((parent->_width - this->_right) - this->_width);
HXDLIN( 338)					this->set_x(_hx_tmp2);
            				}
            				break;
            				case (int)4: {
HXLINE( 340)					Float _hx_tmp3 = (parent->_width - ((Float)(parent->_width * this->_rightPercent) / (Float)(int)100));
HXDLIN( 340)					Float _hx_tmp4 = this->get_w();
HXDLIN( 340)					this->set_x((_hx_tmp3 - _hx_tmp4));
            				}
            				break;
            			}
            		}
HXLINE( 345)		{
HXLINE( 345)			HX_VARI( Int,_g1) = this->_yUse;
HXDLIN( 345)			switch((int)(_g1)){
            				case (int)6: {
HXLINE( 351)					Float _hx_tmp5 = ((Float)(parent->_height * this->_topPercent) / (Float)(int)100);
HXDLIN( 351)					this->set_y(_hx_tmp5);
            				}
            				break;
            				case (int)7: {
HXLINE( 347)					Float _hx_tmp6 = ((parent->_height - this->_bottom) - this->_height);
HXDLIN( 347)					this->set_y(_hx_tmp6);
            				}
            				break;
            				case (int)8: {
HXLINE( 349)					Float _hx_tmp7 = ((parent->_height - ((Float)(parent->_height * this->_bottomPercent) / (Float)(int)100)) - this->_height);
HXDLIN( 349)					this->set_y(_hx_tmp7);
            				}
            				break;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Widget_obj,_onParentResize,(void))

void Widget_obj::resize(Float width,Float height,hx::Null< Bool >  __o_keepPercentage){
Bool keepPercentage = __o_keepPercentage.Default(false);
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Widget","resize",0xf7de6161,"ru.stablex.ui.widgets.Widget.resize","ru/stablex/ui/widgets/Widget.hx",361,0xb63704bd)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
            	HX_STACK_ARG(keepPercentage,"keepPercentage")
HXLINE( 362)		Bool _hx_tmp;
HXDLIN( 362)		if ((this->_width == width)) {
HXLINE( 362)			_hx_tmp = (this->_height == height);
            		}
            		else {
HXLINE( 362)			_hx_tmp = false;
            		}
HXDLIN( 362)		if (_hx_tmp) {
HXLINE( 363)			return;
            		}
HXLINE( 365)		if (!(keepPercentage)) {
HXLINE( 366)			this->_silentResize = true;
HXLINE( 367)			this->set_w(width);
HXLINE( 368)			this->set_h(height);
HXLINE( 369)			this->_silentResize = false;
            		}
            		else {
HXLINE( 371)			this->_width = width;
HXLINE( 372)			this->_height = height;
            		}
HXLINE( 375)		this->_onResize();
            	}


HX_DEFINE_DYNAMIC_FUNC3(Widget_obj,resize,(void))

void Widget_obj::_onResize(){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Widget","_onResize",0xa8c5e285,"ru.stablex.ui.widgets.Widget._onResize","ru/stablex/ui/widgets/Widget.hx",386,0xb63704bd)
            	HX_STACK_THIS(this)
HXLINE( 388)		 ::ru::stablex::ui::widgets::Widget _hx_tmp;
HXDLIN( 388)		Bool _hx_tmp1 = ::Std_obj::is(this->parent,hx::ClassOf< ::ru::stablex::ui::widgets::Widget >());
HXDLIN( 388)		if (_hx_tmp1) {
HXLINE( 388)			_hx_tmp = hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            		}
            		else {
HXLINE( 388)			_hx_tmp = null();
            		}
HXDLIN( 388)		Bool _hx_tmp2 = hx::IsNotNull( _hx_tmp );
HXDLIN( 388)		if (_hx_tmp2) {
HXLINE( 389)			{
HXLINE( 389)				HX_VARI( Int,_g) = this->_xUse;
HXDLIN( 389)				switch((int)(_g)){
            					case (int)3: {
HXLINE( 391)						 ::ru::stablex::ui::widgets::Widget _hx_tmp3;
HXDLIN( 391)						Bool _hx_tmp4 = ::Std_obj::is(this->parent,hx::ClassOf< ::ru::stablex::ui::widgets::Widget >());
HXDLIN( 391)						if (_hx_tmp4) {
HXLINE( 391)							_hx_tmp3 = hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            						}
            						else {
HXLINE( 391)							_hx_tmp3 = null();
            						}
HXDLIN( 391)						Float _hx_tmp5 = ((_hx_tmp3->_width - this->_right) - this->_width);
HXDLIN( 391)						this->set_x(_hx_tmp5);
            					}
            					break;
            					case (int)4: {
HXLINE( 393)						 ::ru::stablex::ui::widgets::Widget _hx_tmp6;
HXDLIN( 393)						Bool _hx_tmp7 = ::Std_obj::is(this->parent,hx::ClassOf< ::ru::stablex::ui::widgets::Widget >());
HXDLIN( 393)						if (_hx_tmp7) {
HXLINE( 393)							_hx_tmp6 = hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            						}
            						else {
HXLINE( 393)							_hx_tmp6 = null();
            						}
HXDLIN( 393)						Float _hx_tmp8 = _hx_tmp6->_width;
HXDLIN( 393)						 ::ru::stablex::ui::widgets::Widget _hx_tmp9;
HXDLIN( 393)						Bool _hx_tmp10 = ::Std_obj::is(this->parent,hx::ClassOf< ::ru::stablex::ui::widgets::Widget >());
HXDLIN( 393)						if (_hx_tmp10) {
HXLINE( 393)							_hx_tmp9 = hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            						}
            						else {
HXLINE( 393)							_hx_tmp9 = null();
            						}
HXDLIN( 393)						Float _hx_tmp11 = ((_hx_tmp8 - ((Float)(_hx_tmp9->_width * this->_rightPercent) / (Float)(int)100)) - this->_width);
HXDLIN( 393)						this->set_x(_hx_tmp11);
            					}
            					break;
            				}
            			}
HXLINE( 396)			{
HXLINE( 396)				HX_VARI( Int,_g1) = this->_yUse;
HXDLIN( 396)				switch((int)(_g1)){
            					case (int)7: {
HXLINE( 398)						 ::ru::stablex::ui::widgets::Widget _hx_tmp12;
HXDLIN( 398)						Bool _hx_tmp13 = ::Std_obj::is(this->parent,hx::ClassOf< ::ru::stablex::ui::widgets::Widget >());
HXDLIN( 398)						if (_hx_tmp13) {
HXLINE( 398)							_hx_tmp12 = hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            						}
            						else {
HXLINE( 398)							_hx_tmp12 = null();
            						}
HXDLIN( 398)						Float _hx_tmp14 = ((_hx_tmp12->_height - this->_bottom) - this->_height);
HXDLIN( 398)						this->set_y(_hx_tmp14);
            					}
            					break;
            					case (int)8: {
HXLINE( 400)						 ::ru::stablex::ui::widgets::Widget _hx_tmp15;
HXDLIN( 400)						Bool _hx_tmp16 = ::Std_obj::is(this->parent,hx::ClassOf< ::ru::stablex::ui::widgets::Widget >());
HXDLIN( 400)						if (_hx_tmp16) {
HXLINE( 400)							_hx_tmp15 = hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            						}
            						else {
HXLINE( 400)							_hx_tmp15 = null();
            						}
HXDLIN( 400)						Float _hx_tmp17 = _hx_tmp15->_height;
HXDLIN( 400)						 ::ru::stablex::ui::widgets::Widget _hx_tmp18;
HXDLIN( 400)						Bool _hx_tmp19 = ::Std_obj::is(this->parent,hx::ClassOf< ::ru::stablex::ui::widgets::Widget >());
HXDLIN( 400)						if (_hx_tmp19) {
HXLINE( 400)							_hx_tmp18 = hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            						}
            						else {
HXLINE( 400)							_hx_tmp18 = null();
            						}
HXDLIN( 400)						Float _hx_tmp20 = ((_hx_tmp17 - ((Float)(_hx_tmp18->_height * this->_bottomPercent) / (Float)(int)100)) - this->_height);
HXDLIN( 400)						this->set_y(_hx_tmp20);
            					}
            					break;
            				}
            			}
            		}
HXLINE( 405)		Bool _hx_tmp21 = !(this->overflow);
HXDLIN( 405)		if (_hx_tmp21) {
HXLINE( 406)			this->set_scrollRect( ::openfl::geom::Rectangle_obj::__new((int)0,(int)0,this->_width,this->_height));
            		}
HXLINE( 410)		Bool _hx_tmp22 = !(this->_resizing);
HXDLIN( 410)		if (_hx_tmp22) {
HXLINE( 411)			this->_resizing = true;
HXLINE( 414)			Bool _hx_tmp23 = this->created;
HXDLIN( 414)			if (_hx_tmp23) {
HXLINE( 415)				this->onResize();
            			}
HXLINE( 419)			Bool _hx_tmp24 = this->initialized;
HXDLIN( 419)			if (_hx_tmp24) {
HXLINE( 420)				this->refresh();
            			}
HXLINE( 423)			this->_resizing = false;
            		}
HXLINE( 426)		::String _hx_tmp25;
HXDLIN( 426)		if (this->created) {
HXLINE( 426)			_hx_tmp25 = HX_("widgetResize",d8,a8,1e,0d);
            		}
            		else {
HXLINE( 426)			_hx_tmp25 = HX_("widgetInitialResize",34,2f,dc,47);
            		}
HXDLIN( 426)		this->dispatchEvent( ::ru::stablex::ui::events::WidgetEvent_obj::__new(_hx_tmp25,null()));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Widget_obj,_onResize,(void))

void Widget_obj::onResize(){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Widget","onResize",0xbbedcd20,"ru.stablex.ui.widgets.Widget.onResize","ru/stablex/ui/widgets/Widget.hx",434,0xb63704bd)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Widget_obj,onResize,(void))

 ::openfl::display::DisplayObject Widget_obj::addChild( ::openfl::display::DisplayObject child){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Widget","addChild",0x92dc4c68,"ru.stablex.ui.widgets.Widget.addChild","ru/stablex/ui/widgets/Widget.hx",442,0xb63704bd)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(child,"child")
HXLINE( 443)		Bool _hx_tmp = hx::IsNotNull( child->parent );
HXDLIN( 443)		if (_hx_tmp) {
HXLINE( 444)			child->parent->removeChild(child);
            		}
HXLINE( 447)		Bool _hx_tmp1 = ::Std_obj::is(child,hx::ClassOf< ::ru::stablex::ui::widgets::Widget >());
HXDLIN( 447)		if (_hx_tmp1) {
HXLINE( 448)			hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(child)->_newParent(hx::ObjectPtr<OBJ_>(this));
HXLINE( 449)			this->addUniqueListener(HX_("widgetResize",d8,a8,1e,0d),hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(child)->_onParentResize_dyn(),null(),null(),null());
HXLINE( 450)			this->addUniqueListener(HX_("widgetInitialResize",34,2f,dc,47),hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(child)->_onParentResize_dyn(),null(),null(),null());
            		}
HXLINE( 453)		return this->super::addChild(child);
            	}


 ::openfl::display::DisplayObject Widget_obj::addChildAt( ::openfl::display::DisplayObject child,Int idx){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Widget","addChildAt",0x3bd66f7b,"ru.stablex.ui.widgets.Widget.addChildAt","ru/stablex/ui/widgets/Widget.hx",461,0xb63704bd)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(child,"child")
            	HX_STACK_ARG(idx,"idx")
HXLINE( 462)		Bool _hx_tmp = hx::IsNotNull( child->parent );
HXDLIN( 462)		if (_hx_tmp) {
HXLINE( 463)			child->parent->removeChild(child);
            		}
HXLINE( 466)		Bool _hx_tmp1 = ::Std_obj::is(child,hx::ClassOf< ::ru::stablex::ui::widgets::Widget >());
HXDLIN( 466)		if (_hx_tmp1) {
HXLINE( 467)			hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(child)->_newParent(hx::ObjectPtr<OBJ_>(this));
HXLINE( 468)			this->addUniqueListener(HX_("widgetResize",d8,a8,1e,0d),hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(child)->_onParentResize_dyn(),null(),null(),null());
HXLINE( 469)			this->addUniqueListener(HX_("widgetInitialResize",34,2f,dc,47),hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(child)->_onParentResize_dyn(),null(),null(),null());
            		}
HXLINE( 472)		return this->super::addChildAt(child,idx);
            	}


 ::openfl::display::DisplayObject Widget_obj::removeChild( ::openfl::display::DisplayObject child){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Widget","removeChild",0xc217742b,"ru.stablex.ui.widgets.Widget.removeChild","ru/stablex/ui/widgets/Widget.hx",480,0xb63704bd)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(child,"child")
HXLINE( 481)		Bool _hx_tmp = ::Std_obj::is(child,hx::ClassOf< ::ru::stablex::ui::widgets::Widget >());
HXDLIN( 481)		if (_hx_tmp) {
HXLINE( 482)			this->removeEventListener(HX_("widgetResize",d8,a8,1e,0d),hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(child)->_onParentResize_dyn(),null());
HXLINE( 483)			this->removeEventListener(HX_("widgetInitialResize",34,2f,dc,47),hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(child)->_onParentResize_dyn(),null());
HXLINE( 484)			::ru::stablex::ui::UIBuilder_obj::dispatcher->dispatchEvent( ::ru::stablex::ui::events::WidgetEvent_obj::__new(HX_("widgetRemoved",3c,d8,41,fd),( ( ::ru::stablex::ui::widgets::Widget)(child) )));
            		}
HXLINE( 486)		return this->super::removeChild(child);
            	}


 ::openfl::display::DisplayObject Widget_obj::removeChildAt(Int idx){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Widget","removeChildAt",0x0dfd4dfe,"ru.stablex.ui.widgets.Widget.removeChildAt","ru/stablex/ui/widgets/Widget.hx",494,0xb63704bd)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(idx,"idx")
HXLINE( 495)		HX_VARI(  ::openfl::display::DisplayObject,child) = this->getChildAt(idx);
HXLINE( 496)		Bool _hx_tmp = ::Std_obj::is(child,hx::ClassOf< ::ru::stablex::ui::widgets::Widget >());
HXDLIN( 496)		if (_hx_tmp) {
HXLINE( 497)			this->removeEventListener(HX_("widgetResize",d8,a8,1e,0d),hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(child)->_onParentResize_dyn(),null());
HXLINE( 498)			this->removeEventListener(HX_("widgetInitialResize",34,2f,dc,47),hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(child)->_onParentResize_dyn(),null());
HXLINE( 499)			::ru::stablex::ui::UIBuilder_obj::dispatcher->dispatchEvent( ::ru::stablex::ui::events::WidgetEvent_obj::__new(HX_("widgetRemoved",3c,d8,41,fd),( ( ::ru::stablex::ui::widgets::Widget)(child) )));
            		}
HXLINE( 501)		return this->super::removeChildAt(idx);
            	}


 ::Dynamic Widget_obj::getChildAs(::String name,hx::Class cls){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Widget","getChildAs",0x23adc9a5,"ru.stablex.ui.widgets.Widget.getChildAs","ru/stablex/ui/widgets/Widget.hx",509,0xb63704bd)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(name,"name")
            	HX_STACK_ARG(cls,"cls")
HXLINE( 510)		HX_VARI(  ::ru::stablex::ui::widgets::Widget,w) = this->_findChildWidget(name);
HXLINE( 511)		Bool _hx_tmp = ::Std_obj::is(w,cls);
HXDLIN( 511)		if (_hx_tmp) {
HXLINE( 511)			return w;
            		}
            		else {
HXLINE( 511)			return null();
            		}
HXDLIN( 511)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(Widget_obj,getChildAs,return )

 ::ru::stablex::ui::widgets::Widget Widget_obj::getChild(::String name){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Widget","getChild",0x795635d3,"ru.stablex.ui.widgets.Widget.getChild","ru/stablex/ui/widgets/Widget.hx",520,0xb63704bd)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(name,"name")
HXLINE( 520)		return this->_findChildWidget(name);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Widget_obj,getChild,return )

 ::ru::stablex::ui::widgets::Widget Widget_obj::_findChildWidget(::String name){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Widget","_findChildWidget",0x2226cef5,"ru.stablex.ui.widgets.Widget._findChildWidget","ru/stablex/ui/widgets/Widget.hx",528,0xb63704bd)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(name,"name")
HXLINE( 529)		HX_VARI(  ::openfl::display::DisplayObject,child) = null();
HXLINE( 532)		{
HXLINE( 532)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 532)			HX_VARI( Int,_g) = this->get_numChildren();
HXDLIN( 532)			while((_g1 < _g)){
HXLINE( 532)				HX_VARI( Int,i) = _g1++;
HXLINE( 533)				child = this->getChildAt(i);
HXLINE( 535)				::String _hx_tmp = child->get_name();
HXDLIN( 535)				if ((_hx_tmp == name)) {
HXLINE( 535)					goto _hx_goto_0;
            				}
HXLINE( 538)				Bool _hx_tmp1 = ::Std_obj::is(child,hx::ClassOf< ::ru::stablex::ui::widgets::Widget >());
HXDLIN( 538)				if (_hx_tmp1) {
HXLINE( 539)					child = hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(child)->_findChildWidget(name);
HXLINE( 540)					Bool _hx_tmp2 = hx::IsNotNull( child );
HXDLIN( 540)					if (_hx_tmp2) {
HXLINE( 540)						goto _hx_goto_0;
            					}
            				}
HXLINE( 543)				child = null();
            			}
            			_hx_goto_0:;
            		}
HXLINE( 546)		Bool _hx_tmp3 = ::Std_obj::is(child,hx::ClassOf< ::ru::stablex::ui::widgets::Widget >());
HXDLIN( 546)		if (_hx_tmp3) {
HXLINE( 546)			return hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(child);
            		}
            		else {
HXLINE( 546)			return null();
            		}
HXDLIN( 546)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Widget_obj,_findChildWidget,return )

 ::ru::stablex::ui::widgets::Widget Widget_obj::getParent(::String name){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Widget","getParent",0xe2dc2913,"ru.stablex.ui.widgets.Widget.getParent","ru/stablex/ui/widgets/Widget.hx",554,0xb63704bd)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(name,"name")
HXLINE( 555)		 ::ru::stablex::ui::widgets::Widget _hx_tmp;
HXDLIN( 555)		Bool _hx_tmp1 = ::Std_obj::is(this->parent,hx::ClassOf< ::ru::stablex::ui::widgets::Widget >());
HXDLIN( 555)		if (_hx_tmp1) {
HXLINE( 555)			_hx_tmp = hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            		}
            		else {
HXLINE( 555)			_hx_tmp = null();
            		}
HXDLIN( 555)		HX_VARI(  ::ru::stablex::ui::widgets::Widget,p) = _hx_tmp;
HXLINE( 557)		while(true){
HXLINE( 557)			Bool _hx_tmp2;
HXDLIN( 557)			Bool _hx_tmp3 = hx::IsNotNull( p );
HXDLIN( 557)			if (_hx_tmp3) {
HXLINE( 557)				::String _hx_tmp4 = p->get_name();
HXDLIN( 557)				_hx_tmp2 = (_hx_tmp4 != name);
            			}
            			else {
HXLINE( 557)				_hx_tmp2 = false;
            			}
HXDLIN( 557)			if (!(_hx_tmp2)) {
HXLINE( 557)				goto _hx_goto_1;
            			}
HXLINE( 558)			 ::ru::stablex::ui::widgets::Widget _hx_tmp5;
HXDLIN( 558)			Bool _hx_tmp6 = ::Std_obj::is(p->parent,hx::ClassOf< ::ru::stablex::ui::widgets::Widget >());
HXDLIN( 558)			if (_hx_tmp6) {
HXLINE( 558)				_hx_tmp5 = hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(p->parent);
            			}
            			else {
HXLINE( 558)				_hx_tmp5 = null();
            			}
HXDLIN( 558)			p = _hx_tmp5;
            		}
            		_hx_goto_1:;
HXLINE( 561)		return p;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Widget_obj,getParent,return )

 ::Dynamic Widget_obj::getParentAs(::String name,hx::Class cls){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Widget","getParentAs",0x71070ce5,"ru.stablex.ui.widgets.Widget.getParentAs","ru/stablex/ui/widgets/Widget.hx",569,0xb63704bd)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(name,"name")
            	HX_STACK_ARG(cls,"cls")
HXLINE( 570)		 ::ru::stablex::ui::widgets::Widget _hx_tmp;
HXDLIN( 570)		Bool _hx_tmp1 = ::Std_obj::is(this->parent,hx::ClassOf< ::ru::stablex::ui::widgets::Widget >());
HXDLIN( 570)		if (_hx_tmp1) {
HXLINE( 570)			_hx_tmp = hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            		}
            		else {
HXLINE( 570)			_hx_tmp = null();
            		}
HXDLIN( 570)		HX_VARI(  ::ru::stablex::ui::widgets::Widget,p) = _hx_tmp;
HXLINE( 572)		while(true){
HXLINE( 572)			Bool _hx_tmp2;
HXDLIN( 572)			Bool _hx_tmp3 = hx::IsNotNull( p );
HXDLIN( 572)			if (_hx_tmp3) {
HXLINE( 572)				::String _hx_tmp4 = p->get_name();
HXDLIN( 572)				_hx_tmp2 = (_hx_tmp4 != name);
            			}
            			else {
HXLINE( 572)				_hx_tmp2 = false;
            			}
HXDLIN( 572)			if (!(_hx_tmp2)) {
HXLINE( 572)				goto _hx_goto_2;
            			}
HXLINE( 573)			 ::ru::stablex::ui::widgets::Widget _hx_tmp5;
HXDLIN( 573)			Bool _hx_tmp6 = ::Std_obj::is(p->parent,hx::ClassOf< ::ru::stablex::ui::widgets::Widget >());
HXDLIN( 573)			if (_hx_tmp6) {
HXLINE( 573)				_hx_tmp5 = hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(p->parent);
            			}
            			else {
HXLINE( 573)				_hx_tmp5 = null();
            			}
HXDLIN( 573)			p = _hx_tmp5;
            		}
            		_hx_goto_2:;
HXLINE( 576)		Bool _hx_tmp7 = ::Std_obj::is(p,cls);
HXDLIN( 576)		if (_hx_tmp7) {
HXLINE( 576)			return p;
            		}
            		else {
HXLINE( 576)			return null();
            		}
HXDLIN( 576)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(Widget_obj,getParentAs,return )

 ::Dynamic Widget_obj::getNearestParent(hx::Class cls){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Widget","getNearestParent",0xca46475f,"ru.stablex.ui.widgets.Widget.getNearestParent","ru/stablex/ui/widgets/Widget.hx",584,0xb63704bd)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(cls,"cls")
HXLINE( 585)		HX_VARI(  ::openfl::display::DisplayObjectContainer,p) = this->parent;
HXLINE( 587)		while(true){
HXLINE( 587)			Bool _hx_tmp = !(hx::IsNotNull( p ));
HXDLIN( 587)			if (_hx_tmp) {
HXLINE( 587)				goto _hx_goto_3;
            			}
HXLINE( 588)			Bool _hx_tmp1 = ::Std_obj::is(p,cls);
HXDLIN( 588)			if (_hx_tmp1) {
HXLINE( 588)				return p;
            			}
HXLINE( 589)			p = p->parent;
            		}
            		_hx_goto_3:;
HXLINE( 592)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Widget_obj,getNearestParent,return )

 ::Dynamic Widget_obj::as(hx::Class cls){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Widget","as",0xe1b5e1df,"ru.stablex.ui.widgets.Widget.as","ru/stablex/ui/widgets/Widget.hx",601,0xb63704bd)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(cls,"cls")
HXLINE( 601)		Bool _hx_tmp = ::Std_obj::is(hx::ObjectPtr<OBJ_>(this),cls);
HXDLIN( 601)		if (_hx_tmp) {
HXLINE( 601)			return hx::ObjectPtr<OBJ_>(this);
            		}
            		else {
HXLINE( 601)			return null();
            		}
HXDLIN( 601)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Widget_obj,as,return )

Bool Widget_obj::set_overflow(Bool o){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Widget","set_overflow",0xf1d491ec,"ru.stablex.ui.widgets.Widget.set_overflow","ru/stablex/ui/widgets/Widget.hx",612,0xb63704bd)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(o,"o")
HXLINE( 613)		if (!(o)) {
HXLINE( 614)			this->set_scrollRect( ::openfl::geom::Rectangle_obj::__new((int)0,(int)0,this->_width,this->_height));
            		}
            		else {
HXLINE( 616)			this->set_scrollRect(null());
            		}
HXLINE( 619)		return (this->overflow = o);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Widget_obj,set_overflow,return )

::String Widget_obj::set_skinName(::String sn){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Widget","set_skinName",0x491fe612,"ru.stablex.ui.widgets.Widget.set_skinName","ru/stablex/ui/widgets/Widget.hx",627,0xb63704bd)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(sn,"sn")
HXLINE( 628)		this->skin = ( ( ::ru::stablex::ui::skins::Skin)(::ru::stablex::ui::UIBuilder_obj::skins->get(sn)()) );
HXLINE( 629)		Bool _hx_tmp = this->created;
HXDLIN( 629)		if (_hx_tmp) {
HXLINE( 629)			Bool _hx_tmp1;
HXDLIN( 629)			Bool _hx_tmp2 = hx::IsNotNull( this->skin );
HXDLIN( 629)			if (_hx_tmp2) {
HXLINE( 629)				_hx_tmp1 = !(this->_skinQueued);
            			}
            			else {
HXLINE( 629)				_hx_tmp1 = false;
            			}
HXDLIN( 629)			if (_hx_tmp1) {
HXLINE( 629)				::ru::stablex::ui::UIBuilder_obj::_skinQueue->add(hx::ObjectPtr<OBJ_>(this));
HXDLIN( 629)				this->_skinQueued = true;
            			}
            		}
HXLINE( 630)		return (this->skinName = sn);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Widget_obj,set_skinName,return )

 ::ru::stablex::ui::widgets::Widget Widget_obj::get_wparent(){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Widget","get_wparent",0x461c866b,"ru.stablex.ui.widgets.Widget.get_wparent","ru/stablex/ui/widgets/Widget.hx",639,0xb63704bd)
            	HX_STACK_THIS(this)
HXLINE( 640)		Bool _hx_tmp = ::Std_obj::is(this->parent,hx::ClassOf< ::ru::stablex::ui::widgets::Widget >());
HXLINE( 639)		if (_hx_tmp) {
HXLINE( 639)			return hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            		}
            		else {
HXLINE( 639)			return null();
            		}
HXDLIN( 639)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Widget_obj,get_wparent,return )

Float Widget_obj::set_left(Float l){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Widget","set_left",0x498d99b1,"ru.stablex.ui.widgets.Widget.set_left","ru/stablex/ui/widgets/Widget.hx",651,0xb63704bd)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(l,"l")
HXLINE( 652)		this->_xUse = (int)1;
HXLINE( 653)		this->set_x(l);
HXLINE( 654)		return (this->_left = l);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Widget_obj,set_left,return )

Float Widget_obj::get_left(){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Widget","get_left",0x9b30403d,"ru.stablex.ui.widgets.Widget.get_left","ru/stablex/ui/widgets/Widget.hx",663,0xb63704bd)
            	HX_STACK_THIS(this)
HXLINE( 663)		return this->get_x();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Widget_obj,get_left,return )

Float Widget_obj::set_right(Float r){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Widget","set_right",0x8965eef2,"ru.stablex.ui.widgets.Widget.set_right","ru/stablex/ui/widgets/Widget.hx",671,0xb63704bd)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(r,"r")
HXLINE( 672)		this->_xUse = (int)3;
HXLINE( 673)		 ::ru::stablex::ui::widgets::Widget _hx_tmp;
HXDLIN( 673)		Bool _hx_tmp1 = ::Std_obj::is(this->parent,hx::ClassOf< ::ru::stablex::ui::widgets::Widget >());
HXDLIN( 673)		if (_hx_tmp1) {
HXLINE( 673)			_hx_tmp = hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            		}
            		else {
HXLINE( 673)			_hx_tmp = null();
            		}
HXDLIN( 673)		Bool _hx_tmp2 = hx::IsNotNull( _hx_tmp );
HXDLIN( 673)		if (_hx_tmp2) {
HXLINE( 674)			 ::ru::stablex::ui::widgets::Widget _hx_tmp3;
HXDLIN( 674)			Bool _hx_tmp4 = ::Std_obj::is(this->parent,hx::ClassOf< ::ru::stablex::ui::widgets::Widget >());
HXDLIN( 674)			if (_hx_tmp4) {
HXLINE( 674)				_hx_tmp3 = hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            			}
            			else {
HXLINE( 674)				_hx_tmp3 = null();
            			}
HXDLIN( 674)			Float _hx_tmp5 = (_hx_tmp3->_width - r);
HXDLIN( 674)			Float _hx_tmp6 = this->get_w();
HXDLIN( 674)			this->set_x((_hx_tmp5 - _hx_tmp6));
            		}
HXLINE( 676)		return (this->_right = r);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Widget_obj,set_right,return )

Float Widget_obj::get_right(){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Widget","get_right",0xa61502e6,"ru.stablex.ui.widgets.Widget.get_right","ru/stablex/ui/widgets/Widget.hx",684,0xb63704bd)
            	HX_STACK_THIS(this)
HXLINE( 685)		if ((this->_xUse == (int)3)) {
HXLINE( 686)			return this->_right;
            		}
HXLINE( 689)		 ::ru::stablex::ui::widgets::Widget _hx_tmp;
HXDLIN( 689)		Bool _hx_tmp1 = ::Std_obj::is(this->parent,hx::ClassOf< ::ru::stablex::ui::widgets::Widget >());
HXDLIN( 689)		if (_hx_tmp1) {
HXLINE( 689)			_hx_tmp = hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            		}
            		else {
HXLINE( 689)			_hx_tmp = null();
            		}
HXDLIN( 689)		Bool _hx_tmp2 = hx::IsNotNull( _hx_tmp );
HXDLIN( 689)		if (_hx_tmp2) {
HXLINE( 690)			 ::ru::stablex::ui::widgets::Widget _hx_tmp3;
HXDLIN( 690)			Bool _hx_tmp4 = ::Std_obj::is(this->parent,hx::ClassOf< ::ru::stablex::ui::widgets::Widget >());
HXDLIN( 690)			if (_hx_tmp4) {
HXLINE( 690)				_hx_tmp3 = hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            			}
            			else {
HXLINE( 690)				_hx_tmp3 = null();
            			}
HXDLIN( 690)			Float _hx_tmp5 = _hx_tmp3->_width;
HXDLIN( 690)			Float _hx_tmp6 = this->get_x();
HXDLIN( 690)			Float _hx_tmp7 = (_hx_tmp5 - _hx_tmp6);
HXDLIN( 690)			Float _hx_tmp8 = this->get_w();
HXDLIN( 690)			return (_hx_tmp7 - _hx_tmp8);
            		}
HXLINE( 693)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Widget_obj,get_right,return )

Float Widget_obj::set_leftPt(Float lp){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Widget","set_leftPt",0xfb6c6e15,"ru.stablex.ui.widgets.Widget.set_leftPt","ru/stablex/ui/widgets/Widget.hx",701,0xb63704bd)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(lp,"lp")
HXLINE( 702)		this->_xUse = (int)2;
HXLINE( 704)		 ::ru::stablex::ui::widgets::Widget _hx_tmp;
HXDLIN( 704)		Bool _hx_tmp1 = ::Std_obj::is(this->parent,hx::ClassOf< ::ru::stablex::ui::widgets::Widget >());
HXDLIN( 704)		if (_hx_tmp1) {
HXLINE( 704)			_hx_tmp = hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            		}
            		else {
HXLINE( 704)			_hx_tmp = null();
            		}
HXDLIN( 704)		Bool _hx_tmp2 = hx::IsNotNull( _hx_tmp );
HXDLIN( 704)		if (_hx_tmp2) {
HXLINE( 705)			 ::ru::stablex::ui::widgets::Widget _hx_tmp3;
HXDLIN( 705)			Bool _hx_tmp4 = ::Std_obj::is(this->parent,hx::ClassOf< ::ru::stablex::ui::widgets::Widget >());
HXDLIN( 705)			if (_hx_tmp4) {
HXLINE( 705)				_hx_tmp3 = hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            			}
            			else {
HXLINE( 705)				_hx_tmp3 = null();
            			}
HXDLIN( 705)			Float _hx_tmp5 = ((Float)(_hx_tmp3->_width * lp) / (Float)(int)100);
HXDLIN( 705)			this->set_x(_hx_tmp5);
            		}
HXLINE( 708)		return (this->_leftPercent = lp);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Widget_obj,set_leftPt,return )

Float Widget_obj::get_leftPt(){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Widget","get_leftPt",0xf7eecfa1,"ru.stablex.ui.widgets.Widget.get_leftPt","ru/stablex/ui/widgets/Widget.hx",716,0xb63704bd)
            	HX_STACK_THIS(this)
HXLINE( 717)		if ((this->_xUse == (int)2)) {
HXLINE( 718)			return this->_leftPercent;
            		}
HXLINE( 721)		Bool _hx_tmp;
HXDLIN( 721)		 ::ru::stablex::ui::widgets::Widget _hx_tmp1;
HXDLIN( 721)		Bool _hx_tmp2 = ::Std_obj::is(this->parent,hx::ClassOf< ::ru::stablex::ui::widgets::Widget >());
HXDLIN( 721)		if (_hx_tmp2) {
HXLINE( 721)			_hx_tmp1 = hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            		}
            		else {
HXLINE( 721)			_hx_tmp1 = null();
            		}
HXDLIN( 721)		Bool _hx_tmp3 = hx::IsNotNull( _hx_tmp1 );
HXDLIN( 721)		if (_hx_tmp3) {
HXLINE( 721)			 ::ru::stablex::ui::widgets::Widget _hx_tmp4;
HXDLIN( 721)			Bool _hx_tmp5 = ::Std_obj::is(this->parent,hx::ClassOf< ::ru::stablex::ui::widgets::Widget >());
HXDLIN( 721)			if (_hx_tmp5) {
HXLINE( 721)				_hx_tmp4 = hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            			}
            			else {
HXLINE( 721)				_hx_tmp4 = null();
            			}
HXDLIN( 721)			_hx_tmp = (_hx_tmp4->_width != (int)0);
            		}
            		else {
HXLINE( 721)			_hx_tmp = false;
            		}
HXDLIN( 721)		if (_hx_tmp) {
HXLINE( 722)			Float _hx_tmp6 = this->get_x();
HXDLIN( 722)			 ::ru::stablex::ui::widgets::Widget _hx_tmp7;
HXDLIN( 722)			Bool _hx_tmp8 = ::Std_obj::is(this->parent,hx::ClassOf< ::ru::stablex::ui::widgets::Widget >());
HXDLIN( 722)			if (_hx_tmp8) {
HXLINE( 722)				_hx_tmp7 = hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            			}
            			else {
HXLINE( 722)				_hx_tmp7 = null();
            			}
HXDLIN( 722)			return (((Float)_hx_tmp6 / (Float)_hx_tmp7->_width) * (int)100);
            		}
HXLINE( 725)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Widget_obj,get_leftPt,return )

Float Widget_obj::set_rightPt(Float rp){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Widget","set_rightPt",0x21f55596,"ru.stablex.ui.widgets.Widget.set_rightPt","ru/stablex/ui/widgets/Widget.hx",733,0xb63704bd)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(rp,"rp")
HXLINE( 734)		this->_xUse = (int)4;
HXLINE( 736)		 ::ru::stablex::ui::widgets::Widget _hx_tmp;
HXDLIN( 736)		Bool _hx_tmp1 = ::Std_obj::is(this->parent,hx::ClassOf< ::ru::stablex::ui::widgets::Widget >());
HXDLIN( 736)		if (_hx_tmp1) {
HXLINE( 736)			_hx_tmp = hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            		}
            		else {
HXLINE( 736)			_hx_tmp = null();
            		}
HXDLIN( 736)		Bool _hx_tmp2 = hx::IsNotNull( _hx_tmp );
HXDLIN( 736)		if (_hx_tmp2) {
HXLINE( 737)			 ::ru::stablex::ui::widgets::Widget _hx_tmp3;
HXDLIN( 737)			Bool _hx_tmp4 = ::Std_obj::is(this->parent,hx::ClassOf< ::ru::stablex::ui::widgets::Widget >());
HXDLIN( 737)			if (_hx_tmp4) {
HXLINE( 737)				_hx_tmp3 = hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            			}
            			else {
HXLINE( 737)				_hx_tmp3 = null();
            			}
HXDLIN( 737)			Float _hx_tmp5 = _hx_tmp3->_width;
HXDLIN( 737)			 ::ru::stablex::ui::widgets::Widget _hx_tmp6;
HXDLIN( 737)			Bool _hx_tmp7 = ::Std_obj::is(this->parent,hx::ClassOf< ::ru::stablex::ui::widgets::Widget >());
HXDLIN( 737)			if (_hx_tmp7) {
HXLINE( 737)				_hx_tmp6 = hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            			}
            			else {
HXLINE( 737)				_hx_tmp6 = null();
            			}
HXDLIN( 737)			Float _hx_tmp8 = (_hx_tmp5 - ((Float)(_hx_tmp6->_width * rp) / (Float)(int)100));
HXDLIN( 737)			Float _hx_tmp9 = this->get_w();
HXDLIN( 737)			this->set_x((_hx_tmp8 - _hx_tmp9));
            		}
HXLINE( 740)		return (this->_rightPercent = rp);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Widget_obj,set_rightPt,return )

Float Widget_obj::get_rightPt(){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Widget","get_rightPt",0x17884e8a,"ru.stablex.ui.widgets.Widget.get_rightPt","ru/stablex/ui/widgets/Widget.hx",748,0xb63704bd)
            	HX_STACK_THIS(this)
HXLINE( 749)		if ((this->_xUse == (int)4)) {
HXLINE( 750)			return this->_rightPercent;
            		}
HXLINE( 753)		Bool _hx_tmp;
HXDLIN( 753)		 ::ru::stablex::ui::widgets::Widget _hx_tmp1;
HXDLIN( 753)		Bool _hx_tmp2 = ::Std_obj::is(this->parent,hx::ClassOf< ::ru::stablex::ui::widgets::Widget >());
HXDLIN( 753)		if (_hx_tmp2) {
HXLINE( 753)			_hx_tmp1 = hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            		}
            		else {
HXLINE( 753)			_hx_tmp1 = null();
            		}
HXDLIN( 753)		Bool _hx_tmp3 = hx::IsNotNull( _hx_tmp1 );
HXDLIN( 753)		if (_hx_tmp3) {
HXLINE( 753)			 ::ru::stablex::ui::widgets::Widget _hx_tmp4;
HXDLIN( 753)			Bool _hx_tmp5 = ::Std_obj::is(this->parent,hx::ClassOf< ::ru::stablex::ui::widgets::Widget >());
HXDLIN( 753)			if (_hx_tmp5) {
HXLINE( 753)				_hx_tmp4 = hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            			}
            			else {
HXLINE( 753)				_hx_tmp4 = null();
            			}
HXDLIN( 753)			_hx_tmp = (_hx_tmp4->_width != (int)0);
            		}
            		else {
HXLINE( 753)			_hx_tmp = false;
            		}
HXDLIN( 753)		if (_hx_tmp) {
HXLINE( 754)			 ::ru::stablex::ui::widgets::Widget _hx_tmp6;
HXDLIN( 754)			Bool _hx_tmp7 = ::Std_obj::is(this->parent,hx::ClassOf< ::ru::stablex::ui::widgets::Widget >());
HXDLIN( 754)			if (_hx_tmp7) {
HXLINE( 754)				_hx_tmp6 = hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            			}
            			else {
HXLINE( 754)				_hx_tmp6 = null();
            			}
HXDLIN( 754)			Float _hx_tmp8 = _hx_tmp6->_width;
HXDLIN( 754)			Float _hx_tmp9 = this->get_x();
HXDLIN( 754)			Float _hx_tmp10 = ((_hx_tmp8 - _hx_tmp9) - this->_width);
HXDLIN( 754)			 ::ru::stablex::ui::widgets::Widget _hx_tmp11;
HXDLIN( 754)			Bool _hx_tmp12 = ::Std_obj::is(this->parent,hx::ClassOf< ::ru::stablex::ui::widgets::Widget >());
HXDLIN( 754)			if (_hx_tmp12) {
HXLINE( 754)				_hx_tmp11 = hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            			}
            			else {
HXLINE( 754)				_hx_tmp11 = null();
            			}
HXDLIN( 754)			return (((Float)_hx_tmp10 / (Float)_hx_tmp11->_width) * (int)100);
            		}
HXLINE( 757)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Widget_obj,get_rightPt,return )

Float Widget_obj::set_top(Float t){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Widget","set_top",0xa112382b,"ru.stablex.ui.widgets.Widget.set_top","ru/stablex/ui/widgets/Widget.hx",765,0xb63704bd)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(t,"t")
HXLINE( 766)		this->_yUse = (int)5;
HXLINE( 767)		this->set_y(t);
HXLINE( 768)		return (this->_top = t);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Widget_obj,set_top,return )

Float Widget_obj::get_top(){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Widget","get_top",0xae10a71f,"ru.stablex.ui.widgets.Widget.get_top","ru/stablex/ui/widgets/Widget.hx",777,0xb63704bd)
            	HX_STACK_THIS(this)
HXLINE( 777)		return this->get_y();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Widget_obj,get_top,return )

Float Widget_obj::set_bottom(Float b){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Widget","set_bottom",0xc71db715,"ru.stablex.ui.widgets.Widget.set_bottom","ru/stablex/ui/widgets/Widget.hx",785,0xb63704bd)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(b,"b")
HXLINE( 786)		this->_yUse = (int)7;
HXLINE( 787)		 ::ru::stablex::ui::widgets::Widget _hx_tmp;
HXDLIN( 787)		Bool _hx_tmp1 = ::Std_obj::is(this->parent,hx::ClassOf< ::ru::stablex::ui::widgets::Widget >());
HXDLIN( 787)		if (_hx_tmp1) {
HXLINE( 787)			_hx_tmp = hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            		}
            		else {
HXLINE( 787)			_hx_tmp = null();
            		}
HXDLIN( 787)		Bool _hx_tmp2 = hx::IsNotNull( _hx_tmp );
HXDLIN( 787)		if (_hx_tmp2) {
HXLINE( 788)			 ::ru::stablex::ui::widgets::Widget _hx_tmp3;
HXDLIN( 788)			Bool _hx_tmp4 = ::Std_obj::is(this->parent,hx::ClassOf< ::ru::stablex::ui::widgets::Widget >());
HXDLIN( 788)			if (_hx_tmp4) {
HXLINE( 788)				_hx_tmp3 = hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            			}
            			else {
HXLINE( 788)				_hx_tmp3 = null();
            			}
HXDLIN( 788)			Float _hx_tmp5 = (_hx_tmp3->_height - b);
HXDLIN( 788)			Float _hx_tmp6 = this->get_h();
HXDLIN( 788)			this->set_y((_hx_tmp5 - _hx_tmp6));
            		}
HXLINE( 790)		return (this->_bottom = b);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Widget_obj,set_bottom,return )

Float Widget_obj::get_bottom(){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Widget","get_bottom",0xc3a018a1,"ru.stablex.ui.widgets.Widget.get_bottom","ru/stablex/ui/widgets/Widget.hx",798,0xb63704bd)
            	HX_STACK_THIS(this)
HXLINE( 799)		if ((this->_yUse == (int)7)) {
HXLINE( 800)			return this->_bottom;
            		}
HXLINE( 803)		 ::ru::stablex::ui::widgets::Widget _hx_tmp;
HXDLIN( 803)		Bool _hx_tmp1 = ::Std_obj::is(this->parent,hx::ClassOf< ::ru::stablex::ui::widgets::Widget >());
HXDLIN( 803)		if (_hx_tmp1) {
HXLINE( 803)			_hx_tmp = hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            		}
            		else {
HXLINE( 803)			_hx_tmp = null();
            		}
HXDLIN( 803)		Bool _hx_tmp2 = hx::IsNotNull( _hx_tmp );
HXDLIN( 803)		if (_hx_tmp2) {
HXLINE( 804)			 ::ru::stablex::ui::widgets::Widget _hx_tmp3;
HXDLIN( 804)			Bool _hx_tmp4 = ::Std_obj::is(this->parent,hx::ClassOf< ::ru::stablex::ui::widgets::Widget >());
HXDLIN( 804)			if (_hx_tmp4) {
HXLINE( 804)				_hx_tmp3 = hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            			}
            			else {
HXLINE( 804)				_hx_tmp3 = null();
            			}
HXDLIN( 804)			Float _hx_tmp5 = _hx_tmp3->_height;
HXDLIN( 804)			Float _hx_tmp6 = this->get_y();
HXDLIN( 804)			Float _hx_tmp7 = (_hx_tmp5 - _hx_tmp6);
HXDLIN( 804)			Float _hx_tmp8 = this->get_h();
HXDLIN( 804)			return (_hx_tmp7 - _hx_tmp8);
            		}
HXLINE( 807)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Widget_obj,get_bottom,return )

Float Widget_obj::set_topPt(Float tp){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Widget","set_topPt",0xb4311f0f,"ru.stablex.ui.widgets.Widget.set_topPt","ru/stablex/ui/widgets/Widget.hx",815,0xb63704bd)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(tp,"tp")
HXLINE( 816)		this->_yUse = (int)6;
HXLINE( 818)		 ::ru::stablex::ui::widgets::Widget _hx_tmp;
HXDLIN( 818)		Bool _hx_tmp1 = ::Std_obj::is(this->parent,hx::ClassOf< ::ru::stablex::ui::widgets::Widget >());
HXDLIN( 818)		if (_hx_tmp1) {
HXLINE( 818)			_hx_tmp = hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            		}
            		else {
HXLINE( 818)			_hx_tmp = null();
            		}
HXDLIN( 818)		Bool _hx_tmp2 = hx::IsNotNull( _hx_tmp );
HXDLIN( 818)		if (_hx_tmp2) {
HXLINE( 819)			 ::ru::stablex::ui::widgets::Widget _hx_tmp3;
HXDLIN( 819)			Bool _hx_tmp4 = ::Std_obj::is(this->parent,hx::ClassOf< ::ru::stablex::ui::widgets::Widget >());
HXDLIN( 819)			if (_hx_tmp4) {
HXLINE( 819)				_hx_tmp3 = hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            			}
            			else {
HXLINE( 819)				_hx_tmp3 = null();
            			}
HXDLIN( 819)			Float _hx_tmp5 = ((Float)(_hx_tmp3->_height * tp) / (Float)(int)100);
HXDLIN( 819)			this->set_y(_hx_tmp5);
            		}
HXLINE( 822)		return (this->_topPercent = tp);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Widget_obj,set_topPt,return )

Float Widget_obj::get_topPt(){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Widget","get_topPt",0xd0e03303,"ru.stablex.ui.widgets.Widget.get_topPt","ru/stablex/ui/widgets/Widget.hx",830,0xb63704bd)
            	HX_STACK_THIS(this)
HXLINE( 831)		if ((this->_yUse == (int)6)) {
HXLINE( 832)			return this->_topPercent;
            		}
HXLINE( 835)		Bool _hx_tmp;
HXDLIN( 835)		 ::ru::stablex::ui::widgets::Widget _hx_tmp1;
HXDLIN( 835)		Bool _hx_tmp2 = ::Std_obj::is(this->parent,hx::ClassOf< ::ru::stablex::ui::widgets::Widget >());
HXDLIN( 835)		if (_hx_tmp2) {
HXLINE( 835)			_hx_tmp1 = hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            		}
            		else {
HXLINE( 835)			_hx_tmp1 = null();
            		}
HXDLIN( 835)		Bool _hx_tmp3 = hx::IsNotNull( _hx_tmp1 );
HXDLIN( 835)		if (_hx_tmp3) {
HXLINE( 835)			 ::ru::stablex::ui::widgets::Widget _hx_tmp4;
HXDLIN( 835)			Bool _hx_tmp5 = ::Std_obj::is(this->parent,hx::ClassOf< ::ru::stablex::ui::widgets::Widget >());
HXDLIN( 835)			if (_hx_tmp5) {
HXLINE( 835)				_hx_tmp4 = hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            			}
            			else {
HXLINE( 835)				_hx_tmp4 = null();
            			}
HXDLIN( 835)			_hx_tmp = (_hx_tmp4->_height != (int)0);
            		}
            		else {
HXLINE( 835)			_hx_tmp = false;
            		}
HXDLIN( 835)		if (_hx_tmp) {
HXLINE( 836)			Float _hx_tmp6 = this->get_y();
HXDLIN( 836)			 ::ru::stablex::ui::widgets::Widget _hx_tmp7;
HXDLIN( 836)			Bool _hx_tmp8 = ::Std_obj::is(this->parent,hx::ClassOf< ::ru::stablex::ui::widgets::Widget >());
HXDLIN( 836)			if (_hx_tmp8) {
HXLINE( 836)				_hx_tmp7 = hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            			}
            			else {
HXLINE( 836)				_hx_tmp7 = null();
            			}
HXDLIN( 836)			return (((Float)_hx_tmp6 / (Float)_hx_tmp7->_height) * (int)100);
            		}
HXLINE( 839)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Widget_obj,get_topPt,return )

Float Widget_obj::set_bottomPt(Float bp){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Widget","set_bottomPt",0x1349ac79,"ru.stablex.ui.widgets.Widget.set_bottomPt","ru/stablex/ui/widgets/Widget.hx",847,0xb63704bd)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(bp,"bp")
HXLINE( 848)		this->_yUse = (int)8;
HXLINE( 850)		 ::ru::stablex::ui::widgets::Widget _hx_tmp;
HXDLIN( 850)		Bool _hx_tmp1 = ::Std_obj::is(this->parent,hx::ClassOf< ::ru::stablex::ui::widgets::Widget >());
HXDLIN( 850)		if (_hx_tmp1) {
HXLINE( 850)			_hx_tmp = hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            		}
            		else {
HXLINE( 850)			_hx_tmp = null();
            		}
HXDLIN( 850)		Bool _hx_tmp2 = hx::IsNotNull( _hx_tmp );
HXDLIN( 850)		if (_hx_tmp2) {
HXLINE( 851)			 ::ru::stablex::ui::widgets::Widget _hx_tmp3;
HXDLIN( 851)			Bool _hx_tmp4 = ::Std_obj::is(this->parent,hx::ClassOf< ::ru::stablex::ui::widgets::Widget >());
HXDLIN( 851)			if (_hx_tmp4) {
HXLINE( 851)				_hx_tmp3 = hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            			}
            			else {
HXLINE( 851)				_hx_tmp3 = null();
            			}
HXDLIN( 851)			Float _hx_tmp5 = _hx_tmp3->_height;
HXDLIN( 851)			 ::ru::stablex::ui::widgets::Widget _hx_tmp6;
HXDLIN( 851)			Bool _hx_tmp7 = ::Std_obj::is(this->parent,hx::ClassOf< ::ru::stablex::ui::widgets::Widget >());
HXDLIN( 851)			if (_hx_tmp7) {
HXLINE( 851)				_hx_tmp6 = hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            			}
            			else {
HXLINE( 851)				_hx_tmp6 = null();
            			}
HXDLIN( 851)			Float _hx_tmp8 = (_hx_tmp5 - ((Float)(_hx_tmp6->_height * bp) / (Float)(int)100));
HXDLIN( 851)			Float _hx_tmp9 = this->get_h();
HXDLIN( 851)			this->set_y((_hx_tmp8 - _hx_tmp9));
            		}
HXLINE( 854)		return (this->_bottomPercent = bp);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Widget_obj,set_bottomPt,return )

Float Widget_obj::get_bottomPt(){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Widget","get_bottomPt",0xfe508905,"ru.stablex.ui.widgets.Widget.get_bottomPt","ru/stablex/ui/widgets/Widget.hx",862,0xb63704bd)
            	HX_STACK_THIS(this)
HXLINE( 863)		if ((this->_yUse == (int)8)) {
HXLINE( 864)			return this->_bottomPercent;
            		}
HXLINE( 867)		Bool _hx_tmp;
HXDLIN( 867)		 ::ru::stablex::ui::widgets::Widget _hx_tmp1;
HXDLIN( 867)		Bool _hx_tmp2 = ::Std_obj::is(this->parent,hx::ClassOf< ::ru::stablex::ui::widgets::Widget >());
HXDLIN( 867)		if (_hx_tmp2) {
HXLINE( 867)			_hx_tmp1 = hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            		}
            		else {
HXLINE( 867)			_hx_tmp1 = null();
            		}
HXDLIN( 867)		Bool _hx_tmp3 = hx::IsNotNull( _hx_tmp1 );
HXDLIN( 867)		if (_hx_tmp3) {
HXLINE( 867)			 ::ru::stablex::ui::widgets::Widget _hx_tmp4;
HXDLIN( 867)			Bool _hx_tmp5 = ::Std_obj::is(this->parent,hx::ClassOf< ::ru::stablex::ui::widgets::Widget >());
HXDLIN( 867)			if (_hx_tmp5) {
HXLINE( 867)				_hx_tmp4 = hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            			}
            			else {
HXLINE( 867)				_hx_tmp4 = null();
            			}
HXDLIN( 867)			_hx_tmp = (_hx_tmp4->_height != (int)0);
            		}
            		else {
HXLINE( 867)			_hx_tmp = false;
            		}
HXDLIN( 867)		if (_hx_tmp) {
HXLINE( 868)			 ::ru::stablex::ui::widgets::Widget _hx_tmp6;
HXDLIN( 868)			Bool _hx_tmp7 = ::Std_obj::is(this->parent,hx::ClassOf< ::ru::stablex::ui::widgets::Widget >());
HXDLIN( 868)			if (_hx_tmp7) {
HXLINE( 868)				_hx_tmp6 = hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            			}
            			else {
HXLINE( 868)				_hx_tmp6 = null();
            			}
HXDLIN( 868)			Float _hx_tmp8 = _hx_tmp6->_height;
HXDLIN( 868)			Float _hx_tmp9 = this->get_y();
HXDLIN( 868)			Float _hx_tmp10 = ((_hx_tmp8 - _hx_tmp9) - this->_height);
HXDLIN( 868)			 ::ru::stablex::ui::widgets::Widget _hx_tmp11;
HXDLIN( 868)			Bool _hx_tmp12 = ::Std_obj::is(this->parent,hx::ClassOf< ::ru::stablex::ui::widgets::Widget >());
HXDLIN( 868)			if (_hx_tmp12) {
HXLINE( 868)				_hx_tmp11 = hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            			}
            			else {
HXLINE( 868)				_hx_tmp11 = null();
            			}
HXDLIN( 868)			return (((Float)_hx_tmp10 / (Float)_hx_tmp11->_height) * (int)100);
            		}
HXLINE( 871)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Widget_obj,get_bottomPt,return )

Float Widget_obj::set_w(Float w){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Widget","set_w",0xfe21208d,"ru.stablex.ui.widgets.Widget.set_w","ru/stablex/ui/widgets/Widget.hx",879,0xb63704bd)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(w,"w")
HXLINE( 880)		this->_width = w;
HXLINE( 881)		this->_widthUsePercent = false;
HXLINE( 882)		Bool _hx_tmp = !(this->_silentResize);
HXDLIN( 882)		if (_hx_tmp) {
HXLINE( 883)			this->_onResize();
            		}
HXLINE( 885)		return w;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Widget_obj,set_w,return )

Float Widget_obj::get_w(){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Widget","get_w",0x15522a81,"ru.stablex.ui.widgets.Widget.get_w","ru/stablex/ui/widgets/Widget.hx",894,0xb63704bd)
            	HX_STACK_THIS(this)
HXLINE( 894)		return this->_width;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Widget_obj,get_w,return )

Float Widget_obj::set_h(Float h){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Widget","set_h",0xfe21207e,"ru.stablex.ui.widgets.Widget.set_h","ru/stablex/ui/widgets/Widget.hx",902,0xb63704bd)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(h,"h")
HXLINE( 903)		this->_height = h;
HXLINE( 904)		this->_heightUsePercent = false;
HXLINE( 905)		Bool _hx_tmp = !(this->_silentResize);
HXDLIN( 905)		if (_hx_tmp) {
HXLINE( 906)			this->_onResize();
            		}
HXLINE( 908)		return h;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Widget_obj,set_h,return )

Float Widget_obj::get_h(){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Widget","get_h",0x15522a72,"ru.stablex.ui.widgets.Widget.get_h","ru/stablex/ui/widgets/Widget.hx",917,0xb63704bd)
            	HX_STACK_THIS(this)
HXLINE( 917)		return this->_height;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Widget_obj,get_h,return )

Float Widget_obj::get_contentHeight(){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Widget","get_contentHeight",0xeeb54b0a,"ru.stablex.ui.widgets.Widget.get_contentHeight","ru/stablex/ui/widgets/Widget.hx",926,0xb63704bd)
            	HX_STACK_THIS(this)
HXLINE( 926)		return this->get_h();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Widget_obj,get_contentHeight,return )

Float Widget_obj::get_contentWidth(){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Widget","get_contentWidth",0xd2556843,"ru.stablex.ui.widgets.Widget.get_contentWidth","ru/stablex/ui/widgets/Widget.hx",935,0xb63704bd)
            	HX_STACK_THIS(this)
HXLINE( 935)		return this->get_w();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Widget_obj,get_contentWidth,return )

Float Widget_obj::set_widthPt(Float wp){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Widget","set_widthPt",0x3f925e40,"ru.stablex.ui.widgets.Widget.set_widthPt","ru/stablex/ui/widgets/Widget.hx",943,0xb63704bd)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(wp,"wp")
HXLINE( 944)		this->_widthPercent = wp;
HXLINE( 945)		this->_widthUsePercent = true;
HXLINE( 947)		 ::ru::stablex::ui::widgets::Widget _hx_tmp;
HXDLIN( 947)		Bool _hx_tmp1 = ::Std_obj::is(this->parent,hx::ClassOf< ::ru::stablex::ui::widgets::Widget >());
HXDLIN( 947)		if (_hx_tmp1) {
HXLINE( 947)			_hx_tmp = hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            		}
            		else {
HXLINE( 947)			_hx_tmp = null();
            		}
HXDLIN( 947)		Bool _hx_tmp2 = hx::IsNotNull( _hx_tmp );
HXDLIN( 947)		if (_hx_tmp2) {
HXLINE( 948)			 ::ru::stablex::ui::widgets::Widget _hx_tmp3;
HXDLIN( 948)			Bool _hx_tmp4 = ::Std_obj::is(this->parent,hx::ClassOf< ::ru::stablex::ui::widgets::Widget >());
HXDLIN( 948)			if (_hx_tmp4) {
HXLINE( 948)				_hx_tmp3 = hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            			}
            			else {
HXLINE( 948)				_hx_tmp3 = null();
            			}
HXDLIN( 948)			Float _hx_tmp5 = _hx_tmp3->get_contentWidth();
HXDLIN( 948)			this->_width = ((Float)(_hx_tmp5 * wp) / (Float)(int)100);
HXLINE( 949)			Bool _hx_tmp6 = !(this->_silentResize);
HXDLIN( 949)			if (_hx_tmp6) {
HXLINE( 950)				this->_onResize();
            			}
            		}
HXLINE( 954)		return wp;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Widget_obj,set_widthPt,return )

Float Widget_obj::get_widthPt(){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Widget","get_widthPt",0x35255734,"ru.stablex.ui.widgets.Widget.get_widthPt","ru/stablex/ui/widgets/Widget.hx",963,0xb63704bd)
            	HX_STACK_THIS(this)
HXLINE( 963)		Bool _hx_tmp = this->_widthUsePercent;
HXDLIN( 963)		if (_hx_tmp) {
HXLINE( 964)			return this->_widthPercent;
            		}
            		else {
HXLINE( 966)			Bool _hx_tmp1;
HXDLIN( 966)			 ::ru::stablex::ui::widgets::Widget _hx_tmp2;
HXDLIN( 966)			Bool _hx_tmp3 = ::Std_obj::is(this->parent,hx::ClassOf< ::ru::stablex::ui::widgets::Widget >());
HXDLIN( 966)			if (_hx_tmp3) {
HXLINE( 966)				_hx_tmp2 = hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            			}
            			else {
HXLINE( 966)				_hx_tmp2 = null();
            			}
HXDLIN( 966)			Bool _hx_tmp4 = hx::IsNotNull( _hx_tmp2 );
HXDLIN( 966)			if (_hx_tmp4) {
HXLINE( 966)				 ::ru::stablex::ui::widgets::Widget _hx_tmp5;
HXDLIN( 966)				Bool _hx_tmp6 = ::Std_obj::is(this->parent,hx::ClassOf< ::ru::stablex::ui::widgets::Widget >());
HXDLIN( 966)				if (_hx_tmp6) {
HXLINE( 966)					_hx_tmp5 = hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            				}
            				else {
HXLINE( 966)					_hx_tmp5 = null();
            				}
HXDLIN( 966)				_hx_tmp1 = (_hx_tmp5->_width != (int)0);
            			}
            			else {
HXLINE( 966)				_hx_tmp1 = false;
            			}
HXDLIN( 966)			if (_hx_tmp1) {
HXLINE( 967)				Float _hx_tmp7 = this->get_w();
HXDLIN( 967)				 ::ru::stablex::ui::widgets::Widget _hx_tmp8;
HXDLIN( 967)				Bool _hx_tmp9 = ::Std_obj::is(this->parent,hx::ClassOf< ::ru::stablex::ui::widgets::Widget >());
HXDLIN( 967)				if (_hx_tmp9) {
HXLINE( 967)					_hx_tmp8 = hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            				}
            				else {
HXLINE( 967)					_hx_tmp8 = null();
            				}
HXDLIN( 967)				return (((Float)_hx_tmp7 / (Float)_hx_tmp8->_width) * (int)100);
            			}
            			else {
HXLINE( 970)				return (int)0;
            			}
            		}
HXLINE( 963)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Widget_obj,get_widthPt,return )

Float Widget_obj::set_heightPt(Float hp){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Widget","set_heightPt",0xe3e40475,"ru.stablex.ui.widgets.Widget.set_heightPt","ru/stablex/ui/widgets/Widget.hx",979,0xb63704bd)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(hp,"hp")
HXLINE( 980)		this->_heightPercent = hp;
HXLINE( 981)		this->_heightUsePercent = true;
HXLINE( 983)		 ::ru::stablex::ui::widgets::Widget _hx_tmp;
HXDLIN( 983)		Bool _hx_tmp1 = ::Std_obj::is(this->parent,hx::ClassOf< ::ru::stablex::ui::widgets::Widget >());
HXDLIN( 983)		if (_hx_tmp1) {
HXLINE( 983)			_hx_tmp = hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            		}
            		else {
HXLINE( 983)			_hx_tmp = null();
            		}
HXDLIN( 983)		Bool _hx_tmp2 = hx::IsNotNull( _hx_tmp );
HXDLIN( 983)		if (_hx_tmp2) {
HXLINE( 984)			 ::ru::stablex::ui::widgets::Widget _hx_tmp3;
HXDLIN( 984)			Bool _hx_tmp4 = ::Std_obj::is(this->parent,hx::ClassOf< ::ru::stablex::ui::widgets::Widget >());
HXDLIN( 984)			if (_hx_tmp4) {
HXLINE( 984)				_hx_tmp3 = hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            			}
            			else {
HXLINE( 984)				_hx_tmp3 = null();
            			}
HXDLIN( 984)			Float _hx_tmp5 = _hx_tmp3->get_contentHeight();
HXDLIN( 984)			this->_height = ((Float)(_hx_tmp5 * hp) / (Float)(int)100);
HXLINE( 985)			Bool _hx_tmp6 = !(this->_silentResize);
HXDLIN( 985)			if (_hx_tmp6) {
HXLINE( 986)				this->_onResize();
            			}
            		}
HXLINE( 990)		return hp;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Widget_obj,set_heightPt,return )

Float Widget_obj::get_heightPt(){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Widget","get_heightPt",0xceeae101,"ru.stablex.ui.widgets.Widget.get_heightPt","ru/stablex/ui/widgets/Widget.hx",999,0xb63704bd)
            	HX_STACK_THIS(this)
HXLINE( 999)		Bool _hx_tmp = this->_heightUsePercent;
HXDLIN( 999)		if (_hx_tmp) {
HXLINE(1000)			return this->_heightPercent;
            		}
            		else {
HXLINE(1002)			Bool _hx_tmp1;
HXDLIN(1002)			 ::ru::stablex::ui::widgets::Widget _hx_tmp2;
HXDLIN(1002)			Bool _hx_tmp3 = ::Std_obj::is(this->parent,hx::ClassOf< ::ru::stablex::ui::widgets::Widget >());
HXDLIN(1002)			if (_hx_tmp3) {
HXLINE(1002)				_hx_tmp2 = hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            			}
            			else {
HXLINE(1002)				_hx_tmp2 = null();
            			}
HXDLIN(1002)			Bool _hx_tmp4 = hx::IsNotNull( _hx_tmp2 );
HXDLIN(1002)			if (_hx_tmp4) {
HXLINE(1002)				 ::ru::stablex::ui::widgets::Widget _hx_tmp5;
HXDLIN(1002)				Bool _hx_tmp6 = ::Std_obj::is(this->parent,hx::ClassOf< ::ru::stablex::ui::widgets::Widget >());
HXDLIN(1002)				if (_hx_tmp6) {
HXLINE(1002)					_hx_tmp5 = hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            				}
            				else {
HXLINE(1002)					_hx_tmp5 = null();
            				}
HXDLIN(1002)				_hx_tmp1 = (_hx_tmp5->_height != (int)0);
            			}
            			else {
HXLINE(1002)				_hx_tmp1 = false;
            			}
HXDLIN(1002)			if (_hx_tmp1) {
HXLINE(1003)				Float _hx_tmp7 = this->_height;
HXDLIN(1003)				 ::ru::stablex::ui::widgets::Widget _hx_tmp8;
HXDLIN(1003)				Bool _hx_tmp9 = ::Std_obj::is(this->parent,hx::ClassOf< ::ru::stablex::ui::widgets::Widget >());
HXDLIN(1003)				if (_hx_tmp9) {
HXLINE(1003)					_hx_tmp8 = hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            				}
            				else {
HXLINE(1003)					_hx_tmp8 = null();
            				}
HXDLIN(1003)				return (((Float)_hx_tmp7 / (Float)_hx_tmp8->_height) * (int)100);
            			}
            			else {
HXLINE(1006)				return (int)0;
            			}
            		}
HXLINE( 999)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Widget_obj,get_heightPt,return )

::String Widget_obj::set_id(::String id){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Widget","set_id",0x5edb4f05,"ru.stablex.ui.widgets.Widget.set_id","ru/stablex/ui/widgets/Widget.hx",1015,0xb63704bd)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(id,"id")
HXLINE(1016)		Bool _hx_tmp = hx::IsNull( id );
HXDLIN(1016)		if (_hx_tmp) {
HXLINE(1017)			HX_STACK_DO_THROW(HX_("Widget id cannot be null",50,d7,5e,5e));
            		}
HXLINE(1021)		Bool _hx_tmp1 = hx::IsNotNull( this->id );
HXDLIN(1021)		if (_hx_tmp1) {
HXLINE(1022)			::ru::stablex::ui::UIBuilder_obj::_objects->remove(this->id);
            		}
HXLINE(1025)		this->id = id;
HXLINE(1028)		Bool _hx_tmp2 = ::ru::stablex::ui::UIBuilder_obj::_objects->exists(this->id);
HXDLIN(1028)		if (_hx_tmp2) {
HXLINE(1028)			HX_STACK_DO_THROW(((HX_("Widget id \"",59,36,9e,8f) + this->id) + HX_("\" is already used",bd,b5,7b,b9)));
            		}
            		else {
HXLINE(1028)			::ru::stablex::ui::UIBuilder_obj::_objects->set(this->id,hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE(1030)		return id;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Widget_obj,set_id,return )

 ::ru::stablex::ui::widgets::Tip Widget_obj::set_tip( ::ru::stablex::ui::widgets::Tip tip){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Widget","set_tip",0xa11232f1,"ru.stablex.ui.widgets.Widget.set_tip","ru/stablex/ui/widgets/Widget.hx",1038,0xb63704bd)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(tip,"tip")
HXLINE(1039)		Bool _hx_tmp = hx::IsNotNull( this->tip );
HXDLIN(1039)		if (_hx_tmp) {
HXLINE(1040)			this->tip->free(null());
            		}
HXLINE(1042)		tip->bindTo(hx::ObjectPtr<OBJ_>(this));
HXLINE(1043)		return (this->tip = tip);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Widget_obj,set_tip,return )

Int Widget_obj::_X_USE_LEFT;

Int Widget_obj::_X_USE_LEFT_PERCENT;

Int Widget_obj::_X_USE_RIGHT;

Int Widget_obj::_X_USE_RIGHT_PERCENT;

Int Widget_obj::_Y_USE_TOP;

Int Widget_obj::_Y_USE_TOP_PERCENT;

Int Widget_obj::_Y_USE_BOTTOM;

Int Widget_obj::_Y_USE_BOTTOM_PERCENT;


Widget_obj::Widget_obj()
{
}

void Widget_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Widget);
	HX_MARK_MEMBER_NAME(defaults,"defaults");
	HX_MARK_MEMBER_NAME(initialized,"initialized");
	HX_MARK_MEMBER_NAME(created,"created");
	HX_MARK_MEMBER_NAME(destroyed,"destroyed");
	HX_MARK_MEMBER_NAME(contentWidth,"contentWidth");
	HX_MARK_MEMBER_NAME(_width,"_width");
	HX_MARK_MEMBER_NAME(_widthPercent,"_widthPercent");
	HX_MARK_MEMBER_NAME(_widthUsePercent,"_widthUsePercent");
	HX_MARK_MEMBER_NAME(minWidthByContent,"minWidthByContent");
	HX_MARK_MEMBER_NAME(minHeightByContent,"minHeightByContent");
	HX_MARK_MEMBER_NAME(contentHeight,"contentHeight");
	HX_MARK_MEMBER_NAME(_height,"_height");
	HX_MARK_MEMBER_NAME(_heightPercent,"_heightPercent");
	HX_MARK_MEMBER_NAME(_heightUsePercent,"_heightUsePercent");
	HX_MARK_MEMBER_NAME(_silentResize,"_silentResize");
	HX_MARK_MEMBER_NAME(_resizing,"_resizing");
	HX_MARK_MEMBER_NAME(id,"id");
	HX_MARK_MEMBER_NAME(_left,"_left");
	HX_MARK_MEMBER_NAME(_leftPercent,"_leftPercent");
	HX_MARK_MEMBER_NAME(_right,"_right");
	HX_MARK_MEMBER_NAME(_rightPercent,"_rightPercent");
	HX_MARK_MEMBER_NAME(_xUse,"_xUse");
	HX_MARK_MEMBER_NAME(_yUse,"_yUse");
	HX_MARK_MEMBER_NAME(_top,"_top");
	HX_MARK_MEMBER_NAME(_topPercent,"_topPercent");
	HX_MARK_MEMBER_NAME(_bottom,"_bottom");
	HX_MARK_MEMBER_NAME(_bottomPercent,"_bottomPercent");
	HX_MARK_MEMBER_NAME(skin,"skin");
	HX_MARK_MEMBER_NAME(_appliedSkin,"_appliedSkin");
	HX_MARK_MEMBER_NAME(_skinQueued,"_skinQueued");
	HX_MARK_MEMBER_NAME(skinName,"skinName");
	HX_MARK_MEMBER_NAME(overflow,"overflow");
	HX_MARK_MEMBER_NAME(tip,"tip");
	HX_MARK_MEMBER_NAME(layout,"layout");
	 ::ru::stablex::TweenSprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Widget_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(defaults,"defaults");
	HX_VISIT_MEMBER_NAME(initialized,"initialized");
	HX_VISIT_MEMBER_NAME(created,"created");
	HX_VISIT_MEMBER_NAME(destroyed,"destroyed");
	HX_VISIT_MEMBER_NAME(contentWidth,"contentWidth");
	HX_VISIT_MEMBER_NAME(_width,"_width");
	HX_VISIT_MEMBER_NAME(_widthPercent,"_widthPercent");
	HX_VISIT_MEMBER_NAME(_widthUsePercent,"_widthUsePercent");
	HX_VISIT_MEMBER_NAME(minWidthByContent,"minWidthByContent");
	HX_VISIT_MEMBER_NAME(minHeightByContent,"minHeightByContent");
	HX_VISIT_MEMBER_NAME(contentHeight,"contentHeight");
	HX_VISIT_MEMBER_NAME(_height,"_height");
	HX_VISIT_MEMBER_NAME(_heightPercent,"_heightPercent");
	HX_VISIT_MEMBER_NAME(_heightUsePercent,"_heightUsePercent");
	HX_VISIT_MEMBER_NAME(_silentResize,"_silentResize");
	HX_VISIT_MEMBER_NAME(_resizing,"_resizing");
	HX_VISIT_MEMBER_NAME(id,"id");
	HX_VISIT_MEMBER_NAME(_left,"_left");
	HX_VISIT_MEMBER_NAME(_leftPercent,"_leftPercent");
	HX_VISIT_MEMBER_NAME(_right,"_right");
	HX_VISIT_MEMBER_NAME(_rightPercent,"_rightPercent");
	HX_VISIT_MEMBER_NAME(_xUse,"_xUse");
	HX_VISIT_MEMBER_NAME(_yUse,"_yUse");
	HX_VISIT_MEMBER_NAME(_top,"_top");
	HX_VISIT_MEMBER_NAME(_topPercent,"_topPercent");
	HX_VISIT_MEMBER_NAME(_bottom,"_bottom");
	HX_VISIT_MEMBER_NAME(_bottomPercent,"_bottomPercent");
	HX_VISIT_MEMBER_NAME(skin,"skin");
	HX_VISIT_MEMBER_NAME(_appliedSkin,"_appliedSkin");
	HX_VISIT_MEMBER_NAME(_skinQueued,"_skinQueued");
	HX_VISIT_MEMBER_NAME(skinName,"skinName");
	HX_VISIT_MEMBER_NAME(overflow,"overflow");
	HX_VISIT_MEMBER_NAME(tip,"tip");
	HX_VISIT_MEMBER_NAME(layout,"layout");
	 ::ru::stablex::TweenSprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Widget_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"w") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_w()); }
		if (HX_FIELD_EQ(inName,"h") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_h()); }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { return hx::Val( id); }
		if (HX_FIELD_EQ(inName,"as") ) { return hx::Val( as_dyn()); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"top") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_top()); }
		if (HX_FIELD_EQ(inName,"tip") ) { return hx::Val( tip); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"left") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_left()); }
		if (HX_FIELD_EQ(inName,"_top") ) { return hx::Val( _top); }
		if (HX_FIELD_EQ(inName,"skin") ) { return hx::Val( skin); }
		if (HX_FIELD_EQ(inName,"free") ) { return hx::Val( free_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_left") ) { return hx::Val( _left); }
		if (HX_FIELD_EQ(inName,"right") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_right()); }
		if (HX_FIELD_EQ(inName,"_xUse") ) { return hx::Val( _xUse); }
		if (HX_FIELD_EQ(inName,"_yUse") ) { return hx::Val( _yUse); }
		if (HX_FIELD_EQ(inName,"topPt") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_topPt()); }
		if (HX_FIELD_EQ(inName,"set_w") ) { return hx::Val( set_w_dyn()); }
		if (HX_FIELD_EQ(inName,"get_w") ) { return hx::Val( get_w_dyn()); }
		if (HX_FIELD_EQ(inName,"set_h") ) { return hx::Val( set_h_dyn()); }
		if (HX_FIELD_EQ(inName,"get_h") ) { return hx::Val( get_h_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_width") ) { return hx::Val( _width); }
		if (HX_FIELD_EQ(inName,"leftPt") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_leftPt()); }
		if (HX_FIELD_EQ(inName,"_right") ) { return hx::Val( _right); }
		if (HX_FIELD_EQ(inName,"bottom") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_bottom()); }
		if (HX_FIELD_EQ(inName,"layout") ) { return hx::Val( layout); }
		if (HX_FIELD_EQ(inName,"resize") ) { return hx::Val( resize_dyn()); }
		if (HX_FIELD_EQ(inName,"set_id") ) { return hx::Val( set_id_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"created") ) { return hx::Val( created); }
		if (HX_FIELD_EQ(inName,"widthPt") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_widthPt()); }
		if (HX_FIELD_EQ(inName,"_height") ) { return hx::Val( _height); }
		if (HX_FIELD_EQ(inName,"rightPt") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_rightPt()); }
		if (HX_FIELD_EQ(inName,"wparent") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_wparent()); }
		if (HX_FIELD_EQ(inName,"_bottom") ) { return hx::Val( _bottom); }
		if (HX_FIELD_EQ(inName,"refresh") ) { return hx::Val( refresh_dyn()); }
		if (HX_FIELD_EQ(inName,"set_top") ) { return hx::Val( set_top_dyn()); }
		if (HX_FIELD_EQ(inName,"get_top") ) { return hx::Val( get_top_dyn()); }
		if (HX_FIELD_EQ(inName,"set_tip") ) { return hx::Val( set_tip_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"defaults") ) { return hx::Val( defaults); }
		if (HX_FIELD_EQ(inName,"heightPt") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_heightPt()); }
		if (HX_FIELD_EQ(inName,"bottomPt") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_bottomPt()); }
		if (HX_FIELD_EQ(inName,"skinName") ) { return hx::Val( skinName); }
		if (HX_FIELD_EQ(inName,"overflow") ) { return hx::Val( overflow); }
		if (HX_FIELD_EQ(inName,"onCreate") ) { return hx::Val( onCreate_dyn()); }
		if (HX_FIELD_EQ(inName,"onResize") ) { return hx::Val( onResize_dyn()); }
		if (HX_FIELD_EQ(inName,"addChild") ) { return hx::Val( addChild_dyn()); }
		if (HX_FIELD_EQ(inName,"getChild") ) { return hx::Val( getChild_dyn()); }
		if (HX_FIELD_EQ(inName,"set_left") ) { return hx::Val( set_left_dyn()); }
		if (HX_FIELD_EQ(inName,"get_left") ) { return hx::Val( get_left_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"destroyed") ) { return hx::Val( destroyed); }
		if (HX_FIELD_EQ(inName,"_resizing") ) { return hx::Val( _resizing); }
		if (HX_FIELD_EQ(inName,"_onCreate") ) { return hx::Val( _onCreate_dyn()); }
		if (HX_FIELD_EQ(inName,"applySkin") ) { return hx::Val( applySkin_dyn()); }
		if (HX_FIELD_EQ(inName,"_onResize") ) { return hx::Val( _onResize_dyn()); }
		if (HX_FIELD_EQ(inName,"getParent") ) { return hx::Val( getParent_dyn()); }
		if (HX_FIELD_EQ(inName,"set_right") ) { return hx::Val( set_right_dyn()); }
		if (HX_FIELD_EQ(inName,"get_right") ) { return hx::Val( get_right_dyn()); }
		if (HX_FIELD_EQ(inName,"set_topPt") ) { return hx::Val( set_topPt_dyn()); }
		if (HX_FIELD_EQ(inName,"get_topPt") ) { return hx::Val( get_topPt_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_newParent") ) { return hx::Val( _newParent_dyn()); }
		if (HX_FIELD_EQ(inName,"addChildAt") ) { return hx::Val( addChildAt_dyn()); }
		if (HX_FIELD_EQ(inName,"getChildAs") ) { return hx::Val( getChildAs_dyn()); }
		if (HX_FIELD_EQ(inName,"set_leftPt") ) { return hx::Val( set_leftPt_dyn()); }
		if (HX_FIELD_EQ(inName,"get_leftPt") ) { return hx::Val( get_leftPt_dyn()); }
		if (HX_FIELD_EQ(inName,"set_bottom") ) { return hx::Val( set_bottom_dyn()); }
		if (HX_FIELD_EQ(inName,"get_bottom") ) { return hx::Val( get_bottom_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"initialized") ) { return hx::Val( initialized); }
		if (HX_FIELD_EQ(inName,"_topPercent") ) { return hx::Val( _topPercent); }
		if (HX_FIELD_EQ(inName,"_skinQueued") ) { return hx::Val( _skinQueued); }
		if (HX_FIELD_EQ(inName,"applyLayout") ) { return hx::Val( applyLayout_dyn()); }
		if (HX_FIELD_EQ(inName,"onNewParent") ) { return hx::Val( onNewParent_dyn()); }
		if (HX_FIELD_EQ(inName,"removeChild") ) { return hx::Val( removeChild_dyn()); }
		if (HX_FIELD_EQ(inName,"getParentAs") ) { return hx::Val( getParentAs_dyn()); }
		if (HX_FIELD_EQ(inName,"get_wparent") ) { return hx::Val( get_wparent_dyn()); }
		if (HX_FIELD_EQ(inName,"set_rightPt") ) { return hx::Val( set_rightPt_dyn()); }
		if (HX_FIELD_EQ(inName,"get_rightPt") ) { return hx::Val( get_rightPt_dyn()); }
		if (HX_FIELD_EQ(inName,"set_widthPt") ) { return hx::Val( set_widthPt_dyn()); }
		if (HX_FIELD_EQ(inName,"get_widthPt") ) { return hx::Val( get_widthPt_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"contentWidth") ) { return hx::Val( inCallProp == hx::paccAlways ? get_contentWidth() : contentWidth); }
		if (HX_FIELD_EQ(inName,"_leftPercent") ) { return hx::Val( _leftPercent); }
		if (HX_FIELD_EQ(inName,"_appliedSkin") ) { return hx::Val( _appliedSkin); }
		if (HX_FIELD_EQ(inName,"onInitialize") ) { return hx::Val( onInitialize_dyn()); }
		if (HX_FIELD_EQ(inName,"set_overflow") ) { return hx::Val( set_overflow_dyn()); }
		if (HX_FIELD_EQ(inName,"set_skinName") ) { return hx::Val( set_skinName_dyn()); }
		if (HX_FIELD_EQ(inName,"set_bottomPt") ) { return hx::Val( set_bottomPt_dyn()); }
		if (HX_FIELD_EQ(inName,"get_bottomPt") ) { return hx::Val( get_bottomPt_dyn()); }
		if (HX_FIELD_EQ(inName,"set_heightPt") ) { return hx::Val( set_heightPt_dyn()); }
		if (HX_FIELD_EQ(inName,"get_heightPt") ) { return hx::Val( get_heightPt_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_widthPercent") ) { return hx::Val( _widthPercent); }
		if (HX_FIELD_EQ(inName,"contentHeight") ) { return hx::Val( inCallProp == hx::paccAlways ? get_contentHeight() : contentHeight); }
		if (HX_FIELD_EQ(inName,"_silentResize") ) { return hx::Val( _silentResize); }
		if (HX_FIELD_EQ(inName,"_rightPercent") ) { return hx::Val( _rightPercent); }
		if (HX_FIELD_EQ(inName,"_onInitialize") ) { return hx::Val( _onInitialize_dyn()); }
		if (HX_FIELD_EQ(inName,"removeChildAt") ) { return hx::Val( removeChildAt_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_heightPercent") ) { return hx::Val( _heightPercent); }
		if (HX_FIELD_EQ(inName,"_bottomPercent") ) { return hx::Val( _bottomPercent); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_onParentResize") ) { return hx::Val( _onParentResize_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_widthUsePercent") ) { return hx::Val( _widthUsePercent); }
		if (HX_FIELD_EQ(inName,"_findChildWidget") ) { return hx::Val( _findChildWidget_dyn()); }
		if (HX_FIELD_EQ(inName,"getNearestParent") ) { return hx::Val( getNearestParent_dyn()); }
		if (HX_FIELD_EQ(inName,"get_contentWidth") ) { return hx::Val( get_contentWidth_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"minWidthByContent") ) { return hx::Val( minWidthByContent); }
		if (HX_FIELD_EQ(inName,"_heightUsePercent") ) { return hx::Val( _heightUsePercent); }
		if (HX_FIELD_EQ(inName,"get_contentHeight") ) { return hx::Val( get_contentHeight_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"minHeightByContent") ) { return hx::Val( minHeightByContent); }
		if (HX_FIELD_EQ(inName,"_resizeWithPercent") ) { return hx::Val( _resizeWithPercent_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Widget_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"w") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_w(inValue) ); }
		if (HX_FIELD_EQ(inName,"h") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_h(inValue) ); }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_id(inValue) );id=inValue.Cast< ::String >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"top") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_top(inValue) ); }
		if (HX_FIELD_EQ(inName,"tip") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_tip(inValue) );tip=inValue.Cast<  ::ru::stablex::ui::widgets::Tip >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"left") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_left(inValue) ); }
		if (HX_FIELD_EQ(inName,"_top") ) { _top=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"skin") ) { skin=inValue.Cast<  ::ru::stablex::ui::skins::Skin >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_left") ) { _left=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"right") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_right(inValue) ); }
		if (HX_FIELD_EQ(inName,"_xUse") ) { _xUse=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_yUse") ) { _yUse=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"topPt") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_topPt(inValue) ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_width") ) { _width=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"leftPt") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_leftPt(inValue) ); }
		if (HX_FIELD_EQ(inName,"_right") ) { _right=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bottom") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_bottom(inValue) ); }
		if (HX_FIELD_EQ(inName,"layout") ) { layout=inValue.Cast<  ::ru::stablex::ui::layouts::Layout >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"created") ) { created=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"widthPt") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_widthPt(inValue) ); }
		if (HX_FIELD_EQ(inName,"_height") ) { _height=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rightPt") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_rightPt(inValue) ); }
		if (HX_FIELD_EQ(inName,"_bottom") ) { _bottom=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"defaults") ) { defaults=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"heightPt") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_heightPt(inValue) ); }
		if (HX_FIELD_EQ(inName,"bottomPt") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_bottomPt(inValue) ); }
		if (HX_FIELD_EQ(inName,"skinName") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_skinName(inValue) );skinName=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"overflow") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_overflow(inValue) );overflow=inValue.Cast< Bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"destroyed") ) { destroyed=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_resizing") ) { _resizing=inValue.Cast< Bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"initialized") ) { initialized=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_topPercent") ) { _topPercent=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_skinQueued") ) { _skinQueued=inValue.Cast< Bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"contentWidth") ) { contentWidth=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_leftPercent") ) { _leftPercent=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_appliedSkin") ) { _appliedSkin=inValue.Cast<  ::ru::stablex::ui::skins::Skin >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_widthPercent") ) { _widthPercent=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"contentHeight") ) { contentHeight=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_silentResize") ) { _silentResize=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_rightPercent") ) { _rightPercent=inValue.Cast< Float >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_heightPercent") ) { _heightPercent=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_bottomPercent") ) { _bottomPercent=inValue.Cast< Float >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_widthUsePercent") ) { _widthUsePercent=inValue.Cast< Bool >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"minWidthByContent") ) { minWidthByContent=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_heightUsePercent") ) { _heightUsePercent=inValue.Cast< Bool >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"minHeightByContent") ) { minHeightByContent=inValue.Cast< Bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Widget_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("defaults","\x92","\xd0","\x99","\xaf"));
	outFields->push(HX_HCSTRING("initialized","\x14","\xf5","\x0f","\x37"));
	outFields->push(HX_HCSTRING("created","\xe8","\xb5","\x6a","\x11"));
	outFields->push(HX_HCSTRING("destroyed","\xd9","\x37","\x27","\xf4"));
	outFields->push(HX_HCSTRING("w","\x77","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("contentWidth","\x0d","\x0a","\xf1","\xb0"));
	outFields->push(HX_HCSTRING("widthPt","\xaa","\x09","\x01","\x31"));
	outFields->push(HX_HCSTRING("_width","\x47","\xfd","\x49","\xc6"));
	outFields->push(HX_HCSTRING("_widthPercent","\x3e","\x1c","\xc9","\x82"));
	outFields->push(HX_HCSTRING("_widthUsePercent","\x65","\xcd","\x76","\xdb"));
	outFields->push(HX_HCSTRING("minWidthByContent","\x6e","\x92","\x38","\xc1"));
	outFields->push(HX_HCSTRING("minHeightByContent","\xc9","\x85","\x56","\xb4"));
	outFields->push(HX_HCSTRING("h","\x68","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("contentHeight","\x00","\x3a","\x47","\xd8"));
	outFields->push(HX_HCSTRING("heightPt","\xcb","\x55","\x4b","\x33"));
	outFields->push(HX_HCSTRING("_height","\x86","\x19","\xc3","\x70"));
	outFields->push(HX_HCSTRING("_heightPercent","\xdf","\x95","\x55","\xa1"));
	outFields->push(HX_HCSTRING("_heightUsePercent","\x64","\x4e","\xa7","\xc1"));
	outFields->push(HX_HCSTRING("_silentResize","\x48","\x75","\xc6","\x47"));
	outFields->push(HX_HCSTRING("_resizing","\x90","\x1f","\x16","\xe9"));
	outFields->push(HX_HCSTRING("id","\xdb","\x5b","\x00","\x00"));
	outFields->push(HX_HCSTRING("left","\x07","\x08","\xb0","\x47"));
	outFields->push(HX_HCSTRING("leftPt","\xeb","\x9d","\xc7","\x99"));
	outFields->push(HX_HCSTRING("_left","\xe6","\x23","\xc1","\xfa"));
	outFields->push(HX_HCSTRING("_leftPercent","\x7f","\x97","\x77","\xde"));
	outFields->push(HX_HCSTRING("right","\xdc","\x0b","\x64","\xe9"));
	outFields->push(HX_HCSTRING("rightPt","\x00","\x01","\x64","\x13"));
	outFields->push(HX_HCSTRING("_right","\x1d","\x53","\x4b","\xe5"));
	outFields->push(HX_HCSTRING("_rightPercent","\x28","\xcd","\xf7","\x45"));
	outFields->push(HX_HCSTRING("_xUse","\x8e","\x9a","\xa3","\x02"));
	outFields->push(HX_HCSTRING("_yUse","\x2d","\xd1","\x4c","\x03"));
	outFields->push(HX_HCSTRING("wparent","\xe1","\x38","\xf8","\x41"));
	outFields->push(HX_HCSTRING("top","\x95","\x66","\x58","\x00"));
	outFields->push(HX_HCSTRING("topPt","\xf9","\x3b","\x2f","\x14"));
	outFields->push(HX_HCSTRING("_top","\x96","\xab","\x23","\x3f"));
	outFields->push(HX_HCSTRING("_topPercent","\xcf","\x65","\x32","\xb7"));
	outFields->push(HX_HCSTRING("bottom","\xeb","\xe6","\x78","\x65"));
	outFields->push(HX_HCSTRING("bottomPt","\xcf","\xfd","\xb0","\x62"));
	outFields->push(HX_HCSTRING("_bottom","\x8a","\xf8","\xef","\xd3"));
	outFields->push(HX_HCSTRING("_bottomPercent","\x5b","\x5f","\xdc","\x11"));
	outFields->push(HX_HCSTRING("skin","\x7d","\x16","\x55","\x4c"));
	outFields->push(HX_HCSTRING("_appliedSkin","\x5b","\x44","\x64","\x01"));
	outFields->push(HX_HCSTRING("_skinQueued","\x2f","\x25","\xb4","\xb6"));
	outFields->push(HX_HCSTRING("skinName","\x68","\x37","\x87","\x98"));
	outFields->push(HX_HCSTRING("overflow","\x42","\xe3","\x3b","\x41"));
	outFields->push(HX_HCSTRING("tip","\x5b","\x61","\x58","\x00"));
	outFields->push(HX_HCSTRING("layout","\xaa","\xae","\xb8","\x58"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Widget_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(Widget_obj,defaults),HX_HCSTRING("defaults","\x92","\xd0","\x99","\xaf")},
	{hx::fsBool,(int)offsetof(Widget_obj,initialized),HX_HCSTRING("initialized","\x14","\xf5","\x0f","\x37")},
	{hx::fsBool,(int)offsetof(Widget_obj,created),HX_HCSTRING("created","\xe8","\xb5","\x6a","\x11")},
	{hx::fsBool,(int)offsetof(Widget_obj,destroyed),HX_HCSTRING("destroyed","\xd9","\x37","\x27","\xf4")},
	{hx::fsFloat,(int)offsetof(Widget_obj,contentWidth),HX_HCSTRING("contentWidth","\x0d","\x0a","\xf1","\xb0")},
	{hx::fsFloat,(int)offsetof(Widget_obj,_width),HX_HCSTRING("_width","\x47","\xfd","\x49","\xc6")},
	{hx::fsFloat,(int)offsetof(Widget_obj,_widthPercent),HX_HCSTRING("_widthPercent","\x3e","\x1c","\xc9","\x82")},
	{hx::fsBool,(int)offsetof(Widget_obj,_widthUsePercent),HX_HCSTRING("_widthUsePercent","\x65","\xcd","\x76","\xdb")},
	{hx::fsBool,(int)offsetof(Widget_obj,minWidthByContent),HX_HCSTRING("minWidthByContent","\x6e","\x92","\x38","\xc1")},
	{hx::fsBool,(int)offsetof(Widget_obj,minHeightByContent),HX_HCSTRING("minHeightByContent","\xc9","\x85","\x56","\xb4")},
	{hx::fsFloat,(int)offsetof(Widget_obj,contentHeight),HX_HCSTRING("contentHeight","\x00","\x3a","\x47","\xd8")},
	{hx::fsFloat,(int)offsetof(Widget_obj,_height),HX_HCSTRING("_height","\x86","\x19","\xc3","\x70")},
	{hx::fsFloat,(int)offsetof(Widget_obj,_heightPercent),HX_HCSTRING("_heightPercent","\xdf","\x95","\x55","\xa1")},
	{hx::fsBool,(int)offsetof(Widget_obj,_heightUsePercent),HX_HCSTRING("_heightUsePercent","\x64","\x4e","\xa7","\xc1")},
	{hx::fsBool,(int)offsetof(Widget_obj,_silentResize),HX_HCSTRING("_silentResize","\x48","\x75","\xc6","\x47")},
	{hx::fsBool,(int)offsetof(Widget_obj,_resizing),HX_HCSTRING("_resizing","\x90","\x1f","\x16","\xe9")},
	{hx::fsString,(int)offsetof(Widget_obj,id),HX_HCSTRING("id","\xdb","\x5b","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(Widget_obj,_left),HX_HCSTRING("_left","\xe6","\x23","\xc1","\xfa")},
	{hx::fsFloat,(int)offsetof(Widget_obj,_leftPercent),HX_HCSTRING("_leftPercent","\x7f","\x97","\x77","\xde")},
	{hx::fsFloat,(int)offsetof(Widget_obj,_right),HX_HCSTRING("_right","\x1d","\x53","\x4b","\xe5")},
	{hx::fsFloat,(int)offsetof(Widget_obj,_rightPercent),HX_HCSTRING("_rightPercent","\x28","\xcd","\xf7","\x45")},
	{hx::fsInt,(int)offsetof(Widget_obj,_xUse),HX_HCSTRING("_xUse","\x8e","\x9a","\xa3","\x02")},
	{hx::fsInt,(int)offsetof(Widget_obj,_yUse),HX_HCSTRING("_yUse","\x2d","\xd1","\x4c","\x03")},
	{hx::fsFloat,(int)offsetof(Widget_obj,_top),HX_HCSTRING("_top","\x96","\xab","\x23","\x3f")},
	{hx::fsFloat,(int)offsetof(Widget_obj,_topPercent),HX_HCSTRING("_topPercent","\xcf","\x65","\x32","\xb7")},
	{hx::fsFloat,(int)offsetof(Widget_obj,_bottom),HX_HCSTRING("_bottom","\x8a","\xf8","\xef","\xd3")},
	{hx::fsFloat,(int)offsetof(Widget_obj,_bottomPercent),HX_HCSTRING("_bottomPercent","\x5b","\x5f","\xdc","\x11")},
	{hx::fsObject /*::ru::stablex::ui::skins::Skin*/ ,(int)offsetof(Widget_obj,skin),HX_HCSTRING("skin","\x7d","\x16","\x55","\x4c")},
	{hx::fsObject /*::ru::stablex::ui::skins::Skin*/ ,(int)offsetof(Widget_obj,_appliedSkin),HX_HCSTRING("_appliedSkin","\x5b","\x44","\x64","\x01")},
	{hx::fsBool,(int)offsetof(Widget_obj,_skinQueued),HX_HCSTRING("_skinQueued","\x2f","\x25","\xb4","\xb6")},
	{hx::fsString,(int)offsetof(Widget_obj,skinName),HX_HCSTRING("skinName","\x68","\x37","\x87","\x98")},
	{hx::fsBool,(int)offsetof(Widget_obj,overflow),HX_HCSTRING("overflow","\x42","\xe3","\x3b","\x41")},
	{hx::fsObject /*::ru::stablex::ui::widgets::Tip*/ ,(int)offsetof(Widget_obj,tip),HX_HCSTRING("tip","\x5b","\x61","\x58","\x00")},
	{hx::fsObject /*::ru::stablex::ui::layouts::Layout*/ ,(int)offsetof(Widget_obj,layout),HX_HCSTRING("layout","\xaa","\xae","\xb8","\x58")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Widget_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &Widget_obj::_X_USE_LEFT,HX_HCSTRING("_X_USE_LEFT","\x85","\x2f","\x10","\x29")},
	{hx::fsInt,(void *) &Widget_obj::_X_USE_LEFT_PERCENT,HX_HCSTRING("_X_USE_LEFT_PERCENT","\xab","\x94","\x29","\xd5")},
	{hx::fsInt,(void *) &Widget_obj::_X_USE_RIGHT,HX_HCSTRING("_X_USE_RIGHT","\x7e","\x72","\x26","\x3c")},
	{hx::fsInt,(void *) &Widget_obj::_X_USE_RIGHT_PERCENT,HX_HCSTRING("_X_USE_RIGHT_PERCENT","\xa4","\xf8","\x20","\x58")},
	{hx::fsInt,(void *) &Widget_obj::_Y_USE_TOP,HX_HCSTRING("_Y_USE_TOP","\xb8","\x05","\x39","\xe3")},
	{hx::fsInt,(void *) &Widget_obj::_Y_USE_TOP_PERCENT,HX_HCSTRING("_Y_USE_TOP_PERCENT","\xde","\x55","\x30","\xcb")},
	{hx::fsInt,(void *) &Widget_obj::_Y_USE_BOTTOM,HX_HCSTRING("_Y_USE_BOTTOM","\x88","\xbb","\x8f","\xbe")},
	{hx::fsInt,(void *) &Widget_obj::_Y_USE_BOTTOM_PERCENT,HX_HCSTRING("_Y_USE_BOTTOM_PERCENT","\xae","\x5b","\xe9","\xff")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Widget_obj_sMemberFields[] = {
	HX_HCSTRING("defaults","\x92","\xd0","\x99","\xaf"),
	HX_HCSTRING("initialized","\x14","\xf5","\x0f","\x37"),
	HX_HCSTRING("created","\xe8","\xb5","\x6a","\x11"),
	HX_HCSTRING("destroyed","\xd9","\x37","\x27","\xf4"),
	HX_HCSTRING("contentWidth","\x0d","\x0a","\xf1","\xb0"),
	HX_HCSTRING("_width","\x47","\xfd","\x49","\xc6"),
	HX_HCSTRING("_widthPercent","\x3e","\x1c","\xc9","\x82"),
	HX_HCSTRING("_widthUsePercent","\x65","\xcd","\x76","\xdb"),
	HX_HCSTRING("minWidthByContent","\x6e","\x92","\x38","\xc1"),
	HX_HCSTRING("minHeightByContent","\xc9","\x85","\x56","\xb4"),
	HX_HCSTRING("contentHeight","\x00","\x3a","\x47","\xd8"),
	HX_HCSTRING("_height","\x86","\x19","\xc3","\x70"),
	HX_HCSTRING("_heightPercent","\xdf","\x95","\x55","\xa1"),
	HX_HCSTRING("_heightUsePercent","\x64","\x4e","\xa7","\xc1"),
	HX_HCSTRING("_silentResize","\x48","\x75","\xc6","\x47"),
	HX_HCSTRING("_resizing","\x90","\x1f","\x16","\xe9"),
	HX_HCSTRING("id","\xdb","\x5b","\x00","\x00"),
	HX_HCSTRING("_left","\xe6","\x23","\xc1","\xfa"),
	HX_HCSTRING("_leftPercent","\x7f","\x97","\x77","\xde"),
	HX_HCSTRING("_right","\x1d","\x53","\x4b","\xe5"),
	HX_HCSTRING("_rightPercent","\x28","\xcd","\xf7","\x45"),
	HX_HCSTRING("_xUse","\x8e","\x9a","\xa3","\x02"),
	HX_HCSTRING("_yUse","\x2d","\xd1","\x4c","\x03"),
	HX_HCSTRING("_top","\x96","\xab","\x23","\x3f"),
	HX_HCSTRING("_topPercent","\xcf","\x65","\x32","\xb7"),
	HX_HCSTRING("_bottom","\x8a","\xf8","\xef","\xd3"),
	HX_HCSTRING("_bottomPercent","\x5b","\x5f","\xdc","\x11"),
	HX_HCSTRING("skin","\x7d","\x16","\x55","\x4c"),
	HX_HCSTRING("_appliedSkin","\x5b","\x44","\x64","\x01"),
	HX_HCSTRING("_skinQueued","\x2f","\x25","\xb4","\xb6"),
	HX_HCSTRING("skinName","\x68","\x37","\x87","\x98"),
	HX_HCSTRING("overflow","\x42","\xe3","\x3b","\x41"),
	HX_HCSTRING("tip","\x5b","\x61","\x58","\x00"),
	HX_HCSTRING("layout","\xaa","\xae","\xb8","\x58"),
	HX_HCSTRING("_onInitialize","\x2e","\x66","\x6d","\xa7"),
	HX_HCSTRING("onInitialize","\x4f","\xd3","\xfe","\xc4"),
	HX_HCSTRING("_onCreate","\xda","\x54","\x52","\xa3"),
	HX_HCSTRING("onCreate","\x7b","\x5d","\xbc","\x5b"),
	HX_HCSTRING("free","\xac","\x9c","\xc2","\x43"),
	HX_HCSTRING("applySkin","\x0b","\x17","\x24","\x36"),
	HX_HCSTRING("applyLayout","\xb8","\x6e","\xb3","\x94"),
	HX_HCSTRING("refresh","\xdb","\xd9","\x20","\xed"),
	HX_HCSTRING("_newParent","\x6b","\x4d","\xd1","\x06"),
	HX_HCSTRING("_resizeWithPercent","\x8c","\xc8","\x3a","\x70"),
	HX_HCSTRING("onNewParent","\x8b","\xb4","\x71","\xcd"),
	HX_HCSTRING("_onParentResize","\x1c","\xb7","\x34","\x8e"),
	HX_HCSTRING("resize","\xf4","\x59","\x7b","\x08"),
	HX_HCSTRING("_onResize","\xd2","\x47","\xbe","\x2f"),
	HX_HCSTRING("onResize","\x73","\x50","\x28","\xe8"),
	HX_HCSTRING("addChild","\xbb","\xcf","\x16","\xbf"),
	HX_HCSTRING("addChildAt","\x8e","\xad","\x36","\xce"),
	HX_HCSTRING("removeChild","\xb8","\x86","\xed","\x43"),
	HX_HCSTRING("removeChildAt","\xcb","\xdd","\x66","\x3f"),
	HX_HCSTRING("getChildAs","\xb8","\x07","\x0e","\xb6"),
	HX_HCSTRING("getChild","\x26","\xb9","\x90","\xa5"),
	HX_HCSTRING("_findChildWidget","\x48","\x5d","\x61","\x05"),
	HX_HCSTRING("getParent","\x60","\x8e","\xd4","\x69"),
	HX_HCSTRING("getParentAs","\x72","\x1f","\xdd","\xf2"),
	HX_HCSTRING("getNearestParent","\xb2","\xd5","\x80","\xad"),
	HX_HCSTRING("as","\xf2","\x54","\x00","\x00"),
	HX_HCSTRING("set_overflow","\xbf","\xba","\x4e","\x0b"),
	HX_HCSTRING("set_skinName","\xe5","\x0e","\x9a","\x62"),
	HX_HCSTRING("get_wparent","\xf8","\x98","\xf2","\xc7"),
	HX_HCSTRING("set_left","\x04","\x1d","\xc8","\x75"),
	HX_HCSTRING("get_left","\x90","\xc3","\x6a","\xc7"),
	HX_HCSTRING("set_right","\x3f","\x54","\x5e","\x10"),
	HX_HCSTRING("get_right","\x33","\x68","\x0d","\x2d"),
	HX_HCSTRING("set_leftPt","\x28","\xac","\xcc","\x8d"),
	HX_HCSTRING("get_leftPt","\xb4","\x0d","\x4f","\x8a"),
	HX_HCSTRING("set_rightPt","\x23","\x68","\xcb","\xa3"),
	HX_HCSTRING("get_rightPt","\x17","\x61","\x5e","\x99"),
	HX_HCSTRING("set_top","\x38","\xc0","\xce","\x19"),
	HX_HCSTRING("get_top","\x2c","\x2f","\xcd","\x26"),
	HX_HCSTRING("set_bottom","\x28","\xf5","\x7d","\x59"),
	HX_HCSTRING("get_bottom","\xb4","\x56","\x00","\x56"),
	HX_HCSTRING("set_topPt","\x5c","\x84","\x29","\x3b"),
	HX_HCSTRING("get_topPt","\x50","\x98","\xd8","\x57"),
	HX_HCSTRING("set_bottomPt","\x4c","\xd5","\xc3","\x2c"),
	HX_HCSTRING("get_bottomPt","\xd8","\xb1","\xca","\x17"),
	HX_HCSTRING("set_w","\x5a","\x9b","\x2f","\x7a"),
	HX_HCSTRING("get_w","\x4e","\xa5","\x60","\x91"),
	HX_HCSTRING("set_h","\x4b","\x9b","\x2f","\x7a"),
	HX_HCSTRING("get_h","\x3f","\xa5","\x60","\x91"),
	HX_HCSTRING("get_contentHeight","\x57","\x45","\xb7","\xde"),
	HX_HCSTRING("get_contentWidth","\x96","\xf6","\x8f","\xb5"),
	HX_HCSTRING("set_widthPt","\xcd","\x70","\x68","\xc1"),
	HX_HCSTRING("get_widthPt","\xc1","\x69","\xfb","\xb6"),
	HX_HCSTRING("set_heightPt","\x48","\x2d","\x5e","\xfd"),
	HX_HCSTRING("get_heightPt","\xd4","\x09","\x65","\xe8"),
	HX_HCSTRING("set_id","\x98","\x47","\x78","\x6f"),
	HX_HCSTRING("set_tip","\xfe","\xba","\xce","\x19"),
	::String(null()) };

static void Widget_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Widget_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Widget_obj::_X_USE_LEFT,"_X_USE_LEFT");
	HX_MARK_MEMBER_NAME(Widget_obj::_X_USE_LEFT_PERCENT,"_X_USE_LEFT_PERCENT");
	HX_MARK_MEMBER_NAME(Widget_obj::_X_USE_RIGHT,"_X_USE_RIGHT");
	HX_MARK_MEMBER_NAME(Widget_obj::_X_USE_RIGHT_PERCENT,"_X_USE_RIGHT_PERCENT");
	HX_MARK_MEMBER_NAME(Widget_obj::_Y_USE_TOP,"_Y_USE_TOP");
	HX_MARK_MEMBER_NAME(Widget_obj::_Y_USE_TOP_PERCENT,"_Y_USE_TOP_PERCENT");
	HX_MARK_MEMBER_NAME(Widget_obj::_Y_USE_BOTTOM,"_Y_USE_BOTTOM");
	HX_MARK_MEMBER_NAME(Widget_obj::_Y_USE_BOTTOM_PERCENT,"_Y_USE_BOTTOM_PERCENT");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Widget_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Widget_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Widget_obj::_X_USE_LEFT,"_X_USE_LEFT");
	HX_VISIT_MEMBER_NAME(Widget_obj::_X_USE_LEFT_PERCENT,"_X_USE_LEFT_PERCENT");
	HX_VISIT_MEMBER_NAME(Widget_obj::_X_USE_RIGHT,"_X_USE_RIGHT");
	HX_VISIT_MEMBER_NAME(Widget_obj::_X_USE_RIGHT_PERCENT,"_X_USE_RIGHT_PERCENT");
	HX_VISIT_MEMBER_NAME(Widget_obj::_Y_USE_TOP,"_Y_USE_TOP");
	HX_VISIT_MEMBER_NAME(Widget_obj::_Y_USE_TOP_PERCENT,"_Y_USE_TOP_PERCENT");
	HX_VISIT_MEMBER_NAME(Widget_obj::_Y_USE_BOTTOM,"_Y_USE_BOTTOM");
	HX_VISIT_MEMBER_NAME(Widget_obj::_Y_USE_BOTTOM_PERCENT,"_Y_USE_BOTTOM_PERCENT");
};

#endif

hx::Class Widget_obj::__mClass;

static ::String Widget_obj_sStaticFields[] = {
	HX_HCSTRING("_X_USE_LEFT","\x85","\x2f","\x10","\x29"),
	HX_HCSTRING("_X_USE_LEFT_PERCENT","\xab","\x94","\x29","\xd5"),
	HX_HCSTRING("_X_USE_RIGHT","\x7e","\x72","\x26","\x3c"),
	HX_HCSTRING("_X_USE_RIGHT_PERCENT","\xa4","\xf8","\x20","\x58"),
	HX_HCSTRING("_Y_USE_TOP","\xb8","\x05","\x39","\xe3"),
	HX_HCSTRING("_Y_USE_TOP_PERCENT","\xde","\x55","\x30","\xcb"),
	HX_HCSTRING("_Y_USE_BOTTOM","\x88","\xbb","\x8f","\xbe"),
	HX_HCSTRING("_Y_USE_BOTTOM_PERCENT","\xae","\x5b","\xe9","\xff"),
	::String(null())
};

void Widget_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("ru.stablex.ui.widgets.Widget","\x61","\x2d","\x45","\x96");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Widget_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Widget_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Widget_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Widget_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Widget_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Widget_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Widget_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Widget_obj::__boot()
{
{
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Widget","boot",0x24ffe65f,"ru.stablex.ui.widgets.Widget.boot","ru/stablex/ui/widgets/Widget.hx",23,0xb63704bd)
HXLINE(  23)		_X_USE_LEFT = (int)1;
            	}
{
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Widget","boot",0x24ffe65f,"ru.stablex.ui.widgets.Widget.boot","ru/stablex/ui/widgets/Widget.hx",24,0xb63704bd)
HXLINE(  24)		_X_USE_LEFT_PERCENT = (int)2;
            	}
{
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Widget","boot",0x24ffe65f,"ru.stablex.ui.widgets.Widget.boot","ru/stablex/ui/widgets/Widget.hx",25,0xb63704bd)
HXLINE(  25)		_X_USE_RIGHT = (int)3;
            	}
{
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Widget","boot",0x24ffe65f,"ru.stablex.ui.widgets.Widget.boot","ru/stablex/ui/widgets/Widget.hx",26,0xb63704bd)
HXLINE(  26)		_X_USE_RIGHT_PERCENT = (int)4;
            	}
{
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Widget","boot",0x24ffe65f,"ru.stablex.ui.widgets.Widget.boot","ru/stablex/ui/widgets/Widget.hx",28,0xb63704bd)
HXLINE(  28)		_Y_USE_TOP = (int)5;
            	}
{
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Widget","boot",0x24ffe65f,"ru.stablex.ui.widgets.Widget.boot","ru/stablex/ui/widgets/Widget.hx",29,0xb63704bd)
HXLINE(  29)		_Y_USE_TOP_PERCENT = (int)6;
            	}
{
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Widget","boot",0x24ffe65f,"ru.stablex.ui.widgets.Widget.boot","ru/stablex/ui/widgets/Widget.hx",30,0xb63704bd)
HXLINE(  30)		_Y_USE_BOTTOM = (int)7;
            	}
{
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Widget","boot",0x24ffe65f,"ru.stablex.ui.widgets.Widget.boot","ru/stablex/ui/widgets/Widget.hx",31,0xb63704bd)
HXLINE(  31)		_Y_USE_BOTTOM_PERCENT = (int)8;
            	}
}

} // end namespace ru
} // end namespace stablex
} // end namespace ui
} // end namespace widgets
