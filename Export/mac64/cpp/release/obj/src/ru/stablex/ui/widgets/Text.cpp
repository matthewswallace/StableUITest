// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif
#ifndef INCLUDED_ru_stablex_TweenSprite
#include <ru/stablex/TweenSprite.h>
#endif
#ifndef INCLUDED_ru_stablex_ui_widgets_Box
#include <ru/stablex/ui/widgets/Box.h>
#endif
#ifndef INCLUDED_ru_stablex_ui_widgets_Text
#include <ru/stablex/ui/widgets/Text.h>
#endif
#ifndef INCLUDED_ru_stablex_ui_widgets_Widget
#include <ru/stablex/ui/widgets/Widget.h>
#endif

namespace ru{
namespace stablex{
namespace ui{
namespace widgets{

void Text_obj::__construct(){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Text","new",0x9900a6fc,"ru.stablex.ui.widgets.Text.new","ru/stablex/ui/widgets/Text.hx",14,0x2782b8b4)
            	HX_STACK_THIS(this)
HXLINE(  23)		this->highlighted = false;
HXLINE(  33)		super::__construct();
HXLINE(  35)		this->label = hx::TCast<  ::openfl::text::TextField >::cast(this->addChild( ::openfl::text::TextField_obj::__new()));
HXLINE(  36)		this->label->set_autoSize((int)1);
HXLINE(  37)		this->label->set_multiline(true);
HXLINE(  40)		this->format = this->label->get_defaultTextFormat();
HXLINE(  42)		this->align = HX_("top,left",7e,2b,f4,57);
            	}

Dynamic Text_obj::__CreateEmpty() { return new Text_obj; }

hx::ObjectPtr< Text_obj > Text_obj::__new()
{
	hx::ObjectPtr< Text_obj > _hx_result = new Text_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Text_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Text_obj > _hx_result = new Text_obj();
	_hx_result->__construct();
	return _hx_result;
}

 ::openfl::text::TextFormat Text_obj::get_highlightFormat(){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Text","get_highlightFormat",0x613b963e,"ru.stablex.ui.widgets.Text.get_highlightFormat","ru/stablex/ui/widgets/Text.hx",51,0x2782b8b4)
            	HX_STACK_THIS(this)
HXLINE(  52)		Bool _hx_tmp = hx::IsNull( this->_hightlightFormat );
HXDLIN(  52)		if (_hx_tmp) {
HXLINE(  54)			this->_hightlightFormat =  ::openfl::text::TextFormat_obj::__new(this->format->font,this->format->size,this->format->color,this->format->bold,this->format->italic,this->format->underline,this->format->url,this->format->target,this->format->align,this->format->leftMargin,this->format->rightMargin,this->format->indent,this->format->leading);
            		}
HXLINE(  77)		return this->_hightlightFormat;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Text_obj,get_highlightFormat,return )

 ::openfl::text::TextFormat Text_obj::set_highlightFormat( ::openfl::text::TextFormat hl){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Text","set_highlightFormat",0x9dd8894a,"ru.stablex.ui.widgets.Text.set_highlightFormat","ru/stablex/ui/widgets/Text.hx",86,0x2782b8b4)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(hl,"hl")
HXLINE(  86)		return (this->_hightlightFormat = hl);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Text_obj,set_highlightFormat,return )

void Text_obj::refresh(){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Text","refresh",0xde732e77,"ru.stablex.ui.widgets.Text.refresh","ru/stablex/ui/widgets/Text.hx",94,0x2782b8b4)
            	HX_STACK_THIS(this)
HXLINE(  95)		Bool _hx_tmp = this->highlighted;
HXDLIN(  95)		if (_hx_tmp) {
HXLINE(  96)			 ::openfl::text::TextFormat _hx_tmp1 = this->get_highlightFormat();
HXDLIN(  96)			this->label->set_defaultTextFormat(_hx_tmp1);
HXLINE(  97)			Bool _hx_tmp2 = (this->label->get_text().length > (int)0);
HXDLIN(  97)			if (_hx_tmp2) {
HXLINE(  98)				 ::openfl::text::TextFormat _hx_tmp3 = this->get_highlightFormat();
HXDLIN(  98)				this->label->setTextFormat(_hx_tmp3,(int)0,this->get_text().length);
            			}
            		}
            		else {
HXLINE( 101)			this->label->set_defaultTextFormat(this->format);
HXLINE( 102)			Bool _hx_tmp4 = (this->label->get_text().length > (int)0);
HXDLIN( 102)			if (_hx_tmp4) {
HXLINE( 103)				this->label->setTextFormat(this->format,(int)0,this->get_text().length);
            			}
            		}
HXLINE( 107)		Bool _hx_tmp5;
HXDLIN( 107)		Bool _hx_tmp6 = !(this->autoWidth);
HXDLIN( 107)		if (_hx_tmp6) {
HXLINE( 107)			_hx_tmp5 = this->label->get_wordWrap();
            		}
            		else {
HXLINE( 107)			_hx_tmp5 = false;
            		}
HXDLIN( 107)		if (_hx_tmp5) {
HXLINE( 108)			this->label->set_width(this->_width);
            		}
HXLINE( 111)		this->super::refresh();
            	}


void Text_obj::highlight(){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Text","highlight",0x970609d0,"ru.stablex.ui.widgets.Text.highlight","ru/stablex/ui/widgets/Text.hx",120,0x2782b8b4)
            	HX_STACK_THIS(this)
HXLINE( 121)		this->highlighted = true;
HXLINE( 122)		this->refresh();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Text_obj,highlight,(void))

void Text_obj::unhighlight(){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Text","unhighlight",0xf035af57,"ru.stablex.ui.widgets.Text.unhighlight","ru/stablex/ui/widgets/Text.hx",129,0x2782b8b4)
            	HX_STACK_THIS(this)
HXLINE( 130)		this->highlighted = false;
HXLINE( 131)		this->refresh();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Text_obj,unhighlight,(void))

::String Text_obj::get_text(){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Text","get_text",0x036c3c1a,"ru.stablex.ui.widgets.Text.get_text","ru/stablex/ui/widgets/Text.hx",140,0x2782b8b4)
            	HX_STACK_THIS(this)
HXLINE( 140)		return this->label->get_text();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Text_obj,get_text,return )

::String Text_obj::set_text(::String txt){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Text","set_text",0xb1c9958e,"ru.stablex.ui.widgets.Text.set_text","ru/stablex/ui/widgets/Text.hx",148,0x2782b8b4)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(txt,"txt")
HXLINE( 149)		this->label->set_text(txt);
HXLINE( 154)		Bool _hx_tmp;
HXDLIN( 154)		if (!(this->autoWidth)) {
HXLINE( 154)			_hx_tmp = this->autoHeight;
            		}
            		else {
HXLINE( 154)			_hx_tmp = true;
            		}
HXDLIN( 154)		if (_hx_tmp) {
HXLINE( 155)			this->refresh();
            		}
            		else {
HXLINE( 158)			this->alignElements();
            		}
HXLINE( 161)		return txt;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Text_obj,set_text,return )

void Text_obj::html5TextFieldSizeWorkaround(){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Text","html5TextFieldSizeWorkaround",0x5684dd46,"ru.stablex.ui.widgets.Text.html5TextFieldSizeWorkaround","ru/stablex/ui/widgets/Text.hx",169,0x2782b8b4)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Text_obj,html5TextFieldSizeWorkaround,(void))


Text_obj::Text_obj()
{
}

void Text_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Text);
	HX_MARK_MEMBER_NAME(label,"label");
	HX_MARK_MEMBER_NAME(format,"format");
	HX_MARK_MEMBER_NAME(_hightlightFormat,"_hightlightFormat");
	HX_MARK_MEMBER_NAME(highlighted,"highlighted");
	 ::ru::stablex::ui::widgets::Box_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Text_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(label,"label");
	HX_VISIT_MEMBER_NAME(format,"format");
	HX_VISIT_MEMBER_NAME(_hightlightFormat,"_hightlightFormat");
	HX_VISIT_MEMBER_NAME(highlighted,"highlighted");
	 ::ru::stablex::ui::widgets::Box_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Text_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_text()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"label") ) { return hx::Val( label); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"format") ) { return hx::Val( format); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"refresh") ) { return hx::Val( refresh_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"get_text") ) { return hx::Val( get_text_dyn()); }
		if (HX_FIELD_EQ(inName,"set_text") ) { return hx::Val( set_text_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"highlight") ) { return hx::Val( highlight_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"highlighted") ) { return hx::Val( highlighted); }
		if (HX_FIELD_EQ(inName,"unhighlight") ) { return hx::Val( unhighlight_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"highlightFormat") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_highlightFormat()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_hightlightFormat") ) { return hx::Val( _hightlightFormat); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"get_highlightFormat") ) { return hx::Val( get_highlightFormat_dyn()); }
		if (HX_FIELD_EQ(inName,"set_highlightFormat") ) { return hx::Val( set_highlightFormat_dyn()); }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"html5TextFieldSizeWorkaround") ) { return hx::Val( html5TextFieldSizeWorkaround_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Text_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_text(inValue) ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"label") ) { label=inValue.Cast<  ::openfl::text::TextField >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"format") ) { format=inValue.Cast<  ::openfl::text::TextFormat >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"highlighted") ) { highlighted=inValue.Cast< Bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"highlightFormat") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_highlightFormat(inValue) ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_hightlightFormat") ) { _hightlightFormat=inValue.Cast<  ::openfl::text::TextFormat >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Text_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("label","\xf4","\x0d","\xaf","\x6f"));
	outFields->push(HX_HCSTRING("format","\x37","\x8f","\x8e","\xfd"));
	outFields->push(HX_HCSTRING("highlightFormat","\x8b","\xf8","\x63","\x87"));
	outFields->push(HX_HCSTRING("_hightlightFormat","\x7a","\x35","\xca","\x75"));
	outFields->push(HX_HCSTRING("highlighted","\x93","\xa3","\x69","\x6e"));
	outFields->push(HX_HCSTRING("text","\xad","\xcc","\xf9","\x4c"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Text_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::openfl::text::TextField*/ ,(int)offsetof(Text_obj,label),HX_HCSTRING("label","\xf4","\x0d","\xaf","\x6f")},
	{hx::fsObject /*::openfl::text::TextFormat*/ ,(int)offsetof(Text_obj,format),HX_HCSTRING("format","\x37","\x8f","\x8e","\xfd")},
	{hx::fsObject /*::openfl::text::TextFormat*/ ,(int)offsetof(Text_obj,_hightlightFormat),HX_HCSTRING("_hightlightFormat","\x7a","\x35","\xca","\x75")},
	{hx::fsBool,(int)offsetof(Text_obj,highlighted),HX_HCSTRING("highlighted","\x93","\xa3","\x69","\x6e")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Text_obj_sStaticStorageInfo = 0;
#endif

static ::String Text_obj_sMemberFields[] = {
	HX_HCSTRING("label","\xf4","\x0d","\xaf","\x6f"),
	HX_HCSTRING("format","\x37","\x8f","\x8e","\xfd"),
	HX_HCSTRING("_hightlightFormat","\x7a","\x35","\xca","\x75"),
	HX_HCSTRING("highlighted","\x93","\xa3","\x69","\x6e"),
	HX_HCSTRING("get_highlightFormat","\xa2","\xc7","\x6e","\x12"),
	HX_HCSTRING("set_highlightFormat","\xae","\xba","\x0b","\x4f"),
	HX_HCSTRING("refresh","\xdb","\xd9","\x20","\xed"),
	HX_HCSTRING("highlight","\x34","\x56","\x00","\xed"),
	HX_HCSTRING("unhighlight","\xbb","\xdc","\xa6","\x72"),
	HX_HCSTRING("get_text","\x36","\x88","\xb4","\xcc"),
	HX_HCSTRING("set_text","\xaa","\xe1","\x11","\x7b"),
	HX_HCSTRING("html5TextFieldSizeWorkaround","\x62","\x5f","\xfa","\xc4"),
	::String(null()) };

static void Text_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Text_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Text_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Text_obj::__mClass,"__mClass");
};

#endif

hx::Class Text_obj::__mClass;

void Text_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("ru.stablex.ui.widgets.Text","\x0a","\xb9","\xf2","\xb5");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Text_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Text_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Text_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Text_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Text_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Text_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace ru
} // end namespace stablex
} // end namespace ui
} // end namespace widgets
