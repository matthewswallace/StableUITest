// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_ru_stablex_TweenSprite
#include <ru/stablex/TweenSprite.h>
#endif
#ifndef INCLUDED_ru_stablex_ui_events_WidgetEvent
#include <ru/stablex/ui/events/WidgetEvent.h>
#endif
#ifndef INCLUDED_ru_stablex_ui_layouts_Layout
#include <ru/stablex/ui/layouts/Layout.h>
#endif
#ifndef INCLUDED_ru_stablex_ui_widgets_Box
#include <ru/stablex/ui/widgets/Box.h>
#endif
#ifndef INCLUDED_ru_stablex_ui_widgets_Widget
#include <ru/stablex/ui/widgets/Widget.h>
#endif

namespace ru{
namespace stablex{
namespace ui{
namespace widgets{

void Box_obj::__construct(){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Box","new",0x41812c40,"ru.stablex.ui.widgets.Box.new","ru/stablex/ui/widgets/Box.hx",13,0x607c8670)
            	HX_STACK_THIS(this)
HXLINE(  46)		this->_processingChildResize = false;
HXLINE(  44)		this->intPositions = false;
HXLINE(  42)		this->unifyChildren = false;
HXLINE(  40)		this->autoHeight = true;
HXLINE(  38)		this->autoWidth = true;
HXLINE(  34)		this->align = HX_("center,middle",4c,ab,0b,8f);
HXLINE(  28)		this->childPadding = ((Float)0);
HXLINE(  26)		this->paddingBottom = ((Float)0);
HXLINE(  24)		this->paddingTop = ((Float)0);
HXLINE(  22)		this->paddingRight = ((Float)0);
HXLINE(  20)		this->paddingLeft = ((Float)0);
HXLINE(  16)		this->vertical = true;
HXLINE(  13)		super::__construct();
            	}

Dynamic Box_obj::__CreateEmpty() { return new Box_obj; }

hx::ObjectPtr< Box_obj > Box_obj::__new()
{
	hx::ObjectPtr< Box_obj > _hx_result = new Box_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Box_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Box_obj > _hx_result = new Box_obj();
	_hx_result->__construct();
	return _hx_result;
}

Float Box_obj::_objWidth( ::openfl::display::DisplayObject obj){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Box","_objWidth",0x23fcd1ce,"ru.stablex.ui.widgets.Box._objWidth","ru/stablex/ui/widgets/Box.hx",63,0x607c8670)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(  63)		Bool _hx_tmp = ::Std_obj::is(obj,hx::ClassOf< ::ru::stablex::ui::widgets::Widget >());
HXDLIN(  63)		if (_hx_tmp) {
HXLINE(  63)			return hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(obj)->get_w();
            		}
            		else {
HXLINE(  63)			Bool _hx_tmp1 = ::Std_obj::is(obj,hx::ClassOf< ::openfl::text::TextField >());
HXDLIN(  63)			if (_hx_tmp1) {
HXLINE(  63)				Float _hx_tmp2 = hx::TCast<  ::openfl::text::TextField >::cast(obj)->get_textWidth();
HXDLIN(  63)				return (_hx_tmp2 + (int)4);
            			}
            			else {
HXLINE(  63)				return obj->get_width();
            			}
            		}
HXDLIN(  63)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Box_obj,_objWidth,return )

Float Box_obj::_objHeight( ::openfl::display::DisplayObject obj){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Box","_objHeight",0x0f8a3b1f,"ru.stablex.ui.widgets.Box._objHeight","ru/stablex/ui/widgets/Box.hx",72,0x607c8670)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(  72)		Bool _hx_tmp = ::Std_obj::is(obj,hx::ClassOf< ::ru::stablex::ui::widgets::Widget >());
HXDLIN(  72)		if (_hx_tmp) {
HXLINE(  72)			return hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(obj)->get_h();
            		}
            		else {
HXLINE(  72)			Bool _hx_tmp1 = ::Std_obj::is(obj,hx::ClassOf< ::openfl::text::TextField >());
HXDLIN(  72)			if (_hx_tmp1) {
HXLINE(  72)				Float _hx_tmp2 = hx::TCast<  ::openfl::text::TextField >::cast(obj)->get_textHeight();
HXDLIN(  72)				return (_hx_tmp2 + (int)4);
            			}
            			else {
HXLINE(  72)				return obj->get_height();
            			}
            		}
HXDLIN(  72)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Box_obj,_objHeight,return )

void Box_obj::_setObjX( ::openfl::display::DisplayObject obj,Float x){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Box","_setObjX",0xae5f9ae4,"ru.stablex.ui.widgets.Box._setObjX","ru/stablex/ui/widgets/Box.hx",80,0x607c8670)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
            	HX_STACK_ARG(x,"x")
HXLINE(  81)		obj->set_x(x);
HXLINE(  83)		Bool _hx_tmp = this->intPositions;
HXDLIN(  83)		if (_hx_tmp) {
HXLINE(  84)			Float _hx_tmp1 = obj->get_x();
HXDLIN(  84)			Int _hx_tmp2 = ::Std_obj::_hx_int(_hx_tmp1);
HXDLIN(  84)			obj->set_x(_hx_tmp2);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Box_obj,_setObjX,(void))

void Box_obj::_setObjY( ::openfl::display::DisplayObject obj,Float y){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Box","_setObjY",0xae5f9ae5,"ru.stablex.ui.widgets.Box._setObjY","ru/stablex/ui/widgets/Box.hx",93,0x607c8670)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
            	HX_STACK_ARG(y,"y")
HXLINE(  94)		obj->set_y(y);
HXLINE(  96)		Bool _hx_tmp = this->intPositions;
HXDLIN(  96)		if (_hx_tmp) {
HXLINE(  97)			Float _hx_tmp1 = obj->get_y();
HXDLIN(  97)			Int _hx_tmp2 = ::Std_obj::_hx_int(_hx_tmp1);
HXDLIN(  97)			obj->set_y(_hx_tmp2);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Box_obj,_setObjY,(void))

void Box_obj::refresh(){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Box","refresh",0x3959a5bb,"ru.stablex.ui.widgets.Box.refresh","ru/stablex/ui/widgets/Box.hx",111,0x607c8670)
            	HX_STACK_THIS(this)
HXLINE( 112)		Bool _hx_tmp;
HXDLIN( 112)		if (!(this->autoWidth)) {
HXLINE( 112)			_hx_tmp = this->autoHeight;
            		}
            		else {
HXLINE( 112)			_hx_tmp = true;
            		}
HXDLIN( 112)		if (_hx_tmp) {
HXLINE( 113)			HX_VAR( Float,w);
HXDLIN( 113)			Bool _hx_tmp1 = this->autoWidth;
HXDLIN( 113)			if (_hx_tmp1) {
HXLINE( 113)				w = this->_calcWidth();
            			}
            			else {
HXLINE( 113)				w = this->_width;
            			}
HXLINE( 114)			HX_VAR( Float,h);
HXDLIN( 114)			Bool _hx_tmp2 = this->autoHeight;
HXDLIN( 114)			if (_hx_tmp2) {
HXLINE( 114)				h = this->_calcHeight();
            			}
            			else {
HXLINE( 114)				h = this->_height;
            			}
HXLINE( 116)			Bool _hx_tmp3;
HXDLIN( 116)			if ((this->_width == w)) {
HXLINE( 116)				_hx_tmp3 = (this->_height != h);
            			}
            			else {
HXLINE( 116)				_hx_tmp3 = true;
            			}
HXDLIN( 116)			if (_hx_tmp3) {
HXLINE( 117)				this->resize(w,h,true);
            			}
            		}
HXLINE( 121)		this->super::refresh();
HXLINE( 123)		Bool _hx_tmp4 = hx::IsNull( this->layout );
HXDLIN( 123)		if (_hx_tmp4) {
HXLINE( 124)			this->alignElements();
            		}
            	}


Float Box_obj::_calcWidth(){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Box","_calcWidth",0x02362d12,"ru.stablex.ui.widgets.Box._calcWidth","ru/stablex/ui/widgets/Box.hx",135,0x607c8670)
            	HX_STACK_THIS(this)
HXLINE( 135)		Bool _hx_tmp = this->vertical;
HXDLIN( 135)		if (_hx_tmp) {
HXLINE( 137)			HX_VARI( Float,w) = (int)0;
HXLINE( 138)			HX_VAR(  ::openfl::display::DisplayObject,child);
HXLINE( 139)			HX_VARI( Float,childW) = (int)0;
HXLINE( 141)			{
HXLINE( 141)				HX_VARI( Int,_g1) = (int)0;
HXDLIN( 141)				HX_VARI( Int,_g) = this->get_numChildren();
HXDLIN( 141)				while((_g1 < _g)){
HXLINE( 141)					HX_VARI( Int,i) = _g1++;
HXLINE( 142)					child = this->getChildAt(i);
HXLINE( 143)					Bool _hx_tmp1 = child->get_visible();
HXDLIN( 143)					if (_hx_tmp1) {
HXLINE( 144)						childW = this->_objWidth(child);
HXLINE( 145)						Bool _hx_tmp2 = (childW > w);
HXDLIN( 145)						if (_hx_tmp2) {
HXLINE( 146)							w = childW;
            						}
            					}
            				}
            			}
HXLINE( 151)			return ((w + this->paddingLeft) + this->paddingRight);
            		}
            		else {
HXLINE( 154)			HX_VARI_NAME( Float,w1,"w") = (this->paddingLeft + this->paddingRight);
HXLINE( 155)			HX_VAR_NAME(  ::openfl::display::DisplayObject,child1,"child");
HXLINE( 156)			HX_VARI( Int,visibleChildren) = (int)0;
HXLINE( 158)			{
HXLINE( 158)				HX_VARI_NAME( Int,_g11,"_g1") = (int)0;
HXDLIN( 158)				HX_VARI_NAME( Int,_g2,"_g") = this->get_numChildren();
HXDLIN( 158)				while((_g11 < _g2)){
HXLINE( 158)					HX_VARI_NAME( Int,i1,"i") = _g11++;
HXLINE( 159)					child1 = this->getChildAt(i1);
HXLINE( 160)					Bool _hx_tmp3 = child1->get_visible();
HXDLIN( 160)					if (_hx_tmp3) {
HXLINE( 161)						Float _hx_tmp4 = this->_objWidth(child1);
HXDLIN( 161)						hx::AddEq(w1,_hx_tmp4);
HXLINE( 162)						++visibleChildren;
            					}
            				}
            			}
HXLINE( 166)			return (w1 + ((visibleChildren - (int)1) * this->childPadding));
            		}
HXLINE( 135)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Box_obj,_calcWidth,return )

Float Box_obj::_calcHeight(){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Box","_calcHeight",0xa380bb5b,"ru.stablex.ui.widgets.Box._calcHeight","ru/stablex/ui/widgets/Box.hx",177,0x607c8670)
            	HX_STACK_THIS(this)
HXLINE( 177)		Bool _hx_tmp = this->vertical;
HXDLIN( 177)		if (_hx_tmp) {
HXLINE( 179)			HX_VARI( Float,h) = (this->paddingTop + this->paddingBottom);
HXLINE( 180)			HX_VAR(  ::openfl::display::DisplayObject,child);
HXLINE( 181)			HX_VARI( Int,visibleChildren) = (int)0;
HXLINE( 183)			{
HXLINE( 183)				HX_VARI( Int,_g1) = (int)0;
HXDLIN( 183)				HX_VARI( Int,_g) = this->get_numChildren();
HXDLIN( 183)				while((_g1 < _g)){
HXLINE( 183)					HX_VARI( Int,i) = _g1++;
HXLINE( 184)					child = this->getChildAt(i);
HXLINE( 185)					Bool _hx_tmp1 = child->get_visible();
HXDLIN( 185)					if (_hx_tmp1) {
HXLINE( 186)						Float _hx_tmp2 = this->_objHeight(child);
HXDLIN( 186)						hx::AddEq(h,_hx_tmp2);
HXLINE( 187)						++visibleChildren;
            					}
            				}
            			}
HXLINE( 191)			return (h + ((visibleChildren - (int)1) * this->childPadding));
            		}
            		else {
HXLINE( 196)			HX_VARI_NAME( Float,h1,"h") = (int)0;
HXLINE( 197)			HX_VARI( Float,childH) = (int)0;
HXLINE( 198)			HX_VAR_NAME(  ::openfl::display::DisplayObject,child1,"child");
HXLINE( 200)			{
HXLINE( 200)				HX_VARI_NAME( Int,_g11,"_g1") = (int)0;
HXDLIN( 200)				HX_VARI_NAME( Int,_g2,"_g") = this->get_numChildren();
HXDLIN( 200)				while((_g11 < _g2)){
HXLINE( 200)					HX_VARI_NAME( Int,i1,"i") = _g11++;
HXLINE( 201)					child1 = this->getChildAt(i1);
HXLINE( 202)					Bool _hx_tmp3 = child1->get_visible();
HXDLIN( 202)					if (_hx_tmp3) {
HXLINE( 203)						childH = this->_objHeight(child1);
HXLINE( 204)						Bool _hx_tmp4 = (childH > h1);
HXDLIN( 204)						if (_hx_tmp4) {
HXLINE( 205)							h1 = childH;
            						}
            					}
            				}
            			}
HXLINE( 210)			return ((h1 + this->paddingTop) + this->paddingBottom);
            		}
HXLINE( 177)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Box_obj,_calcHeight,return )

void Box_obj::_resizeWithPercent( ::ru::stablex::ui::widgets::Widget parent){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Box","_resizeWithPercent",0xf26fc8ac,"ru.stablex.ui.widgets.Box._resizeWithPercent","ru/stablex/ui/widgets/Box.hx",219,0x607c8670)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(parent,"parent")
HXLINE( 220)		HX_VAR( Float,newWidth);
HXLINE( 221)		Bool _hx_tmp = this->_widthUsePercent;
HXLINE( 220)		if (_hx_tmp) {
HXLINE( 222)			Float _hx_tmp1 = parent->get_contentWidth();
HXLINE( 220)			newWidth = ((Float)(_hx_tmp1 * this->_widthPercent) / (Float)(int)100);
            		}
            		else {
HXLINE( 220)			newWidth = this->_width;
            		}
HXLINE( 225)		HX_VAR( Float,newHeight);
HXLINE( 226)		Bool _hx_tmp2 = this->_heightUsePercent;
HXLINE( 225)		if (_hx_tmp2) {
HXLINE( 227)			Float _hx_tmp3 = parent->get_contentHeight();
HXLINE( 225)			newHeight = ((Float)(_hx_tmp3 * this->_heightPercent) / (Float)(int)100);
            		}
            		else {
HXLINE( 225)			newHeight = this->_height;
            		}
HXLINE( 231)		Bool _hx_tmp4 = this->minWidthByContent;
HXDLIN( 231)		if (_hx_tmp4) {
HXLINE( 232)			Float _hx_tmp5 = this->_calcWidth();
HXDLIN( 232)			newWidth = ::Math_obj::max(newWidth,_hx_tmp5);
            		}
HXLINE( 234)		Bool _hx_tmp6 = this->minHeightByContent;
HXDLIN( 234)		if (_hx_tmp6) {
HXLINE( 235)			Float _hx_tmp7 = this->_calcHeight();
HXDLIN( 235)			newHeight = ::Math_obj::max(newHeight,_hx_tmp7);
            		}
HXLINE( 238)		this->resize(newWidth,newHeight,true);
            	}


void Box_obj::alignElements(){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Box","alignElements",0x933e09fc,"ru.stablex.ui.widgets.Box.alignElements","ru/stablex/ui/widgets/Box.hx",246,0x607c8670)
            	HX_STACK_THIS(this)
HXLINE( 247)		Bool _hx_tmp = this->unifyChildren;
HXDLIN( 247)		if (_hx_tmp) {
HXLINE( 248)			this->_unifyChildren();
            		}
HXLINE( 252)		Int _hx_tmp1 = this->get_numChildren();
HXDLIN( 252)		if ((_hx_tmp1 == (int)0)) {
HXLINE( 252)			return;
            		}
HXLINE( 254)		HX_VARI( ::Array< ::String >,alignments) = this->align.split(HX_(",",2c,00,00,00));
HXLINE( 257)		{
HXLINE( 257)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 257)			while((_g < alignments->length)){
HXLINE( 257)				HX_VARI( ::String,align) = alignments->__get(_g);
HXDLIN( 257)				++_g;
HXLINE( 258)				::String _hx_switch_0 = align;
            				if (  (_hx_switch_0==HX_("bottom",eb,e6,78,65)) ){
HXLINE( 261)					this->_vAlignBottom();
HXDLIN( 261)					goto _hx_goto_5;
            				}
            				if (  (_hx_switch_0==HX_("center",d5,25,db,05)) ){
HXLINE( 263)					this->_hAlignCenter();
HXDLIN( 263)					goto _hx_goto_5;
            				}
            				if (  (_hx_switch_0==HX_("left",07,08,b0,47)) ){
HXLINE( 262)					this->_hAlignLeft();
HXDLIN( 262)					goto _hx_goto_5;
            				}
            				if (  (_hx_switch_0==HX_("middle",55,d3,5e,4c)) ){
HXLINE( 260)					this->_vAlignMiddle();
HXDLIN( 260)					goto _hx_goto_5;
            				}
            				if (  (_hx_switch_0==HX_("right",dc,0b,64,e9)) ){
HXLINE( 264)					this->_hAlignRight();
HXDLIN( 264)					goto _hx_goto_5;
            				}
            				if (  (_hx_switch_0==HX_("top",95,66,58,00)) ){
HXLINE( 259)					this->_vAlignTop();
HXDLIN( 259)					goto _hx_goto_5;
            				}
            				_hx_goto_5:;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Box_obj,alignElements,(void))

void Box_obj::_unifyChildren(){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Box","_unifyChildren",0x0e130e03,"ru.stablex.ui.widgets.Box._unifyChildren","ru/stablex/ui/widgets/Box.hx",274,0x607c8670)
            	HX_STACK_THIS(this)
HXLINE( 288)		HX_VARI( Int,visibleChildren) = (int)0;
HXLINE( 289)		{
HXLINE( 289)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 289)			HX_VARI( Int,_g) = this->get_numChildren();
HXDLIN( 289)			while((_g1 < _g)){
HXLINE( 289)				HX_VARI( Int,i) = _g1++;
HXLINE( 290)				Bool _hx_tmp = this->getChildAt(i)->get_visible();
HXDLIN( 290)				if (_hx_tmp) {
HXLINE( 291)					++visibleChildren;
            				}
            			}
            		}
HXLINE( 295)		HX_VAR(  ::openfl::display::DisplayObject,child);
HXLINE( 298)		Bool _hx_tmp1 = this->vertical;
HXDLIN( 298)		if (_hx_tmp1) {
HXLINE( 299)			HX_VARI( Float,childWidth) = ((this->_width - this->paddingLeft) - this->paddingRight);
HXLINE( 300)			HX_VARI( Float,childHeight) = ((Float)(((this->_height - this->paddingTop) - this->paddingBottom) - (this->childPadding * (visibleChildren - (int)1))) / (Float)visibleChildren);
HXLINE( 302)			{
HXLINE( 302)				HX_VARI_NAME( Int,_g11,"_g1") = (int)0;
HXDLIN( 302)				HX_VARI_NAME( Int,_g2,"_g") = this->get_numChildren();
HXDLIN( 302)				while((_g11 < _g2)){
HXLINE( 302)					HX_VARI_NAME( Int,i1,"i") = _g11++;
HXLINE( 303)					child = this->getChildAt(i1);
HXLINE( 304)					Bool _hx_tmp2 = ::Std_obj::is(child,hx::ClassOf< ::ru::stablex::ui::widgets::Widget >());
HXDLIN( 304)					if (_hx_tmp2) {
HXLINE( 305)						hx::TCast<  ::ru::stablex::TweenSprite >::cast(child)->removeEventListener(HX_("widgetResize",d8,a8,1e,0d),this->_onChildResize_dyn(),null());
HXLINE( 306)						hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(child)->resize(childWidth,childHeight,null());
HXLINE( 307)						hx::TCast<  ::ru::stablex::TweenSprite >::cast(child)->addUniqueListener(HX_("widgetResize",d8,a8,1e,0d),this->_onChildResize_dyn(),null(),null(),null());
            					}
            				}
            			}
            		}
            		else {
HXLINE( 313)			HX_VARI_NAME( Float,childWidth1,"childWidth") = ((Float)(((this->_width - this->paddingLeft) - this->paddingRight) - (this->childPadding * (visibleChildren - (int)1))) / (Float)visibleChildren);
HXLINE( 314)			HX_VARI_NAME( Float,childHeight1,"childHeight") = ((this->_height - this->paddingTop) - this->paddingBottom);
HXLINE( 316)			{
HXLINE( 316)				HX_VARI_NAME( Int,_g12,"_g1") = (int)0;
HXDLIN( 316)				HX_VARI_NAME( Int,_g3,"_g") = this->get_numChildren();
HXDLIN( 316)				while((_g12 < _g3)){
HXLINE( 316)					HX_VARI_NAME( Int,i2,"i") = _g12++;
HXLINE( 317)					child = this->getChildAt(i2);
HXLINE( 318)					Bool _hx_tmp3 = ::Std_obj::is(child,hx::ClassOf< ::ru::stablex::ui::widgets::Widget >());
HXDLIN( 318)					if (_hx_tmp3) {
HXLINE( 319)						hx::TCast<  ::ru::stablex::TweenSprite >::cast(child)->removeEventListener(HX_("widgetResize",d8,a8,1e,0d),this->_onChildResize_dyn(),null());
HXLINE( 320)						hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(child)->resize(childWidth1,childHeight1,null());
HXLINE( 321)						hx::TCast<  ::ru::stablex::TweenSprite >::cast(child)->addUniqueListener(HX_("widgetResize",d8,a8,1e,0d),this->_onChildResize_dyn(),null(),null(),null());
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Box_obj,_unifyChildren,(void))

void Box_obj::_vAlignTop(){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Box","_vAlignTop",0x23a20f47,"ru.stablex.ui.widgets.Box._vAlignTop","ru/stablex/ui/widgets/Box.hx",334,0x607c8670)
            	HX_STACK_THIS(this)
HXLINE( 334)		Bool _hx_tmp = this->vertical;
HXDLIN( 334)		if (_hx_tmp) {
HXLINE( 335)			HX_VARI( Float,lastY) = this->paddingTop;
HXLINE( 336)			HX_VAR(  ::openfl::display::DisplayObject,child);
HXLINE( 338)			{
HXLINE( 338)				HX_VARI( Int,_g1) = (int)0;
HXDLIN( 338)				HX_VARI( Int,_g) = this->get_numChildren();
HXDLIN( 338)				while((_g1 < _g)){
HXLINE( 338)					HX_VARI( Int,i) = _g1++;
HXLINE( 339)					child = this->getChildAt(i);
HXLINE( 340)					Bool _hx_tmp1 = !(child->get_visible());
HXDLIN( 340)					if (_hx_tmp1) {
HXLINE( 340)						continue;
            					}
HXLINE( 341)					this->_setObjY(child,lastY);
HXLINE( 342)					Float _hx_tmp2 = this->_objHeight(child);
HXDLIN( 342)					hx::AddEq(lastY,(_hx_tmp2 + this->childPadding));
            				}
            			}
            		}
            		else {
HXLINE( 347)			HX_VARI_NAME( Int,_g11,"_g1") = (int)0;
HXDLIN( 347)			HX_VARI_NAME( Int,_g2,"_g") = this->get_numChildren();
HXDLIN( 347)			while((_g11 < _g2)){
HXLINE( 347)				HX_VARI_NAME( Int,i1,"i") = _g11++;
HXLINE( 348)				 ::openfl::display::DisplayObject _hx_tmp3 = this->getChildAt(i1);
HXDLIN( 348)				this->_setObjY(_hx_tmp3,this->paddingTop);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Box_obj,_vAlignTop,(void))

void Box_obj::_vAlignMiddle(){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Box","_vAlignMiddle",0x1e3625e3,"ru.stablex.ui.widgets.Box._vAlignMiddle","ru/stablex/ui/widgets/Box.hx",360,0x607c8670)
            	HX_STACK_THIS(this)
HXLINE( 360)		Bool _hx_tmp = this->vertical;
HXDLIN( 360)		if (_hx_tmp) {
HXLINE( 362)			HX_VARI( Float,height) = (int)0;
HXLINE( 363)			HX_VAR(  ::openfl::display::DisplayObject,child);
HXLINE( 364)			HX_VARI( Int,visibleChildren) = (int)0;
HXLINE( 366)			{
HXLINE( 366)				HX_VARI( Int,_g1) = (int)0;
HXDLIN( 366)				HX_VARI( Int,_g) = this->get_numChildren();
HXDLIN( 366)				while((_g1 < _g)){
HXLINE( 366)					HX_VARI( Int,i) = _g1++;
HXLINE( 367)					child = this->getChildAt(i);
HXLINE( 368)					Bool _hx_tmp1 = !(child->get_visible());
HXDLIN( 368)					if (_hx_tmp1) {
HXLINE( 368)						continue;
            					}
HXLINE( 369)					++visibleChildren;
HXLINE( 370)					Float _hx_tmp2 = this->_objHeight(child);
HXDLIN( 370)					hx::AddEq(height,_hx_tmp2);
            				}
            			}
HXLINE( 374)			hx::AddEq(height,((visibleChildren - (int)1) * this->childPadding));
HXLINE( 377)			Float _hx_tmp3 = this->get_h();
HXDLIN( 377)			HX_VARI( Float,lastY) = (((Float)(((_hx_tmp3 - this->paddingTop) - this->paddingBottom) - height) / (Float)(int)2) + this->paddingTop);
HXLINE( 379)			{
HXLINE( 379)				HX_VARI_NAME( Int,_g11,"_g1") = (int)0;
HXDLIN( 379)				HX_VARI_NAME( Int,_g2,"_g") = this->get_numChildren();
HXDLIN( 379)				while((_g11 < _g2)){
HXLINE( 379)					HX_VARI_NAME( Int,i1,"i") = _g11++;
HXLINE( 380)					child = this->getChildAt(i1);
HXLINE( 381)					Bool _hx_tmp4 = !(child->get_visible());
HXDLIN( 381)					if (_hx_tmp4) {
HXLINE( 381)						continue;
            					}
HXLINE( 382)					this->_setObjY(child,lastY);
HXLINE( 383)					Float _hx_tmp5 = this->_objHeight(child);
HXDLIN( 383)					hx::AddEq(lastY,(_hx_tmp5 + this->childPadding));
            				}
            			}
            		}
            		else {
HXLINE( 388)			HX_VAR_NAME(  ::openfl::display::DisplayObject,child1,"child");
HXLINE( 389)			{
HXLINE( 389)				HX_VARI_NAME( Int,_g12,"_g1") = (int)0;
HXDLIN( 389)				HX_VARI_NAME( Int,_g3,"_g") = this->get_numChildren();
HXDLIN( 389)				while((_g12 < _g3)){
HXLINE( 389)					HX_VARI_NAME( Int,i2,"i") = _g12++;
HXLINE( 390)					child1 = this->getChildAt(i2);
HXLINE( 391)					Float _hx_tmp6 = this->get_h();
HXDLIN( 391)					Float _hx_tmp7 = ((_hx_tmp6 - this->paddingTop) - this->paddingBottom);
HXDLIN( 391)					Float _hx_tmp8 = this->_objHeight(child1);
HXDLIN( 391)					Float _hx_tmp9 = (((Float)(_hx_tmp7 - _hx_tmp8) / (Float)(int)2) + this->paddingTop);
HXDLIN( 391)					this->_setObjY(child1,_hx_tmp9);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Box_obj,_vAlignMiddle,(void))

void Box_obj::_vAlignBottom(){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Box","_vAlignBottom",0x37503979,"ru.stablex.ui.widgets.Box._vAlignBottom","ru/stablex/ui/widgets/Box.hx",403,0x607c8670)
            	HX_STACK_THIS(this)
HXLINE( 403)		Bool _hx_tmp = this->vertical;
HXDLIN( 403)		if (_hx_tmp) {
HXLINE( 404)			Float _hx_tmp1 = this->get_h();
HXDLIN( 404)			HX_VARI( Float,lastY) = (_hx_tmp1 - this->paddingBottom);
HXLINE( 405)			HX_VAR(  ::openfl::display::DisplayObject,child);
HXLINE( 407)			{
HXLINE( 407)				HX_VARI( Int,_g1) = (int)0;
HXDLIN( 407)				HX_VARI( Int,_g) = this->get_numChildren();
HXDLIN( 407)				while((_g1 < _g)){
HXLINE( 407)					HX_VARI( Int,i) = _g1++;
HXLINE( 408)					Int _hx_tmp2 = this->get_numChildren();
HXDLIN( 408)					child = this->getChildAt(((_hx_tmp2 - (int)1) - i));
HXLINE( 409)					Bool _hx_tmp3 = !(child->get_visible());
HXDLIN( 409)					if (_hx_tmp3) {
HXLINE( 409)						continue;
            					}
HXLINE( 410)					Float _hx_tmp4 = this->_objHeight(child);
HXDLIN( 410)					this->_setObjY(child,(lastY - _hx_tmp4));
HXLINE( 411)					Float _hx_tmp5 = child->get_y();
HXDLIN( 411)					lastY = (_hx_tmp5 - this->childPadding);
            				}
            			}
            		}
            		else {
HXLINE( 416)			HX_VAR_NAME(  ::openfl::display::DisplayObject,child1,"child");
HXLINE( 417)			{
HXLINE( 417)				HX_VARI_NAME( Int,_g11,"_g1") = (int)0;
HXDLIN( 417)				HX_VARI_NAME( Int,_g2,"_g") = this->get_numChildren();
HXDLIN( 417)				while((_g11 < _g2)){
HXLINE( 417)					HX_VARI_NAME( Int,i1,"i") = _g11++;
HXLINE( 418)					child1 = this->getChildAt(i1);
HXLINE( 419)					Float _hx_tmp6 = this->get_h();
HXDLIN( 419)					Float _hx_tmp7 = (_hx_tmp6 - this->paddingBottom);
HXDLIN( 419)					Float _hx_tmp8 = this->_objHeight(child1);
HXDLIN( 419)					this->_setObjY(child1,(_hx_tmp7 - _hx_tmp8));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Box_obj,_vAlignBottom,(void))

void Box_obj::_hAlignLeft(){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Box","_hAlignLeft",0x80c76ce3,"ru.stablex.ui.widgets.Box._hAlignLeft","ru/stablex/ui/widgets/Box.hx",431,0x607c8670)
            	HX_STACK_THIS(this)
HXLINE( 431)		Bool _hx_tmp = this->vertical;
HXDLIN( 431)		if (_hx_tmp) {
HXLINE( 432)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 432)			HX_VARI( Int,_g) = this->get_numChildren();
HXDLIN( 432)			while((_g1 < _g)){
HXLINE( 432)				HX_VARI( Int,i) = _g1++;
HXLINE( 433)				 ::openfl::display::DisplayObject _hx_tmp1 = this->getChildAt(i);
HXDLIN( 433)				this->_setObjX(_hx_tmp1,this->paddingLeft);
            			}
            		}
            		else {
HXLINE( 438)			HX_VARI( Float,lastX) = this->paddingLeft;
HXLINE( 439)			HX_VAR(  ::openfl::display::DisplayObject,child);
HXLINE( 441)			{
HXLINE( 441)				HX_VARI_NAME( Int,_g11,"_g1") = (int)0;
HXDLIN( 441)				HX_VARI_NAME( Int,_g2,"_g") = this->get_numChildren();
HXDLIN( 441)				while((_g11 < _g2)){
HXLINE( 441)					HX_VARI_NAME( Int,i1,"i") = _g11++;
HXLINE( 442)					child = this->getChildAt(i1);
HXLINE( 443)					Bool _hx_tmp2 = !(child->get_visible());
HXDLIN( 443)					if (_hx_tmp2) {
HXLINE( 443)						continue;
            					}
HXLINE( 444)					this->_setObjX(child,lastX);
HXLINE( 445)					Float _hx_tmp3 = this->_objWidth(child);
HXDLIN( 445)					hx::AddEq(lastX,(_hx_tmp3 + this->childPadding));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Box_obj,_hAlignLeft,(void))

void Box_obj::_hAlignRight(){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Box","_hAlignRight",0xa4c4e780,"ru.stablex.ui.widgets.Box._hAlignRight","ru/stablex/ui/widgets/Box.hx",457,0x607c8670)
            	HX_STACK_THIS(this)
HXLINE( 457)		Bool _hx_tmp = this->vertical;
HXDLIN( 457)		if (_hx_tmp) {
HXLINE( 458)			HX_VAR(  ::openfl::display::DisplayObject,child);
HXLINE( 459)			{
HXLINE( 459)				HX_VARI( Int,_g1) = (int)0;
HXDLIN( 459)				HX_VARI( Int,_g) = this->get_numChildren();
HXDLIN( 459)				while((_g1 < _g)){
HXLINE( 459)					HX_VARI( Int,i) = _g1++;
HXLINE( 460)					child = this->getChildAt(i);
HXLINE( 461)					Float _hx_tmp1 = this->get_w();
HXDLIN( 461)					Float _hx_tmp2 = (_hx_tmp1 - this->paddingRight);
HXDLIN( 461)					Float _hx_tmp3 = this->_objWidth(child);
HXDLIN( 461)					this->_setObjX(child,(_hx_tmp2 - _hx_tmp3));
            				}
            			}
            		}
            		else {
HXLINE( 466)			Float _hx_tmp4 = this->get_w();
HXDLIN( 466)			HX_VARI( Float,lastX) = (_hx_tmp4 - this->paddingRight);
HXLINE( 467)			HX_VAR_NAME(  ::openfl::display::DisplayObject,child1,"child");
HXLINE( 469)			{
HXLINE( 469)				HX_VARI_NAME( Int,_g11,"_g1") = (int)0;
HXDLIN( 469)				HX_VARI_NAME( Int,_g2,"_g") = this->get_numChildren();
HXDLIN( 469)				while((_g11 < _g2)){
HXLINE( 469)					HX_VARI_NAME( Int,i1,"i") = _g11++;
HXLINE( 470)					Int _hx_tmp5 = this->get_numChildren();
HXDLIN( 470)					child1 = this->getChildAt(((_hx_tmp5 - (int)1) - i1));
HXLINE( 471)					Bool _hx_tmp6 = !(child1->get_visible());
HXDLIN( 471)					if (_hx_tmp6) {
HXLINE( 471)						continue;
            					}
HXLINE( 472)					Float _hx_tmp7 = this->_objWidth(child1);
HXDLIN( 472)					this->_setObjX(child1,(lastX - _hx_tmp7));
HXLINE( 473)					Float _hx_tmp8 = child1->get_x();
HXDLIN( 473)					lastX = (_hx_tmp8 - this->childPadding);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Box_obj,_hAlignRight,(void))

void Box_obj::_hAlignCenter(){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Box","_hAlignCenter",0x3f3a79b1,"ru.stablex.ui.widgets.Box._hAlignCenter","ru/stablex/ui/widgets/Box.hx",485,0x607c8670)
            	HX_STACK_THIS(this)
HXLINE( 485)		Bool _hx_tmp = this->vertical;
HXDLIN( 485)		if (_hx_tmp) {
HXLINE( 486)			HX_VAR(  ::openfl::display::DisplayObject,child);
HXLINE( 487)			{
HXLINE( 487)				HX_VARI( Int,_g1) = (int)0;
HXDLIN( 487)				HX_VARI( Int,_g) = this->get_numChildren();
HXDLIN( 487)				while((_g1 < _g)){
HXLINE( 487)					HX_VARI( Int,i) = _g1++;
HXLINE( 488)					child = this->getChildAt(i);
HXLINE( 489)					Float _hx_tmp1 = this->get_w();
HXDLIN( 489)					Float _hx_tmp2 = ((_hx_tmp1 - this->paddingLeft) - this->paddingRight);
HXDLIN( 489)					Float _hx_tmp3 = this->_objWidth(child);
HXDLIN( 489)					Float _hx_tmp4 = (((Float)(_hx_tmp2 - _hx_tmp3) / (Float)(int)2) + this->paddingLeft);
HXDLIN( 489)					this->_setObjX(child,_hx_tmp4);
            				}
            			}
            		}
            		else {
HXLINE( 495)			HX_VAR_NAME(  ::openfl::display::DisplayObject,child1,"child");
HXLINE( 496)			HX_VARI( Float,width) = (int)0;
HXLINE( 497)			HX_VARI( Int,visibleChildren) = (int)0;
HXLINE( 499)			{
HXLINE( 499)				HX_VARI_NAME( Int,_g11,"_g1") = (int)0;
HXDLIN( 499)				HX_VARI_NAME( Int,_g2,"_g") = this->get_numChildren();
HXDLIN( 499)				while((_g11 < _g2)){
HXLINE( 499)					HX_VARI_NAME( Int,i1,"i") = _g11++;
HXLINE( 500)					child1 = this->getChildAt(i1);
HXLINE( 501)					Bool _hx_tmp5 = !(child1->get_visible());
HXDLIN( 501)					if (_hx_tmp5) {
HXLINE( 501)						continue;
            					}
HXLINE( 502)					++visibleChildren;
HXLINE( 503)					Float _hx_tmp6 = this->_objWidth(child1);
HXDLIN( 503)					hx::AddEq(width,_hx_tmp6);
            				}
            			}
HXLINE( 507)			hx::AddEq(width,((visibleChildren - (int)1) * this->childPadding));
HXLINE( 510)			Float _hx_tmp7 = this->get_w();
HXDLIN( 510)			HX_VARI( Float,lastX) = (((Float)(((_hx_tmp7 - this->paddingLeft) - this->paddingRight) - width) / (Float)(int)2) + this->paddingLeft);
HXLINE( 512)			{
HXLINE( 512)				HX_VARI_NAME( Int,_g12,"_g1") = (int)0;
HXDLIN( 512)				HX_VARI_NAME( Int,_g3,"_g") = this->get_numChildren();
HXDLIN( 512)				while((_g12 < _g3)){
HXLINE( 512)					HX_VARI_NAME( Int,i2,"i") = _g12++;
HXLINE( 513)					child1 = this->getChildAt(i2);
HXLINE( 514)					Bool _hx_tmp8 = !(child1->get_visible());
HXDLIN( 514)					if (_hx_tmp8) {
HXLINE( 514)						continue;
            					}
HXLINE( 515)					this->_setObjX(child1,lastX);
HXLINE( 516)					Float _hx_tmp9 = this->_objWidth(child1);
HXDLIN( 516)					hx::AddEq(lastX,(_hx_tmp9 + this->childPadding));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Box_obj,_hAlignCenter,(void))

 ::openfl::display::DisplayObject Box_obj::addChild( ::openfl::display::DisplayObject child){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Box","addChild",0x249067db,"ru.stablex.ui.widgets.Box.addChild","ru/stablex/ui/widgets/Box.hx",526,0x607c8670)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(child,"child")
HXLINE( 527)		this->super::addChild(child);
HXLINE( 528)		Bool _hx_tmp = ::Std_obj::is(child,hx::ClassOf< ::ru::stablex::ui::widgets::Widget >());
HXDLIN( 528)		if (_hx_tmp) {
HXLINE( 529)			hx::TCast<  ::ru::stablex::TweenSprite >::cast(child)->addUniqueListener(HX_("widgetResize",d8,a8,1e,0d),this->_onChildResize_dyn(),null(),null(),null());
HXLINE( 530)			this->_onChildResize(null());
            		}
HXLINE( 532)		return child;
            	}


 ::openfl::display::DisplayObject Box_obj::addChildAt( ::openfl::display::DisplayObject child,Int idx){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Box","addChildAt",0xb75e8dae,"ru.stablex.ui.widgets.Box.addChildAt","ru/stablex/ui/widgets/Box.hx",540,0x607c8670)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(child,"child")
            	HX_STACK_ARG(idx,"idx")
HXLINE( 541)		this->super::addChildAt(child,idx);
HXLINE( 542)		Bool _hx_tmp = ::Std_obj::is(child,hx::ClassOf< ::ru::stablex::ui::widgets::Widget >());
HXDLIN( 542)		if (_hx_tmp) {
HXLINE( 543)			hx::TCast<  ::ru::stablex::TweenSprite >::cast(child)->addUniqueListener(HX_("widgetResize",d8,a8,1e,0d),this->_onChildResize_dyn(),null(),null(),null());
HXLINE( 544)			this->_onChildResize(null());
            		}
HXLINE( 546)		return child;
            	}


 ::openfl::display::DisplayObject Box_obj::removeChild( ::openfl::display::DisplayObject child){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Box","removeChild",0x5da9c298,"ru.stablex.ui.widgets.Box.removeChild","ru/stablex/ui/widgets/Box.hx",554,0x607c8670)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(child,"child")
HXLINE( 555)		this->super::removeChild(child);
HXLINE( 556)		child->removeEventListener(HX_("widgetResize",d8,a8,1e,0d),this->_onChildResize_dyn(),null());
HXLINE( 557)		Bool _hx_tmp = !(this->destroyed);
HXDLIN( 557)		if (_hx_tmp) {
HXLINE( 558)			this->_onChildResize(null());
            		}
HXLINE( 560)		return child;
            	}


 ::openfl::display::DisplayObject Box_obj::removeChildAt(Int idx){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Box","removeChildAt",0x6d91d1ab,"ru.stablex.ui.widgets.Box.removeChildAt","ru/stablex/ui/widgets/Box.hx",568,0x607c8670)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(idx,"idx")
HXLINE( 569)		HX_VARI(  ::openfl::display::DisplayObject,child) = this->super::removeChildAt(idx);
HXLINE( 570)		child->removeEventListener(HX_("widgetResize",d8,a8,1e,0d),this->_onChildResize_dyn(),null());
HXLINE( 571)		Bool _hx_tmp = !(this->destroyed);
HXDLIN( 571)		if (_hx_tmp) {
HXLINE( 572)			this->_onChildResize(null());
            		}
HXLINE( 574)		return child;
            	}


void Box_obj::_onChildResize( ::ru::stablex::ui::events::WidgetEvent e){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Box","_onChildResize",0xeea91232,"ru.stablex.ui.widgets.Box._onChildResize","ru/stablex/ui/widgets/Box.hx",582,0x607c8670)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(e,"e")
HXLINE( 583)		if (this->_processingChildResize) {
HXLINE( 583)			return;
            		}
HXLINE( 584)		this->_processingChildResize = true;
HXLINE( 586)		Bool _hx_tmp = this->created;
HXDLIN( 586)		if (_hx_tmp) {
HXLINE( 587)			Bool _hx_tmp1;
HXDLIN( 587)			if (!(this->autoWidth)) {
HXLINE( 587)				_hx_tmp1 = this->autoHeight;
            			}
            			else {
HXLINE( 587)				_hx_tmp1 = true;
            			}
HXDLIN( 587)			if (_hx_tmp1) {
HXLINE( 588)				Bool _hx_tmp2 = hx::IsNotNull( e );
HXDLIN( 588)				if (_hx_tmp2) {
HXLINE( 589)					HX_VAR(  ::ru::stablex::ui::widgets::Widget,child);
HXDLIN( 589)					Bool _hx_tmp3 = ::Std_obj::is(e->currentTarget,hx::ClassOf< ::ru::stablex::ui::widgets::Widget >());
HXDLIN( 589)					if (_hx_tmp3) {
HXLINE( 589)						child = hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(e->currentTarget);
            					}
            					else {
HXLINE( 589)						child = null();
            					}
HXLINE( 591)					Bool _hx_tmp4;
HXDLIN( 591)					Bool _hx_tmp5;
HXDLIN( 591)					Bool _hx_tmp6;
HXDLIN( 591)					Bool _hx_tmp7 = hx::IsNotNull( child );
HXDLIN( 591)					if (_hx_tmp7) {
HXLINE( 591)						Bool _hx_tmp8 = child->get_visible();
HXDLIN( 591)						_hx_tmp6 = (_hx_tmp8 != false);
            					}
            					else {
HXLINE( 591)						_hx_tmp6 = false;
            					}
HXDLIN( 591)					if (_hx_tmp6) {
HXLINE( 592)						Bool _hx_tmp9;
HXDLIN( 592)						if (this->autoWidth) {
HXLINE( 592)							_hx_tmp9 = child->_widthUsePercent;
            						}
            						else {
HXLINE( 592)							_hx_tmp9 = false;
            						}
HXLINE( 591)						_hx_tmp5 = !(_hx_tmp9);
            					}
            					else {
HXLINE( 591)						_hx_tmp5 = false;
            					}
HXDLIN( 591)					if (_hx_tmp5) {
HXLINE( 593)						Bool _hx_tmp10;
HXDLIN( 593)						if (this->autoHeight) {
HXLINE( 593)							_hx_tmp10 = child->_heightUsePercent;
            						}
            						else {
HXLINE( 593)							_hx_tmp10 = false;
            						}
HXLINE( 591)						_hx_tmp4 = !(_hx_tmp10);
            					}
            					else {
HXLINE( 591)						_hx_tmp4 = false;
            					}
HXLINE( 590)					if (_hx_tmp4) {
HXLINE( 595)						this->refresh();
            					}
            				}
            				else {
HXLINE( 598)					this->refresh();
            				}
            			}
            			else {
HXLINE( 601)				Bool _hx_tmp11 = hx::IsNull( this->layout );
HXDLIN( 601)				if (_hx_tmp11) {
HXLINE( 602)					this->alignElements();
            				}
            				else {
HXLINE( 604)					this->applyLayout();
            				}
            			}
            		}
HXLINE( 609)		this->_processingChildResize = false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Box_obj,_onChildResize,(void))

Float Box_obj::get_contentHeight(){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Box","get_contentHeight",0xc299a937,"ru.stablex.ui.widgets.Box.get_contentHeight","ru/stablex/ui/widgets/Box.hx",622,0x607c8670)
            	HX_STACK_THIS(this)
HXLINE( 622)		Float _hx_tmp = this->get_h();
HXDLIN( 622)		return ((_hx_tmp - this->paddingTop) - this->paddingBottom);
            	}


Float Box_obj::get_contentWidth(){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Box","get_contentWidth",0x708eaeb6,"ru.stablex.ui.widgets.Box.get_contentWidth","ru/stablex/ui/widgets/Box.hx",631,0x607c8670)
            	HX_STACK_THIS(this)
HXLINE( 631)		Float _hx_tmp = this->get_w();
HXDLIN( 631)		return ((_hx_tmp - this->paddingLeft) - this->paddingRight);
            	}


Bool Box_obj::set_autoSize(Bool as){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Box","set_autoSize",0x64848f6d,"ru.stablex.ui.widgets.Box.set_autoSize","ru/stablex/ui/widgets/Box.hx",640,0x607c8670)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(as,"as")
HXLINE( 640)		return (this->autoWidth = (this->autoHeight = as));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Box_obj,set_autoSize,return )

Float Box_obj::set_w(Float w){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Box","set_w",0x6653af3a,"ru.stablex.ui.widgets.Box.set_w","ru/stablex/ui/widgets/Box.hx",648,0x607c8670)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(w,"w")
HXLINE( 649)		this->autoWidth = false;
HXLINE( 650)		return this->super::set_w(w);
            	}


Float Box_obj::set_widthPt(Float wp){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Box","set_widthPt",0xdb24acad,"ru.stablex.ui.widgets.Box.set_widthPt","ru/stablex/ui/widgets/Box.hx",658,0x607c8670)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(wp,"wp")
HXLINE( 659)		this->autoWidth = false;
HXLINE( 660)		return this->super::set_widthPt(wp);
            	}


Float Box_obj::set_heightPt(Float hp){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Box","set_heightPt",0x68565568,"ru.stablex.ui.widgets.Box.set_heightPt","ru/stablex/ui/widgets/Box.hx",668,0x607c8670)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(hp,"hp")
HXLINE( 669)		this->autoHeight = false;
HXLINE( 670)		return this->super::set_heightPt(hp);
            	}


Float Box_obj::set_h(Float h){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Box","set_h",0x6653af2b,"ru.stablex.ui.widgets.Box.set_h","ru/stablex/ui/widgets/Box.hx",678,0x607c8670)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(h,"h")
HXLINE( 679)		this->autoHeight = false;
HXLINE( 680)		return this->super::set_h(h);
            	}


Float Box_obj::set_padding(Float p){
            	HX_STACK_FRAME("ru.stablex.ui.widgets.Box","set_padding",0x7aa0fcd4,"ru.stablex.ui.widgets.Box.set_padding","ru/stablex/ui/widgets/Box.hx",688,0x607c8670)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(p,"p")
HXLINE( 689)		this->paddingTop = (this->paddingBottom = (this->paddingRight = (this->paddingLeft = p)));
HXLINE( 690)		return p;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Box_obj,set_padding,return )


Box_obj::Box_obj()
{
}

void Box_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Box);
	HX_MARK_MEMBER_NAME(vertical,"vertical");
	HX_MARK_MEMBER_NAME(paddingLeft,"paddingLeft");
	HX_MARK_MEMBER_NAME(paddingRight,"paddingRight");
	HX_MARK_MEMBER_NAME(paddingTop,"paddingTop");
	HX_MARK_MEMBER_NAME(paddingBottom,"paddingBottom");
	HX_MARK_MEMBER_NAME(childPadding,"childPadding");
	HX_MARK_MEMBER_NAME(align,"align");
	HX_MARK_MEMBER_NAME(autoWidth,"autoWidth");
	HX_MARK_MEMBER_NAME(autoHeight,"autoHeight");
	HX_MARK_MEMBER_NAME(unifyChildren,"unifyChildren");
	HX_MARK_MEMBER_NAME(intPositions,"intPositions");
	HX_MARK_MEMBER_NAME(_processingChildResize,"_processingChildResize");
	 ::ru::stablex::ui::widgets::Widget_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Box_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(vertical,"vertical");
	HX_VISIT_MEMBER_NAME(paddingLeft,"paddingLeft");
	HX_VISIT_MEMBER_NAME(paddingRight,"paddingRight");
	HX_VISIT_MEMBER_NAME(paddingTop,"paddingTop");
	HX_VISIT_MEMBER_NAME(paddingBottom,"paddingBottom");
	HX_VISIT_MEMBER_NAME(childPadding,"childPadding");
	HX_VISIT_MEMBER_NAME(align,"align");
	HX_VISIT_MEMBER_NAME(autoWidth,"autoWidth");
	HX_VISIT_MEMBER_NAME(autoHeight,"autoHeight");
	HX_VISIT_MEMBER_NAME(unifyChildren,"unifyChildren");
	HX_VISIT_MEMBER_NAME(intPositions,"intPositions");
	HX_VISIT_MEMBER_NAME(_processingChildResize,"_processingChildResize");
	 ::ru::stablex::ui::widgets::Widget_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Box_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"align") ) { return hx::Val( align); }
		if (HX_FIELD_EQ(inName,"set_w") ) { return hx::Val( set_w_dyn()); }
		if (HX_FIELD_EQ(inName,"set_h") ) { return hx::Val( set_h_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"refresh") ) { return hx::Val( refresh_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"vertical") ) { return hx::Val( vertical); }
		if (HX_FIELD_EQ(inName,"_setObjX") ) { return hx::Val( _setObjX_dyn()); }
		if (HX_FIELD_EQ(inName,"_setObjY") ) { return hx::Val( _setObjY_dyn()); }
		if (HX_FIELD_EQ(inName,"addChild") ) { return hx::Val( addChild_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"autoWidth") ) { return hx::Val( autoWidth); }
		if (HX_FIELD_EQ(inName,"_objWidth") ) { return hx::Val( _objWidth_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"paddingTop") ) { return hx::Val( paddingTop); }
		if (HX_FIELD_EQ(inName,"autoHeight") ) { return hx::Val( autoHeight); }
		if (HX_FIELD_EQ(inName,"_objHeight") ) { return hx::Val( _objHeight_dyn()); }
		if (HX_FIELD_EQ(inName,"_calcWidth") ) { return hx::Val( _calcWidth_dyn()); }
		if (HX_FIELD_EQ(inName,"_vAlignTop") ) { return hx::Val( _vAlignTop_dyn()); }
		if (HX_FIELD_EQ(inName,"addChildAt") ) { return hx::Val( addChildAt_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"paddingLeft") ) { return hx::Val( paddingLeft); }
		if (HX_FIELD_EQ(inName,"_calcHeight") ) { return hx::Val( _calcHeight_dyn()); }
		if (HX_FIELD_EQ(inName,"_hAlignLeft") ) { return hx::Val( _hAlignLeft_dyn()); }
		if (HX_FIELD_EQ(inName,"removeChild") ) { return hx::Val( removeChild_dyn()); }
		if (HX_FIELD_EQ(inName,"set_widthPt") ) { return hx::Val( set_widthPt_dyn()); }
		if (HX_FIELD_EQ(inName,"set_padding") ) { return hx::Val( set_padding_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"paddingRight") ) { return hx::Val( paddingRight); }
		if (HX_FIELD_EQ(inName,"childPadding") ) { return hx::Val( childPadding); }
		if (HX_FIELD_EQ(inName,"intPositions") ) { return hx::Val( intPositions); }
		if (HX_FIELD_EQ(inName,"_hAlignRight") ) { return hx::Val( _hAlignRight_dyn()); }
		if (HX_FIELD_EQ(inName,"set_autoSize") ) { return hx::Val( set_autoSize_dyn()); }
		if (HX_FIELD_EQ(inName,"set_heightPt") ) { return hx::Val( set_heightPt_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"paddingBottom") ) { return hx::Val( paddingBottom); }
		if (HX_FIELD_EQ(inName,"unifyChildren") ) { return hx::Val( unifyChildren); }
		if (HX_FIELD_EQ(inName,"alignElements") ) { return hx::Val( alignElements_dyn()); }
		if (HX_FIELD_EQ(inName,"_vAlignMiddle") ) { return hx::Val( _vAlignMiddle_dyn()); }
		if (HX_FIELD_EQ(inName,"_vAlignBottom") ) { return hx::Val( _vAlignBottom_dyn()); }
		if (HX_FIELD_EQ(inName,"_hAlignCenter") ) { return hx::Val( _hAlignCenter_dyn()); }
		if (HX_FIELD_EQ(inName,"removeChildAt") ) { return hx::Val( removeChildAt_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_unifyChildren") ) { return hx::Val( _unifyChildren_dyn()); }
		if (HX_FIELD_EQ(inName,"_onChildResize") ) { return hx::Val( _onChildResize_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"get_contentWidth") ) { return hx::Val( get_contentWidth_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"get_contentHeight") ) { return hx::Val( get_contentHeight_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"_resizeWithPercent") ) { return hx::Val( _resizeWithPercent_dyn()); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"_processingChildResize") ) { return hx::Val( _processingChildResize); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Box_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"align") ) { align=inValue.Cast< ::String >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"padding") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_padding(inValue) ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"vertical") ) { vertical=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"autoSize") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_autoSize(inValue) ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"autoWidth") ) { autoWidth=inValue.Cast< Bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"paddingTop") ) { paddingTop=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"autoHeight") ) { autoHeight=inValue.Cast< Bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"paddingLeft") ) { paddingLeft=inValue.Cast< Float >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"paddingRight") ) { paddingRight=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"childPadding") ) { childPadding=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"intPositions") ) { intPositions=inValue.Cast< Bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"paddingBottom") ) { paddingBottom=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"unifyChildren") ) { unifyChildren=inValue.Cast< Bool >(); return inValue; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"_processingChildResize") ) { _processingChildResize=inValue.Cast< Bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Box_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("vertical","\x76","\xbc","\x15","\x6a"));
	outFields->push(HX_HCSTRING("padding","\xd1","\x59","\x7d","\xd0"));
	outFields->push(HX_HCSTRING("paddingLeft","\x78","\x4a","\xe6","\x85"));
	outFields->push(HX_HCSTRING("paddingRight","\x4b","\xec","\xa7","\x1a"));
	outFields->push(HX_HCSTRING("paddingTop","\x44","\xfd","\x05","\x3a"));
	outFields->push(HX_HCSTRING("paddingBottom","\x9c","\x67","\x99","\x4f"));
	outFields->push(HX_HCSTRING("childPadding","\x95","\x83","\x49","\x99"));
	outFields->push(HX_HCSTRING("align","\xc5","\x56","\x91","\x21"));
	outFields->push(HX_HCSTRING("autoSize","\xd0","\x8f","\x79","\x2f"));
	outFields->push(HX_HCSTRING("autoWidth","\x17","\xf4","\x6d","\xa8"));
	outFields->push(HX_HCSTRING("autoHeight","\xb6","\x18","\x17","\x6e"));
	outFields->push(HX_HCSTRING("unifyChildren","\xa2","\xad","\x56","\x98"));
	outFields->push(HX_HCSTRING("intPositions","\xbb","\x30","\xf9","\xea"));
	outFields->push(HX_HCSTRING("_processingChildResize","\xde","\x66","\x11","\x4c"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Box_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(Box_obj,vertical),HX_HCSTRING("vertical","\x76","\xbc","\x15","\x6a")},
	{hx::fsFloat,(int)offsetof(Box_obj,paddingLeft),HX_HCSTRING("paddingLeft","\x78","\x4a","\xe6","\x85")},
	{hx::fsFloat,(int)offsetof(Box_obj,paddingRight),HX_HCSTRING("paddingRight","\x4b","\xec","\xa7","\x1a")},
	{hx::fsFloat,(int)offsetof(Box_obj,paddingTop),HX_HCSTRING("paddingTop","\x44","\xfd","\x05","\x3a")},
	{hx::fsFloat,(int)offsetof(Box_obj,paddingBottom),HX_HCSTRING("paddingBottom","\x9c","\x67","\x99","\x4f")},
	{hx::fsFloat,(int)offsetof(Box_obj,childPadding),HX_HCSTRING("childPadding","\x95","\x83","\x49","\x99")},
	{hx::fsString,(int)offsetof(Box_obj,align),HX_HCSTRING("align","\xc5","\x56","\x91","\x21")},
	{hx::fsBool,(int)offsetof(Box_obj,autoWidth),HX_HCSTRING("autoWidth","\x17","\xf4","\x6d","\xa8")},
	{hx::fsBool,(int)offsetof(Box_obj,autoHeight),HX_HCSTRING("autoHeight","\xb6","\x18","\x17","\x6e")},
	{hx::fsBool,(int)offsetof(Box_obj,unifyChildren),HX_HCSTRING("unifyChildren","\xa2","\xad","\x56","\x98")},
	{hx::fsBool,(int)offsetof(Box_obj,intPositions),HX_HCSTRING("intPositions","\xbb","\x30","\xf9","\xea")},
	{hx::fsBool,(int)offsetof(Box_obj,_processingChildResize),HX_HCSTRING("_processingChildResize","\xde","\x66","\x11","\x4c")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Box_obj_sStaticStorageInfo = 0;
#endif

static ::String Box_obj_sMemberFields[] = {
	HX_HCSTRING("vertical","\x76","\xbc","\x15","\x6a"),
	HX_HCSTRING("paddingLeft","\x78","\x4a","\xe6","\x85"),
	HX_HCSTRING("paddingRight","\x4b","\xec","\xa7","\x1a"),
	HX_HCSTRING("paddingTop","\x44","\xfd","\x05","\x3a"),
	HX_HCSTRING("paddingBottom","\x9c","\x67","\x99","\x4f"),
	HX_HCSTRING("childPadding","\x95","\x83","\x49","\x99"),
	HX_HCSTRING("align","\xc5","\x56","\x91","\x21"),
	HX_HCSTRING("autoWidth","\x17","\xf4","\x6d","\xa8"),
	HX_HCSTRING("autoHeight","\xb6","\x18","\x17","\x6e"),
	HX_HCSTRING("unifyChildren","\xa2","\xad","\x56","\x98"),
	HX_HCSTRING("intPositions","\xbb","\x30","\xf9","\xea"),
	HX_HCSTRING("_processingChildResize","\xde","\x66","\x11","\x4c"),
	HX_HCSTRING("_objWidth","\xee","\x4d","\x11","\xbf"),
	HX_HCSTRING("_objHeight","\xff","\x5a","\x62","\x26"),
	HX_HCSTRING("_setObjX","\xc4","\x02","\xe6","\x48"),
	HX_HCSTRING("_setObjY","\xc5","\x02","\xe6","\x48"),
	HX_HCSTRING("refresh","\xdb","\xd9","\x20","\xed"),
	HX_HCSTRING("_calcWidth","\xf2","\x4c","\x0e","\x19"),
	HX_HCSTRING("_calcHeight","\x7b","\x7f","\xc4","\x89"),
	HX_HCSTRING("_resizeWithPercent","\x8c","\xc8","\x3a","\x70"),
	HX_HCSTRING("alignElements","\x1c","\x16","\x13","\x65"),
	HX_HCSTRING("_unifyChildren","\xe3","\x9d","\xa8","\xd6"),
	HX_HCSTRING("_vAlignTop","\x27","\x2f","\x7a","\x3a"),
	HX_HCSTRING("_vAlignMiddle","\x03","\x32","\x0b","\xf0"),
	HX_HCSTRING("_vAlignBottom","\x99","\x45","\x25","\x09"),
	HX_HCSTRING("_hAlignLeft","\x03","\x31","\x0b","\x67"),
	HX_HCSTRING("_hAlignRight","\x60","\xbf","\xcc","\x39"),
	HX_HCSTRING("_hAlignCenter","\xd1","\x85","\x0f","\x11"),
	HX_HCSTRING("addChild","\xbb","\xcf","\x16","\xbf"),
	HX_HCSTRING("addChildAt","\x8e","\xad","\x36","\xce"),
	HX_HCSTRING("removeChild","\xb8","\x86","\xed","\x43"),
	HX_HCSTRING("removeChildAt","\xcb","\xdd","\x66","\x3f"),
	HX_HCSTRING("_onChildResize","\x12","\xa2","\x3e","\xb7"),
	HX_HCSTRING("get_contentHeight","\x57","\x45","\xb7","\xde"),
	HX_HCSTRING("get_contentWidth","\x96","\xf6","\x8f","\xb5"),
	HX_HCSTRING("set_autoSize","\x4d","\x67","\x8c","\xf9"),
	HX_HCSTRING("set_w","\x5a","\x9b","\x2f","\x7a"),
	HX_HCSTRING("set_widthPt","\xcd","\x70","\x68","\xc1"),
	HX_HCSTRING("set_heightPt","\x48","\x2d","\x5e","\xfd"),
	HX_HCSTRING("set_h","\x4b","\x9b","\x2f","\x7a"),
	HX_HCSTRING("set_padding","\xf4","\xc0","\xe4","\x60"),
	::String(null()) };

static void Box_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Box_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Box_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Box_obj::__mClass,"__mClass");
};

#endif

hx::Class Box_obj::__mClass;

void Box_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("ru.stablex.ui.widgets.Box","\x4e","\x4c","\x6e","\xf6");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Box_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Box_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Box_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Box_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Box_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Box_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace ru
} // end namespace stablex
} // end namespace ui
} // end namespace widgets
