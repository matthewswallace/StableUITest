// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app_Preloader
#include <lime/app/Preloader.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Preloader
#include <openfl/display/Preloader.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

namespace openfl{
namespace display{

void Preloader_obj::__construct( ::openfl::display::Sprite display){
            	HX_STACK_FRAME("openfl.display.Preloader","new",0x5c0f09be,"openfl.display.Preloader.new","openfl/display/Preloader.hx",20,0xc399db74)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(display,"display")
HXLINE(  22)		super::__construct();
HXLINE(  24)		this->display = display;
            	}

Dynamic Preloader_obj::__CreateEmpty() { return new Preloader_obj; }

hx::ObjectPtr< Preloader_obj > Preloader_obj::__new( ::openfl::display::Sprite display)
{
	hx::ObjectPtr< Preloader_obj > _hx_result = new Preloader_obj();
	_hx_result->__construct(display);
	return _hx_result;
}

Dynamic Preloader_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Preloader_obj > _hx_result = new Preloader_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void Preloader_obj::init(){
            	HX_STACK_FRAME("openfl.display.Preloader","init",0x2dd233f2,"openfl.display.Preloader.init","openfl/display/Preloader.hx",31,0xc399db74)
            	HX_STACK_THIS(this)
HXLINE(  31)		Bool _hx_tmp;
HXDLIN(  31)		if (!(this->complete)) {
HXLINE(  31)			_hx_tmp = hx::IsNotNull( this->display );
            		}
            		else {
HXLINE(  31)			_hx_tmp = false;
            		}
HXDLIN(  31)		if (_hx_tmp) {
HXLINE(  33)			HX_VARI( hx::Class,classType) = ::Type_obj::getClass(this->display);
HXLINE(  34)			HX_VARI( ::Array< ::String >,fields) = ::Type_obj::getInstanceFields(classType);
HXLINE(  36)			{
HXLINE(  36)				HX_VARI( Int,_g) = (int)0;
HXDLIN(  36)				while((_g < fields->length)){
HXLINE(  36)					HX_VARI( ::String,field) = fields->__get(_g);
HXDLIN(  36)					++_g;
HXLINE(  38)					if ((field == HX_("onInit",cf,43,45,e8))) {
HXLINE(  38)						this->displayHasInit = true;
            					}
HXLINE(  39)					if ((field == HX_("onUpdate",88,7c,b2,66))) {
HXLINE(  39)						this->displayHasUpdate = true;
            					}
HXLINE(  40)					if ((field == HX_("onLoaded",84,3e,1c,38))) {
HXLINE(  40)						this->displayHasLoaded = true;
            					}
            				}
            			}
HXLINE(  44)			::openfl::Lib_obj::current->addChild(this->display);
HXLINE(  46)			Bool _hx_tmp1 = this->displayHasInit;
HXDLIN(  46)			if (_hx_tmp1) {
HXLINE(  48)				 ::Dynamic _hx_tmp2 = ::Reflect_obj::field(this->display,HX_("onInit",cf,43,45,e8));
HXDLIN(  48)				::Reflect_obj::callMethod(this->display,_hx_tmp2,::cpp::VirtualArray_obj::__new(0));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Preloader_obj,init,(void))

void Preloader_obj::load(::Array< ::String > urls,::Array< ::String > types){
            	HX_STACK_FRAME("openfl.display.Preloader","load",0x2fce9308,"openfl.display.Preloader.load","openfl/display/Preloader.hx",57,0xc399db74)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(urls,"urls")
            	HX_STACK_ARG(types,"types")
HXLINE(  59)		Bool _hx_tmp = (urls->length > (int)0);
HXDLIN(  59)		if (_hx_tmp) {
HXLINE(  61)			this->init();
            		}
HXLINE(  65)		this->super::load(urls,types);
            	}


void Preloader_obj::start(){
            	HX_STACK_FRAME("openfl.display.Preloader","start",0xb00e4140,"openfl.display.Preloader.start","openfl/display/Preloader.hx",72,0xc399db74)
            	HX_STACK_THIS(this)
HXLINE(  72)		Bool _hx_tmp = this->displayHasLoaded;
HXDLIN(  72)		if (_hx_tmp) {
HXLINE(  74)			this->display->addEventListener(HX_("complete",b9,00,c8,7f),this->display_onComplete_dyn(),null(),null(),null());
HXLINE(  75)			 ::Dynamic _hx_tmp1 = ::Reflect_obj::field(this->display,HX_("onLoaded",84,3e,1c,38));
HXDLIN(  75)			::Reflect_obj::callMethod(this->display,_hx_tmp1,::cpp::VirtualArray_obj::__new(0));
            		}
            		else {
HXLINE(  77)			Bool _hx_tmp2 = hx::IsNotNull( this->display );
HXDLIN(  77)			if (_hx_tmp2) {
HXLINE(  79)				this->display_onComplete(null());
            			}
            			else {
HXLINE(  83)				this->super::start();
            			}
            		}
            	}


void Preloader_obj::update(Int loaded,Int total){
            	HX_STACK_FRAME("openfl.display.Preloader","update",0xdd75fb6b,"openfl.display.Preloader.update","openfl/display/Preloader.hx",92,0xc399db74)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(loaded,"loaded")
            	HX_STACK_ARG(total,"total")
HXLINE(  92)		Bool _hx_tmp = this->displayHasUpdate;
HXDLIN(  92)		if (_hx_tmp) {
HXLINE(  94)			 ::Dynamic _hx_tmp1 = ::Reflect_obj::field(this->display,HX_("onUpdate",88,7c,b2,66));
HXDLIN(  94)			::Reflect_obj::callMethod(this->display,_hx_tmp1,::cpp::VirtualArray_obj::__new(2)->init(0,loaded)->init(1,total));
            		}
            	}


void Preloader_obj::display_onComplete( ::openfl::events::Event event){
            	HX_STACK_FRAME("openfl.display.Preloader","display_onComplete",0x4bd0fb77,"openfl.display.Preloader.display_onComplete","openfl/display/Preloader.hx",108,0xc399db74)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(event,"event")
HXLINE( 110)		this->display->removeEventListener(HX_("complete",b9,00,c8,7f),this->display_onComplete_dyn(),null());
HXLINE( 112)		if (hx::IsEq( this->display->parent,::openfl::Lib_obj::current )) {
HXLINE( 114)			::openfl::Lib_obj::current->removeChild(this->display);
            		}
HXLINE( 118)		::openfl::Lib_obj::current->stage->set_focus(null());
HXLINE( 119)		this->display = null();
HXLINE( 121)		this->super::start();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Preloader_obj,display_onComplete,(void))


Preloader_obj::Preloader_obj()
{
}

void Preloader_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Preloader);
	HX_MARK_MEMBER_NAME(display,"display");
	HX_MARK_MEMBER_NAME(displayComplete,"displayComplete");
	HX_MARK_MEMBER_NAME(displayHasInit,"displayHasInit");
	HX_MARK_MEMBER_NAME(displayHasLoaded,"displayHasLoaded");
	HX_MARK_MEMBER_NAME(displayHasUpdate,"displayHasUpdate");
	 ::lime::app::Preloader_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Preloader_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(display,"display");
	HX_VISIT_MEMBER_NAME(displayComplete,"displayComplete");
	HX_VISIT_MEMBER_NAME(displayHasInit,"displayHasInit");
	HX_VISIT_MEMBER_NAME(displayHasLoaded,"displayHasLoaded");
	HX_VISIT_MEMBER_NAME(displayHasUpdate,"displayHasUpdate");
	 ::lime::app::Preloader_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Preloader_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { return hx::Val( init_dyn()); }
		if (HX_FIELD_EQ(inName,"load") ) { return hx::Val( load_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"start") ) { return hx::Val( start_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"display") ) { return hx::Val( display); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"displayHasInit") ) { return hx::Val( displayHasInit); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"displayComplete") ) { return hx::Val( displayComplete); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"displayHasLoaded") ) { return hx::Val( displayHasLoaded); }
		if (HX_FIELD_EQ(inName,"displayHasUpdate") ) { return hx::Val( displayHasUpdate); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"display_onComplete") ) { return hx::Val( display_onComplete_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Preloader_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"display") ) { display=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"displayHasInit") ) { displayHasInit=inValue.Cast< Bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"displayComplete") ) { displayComplete=inValue.Cast< Bool >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"displayHasLoaded") ) { displayHasLoaded=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"displayHasUpdate") ) { displayHasUpdate=inValue.Cast< Bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Preloader_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("display","\x42","\x2a","\x4a","\xbb"));
	outFields->push(HX_HCSTRING("displayComplete","\x1b","\xf9","\x3a","\x6c"));
	outFields->push(HX_HCSTRING("displayHasInit","\x68","\x05","\x01","\x8a"));
	outFields->push(HX_HCSTRING("displayHasLoaded","\x5d","\x58","\x7e","\x91"));
	outFields->push(HX_HCSTRING("displayHasUpdate","\x61","\x96","\x14","\xc0"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Preloader_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::openfl::display::Sprite*/ ,(int)offsetof(Preloader_obj,display),HX_HCSTRING("display","\x42","\x2a","\x4a","\xbb")},
	{hx::fsBool,(int)offsetof(Preloader_obj,displayComplete),HX_HCSTRING("displayComplete","\x1b","\xf9","\x3a","\x6c")},
	{hx::fsBool,(int)offsetof(Preloader_obj,displayHasInit),HX_HCSTRING("displayHasInit","\x68","\x05","\x01","\x8a")},
	{hx::fsBool,(int)offsetof(Preloader_obj,displayHasLoaded),HX_HCSTRING("displayHasLoaded","\x5d","\x58","\x7e","\x91")},
	{hx::fsBool,(int)offsetof(Preloader_obj,displayHasUpdate),HX_HCSTRING("displayHasUpdate","\x61","\x96","\x14","\xc0")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Preloader_obj_sStaticStorageInfo = 0;
#endif

static ::String Preloader_obj_sMemberFields[] = {
	HX_HCSTRING("display","\x42","\x2a","\x4a","\xbb"),
	HX_HCSTRING("displayComplete","\x1b","\xf9","\x3a","\x6c"),
	HX_HCSTRING("displayHasInit","\x68","\x05","\x01","\x8a"),
	HX_HCSTRING("displayHasLoaded","\x5d","\x58","\x7e","\x91"),
	HX_HCSTRING("displayHasUpdate","\x61","\x96","\x14","\xc0"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	HX_HCSTRING("load","\x26","\x9a","\xb7","\x47"),
	HX_HCSTRING("start","\x62","\x74","\x0b","\x84"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("display_onComplete","\x15","\xfb","\x54","\x60"),
	::String(null()) };

static void Preloader_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Preloader_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Preloader_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Preloader_obj::__mClass,"__mClass");
};

#endif

hx::Class Preloader_obj::__mClass;

void Preloader_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.display.Preloader","\xcc","\x12","\x24","\x2f");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Preloader_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Preloader_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Preloader_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Preloader_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Preloader_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Preloader_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace display
