// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo_Cairo
#include <lime/graphics/cairo/Cairo.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl__Vector_FloatVector
#include <openfl/_Vector/FloatVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IntVector
#include <openfl/_Vector/IntVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_DrawCommandBuffer
#include <openfl/_internal/renderer/DrawCommandBuffer.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_DrawCommandReader
#include <openfl/_internal/renderer/DrawCommandReader.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_DrawCommandType
#include <openfl/_internal/renderer/DrawCommandType.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_cairo_CairoGraphics
#include <openfl/_internal/renderer/cairo/CairoGraphics.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsBitmapFill
#include <openfl/display/GraphicsBitmapFill.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsEndFill
#include <openfl/display/GraphicsEndFill.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsGradientFill
#include <openfl/display/GraphicsGradientFill.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsPath
#include <openfl/display/GraphicsPath.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsSolidFill
#include <openfl/display/GraphicsSolidFill.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsStroke
#include <openfl/display/GraphicsStroke.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_IGraphicsData
#include <openfl/display/IGraphicsData.h>
#endif
#ifndef INCLUDED_openfl_display_IGraphicsFill
#include <openfl/display/IGraphicsFill.h>
#endif
#ifndef INCLUDED_openfl_display_IGraphicsPath
#include <openfl/display/IGraphicsPath.h>
#endif
#ifndef INCLUDED_openfl_display_IGraphicsStroke
#include <openfl/display/IGraphicsStroke.h>
#endif
#ifndef INCLUDED_openfl_errors_ArgumentError
#include <openfl/errors/ArgumentError.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

namespace openfl{
namespace display{

void Graphics_obj::__construct( ::openfl::display::DisplayObject owner){
            	HX_STACK_FRAME("openfl.display.Graphics","new",0x7fd846a7,"openfl.display.Graphics.new","openfl/display/Graphics.hx",35,0x8d299ce7)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(owner,"owner")
HXLINE(  40)		this->_hx___dirty = true;
HXLINE(  65)		this->_hx___owner = owner;
HXLINE(  67)		this->_hx___commands =  ::openfl::_internal::renderer::DrawCommandBuffer_obj::__new();
HXLINE(  68)		this->_hx___strokePadding = (int)0;
HXLINE(  69)		this->_hx___positionX = (int)0;
HXLINE(  70)		this->_hx___positionY = (int)0;
HXLINE(  71)		this->_hx___renderTransform =  ::openfl::geom::Matrix_obj::__new(null(),null(),null(),null(),null(),null());
HXLINE(  72)		this->_hx___worldTransform =  ::openfl::geom::Matrix_obj::__new(null(),null(),null(),null(),null(),null());
HXLINE(  73)		this->_hx___width = (int)0;
HXLINE(  74)		this->_hx___height = (int)0;
            	}

Dynamic Graphics_obj::__CreateEmpty() { return new Graphics_obj; }

hx::ObjectPtr< Graphics_obj > Graphics_obj::__new( ::openfl::display::DisplayObject owner)
{
	hx::ObjectPtr< Graphics_obj > _hx_result = new Graphics_obj();
	_hx_result->__construct(owner);
	return _hx_result;
}

Dynamic Graphics_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Graphics_obj > _hx_result = new Graphics_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void Graphics_obj::beginBitmapFill( ::openfl::display::BitmapData bitmap, ::openfl::geom::Matrix matrix,hx::Null< Bool >  __o_repeat,hx::Null< Bool >  __o_smooth){
Bool repeat = __o_repeat.Default(true);
Bool smooth = __o_smooth.Default(false);
            	HX_STACK_FRAME("openfl.display.Graphics","beginBitmapFill",0x31c80e62,"openfl.display.Graphics.beginBitmapFill","openfl/display/Graphics.hx",83,0x8d299ce7)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(bitmap,"bitmap")
            	HX_STACK_ARG(matrix,"matrix")
            	HX_STACK_ARG(repeat,"repeat")
            	HX_STACK_ARG(smooth,"smooth")
HXLINE(  85)		 ::openfl::geom::Matrix _hx_tmp;
HXDLIN(  85)		Bool _hx_tmp1 = hx::IsNotNull( matrix );
HXDLIN(  85)		if (_hx_tmp1) {
HXLINE(  85)			_hx_tmp = matrix->clone();
            		}
            		else {
HXLINE(  85)			_hx_tmp = null();
            		}
HXDLIN(  85)		this->_hx___commands->beginBitmapFill(bitmap,_hx_tmp,repeat,smooth);
HXLINE(  87)		this->_hx___visible = true;
            	}


HX_DEFINE_DYNAMIC_FUNC4(Graphics_obj,beginBitmapFill,(void))

void Graphics_obj::beginFill(hx::Null< Int >  __o_color,hx::Null< Float >  __o_alpha){
Int color = __o_color.Default(0);
Float alpha = __o_alpha.Default(1);
            	HX_STACK_FRAME("openfl.display.Graphics","beginFill",0xf44a92d3,"openfl.display.Graphics.beginFill","openfl/display/Graphics.hx",92,0x8d299ce7)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(color,"color")
            	HX_STACK_ARG(alpha,"alpha")
HXLINE(  94)		this->_hx___commands->beginFill(((int)color & (int)(int)16777215),alpha);
HXLINE(  96)		if ((alpha > (int)0)) {
HXLINE(  96)			this->_hx___visible = true;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Graphics_obj,beginFill,(void))

void Graphics_obj::beginGradientFill( ::Dynamic type,::Array< Int > colors,::Array< Float > alphas,::Array< Int > ratios, ::openfl::geom::Matrix matrix, ::Dynamic __o_spreadMethod, ::Dynamic __o_interpolationMethod,hx::Null< Float >  __o_focalPointRatio){
 ::Dynamic spreadMethod = __o_spreadMethod.Default(0);
 ::Dynamic interpolationMethod = __o_interpolationMethod.Default(1);
Float focalPointRatio = __o_focalPointRatio.Default(0);
            	HX_STACK_FRAME("openfl.display.Graphics","beginGradientFill",0x99f380e3,"openfl.display.Graphics.beginGradientFill","openfl/display/Graphics.hx",101,0x8d299ce7)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(type,"type")
            	HX_STACK_ARG(colors,"colors")
            	HX_STACK_ARG(alphas,"alphas")
            	HX_STACK_ARG(ratios,"ratios")
            	HX_STACK_ARG(matrix,"matrix")
            	HX_STACK_ARG(spreadMethod,"spreadMethod")
            	HX_STACK_ARG(interpolationMethod,"interpolationMethod")
            	HX_STACK_ARG(focalPointRatio,"focalPointRatio")
HXLINE( 103)		this->_hx___commands->beginGradientFill(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio);
HXLINE( 105)		{
HXLINE( 105)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 105)			while((_g < alphas->length)){
HXLINE( 105)				HX_VARI( Float,alpha) = alphas->__get(_g);
HXDLIN( 105)				++_g;
HXLINE( 107)				if ((alpha > (int)0)) {
HXLINE( 109)					this->_hx___visible = true;
HXLINE( 110)					goto _hx_goto_0;
            				}
            			}
            			_hx_goto_0:;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC8(Graphics_obj,beginGradientFill,(void))

void Graphics_obj::clear(){
            	HX_STACK_FRAME("openfl.display.Graphics","clear",0x0a9f4794,"openfl.display.Graphics.clear","openfl/display/Graphics.hx",119,0x8d299ce7)
            	HX_STACK_THIS(this)
HXLINE( 121)		this->_hx___commands->clear();
HXLINE( 122)		this->_hx___strokePadding = (int)0;
HXLINE( 124)		Bool _hx_tmp = hx::IsNotNull( this->_hx___bounds );
HXDLIN( 124)		if (_hx_tmp) {
HXLINE( 126)			this->set___dirty(true);
HXLINE( 127)			this->_hx___transformDirty = true;
HXLINE( 128)			this->_hx___bounds = null();
            		}
HXLINE( 132)		this->_hx___visible = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Graphics_obj,clear,(void))

void Graphics_obj::copyFrom( ::openfl::display::Graphics sourceGraphics){
            	HX_STACK_FRAME("openfl.display.Graphics","copyFrom",0x0a477418,"openfl.display.Graphics.copyFrom","openfl/display/Graphics.hx",141,0x8d299ce7)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(sourceGraphics,"sourceGraphics")
HXLINE( 143)		 ::openfl::geom::Rectangle _hx_tmp;
HXDLIN( 143)		Bool _hx_tmp1 = hx::IsNotNull( sourceGraphics->_hx___bounds );
HXDLIN( 143)		if (_hx_tmp1) {
HXLINE( 143)			_hx_tmp = sourceGraphics->_hx___bounds->clone();
            		}
            		else {
HXLINE( 143)			_hx_tmp = null();
            		}
HXDLIN( 143)		this->_hx___bounds = _hx_tmp;
HXLINE( 144)		this->_hx___commands = sourceGraphics->_hx___commands->copy();
HXLINE( 145)		this->set___dirty(true);
HXLINE( 146)		this->_hx___strokePadding = sourceGraphics->_hx___strokePadding;
HXLINE( 147)		this->_hx___positionX = sourceGraphics->_hx___positionX;
HXLINE( 148)		this->_hx___positionY = sourceGraphics->_hx___positionY;
HXLINE( 149)		this->_hx___transformDirty = true;
HXLINE( 150)		this->_hx___visible = sourceGraphics->_hx___visible;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Graphics_obj,copyFrom,(void))

void Graphics_obj::cubicCurveTo(Float controlX1,Float controlY1,Float controlX2,Float controlY2,Float anchorX,Float anchorY){
            	HX_STACK_FRAME("openfl.display.Graphics","cubicCurveTo",0x467410b9,"openfl.display.Graphics.cubicCurveTo","openfl/display/Graphics.hx",155,0x8d299ce7)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(controlX1,"controlX1")
            	HX_STACK_ARG(controlY1,"controlY1")
            	HX_STACK_ARG(controlX2,"controlX2")
            	HX_STACK_ARG(controlY2,"controlY2")
            	HX_STACK_ARG(anchorX,"anchorX")
            	HX_STACK_ARG(anchorY,"anchorY")
HXLINE( 157)		Float _hx_tmp = (this->_hx___positionX - this->_hx___strokePadding);
HXDLIN( 157)		Float _hx_tmp1 = (this->_hx___positionY - this->_hx___strokePadding);
HXDLIN( 157)		this->_hx___inflateBounds(_hx_tmp,_hx_tmp1);
HXLINE( 158)		Float _hx_tmp2 = (this->_hx___positionX + this->_hx___strokePadding);
HXDLIN( 158)		Float _hx_tmp3 = (this->_hx___positionY + this->_hx___strokePadding);
HXDLIN( 158)		this->_hx___inflateBounds(_hx_tmp2,_hx_tmp3);
HXLINE( 160)		HX_VAR( Float,ix1);
HXDLIN( 160)		HX_VAR( Float,iy1);
HXDLIN( 160)		HX_VAR( Float,ix2);
HXDLIN( 160)		HX_VAR( Float,iy2);
HXLINE( 162)		ix1 = anchorX;
HXLINE( 163)		ix2 = anchorX;
HXLINE( 165)		Bool _hx_tmp4;
HXDLIN( 165)		Bool _hx_tmp5;
HXDLIN( 165)		Bool _hx_tmp6;
HXDLIN( 165)		if ((controlX1 < anchorX)) {
HXLINE( 165)			_hx_tmp6 = (controlX1 > this->_hx___positionX);
            		}
            		else {
HXLINE( 165)			_hx_tmp6 = false;
            		}
HXDLIN( 165)		if (!(_hx_tmp6)) {
HXLINE( 165)			if ((controlX1 > anchorX)) {
HXLINE( 165)				_hx_tmp5 = (controlX1 < this->_hx___positionX);
            			}
            			else {
HXLINE( 165)				_hx_tmp5 = false;
            			}
            		}
            		else {
HXLINE( 165)			_hx_tmp5 = true;
            		}
HXDLIN( 165)		if (_hx_tmp5) {
HXLINE( 165)			Bool _hx_tmp7;
HXDLIN( 165)			if ((controlX2 < anchorX)) {
HXLINE( 165)				_hx_tmp7 = (controlX2 > this->_hx___positionX);
            			}
            			else {
HXLINE( 165)				_hx_tmp7 = false;
            			}
HXDLIN( 165)			if (!(_hx_tmp7)) {
HXLINE( 165)				if ((controlX2 > anchorX)) {
HXLINE( 165)					_hx_tmp4 = (controlX2 < this->_hx___positionX);
            				}
            				else {
HXLINE( 165)					_hx_tmp4 = false;
            				}
            			}
            			else {
HXLINE( 165)				_hx_tmp4 = true;
            			}
            		}
            		else {
HXLINE( 165)			_hx_tmp4 = false;
            		}
HXDLIN( 165)		if (!(_hx_tmp4)) {
HXLINE( 167)			HX_VARI( Float,u) = ((((int)2 * this->_hx___positionX) - ((int)4 * controlX1)) + ((int)2 * controlX2));
HXLINE( 168)			HX_VARI( Float,v) = (controlX1 - this->_hx___positionX);
HXLINE( 169)			HX_VARI( Float,w) = (((-(this->_hx___positionX) + ((int)3 * controlX1)) + anchorX) - ((int)3 * controlX2));
HXLINE( 171)			Float _hx_tmp8 = ::Math_obj::sqrt(((u * u) - (((int)4 * v) * w)));
HXDLIN( 171)			HX_VARI( Float,t1) = ((Float)(-(u) + _hx_tmp8) / (Float)((int)2 * w));
HXLINE( 172)			Float _hx_tmp9 = ::Math_obj::sqrt(((u * u) - (((int)4 * v) * w)));
HXDLIN( 172)			HX_VARI( Float,t2) = ((Float)(-(u) - _hx_tmp9) / (Float)((int)2 * w));
HXLINE( 174)			Bool _hx_tmp10;
HXDLIN( 174)			if ((t1 > (int)0)) {
HXLINE( 174)				_hx_tmp10 = (t1 < (int)1);
            			}
            			else {
HXLINE( 174)				_hx_tmp10 = false;
            			}
HXDLIN( 174)			if (_hx_tmp10) {
HXLINE( 176)				ix1 = this->_hx___calculateBezierCubicPoint(t1,this->_hx___positionX,controlX1,controlX2,anchorX);
            			}
HXLINE( 180)			Bool _hx_tmp11;
HXDLIN( 180)			if ((t2 > (int)0)) {
HXLINE( 180)				_hx_tmp11 = (t2 < (int)1);
            			}
            			else {
HXLINE( 180)				_hx_tmp11 = false;
            			}
HXDLIN( 180)			if (_hx_tmp11) {
HXLINE( 182)				ix2 = this->_hx___calculateBezierCubicPoint(t2,this->_hx___positionX,controlX1,controlX2,anchorX);
            			}
            		}
HXLINE( 188)		iy1 = anchorY;
HXLINE( 189)		iy2 = anchorY;
HXLINE( 191)		Bool _hx_tmp12;
HXDLIN( 191)		Bool _hx_tmp13;
HXDLIN( 191)		Bool _hx_tmp14;
HXDLIN( 191)		if ((controlY1 < anchorY)) {
HXLINE( 191)			_hx_tmp14 = (controlY1 > this->_hx___positionX);
            		}
            		else {
HXLINE( 191)			_hx_tmp14 = false;
            		}
HXDLIN( 191)		if (!(_hx_tmp14)) {
HXLINE( 191)			if ((controlY1 > anchorY)) {
HXLINE( 191)				_hx_tmp13 = (controlY1 < this->_hx___positionX);
            			}
            			else {
HXLINE( 191)				_hx_tmp13 = false;
            			}
            		}
            		else {
HXLINE( 191)			_hx_tmp13 = true;
            		}
HXDLIN( 191)		if (_hx_tmp13) {
HXLINE( 191)			Bool _hx_tmp15;
HXDLIN( 191)			if ((controlY2 < anchorY)) {
HXLINE( 191)				_hx_tmp15 = (controlY2 > this->_hx___positionX);
            			}
            			else {
HXLINE( 191)				_hx_tmp15 = false;
            			}
HXDLIN( 191)			if (!(_hx_tmp15)) {
HXLINE( 191)				if ((controlY2 > anchorY)) {
HXLINE( 191)					_hx_tmp12 = (controlY2 < this->_hx___positionX);
            				}
            				else {
HXLINE( 191)					_hx_tmp12 = false;
            				}
            			}
            			else {
HXLINE( 191)				_hx_tmp12 = true;
            			}
            		}
            		else {
HXLINE( 191)			_hx_tmp12 = false;
            		}
HXDLIN( 191)		if (!(_hx_tmp12)) {
HXLINE( 193)			HX_VARI_NAME( Float,u1,"u") = ((((int)2 * this->_hx___positionX) - ((int)4 * controlY1)) + ((int)2 * controlY2));
HXLINE( 194)			HX_VARI_NAME( Float,v1,"v") = (controlY1 - this->_hx___positionX);
HXLINE( 195)			HX_VARI_NAME( Float,w1,"w") = (((-(this->_hx___positionX) + ((int)3 * controlY1)) + anchorY) - ((int)3 * controlY2));
HXLINE( 197)			Float _hx_tmp16 = ::Math_obj::sqrt(((u1 * u1) - (((int)4 * v1) * w1)));
HXDLIN( 197)			HX_VARI_NAME( Float,t11,"t1") = ((Float)(-(u1) + _hx_tmp16) / (Float)((int)2 * w1));
HXLINE( 198)			Float _hx_tmp17 = ::Math_obj::sqrt(((u1 * u1) - (((int)4 * v1) * w1)));
HXDLIN( 198)			HX_VARI_NAME( Float,t21,"t2") = ((Float)(-(u1) - _hx_tmp17) / (Float)((int)2 * w1));
HXLINE( 200)			Bool _hx_tmp18;
HXDLIN( 200)			if ((t11 > (int)0)) {
HXLINE( 200)				_hx_tmp18 = (t11 < (int)1);
            			}
            			else {
HXLINE( 200)				_hx_tmp18 = false;
            			}
HXDLIN( 200)			if (_hx_tmp18) {
HXLINE( 202)				iy1 = this->_hx___calculateBezierCubicPoint(t11,this->_hx___positionX,controlY1,controlY2,anchorY);
            			}
HXLINE( 206)			Bool _hx_tmp19;
HXDLIN( 206)			if ((t21 > (int)0)) {
HXLINE( 206)				_hx_tmp19 = (t21 < (int)1);
            			}
            			else {
HXLINE( 206)				_hx_tmp19 = false;
            			}
HXDLIN( 206)			if (_hx_tmp19) {
HXLINE( 208)				iy2 = this->_hx___calculateBezierCubicPoint(t21,this->_hx___positionX,controlY1,controlY2,anchorY);
            			}
            		}
HXLINE( 214)		Float _hx_tmp20 = (ix1 - this->_hx___strokePadding);
HXDLIN( 214)		Float _hx_tmp21 = (iy1 - this->_hx___strokePadding);
HXDLIN( 214)		this->_hx___inflateBounds(_hx_tmp20,_hx_tmp21);
HXLINE( 215)		Float _hx_tmp22 = (ix1 + this->_hx___strokePadding);
HXDLIN( 215)		Float _hx_tmp23 = (iy1 + this->_hx___strokePadding);
HXDLIN( 215)		this->_hx___inflateBounds(_hx_tmp22,_hx_tmp23);
HXLINE( 216)		Float _hx_tmp24 = (ix2 - this->_hx___strokePadding);
HXDLIN( 216)		Float _hx_tmp25 = (iy2 - this->_hx___strokePadding);
HXDLIN( 216)		this->_hx___inflateBounds(_hx_tmp24,_hx_tmp25);
HXLINE( 217)		Float _hx_tmp26 = (ix2 + this->_hx___strokePadding);
HXDLIN( 217)		Float _hx_tmp27 = (iy2 + this->_hx___strokePadding);
HXDLIN( 217)		this->_hx___inflateBounds(_hx_tmp26,_hx_tmp27);
HXLINE( 219)		this->_hx___positionX = anchorX;
HXLINE( 220)		this->_hx___positionY = anchorY;
HXLINE( 222)		this->_hx___commands->cubicCurveTo(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY);
HXLINE( 224)		this->set___dirty(true);
            	}


HX_DEFINE_DYNAMIC_FUNC6(Graphics_obj,cubicCurveTo,(void))

void Graphics_obj::curveTo(Float controlX,Float controlY,Float anchorX,Float anchorY){
            	HX_STACK_FRAME("openfl.display.Graphics","curveTo",0x89f305d1,"openfl.display.Graphics.curveTo","openfl/display/Graphics.hx",229,0x8d299ce7)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(controlX,"controlX")
            	HX_STACK_ARG(controlY,"controlY")
            	HX_STACK_ARG(anchorX,"anchorX")
            	HX_STACK_ARG(anchorY,"anchorY")
HXLINE( 231)		Float _hx_tmp = (this->_hx___positionX - this->_hx___strokePadding);
HXDLIN( 231)		Float _hx_tmp1 = (this->_hx___positionY - this->_hx___strokePadding);
HXDLIN( 231)		this->_hx___inflateBounds(_hx_tmp,_hx_tmp1);
HXLINE( 232)		Float _hx_tmp2 = (this->_hx___positionX + this->_hx___strokePadding);
HXDLIN( 232)		Float _hx_tmp3 = (this->_hx___positionY + this->_hx___strokePadding);
HXDLIN( 232)		this->_hx___inflateBounds(_hx_tmp2,_hx_tmp3);
HXLINE( 234)		HX_VAR( Float,ix);
HXDLIN( 234)		HX_VAR( Float,iy);
HXLINE( 236)		Bool _hx_tmp4;
HXDLIN( 236)		Bool _hx_tmp5;
HXDLIN( 236)		if ((controlX < anchorX)) {
HXLINE( 236)			_hx_tmp5 = (controlX > this->_hx___positionX);
            		}
            		else {
HXLINE( 236)			_hx_tmp5 = false;
            		}
HXDLIN( 236)		if (!(_hx_tmp5)) {
HXLINE( 236)			if ((controlX > anchorX)) {
HXLINE( 236)				_hx_tmp4 = (controlX < this->_hx___positionX);
            			}
            			else {
HXLINE( 236)				_hx_tmp4 = false;
            			}
            		}
            		else {
HXLINE( 236)			_hx_tmp4 = true;
            		}
HXDLIN( 236)		if (_hx_tmp4) {
HXLINE( 238)			ix = anchorX;
            		}
            		else {
HXLINE( 242)			Float _hx_tmp6 = (this->_hx___positionX - controlX);
HXDLIN( 242)			Float _hx_tmp7 = (this->_hx___positionX - ((int)2 * controlX));
HXLINE( 243)			ix = this->_hx___calculateBezierQuadPoint(((Float)_hx_tmp6 / (Float)(_hx_tmp7 + anchorX)),this->_hx___positionX,controlX,anchorX);
            		}
HXLINE( 247)		Bool _hx_tmp8;
HXDLIN( 247)		Bool _hx_tmp9;
HXDLIN( 247)		if ((controlY < anchorY)) {
HXLINE( 247)			_hx_tmp9 = (controlY > this->_hx___positionY);
            		}
            		else {
HXLINE( 247)			_hx_tmp9 = false;
            		}
HXDLIN( 247)		if (!(_hx_tmp9)) {
HXLINE( 247)			if ((controlY > anchorY)) {
HXLINE( 247)				_hx_tmp8 = (controlY < this->_hx___positionY);
            			}
            			else {
HXLINE( 247)				_hx_tmp8 = false;
            			}
            		}
            		else {
HXLINE( 247)			_hx_tmp8 = true;
            		}
HXDLIN( 247)		if (_hx_tmp8) {
HXLINE( 249)			iy = anchorY;
            		}
            		else {
HXLINE( 253)			Float _hx_tmp10 = (this->_hx___positionY - controlY);
HXDLIN( 253)			Float _hx_tmp11 = (this->_hx___positionY - ((int)2 * controlY));
HXLINE( 254)			iy = this->_hx___calculateBezierQuadPoint(((Float)_hx_tmp10 / (Float)(_hx_tmp11 + anchorY)),this->_hx___positionY,controlY,anchorY);
            		}
HXLINE( 258)		Float _hx_tmp12 = (ix - this->_hx___strokePadding);
HXDLIN( 258)		Float _hx_tmp13 = (iy - this->_hx___strokePadding);
HXDLIN( 258)		this->_hx___inflateBounds(_hx_tmp12,_hx_tmp13);
HXLINE( 259)		Float _hx_tmp14 = (ix + this->_hx___strokePadding);
HXDLIN( 259)		Float _hx_tmp15 = (iy + this->_hx___strokePadding);
HXDLIN( 259)		this->_hx___inflateBounds(_hx_tmp14,_hx_tmp15);
HXLINE( 261)		this->_hx___positionX = anchorX;
HXLINE( 262)		this->_hx___positionY = anchorY;
HXLINE( 264)		this->_hx___commands->curveTo(controlX,controlY,anchorX,anchorY);
HXLINE( 266)		this->set___dirty(true);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Graphics_obj,curveTo,(void))

void Graphics_obj::drawCircle(Float x,Float y,Float radius){
            	HX_STACK_FRAME("openfl.display.Graphics","drawCircle",0xee64ddcd,"openfl.display.Graphics.drawCircle","openfl/display/Graphics.hx",271,0x8d299ce7)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(radius,"radius")
HXLINE( 273)		if ((radius <= (int)0)) {
HXLINE( 273)			return;
            		}
HXLINE( 275)		Float _hx_tmp = ((x - radius) - this->_hx___strokePadding);
HXDLIN( 275)		Float _hx_tmp1 = ((y - radius) - this->_hx___strokePadding);
HXDLIN( 275)		this->_hx___inflateBounds(_hx_tmp,_hx_tmp1);
HXLINE( 276)		Float _hx_tmp2 = ((x + radius) + this->_hx___strokePadding);
HXDLIN( 276)		Float _hx_tmp3 = ((y + radius) + this->_hx___strokePadding);
HXDLIN( 276)		this->_hx___inflateBounds(_hx_tmp2,_hx_tmp3);
HXLINE( 278)		this->_hx___commands->drawCircle(x,y,radius);
HXLINE( 280)		this->set___dirty(true);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Graphics_obj,drawCircle,(void))

void Graphics_obj::drawEllipse(Float x,Float y,Float width,Float height){
            	HX_STACK_FRAME("openfl.display.Graphics","drawEllipse",0xbfad1a81,"openfl.display.Graphics.drawEllipse","openfl/display/Graphics.hx",285,0x8d299ce7)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
HXLINE( 287)		Bool _hx_tmp;
HXDLIN( 287)		if (!((width <= (int)0))) {
HXLINE( 287)			_hx_tmp = (height <= (int)0);
            		}
            		else {
HXLINE( 287)			_hx_tmp = true;
            		}
HXDLIN( 287)		if (_hx_tmp) {
HXLINE( 287)			return;
            		}
HXLINE( 289)		Float _hx_tmp1 = (x - this->_hx___strokePadding);
HXDLIN( 289)		Float _hx_tmp2 = (y - this->_hx___strokePadding);
HXDLIN( 289)		this->_hx___inflateBounds(_hx_tmp1,_hx_tmp2);
HXLINE( 290)		Float _hx_tmp3 = ((x + width) + this->_hx___strokePadding);
HXDLIN( 290)		Float _hx_tmp4 = ((y + height) + this->_hx___strokePadding);
HXDLIN( 290)		this->_hx___inflateBounds(_hx_tmp3,_hx_tmp4);
HXLINE( 292)		this->_hx___commands->drawEllipse(x,y,width,height);
HXLINE( 294)		this->set___dirty(true);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Graphics_obj,drawEllipse,(void))

void Graphics_obj::drawGraphicsData( ::openfl::_Vector::ObjectVector graphicsData){
            	HX_STACK_FRAME("openfl.display.Graphics","drawGraphicsData",0x60ea9412,"openfl.display.Graphics.drawGraphicsData","openfl/display/Graphics.hx",299,0x8d299ce7)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(graphicsData,"graphicsData")
HXLINE( 301)		HX_VAR(  ::openfl::display::GraphicsSolidFill,fill);
HXLINE( 302)		HX_VAR(  ::openfl::display::GraphicsBitmapFill,bitmapFill);
HXLINE( 303)		HX_VAR(  ::openfl::display::GraphicsGradientFill,gradientFill);
HXLINE( 304)		HX_VAR(  ::openfl::display::GraphicsStroke,stroke);
HXLINE( 305)		HX_VAR(  ::openfl::display::GraphicsPath,path);
HXLINE( 307)		{
HXLINE( 307)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 307)			while(true){
HXLINE( 307)				Int _hx_tmp = graphicsData->get_length();
HXDLIN( 307)				if (!((_g < _hx_tmp))) {
HXLINE( 307)					goto _hx_goto_1;
            				}
HXDLIN( 307)				HX_VARI( ::Dynamic,graphics) = graphicsData->get(_g);
HXDLIN( 307)				++_g;
HXLINE( 309)				Bool _hx_tmp1 = ::Std_obj::is(graphics,hx::ClassOf< ::openfl::display::GraphicsSolidFill >());
HXDLIN( 309)				if (_hx_tmp1) {
HXLINE( 311)					fill = ( ( ::openfl::display::GraphicsSolidFill)(graphics) );
HXLINE( 312)					this->beginFill(fill->color,fill->alpha);
            				}
            				else {
HXLINE( 314)					Bool _hx_tmp2 = ::Std_obj::is(graphics,hx::ClassOf< ::openfl::display::GraphicsBitmapFill >());
HXDLIN( 314)					if (_hx_tmp2) {
HXLINE( 316)						bitmapFill = ( ( ::openfl::display::GraphicsBitmapFill)(graphics) );
HXLINE( 317)						this->beginBitmapFill(bitmapFill->bitmapData,bitmapFill->matrix,bitmapFill->repeat,bitmapFill->smooth);
            					}
            					else {
HXLINE( 319)						Bool _hx_tmp3 = ::Std_obj::is(graphics,hx::ClassOf< ::openfl::display::GraphicsGradientFill >());
HXDLIN( 319)						if (_hx_tmp3) {
HXLINE( 321)							gradientFill = ( ( ::openfl::display::GraphicsGradientFill)(graphics) );
HXLINE( 322)							this->beginGradientFill(gradientFill->type,gradientFill->colors,gradientFill->alphas,gradientFill->ratios,gradientFill->matrix,gradientFill->spreadMethod,gradientFill->interpolationMethod,gradientFill->focalPointRatio);
            						}
            						else {
HXLINE( 324)							Bool _hx_tmp4 = ::Std_obj::is(graphics,hx::ClassOf< ::openfl::display::GraphicsStroke >());
HXDLIN( 324)							if (_hx_tmp4) {
HXLINE( 326)								stroke = ( ( ::openfl::display::GraphicsStroke)(graphics) );
HXLINE( 328)								Bool _hx_tmp5 = ::Std_obj::is(stroke->fill,hx::ClassOf< ::openfl::display::GraphicsSolidFill >());
HXDLIN( 328)								if (_hx_tmp5) {
HXLINE( 330)									fill = ( ( ::openfl::display::GraphicsSolidFill)(stroke->fill) );
HXLINE( 331)									this->lineStyle(stroke->thickness,fill->color,fill->alpha,stroke->pixelHinting,stroke->scaleMode,stroke->caps,stroke->joints,stroke->miterLimit);
            								}
            								else {
HXLINE( 335)									this->lineStyle(stroke->thickness,(int)0,(int)1,stroke->pixelHinting,stroke->scaleMode,stroke->caps,stroke->joints,stroke->miterLimit);
HXLINE( 337)									Bool _hx_tmp6 = ::Std_obj::is(stroke->fill,hx::ClassOf< ::openfl::display::GraphicsBitmapFill >());
HXDLIN( 337)									if (_hx_tmp6) {
HXLINE( 339)										bitmapFill = ( ( ::openfl::display::GraphicsBitmapFill)(stroke->fill) );
HXLINE( 340)										this->lineBitmapStyle(bitmapFill->bitmapData,bitmapFill->matrix,bitmapFill->repeat,bitmapFill->smooth);
            									}
            									else {
HXLINE( 342)										Bool _hx_tmp7 = ::Std_obj::is(stroke->fill,hx::ClassOf< ::openfl::display::GraphicsGradientFill >());
HXDLIN( 342)										if (_hx_tmp7) {
HXLINE( 344)											gradientFill = ( ( ::openfl::display::GraphicsGradientFill)(stroke->fill) );
HXLINE( 345)											this->lineGradientStyle(gradientFill->type,gradientFill->colors,gradientFill->alphas,gradientFill->ratios,gradientFill->matrix,gradientFill->spreadMethod,gradientFill->interpolationMethod,gradientFill->focalPointRatio);
            										}
            									}
            								}
            							}
            							else {
HXLINE( 351)								Bool _hx_tmp8 = ::Std_obj::is(graphics,hx::ClassOf< ::openfl::display::GraphicsPath >());
HXDLIN( 351)								if (_hx_tmp8) {
HXLINE( 353)									path = ( ( ::openfl::display::GraphicsPath)(graphics) );
HXLINE( 354)									this->drawPath(path->commands,path->data,path->winding);
            								}
            								else {
HXLINE( 356)									Bool _hx_tmp9 = ::Std_obj::is(graphics,hx::ClassOf< ::openfl::display::GraphicsEndFill >());
HXDLIN( 356)									if (_hx_tmp9) {
HXLINE( 358)										this->endFill();
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            			_hx_goto_1:;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Graphics_obj,drawGraphicsData,(void))

void Graphics_obj::drawPath( ::openfl::_Vector::IntVector commands, ::openfl::_Vector::FloatVector data, ::Dynamic __o_winding){
 ::Dynamic winding = __o_winding.Default(0);
            	HX_STACK_FRAME("openfl.display.Graphics","drawPath",0xa0a1f822,"openfl.display.Graphics.drawPath","openfl/display/Graphics.hx",367,0x8d299ce7)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(commands,"commands")
            	HX_STACK_ARG(data,"data")
            	HX_STACK_ARG(winding,"winding")
HXLINE( 369)		HX_VARI( Int,dataIndex) = (int)0;
HXLINE( 371)		{
HXLINE( 371)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 371)			while(true){
HXLINE( 371)				Int _hx_tmp = commands->get_length();
HXDLIN( 371)				if (!((_g < _hx_tmp))) {
HXLINE( 371)					goto _hx_goto_2;
            				}
HXDLIN( 371)				HX_VARI( Int,command) = commands->get(_g);
HXDLIN( 371)				++_g;
HXLINE( 373)				switch((int)(command)){
            					case (int)1: {
HXLINE( 377)						this->moveTo(data->get(dataIndex),data->get((dataIndex + (int)1)));
HXLINE( 378)						hx::AddEq(dataIndex,(int)2);
            					}
            					break;
            					case (int)2: {
HXLINE( 382)						this->lineTo(data->get(dataIndex),data->get((dataIndex + (int)1)));
HXLINE( 383)						hx::AddEq(dataIndex,(int)2);
            					}
            					break;
            					case (int)3: {
HXLINE( 397)						this->curveTo(data->get(dataIndex),data->get((dataIndex + (int)1)),data->get((dataIndex + (int)2)),data->get((dataIndex + (int)3)));
HXLINE( 398)						hx::AddEq(dataIndex,(int)4);
            					}
            					break;
            					case (int)4: {
HXLINE( 387)						this->moveTo(data->get((dataIndex + (int)2)),data->get((dataIndex + (int)3)));
HXDLIN( 387)						goto _hx_goto_2;
            					}
            					break;
            					case (int)5: {
HXLINE( 392)						this->lineTo(data->get((dataIndex + (int)2)),data->get((dataIndex + (int)3)));
HXDLIN( 392)						goto _hx_goto_2;
            					}
            					break;
            					case (int)6: {
HXLINE( 402)						this->cubicCurveTo(data->get(dataIndex),data->get((dataIndex + (int)1)),data->get((dataIndex + (int)2)),data->get((dataIndex + (int)3)),data->get((dataIndex + (int)4)),data->get((dataIndex + (int)5)));
HXLINE( 403)						hx::AddEq(dataIndex,(int)6);
            					}
            					break;
            					default:{
            					}
            				}
            			}
            			_hx_goto_2:;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Graphics_obj,drawPath,(void))

void Graphics_obj::drawRect(Float x,Float y,Float width,Float height){
            	HX_STACK_FRAME("openfl.display.Graphics","drawRect",0xa1f75fa1,"openfl.display.Graphics.drawRect","openfl/display/Graphics.hx",414,0x8d299ce7)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
HXLINE( 416)		Bool _hx_tmp;
HXDLIN( 416)		if (!((width <= (int)0))) {
HXLINE( 416)			_hx_tmp = (height <= (int)0);
            		}
            		else {
HXLINE( 416)			_hx_tmp = true;
            		}
HXDLIN( 416)		if (_hx_tmp) {
HXLINE( 416)			return;
            		}
HXLINE( 418)		Float _hx_tmp1 = (x - this->_hx___strokePadding);
HXDLIN( 418)		Float _hx_tmp2 = (y - this->_hx___strokePadding);
HXDLIN( 418)		this->_hx___inflateBounds(_hx_tmp1,_hx_tmp2);
HXLINE( 419)		Float _hx_tmp3 = ((x + width) + this->_hx___strokePadding);
HXDLIN( 419)		Float _hx_tmp4 = ((y + height) + this->_hx___strokePadding);
HXDLIN( 419)		this->_hx___inflateBounds(_hx_tmp3,_hx_tmp4);
HXLINE( 421)		this->_hx___commands->drawRect(x,y,width,height);
HXLINE( 423)		this->set___dirty(true);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Graphics_obj,drawRect,(void))

void Graphics_obj::drawRoundRect(Float x,Float y,Float width,Float height,Float ellipseWidth, ::Dynamic ellipseHeight){
            	HX_STACK_FRAME("openfl.display.Graphics","drawRoundRect",0xb24e78f5,"openfl.display.Graphics.drawRoundRect","openfl/display/Graphics.hx",428,0x8d299ce7)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
            	HX_STACK_ARG(ellipseWidth,"ellipseWidth")
            	HX_STACK_ARG(ellipseHeight,"ellipseHeight")
HXLINE( 430)		Bool _hx_tmp;
HXDLIN( 430)		if (!((width <= (int)0))) {
HXLINE( 430)			_hx_tmp = (height <= (int)0);
            		}
            		else {
HXLINE( 430)			_hx_tmp = true;
            		}
HXDLIN( 430)		if (_hx_tmp) {
HXLINE( 430)			return;
            		}
HXLINE( 432)		Float _hx_tmp1 = (x - this->_hx___strokePadding);
HXDLIN( 432)		Float _hx_tmp2 = (y - this->_hx___strokePadding);
HXDLIN( 432)		this->_hx___inflateBounds(_hx_tmp1,_hx_tmp2);
HXLINE( 433)		Float _hx_tmp3 = ((x + width) + this->_hx___strokePadding);
HXDLIN( 433)		Float _hx_tmp4 = ((y + height) + this->_hx___strokePadding);
HXDLIN( 433)		this->_hx___inflateBounds(_hx_tmp3,_hx_tmp4);
HXLINE( 435)		this->_hx___commands->drawRoundRect(x,y,width,height,ellipseWidth,ellipseHeight);
HXLINE( 437)		this->set___dirty(true);
            	}


HX_DEFINE_DYNAMIC_FUNC6(Graphics_obj,drawRoundRect,(void))

void Graphics_obj::drawRoundRectComplex(Float x,Float y,Float width,Float height,Float topLeftRadius,Float topRightRadius,Float bottomLeftRadius,Float bottomRightRadius){
            	HX_STACK_FRAME("openfl.display.Graphics","drawRoundRectComplex",0x06fa4dbb,"openfl.display.Graphics.drawRoundRectComplex","openfl/display/Graphics.hx",444,0x8d299ce7)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
            	HX_STACK_ARG(topLeftRadius,"topLeftRadius")
            	HX_STACK_ARG(topRightRadius,"topRightRadius")
            	HX_STACK_ARG(bottomLeftRadius,"bottomLeftRadius")
            	HX_STACK_ARG(bottomRightRadius,"bottomRightRadius")
HXLINE( 444)		::openfl::Lib_obj::notImplemented(hx::SourceInfo(HX_("Graphics.hx",b3,32,67,7f),444,HX_("openfl.display.Graphics",35,67,20,87),HX_("drawRoundRectComplex",e2,43,2c,11)));
            	}


HX_DEFINE_DYNAMIC_FUNC8(Graphics_obj,drawRoundRectComplex,(void))

void Graphics_obj::drawTriangles( ::openfl::_Vector::FloatVector vertices, ::openfl::_Vector::IntVector indices, ::openfl::_Vector::FloatVector uvtData, ::Dynamic __o_culling){
 ::Dynamic culling = __o_culling.Default(1);
            	HX_STACK_FRAME("openfl.display.Graphics","drawTriangles",0xae0bf90e,"openfl.display.Graphics.drawTriangles","openfl/display/Graphics.hx",449,0x8d299ce7)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(vertices,"vertices")
            	HX_STACK_ARG(indices,"indices")
            	HX_STACK_ARG(uvtData,"uvtData")
            	HX_STACK_ARG(culling,"culling")
HXLINE( 451)		Int _hx_tmp = vertices->get_length();
HXDLIN( 451)		HX_VARI( Int,vlen) = ::Std_obj::_hx_int(((Float)_hx_tmp / (Float)(int)2));
HXLINE( 453)		Bool _hx_tmp1 = hx::IsNull( culling );
HXDLIN( 453)		if (_hx_tmp1) {
HXLINE( 455)			culling = (int)1;
            		}
HXLINE( 459)		Bool _hx_tmp2 = hx::IsNull( indices );
HXDLIN( 459)		if (_hx_tmp2) {
HXLINE( 461)			if ((hx::Mod(vlen,(int)3) != (int)0)) {
HXLINE( 463)				HX_STACK_DO_THROW( ::openfl::errors::ArgumentError_obj::__new(HX_("Not enough vertices to close a triangle.",fe,c6,58,0d)));
            			}
HXLINE( 467)			Int length = null();
HXDLIN( 467)			Bool fixed = null();
HXDLIN( 467)			indices =  ::openfl::_Vector::IntVector_obj::__new(length,fixed,null());
HXLINE( 469)			{
HXLINE( 469)				HX_VARI( Int,_g1) = (int)0;
HXDLIN( 469)				while((_g1 < vlen)){
HXLINE( 469)					HX_VARI( Int,i) = _g1++;
HXLINE( 471)					indices->push(i);
            				}
            			}
            		}
HXLINE( 477)		this->_hx___inflateBounds((int)0,(int)0);
HXLINE( 479)		HX_VARI( Float,tmpx) = ::Math_obj::NEGATIVE_INFINITY;
HXLINE( 480)		HX_VARI( Float,tmpy) = ::Math_obj::NEGATIVE_INFINITY;
HXLINE( 481)		HX_VARI( Float,maxX) = ::Math_obj::NEGATIVE_INFINITY;
HXLINE( 482)		HX_VARI( Float,maxY) = ::Math_obj::NEGATIVE_INFINITY;
HXLINE( 484)		{
HXLINE( 484)			HX_VARI_NAME( Int,_g11,"_g1") = (int)0;
HXDLIN( 484)			while((_g11 < vlen)){
HXLINE( 484)				HX_VARI_NAME( Int,i1,"i") = _g11++;
HXLINE( 486)				tmpx = vertices->get((i1 * (int)2));
HXLINE( 487)				tmpy = vertices->get(((i1 * (int)2) + (int)1));
HXLINE( 488)				Bool _hx_tmp3 = (maxX < tmpx);
HXDLIN( 488)				if (_hx_tmp3) {
HXLINE( 488)					maxX = tmpx;
            				}
HXLINE( 489)				Bool _hx_tmp4 = (maxY < tmpy);
HXDLIN( 489)				if (_hx_tmp4) {
HXLINE( 489)					maxY = tmpy;
            				}
            			}
            		}
HXLINE( 493)		this->_hx___inflateBounds(maxX,maxY);
HXLINE( 494)		this->_hx___commands->drawTriangles(vertices,indices,uvtData,culling);
HXLINE( 496)		this->set___dirty(true);
HXLINE( 497)		this->_hx___visible = true;
            	}


HX_DEFINE_DYNAMIC_FUNC4(Graphics_obj,drawTriangles,(void))

void Graphics_obj::endFill(){
            	HX_STACK_FRAME("openfl.display.Graphics","endFill",0xe14b2dc5,"openfl.display.Graphics.endFill","openfl/display/Graphics.hx",504,0x8d299ce7)
            	HX_STACK_THIS(this)
HXLINE( 504)		this->_hx___commands->endFill();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Graphics_obj,endFill,(void))

void Graphics_obj::lineBitmapStyle( ::openfl::display::BitmapData bitmap, ::openfl::geom::Matrix matrix,hx::Null< Bool >  __o_repeat,hx::Null< Bool >  __o_smooth){
Bool repeat = __o_repeat.Default(true);
Bool smooth = __o_smooth.Default(false);
            	HX_STACK_FRAME("openfl.display.Graphics","lineBitmapStyle",0x0ce183f5,"openfl.display.Graphics.lineBitmapStyle","openfl/display/Graphics.hx",511,0x8d299ce7)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(bitmap,"bitmap")
            	HX_STACK_ARG(matrix,"matrix")
            	HX_STACK_ARG(repeat,"repeat")
            	HX_STACK_ARG(smooth,"smooth")
HXLINE( 511)		 ::openfl::geom::Matrix _hx_tmp;
HXDLIN( 511)		Bool _hx_tmp1 = hx::IsNotNull( matrix );
HXDLIN( 511)		if (_hx_tmp1) {
HXLINE( 511)			_hx_tmp = matrix->clone();
            		}
            		else {
HXLINE( 511)			_hx_tmp = null();
            		}
HXDLIN( 511)		this->_hx___commands->lineBitmapStyle(bitmap,_hx_tmp,repeat,smooth);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Graphics_obj,lineBitmapStyle,(void))

void Graphics_obj::lineGradientStyle( ::Dynamic type,::Array< Int > colors,::Array< Float > alphas,::Array< Int > ratios, ::openfl::geom::Matrix matrix, ::Dynamic __o_spreadMethod, ::Dynamic __o_interpolationMethod,hx::Null< Float >  __o_focalPointRatio){
 ::Dynamic spreadMethod = __o_spreadMethod.Default(0);
 ::Dynamic interpolationMethod = __o_interpolationMethod.Default(1);
Float focalPointRatio = __o_focalPointRatio.Default(0);
            	HX_STACK_FRAME("openfl.display.Graphics","lineGradientStyle",0x2de26914,"openfl.display.Graphics.lineGradientStyle","openfl/display/Graphics.hx",518,0x8d299ce7)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(type,"type")
            	HX_STACK_ARG(colors,"colors")
            	HX_STACK_ARG(alphas,"alphas")
            	HX_STACK_ARG(ratios,"ratios")
            	HX_STACK_ARG(matrix,"matrix")
            	HX_STACK_ARG(spreadMethod,"spreadMethod")
            	HX_STACK_ARG(interpolationMethod,"interpolationMethod")
            	HX_STACK_ARG(focalPointRatio,"focalPointRatio")
HXLINE( 518)		this->_hx___commands->lineGradientStyle(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio);
            	}


HX_DEFINE_DYNAMIC_FUNC8(Graphics_obj,lineGradientStyle,(void))

void Graphics_obj::lineStyle( ::Dynamic thickness,hx::Null< Int >  __o_color,hx::Null< Float >  __o_alpha,hx::Null< Bool >  __o_pixelHinting, ::Dynamic __o_scaleMode, ::Dynamic caps, ::Dynamic joints,hx::Null< Float >  __o_miterLimit){
Int color = __o_color.Default(0);
Float alpha = __o_alpha.Default(1);
Bool pixelHinting = __o_pixelHinting.Default(false);
 ::Dynamic scaleMode = __o_scaleMode.Default(2);
Float miterLimit = __o_miterLimit.Default(3);
            	HX_STACK_FRAME("openfl.display.Graphics","lineStyle",0x32cd8e24,"openfl.display.Graphics.lineStyle","openfl/display/Graphics.hx",523,0x8d299ce7)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(thickness,"thickness")
            	HX_STACK_ARG(color,"color")
            	HX_STACK_ARG(alpha,"alpha")
            	HX_STACK_ARG(pixelHinting,"pixelHinting")
            	HX_STACK_ARG(scaleMode,"scaleMode")
            	HX_STACK_ARG(caps,"caps")
            	HX_STACK_ARG(joints,"joints")
            	HX_STACK_ARG(miterLimit,"miterLimit")
HXLINE( 525)		Bool _hx_tmp = hx::IsNotNull( thickness );
HXDLIN( 525)		if (_hx_tmp) {
HXLINE( 527)			if (hx::IsEq( joints,(int)1 )) {
HXLINE( 529)				Bool _hx_tmp1 = hx::IsGreater( thickness,this->_hx___strokePadding );
HXDLIN( 529)				if (_hx_tmp1) {
HXLINE( 529)					this->_hx___strokePadding = thickness;
            				}
            			}
            			else {
HXLINE( 533)				Bool _hx_tmp2 = (((Float)thickness / (Float)(int)2) > this->_hx___strokePadding);
HXDLIN( 533)				if (_hx_tmp2) {
HXLINE( 533)					this->_hx___strokePadding = ((Float)thickness / (Float)(int)2);
            				}
            			}
            		}
HXLINE( 539)		this->_hx___commands->lineStyle(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit);
HXLINE( 541)		Bool _hx_tmp3 = hx::IsNotNull( thickness );
HXDLIN( 541)		if (_hx_tmp3) {
HXLINE( 541)			this->_hx___visible = true;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC8(Graphics_obj,lineStyle,(void))

void Graphics_obj::lineTo(Float x,Float y){
            	HX_STACK_FRAME("openfl.display.Graphics","lineTo",0x25b7b6a8,"openfl.display.Graphics.lineTo","openfl/display/Graphics.hx",546,0x8d299ce7)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE( 548)		Bool _hx_tmp;
HXDLIN( 548)		Bool _hx_tmp1 = !(!(::Math_obj::isFinite(x)));
HXDLIN( 548)		if (_hx_tmp1) {
HXLINE( 548)			_hx_tmp = !(::Math_obj::isFinite(y));
            		}
            		else {
HXLINE( 548)			_hx_tmp = true;
            		}
HXDLIN( 548)		if (_hx_tmp) {
HXLINE( 550)			return;
            		}
HXLINE( 556)		Float _hx_tmp2 = (this->_hx___positionX - this->_hx___strokePadding);
HXDLIN( 556)		Float _hx_tmp3 = (this->_hx___positionY - this->_hx___strokePadding);
HXDLIN( 556)		this->_hx___inflateBounds(_hx_tmp2,_hx_tmp3);
HXLINE( 557)		Float _hx_tmp4 = (this->_hx___positionX + this->_hx___strokePadding);
HXDLIN( 557)		Float _hx_tmp5 = (this->_hx___positionY + this->_hx___strokePadding);
HXDLIN( 557)		this->_hx___inflateBounds(_hx_tmp4,_hx_tmp5);
HXLINE( 559)		this->_hx___positionX = x;
HXLINE( 560)		this->_hx___positionY = y;
HXLINE( 562)		Float _hx_tmp6 = (this->_hx___positionX - this->_hx___strokePadding);
HXDLIN( 562)		Float _hx_tmp7 = (this->_hx___positionY - this->_hx___strokePadding);
HXDLIN( 562)		this->_hx___inflateBounds(_hx_tmp6,_hx_tmp7);
HXLINE( 563)		Float _hx_tmp8 = (this->_hx___positionX + (this->_hx___strokePadding * (int)2));
HXDLIN( 563)		Float _hx_tmp9 = (this->_hx___positionY + this->_hx___strokePadding);
HXDLIN( 563)		this->_hx___inflateBounds(_hx_tmp8,_hx_tmp9);
HXLINE( 565)		this->_hx___commands->lineTo(x,y);
HXLINE( 567)		this->set___dirty(true);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Graphics_obj,lineTo,(void))

void Graphics_obj::moveTo(Float x,Float y){
            	HX_STACK_FRAME("openfl.display.Graphics","moveTo",0x05c44305,"openfl.display.Graphics.moveTo","openfl/display/Graphics.hx",572,0x8d299ce7)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE( 574)		this->_hx___positionX = x;
HXLINE( 575)		this->_hx___positionY = y;
HXLINE( 577)		this->_hx___commands->moveTo(x,y);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Graphics_obj,moveTo,(void))

 ::openfl::_Vector::ObjectVector Graphics_obj::readGraphicsData(hx::Null< Bool >  __o_recurse){
Bool recurse = __o_recurse.Default(true);
            	HX_STACK_FRAME("openfl.display.Graphics","readGraphicsData",0x877c6664,"openfl.display.Graphics.readGraphicsData","openfl/display/Graphics.hx",582,0x8d299ce7)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(recurse,"recurse")
HXLINE( 584)		Int length = null();
HXDLIN( 584)		Bool fixed = null();
HXDLIN( 584)		HX_VARI(  ::openfl::_Vector::ObjectVector,graphicsData) =  ::openfl::_Vector::ObjectVector_obj::__new(length,fixed,null());
HXLINE( 585)		this->_hx___owner->_hx___readGraphicsData(graphicsData,recurse);
HXLINE( 586)		return graphicsData;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Graphics_obj,readGraphicsData,return )

Float Graphics_obj::_hx___calculateBezierCubicPoint(Float t,Float p1,Float p2,Float p3,Float p4){
            	HX_STACK_FRAME("openfl.display.Graphics","__calculateBezierCubicPoint",0xb6679552,"openfl.display.Graphics.__calculateBezierCubicPoint","openfl/display/Graphics.hx",591,0x8d299ce7)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(t,"t")
            	HX_STACK_ARG(p1,"p1")
            	HX_STACK_ARG(p2,"p2")
            	HX_STACK_ARG(p3,"p3")
            	HX_STACK_ARG(p4,"p4")
HXLINE( 593)		HX_VARI( Float,iT) = ((int)1 - t);
HXLINE( 594)		return ((((p1 * ((iT * iT) * iT)) + ((((int)3 * p2) * t) * (iT * iT))) + ((((int)3 * p3) * iT) * (t * t))) + (p4 * ((t * t) * t)));
            	}


HX_DEFINE_DYNAMIC_FUNC5(Graphics_obj,_hx___calculateBezierCubicPoint,return )

Float Graphics_obj::_hx___calculateBezierQuadPoint(Float t,Float p1,Float p2,Float p3){
            	HX_STACK_FRAME("openfl.display.Graphics","__calculateBezierQuadPoint",0x2414b8dd,"openfl.display.Graphics.__calculateBezierQuadPoint","openfl/display/Graphics.hx",599,0x8d299ce7)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(t,"t")
            	HX_STACK_ARG(p1,"p1")
            	HX_STACK_ARG(p2,"p2")
            	HX_STACK_ARG(p3,"p3")
HXLINE( 601)		HX_VARI( Float,iT) = ((int)1 - t);
HXLINE( 602)		return ((((iT * iT) * p1) + ((((int)2 * iT) * t) * p2)) + ((t * t) * p3));
            	}


HX_DEFINE_DYNAMIC_FUNC4(Graphics_obj,_hx___calculateBezierQuadPoint,return )

void Graphics_obj::_hx___cleanup(){
            	HX_STACK_FRAME("openfl.display.Graphics","__cleanup",0x9445428b,"openfl.display.Graphics.__cleanup","openfl/display/Graphics.hx",607,0x8d299ce7)
            	HX_STACK_THIS(this)
HXLINE( 609)		Bool _hx_tmp = hx::IsNotNull( this->_hx___bounds );
HXDLIN( 609)		if (_hx_tmp) {
HXLINE( 611)			this->set___dirty(true);
HXLINE( 612)			this->_hx___transformDirty = true;
            		}
HXLINE( 616)		this->_hx___bitmap = null();
HXLINE( 622)		this->_hx___cairo = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Graphics_obj,_hx___cleanup,(void))

void Graphics_obj::_hx___getBounds( ::openfl::geom::Rectangle rect, ::openfl::geom::Matrix matrix){
            	HX_STACK_FRAME("openfl.display.Graphics","__getBounds",0x7b7eedd2,"openfl.display.Graphics.__getBounds","openfl/display/Graphics.hx",628,0x8d299ce7)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(rect,"rect")
            	HX_STACK_ARG(matrix,"matrix")
HXLINE( 630)		Bool _hx_tmp = hx::IsNull( this->_hx___bounds );
HXDLIN( 630)		if (_hx_tmp) {
HXLINE( 630)			return;
            		}
HXLINE( 632)		HX_VARI(  ::openfl::geom::Rectangle,bounds) = ::openfl::geom::Rectangle_obj::_hx___temp;
HXLINE( 633)		this->_hx___bounds->_hx___transform(bounds,matrix);
HXLINE( 634)		rect->_hx___expand(bounds->x,bounds->y,bounds->width,bounds->height);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Graphics_obj,_hx___getBounds,(void))

Bool Graphics_obj::_hx___hitTest(Float x,Float y,Bool shapeFlag, ::openfl::geom::Matrix matrix){
            	HX_STACK_FRAME("openfl.display.Graphics","__hitTest",0xcb8296ac,"openfl.display.Graphics.__hitTest","openfl/display/Graphics.hx",639,0x8d299ce7)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(shapeFlag,"shapeFlag")
            	HX_STACK_ARG(matrix,"matrix")
HXLINE( 641)		Bool _hx_tmp = hx::IsNull( this->_hx___bounds );
HXDLIN( 641)		if (_hx_tmp) {
HXLINE( 641)			return false;
            		}
HXLINE( 643)		HX_VARI( Float,norm) = ((matrix->a * matrix->d) - (matrix->b * matrix->c));
HXDLIN( 643)		HX_VAR( Float,px);
HXDLIN( 643)		if ((norm == (int)0)) {
HXLINE( 643)			px = -(matrix->tx);
            		}
            		else {
HXLINE( 643)			px = (((Float)((Float)1.0) / (Float)norm) * ((matrix->c * (matrix->ty - y)) + (matrix->d * (x - matrix->tx))));
            		}
HXLINE( 644)		HX_VARI_NAME( Float,norm1,"norm") = ((matrix->a * matrix->d) - (matrix->b * matrix->c));
HXDLIN( 644)		HX_VAR( Float,py);
HXDLIN( 644)		if ((norm1 == (int)0)) {
HXLINE( 644)			py = -(matrix->ty);
            		}
            		else {
HXLINE( 644)			py = (((Float)((Float)1.0) / (Float)norm1) * ((matrix->a * (y - matrix->ty)) + (matrix->b * (matrix->tx - x))));
            		}
HXLINE( 646)		Bool _hx_tmp1;
HXDLIN( 646)		Bool _hx_tmp2;
HXDLIN( 646)		if ((px > this->_hx___bounds->x)) {
HXLINE( 646)			_hx_tmp2 = (py > this->_hx___bounds->y);
            		}
            		else {
HXLINE( 646)			_hx_tmp2 = false;
            		}
HXDLIN( 646)		if (_hx_tmp2) {
HXLINE( 646)			_hx_tmp1 = this->_hx___bounds->contains(px,py);
            		}
            		else {
HXLINE( 646)			_hx_tmp1 = false;
            		}
HXDLIN( 646)		if (_hx_tmp1) {
HXLINE( 648)			if (shapeFlag) {
HXLINE( 653)				return ::openfl::_internal::renderer::cairo::CairoGraphics_obj::hitTest(hx::ObjectPtr<OBJ_>(this),px,py);
            			}
HXLINE( 658)			return true;
            		}
HXLINE( 662)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC4(Graphics_obj,_hx___hitTest,return )

void Graphics_obj::_hx___inflateBounds(Float x,Float y){
            	HX_STACK_FRAME("openfl.display.Graphics","__inflateBounds",0x7eaeb403,"openfl.display.Graphics.__inflateBounds","openfl/display/Graphics.hx",667,0x8d299ce7)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE( 669)		Bool _hx_tmp = hx::IsNull( this->_hx___bounds );
HXDLIN( 669)		if (_hx_tmp) {
HXLINE( 671)			this->_hx___bounds =  ::openfl::geom::Rectangle_obj::__new(x,y,(int)0,(int)0);
HXLINE( 672)			this->_hx___transformDirty = true;
HXLINE( 673)			return;
            		}
HXLINE( 677)		Bool _hx_tmp1 = (x < this->_hx___bounds->x);
HXDLIN( 677)		if (_hx_tmp1) {
HXLINE( 679)			hx::AddEq(this->_hx___bounds->width,(this->_hx___bounds->x - x));
HXLINE( 680)			this->_hx___bounds->x = x;
HXLINE( 681)			this->_hx___transformDirty = true;
            		}
HXLINE( 685)		Bool _hx_tmp2 = (y < this->_hx___bounds->y);
HXDLIN( 685)		if (_hx_tmp2) {
HXLINE( 687)			hx::AddEq(this->_hx___bounds->height,(this->_hx___bounds->y - y));
HXLINE( 688)			this->_hx___bounds->y = y;
HXLINE( 689)			this->_hx___transformDirty = true;
            		}
HXLINE( 693)		Bool _hx_tmp3 = (x > (this->_hx___bounds->x + this->_hx___bounds->width));
HXDLIN( 693)		if (_hx_tmp3) {
HXLINE( 695)			this->_hx___bounds->width = (x - this->_hx___bounds->x);
            		}
HXLINE( 699)		Bool _hx_tmp4 = (y > (this->_hx___bounds->y + this->_hx___bounds->height));
HXDLIN( 699)		if (_hx_tmp4) {
HXLINE( 701)			this->_hx___bounds->height = (y - this->_hx___bounds->y);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Graphics_obj,_hx___inflateBounds,(void))

void Graphics_obj::_hx___readGraphicsData( ::openfl::_Vector::ObjectVector graphicsData){
            	HX_STACK_FRAME("openfl.display.Graphics","__readGraphicsData",0xf8dcc1c4,"openfl.display.Graphics.__readGraphicsData","openfl/display/Graphics.hx",708,0x8d299ce7)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(graphicsData,"graphicsData")
HXLINE( 710)		HX_VARI(  ::openfl::_internal::renderer::DrawCommandReader,data) =  ::openfl::_internal::renderer::DrawCommandReader_obj::__new(this->_hx___commands);
HXLINE( 711)		HX_VAR(  ::openfl::display::GraphicsPath,path);
HXLINE( 713)		{
HXLINE( 713)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 713)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->_hx___commands->types;
HXDLIN( 713)			while((_g < _g1->length)){
HXLINE( 713)				HX_VARI( ::hx::EnumBase,type) = _g1->__get(_g).StaticCast< ::hx::EnumBase >();
HXDLIN( 713)				++_g;
HXLINE( 715)				Int _hx_tmp = ( ( ::hx::EnumBase)(type) )->_hx_getIndex();
HXDLIN( 715)				switch((int)(_hx_tmp)){
            					case (int)0: {
HXLINE( 768)						{
HXLINE( 768)							Int _hx_tmp1 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 768)							switch((int)(_hx_tmp1)){
            								case (int)0: {
HXLINE( 768)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 768)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 768)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 768)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 768)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 768)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 768)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 768)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 768)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 768)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 768)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 768)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 768)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)8: {
HXLINE( 768)									hx::AddEq(data->fPos,(int)5);
HXDLIN( 768)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 768)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE( 768)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 768)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)13: {
HXLINE( 768)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 768)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 768)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 768)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)14: {
HXLINE( 768)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 768)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 768)									hx::AddEq(data->fPos,(int)2);
HXDLIN( 768)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 768)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)16: {
HXLINE( 768)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 768)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE( 768)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_BITMAP_FILL_dyn();
HXDLIN( 768)						HX_VARI(  ::openfl::_internal::renderer::DrawCommandReader,c) = data;
HXLINE( 769)						{
HXLINE( 769)							 ::openfl::display::BitmapData _hx_tmp2 = ( ( ::openfl::display::BitmapData)(c->buffer->o->__get(c->oPos)) );
HXDLIN( 769)							 ::openfl::geom::Matrix _hx_tmp3 = ( ( ::openfl::geom::Matrix)(c->buffer->o->__get((c->oPos + (int)1))) );
HXDLIN( 769)							Bool _hx_tmp4 = c->buffer->b->__get(c->bPos);
HXDLIN( 769)							Bool _hx_tmp5 = c->buffer->b->__get((c->bPos + (int)1));
HXDLIN( 769)							graphicsData->push( ::openfl::display::GraphicsBitmapFill_obj::__new(_hx_tmp2,_hx_tmp3,_hx_tmp4,_hx_tmp5));
            						}
            					}
            					break;
            					case (int)1: {
HXLINE( 773)						{
HXLINE( 773)							Int _hx_tmp6 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 773)							switch((int)(_hx_tmp6)){
            								case (int)0: {
HXLINE( 773)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 773)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 773)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 773)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 773)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 773)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 773)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 773)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 773)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 773)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 773)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 773)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 773)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)8: {
HXLINE( 773)									hx::AddEq(data->fPos,(int)5);
HXDLIN( 773)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 773)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE( 773)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 773)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)13: {
HXLINE( 773)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 773)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 773)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 773)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)14: {
HXLINE( 773)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 773)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 773)									hx::AddEq(data->fPos,(int)2);
HXDLIN( 773)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 773)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)16: {
HXLINE( 773)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 773)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE( 773)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_FILL_dyn();
HXDLIN( 773)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c1,"c") = data;
HXLINE( 774)						{
HXLINE( 774)							::Dynamic x =  ::openfl::display::GraphicsSolidFill_obj::__new(c1->buffer->i->__get(c1->iPos),(int)1);
HXDLIN( 774)							graphicsData->push(x);
            						}
            					}
            					break;
            					case (int)2: {
HXLINE( 778)						{
HXLINE( 778)							Int _hx_tmp7 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 778)							switch((int)(_hx_tmp7)){
            								case (int)0: {
HXLINE( 778)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 778)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 778)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 778)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 778)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 778)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 778)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 778)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 778)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 778)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 778)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 778)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 778)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)8: {
HXLINE( 778)									hx::AddEq(data->fPos,(int)5);
HXDLIN( 778)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 778)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE( 778)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 778)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)13: {
HXLINE( 778)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 778)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 778)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 778)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)14: {
HXLINE( 778)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 778)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 778)									hx::AddEq(data->fPos,(int)2);
HXDLIN( 778)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 778)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)16: {
HXLINE( 778)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 778)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE( 778)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_GRADIENT_FILL_dyn();
HXDLIN( 778)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c2,"c") = data;
HXLINE( 779)						{
HXLINE( 779)							::Dynamic x1 =  ::openfl::display::GraphicsGradientFill_obj::__new(c2->buffer->o->__get(c2->oPos),c2->buffer->ii->__get(c2->iiPos).StaticCast< ::Array< Int > >(),c2->buffer->ff->__get(c2->ffPos).StaticCast< ::Array< Float > >(),c2->buffer->ii->__get((c2->iiPos + (int)1)).StaticCast< ::Array< Int > >(),( ( ::openfl::geom::Matrix)(c2->buffer->o->__get((c2->oPos + (int)1))) ),c2->buffer->o->__get((c2->oPos + (int)2)),c2->buffer->o->__get((c2->oPos + (int)3)),c2->buffer->f->__get(c2->fPos));
HXDLIN( 779)							graphicsData->push(x1);
            						}
            					}
            					break;
            					case (int)3: {
HXLINE( 719)						{
HXLINE( 719)							Int _hx_tmp8 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 719)							switch((int)(_hx_tmp8)){
            								case (int)0: {
HXLINE( 719)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 719)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 719)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 719)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 719)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 719)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 719)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 719)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 719)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 719)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 719)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 719)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 719)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)8: {
HXLINE( 719)									hx::AddEq(data->fPos,(int)5);
HXDLIN( 719)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 719)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE( 719)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 719)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)13: {
HXLINE( 719)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 719)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 719)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 719)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)14: {
HXLINE( 719)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 719)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 719)									hx::AddEq(data->fPos,(int)2);
HXDLIN( 719)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 719)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)16: {
HXLINE( 719)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 719)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE( 719)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::CUBIC_CURVE_TO_dyn();
            					}
            					break;
            					case (int)4: {
HXLINE( 725)						{
HXLINE( 725)							Int _hx_tmp9 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 725)							switch((int)(_hx_tmp9)){
            								case (int)0: {
HXLINE( 725)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 725)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 725)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 725)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 725)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 725)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 725)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 725)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 725)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 725)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 725)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 725)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 725)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)8: {
HXLINE( 725)									hx::AddEq(data->fPos,(int)5);
HXDLIN( 725)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 725)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE( 725)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 725)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)13: {
HXLINE( 725)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 725)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 725)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 725)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)14: {
HXLINE( 725)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 725)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 725)									hx::AddEq(data->fPos,(int)2);
HXDLIN( 725)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 725)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)16: {
HXLINE( 725)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 725)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE( 725)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::CURVE_TO_dyn();
HXDLIN( 725)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c3,"c") = data;
HXLINE( 726)						path =  ::openfl::display::GraphicsPath_obj::__new(null(),null(),null());
HXLINE( 727)						Float _hx_tmp10 = c3->buffer->f->__get(c3->fPos);
HXDLIN( 727)						Float _hx_tmp11 = c3->buffer->f->__get((c3->fPos + (int)1));
HXDLIN( 727)						Float _hx_tmp12 = c3->buffer->f->__get((c3->fPos + (int)2));
HXDLIN( 727)						Float _hx_tmp13 = c3->buffer->f->__get((c3->fPos + (int)3));
HXDLIN( 727)						path->curveTo(_hx_tmp10,_hx_tmp11,_hx_tmp12,_hx_tmp13);
HXLINE( 728)						graphicsData->push(path);
            					}
            					break;
            					case (int)5: {
HXLINE( 783)						{
HXLINE( 783)							Int _hx_tmp14 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 783)							switch((int)(_hx_tmp14)){
            								case (int)0: {
HXLINE( 783)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 783)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 783)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 783)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 783)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 783)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 783)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 783)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 783)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 783)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 783)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 783)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 783)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)8: {
HXLINE( 783)									hx::AddEq(data->fPos,(int)5);
HXDLIN( 783)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 783)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE( 783)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 783)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)13: {
HXLINE( 783)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 783)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 783)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 783)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)14: {
HXLINE( 783)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 783)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 783)									hx::AddEq(data->fPos,(int)2);
HXDLIN( 783)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 783)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)16: {
HXLINE( 783)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 783)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE( 783)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_CIRCLE_dyn();
            					}
            					break;
            					case (int)6: {
HXLINE( 789)						{
HXLINE( 789)							Int _hx_tmp15 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 789)							switch((int)(_hx_tmp15)){
            								case (int)0: {
HXLINE( 789)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 789)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 789)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 789)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 789)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 789)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 789)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 789)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 789)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 789)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 789)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 789)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 789)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)8: {
HXLINE( 789)									hx::AddEq(data->fPos,(int)5);
HXDLIN( 789)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 789)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE( 789)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 789)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)13: {
HXLINE( 789)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 789)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 789)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 789)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)14: {
HXLINE( 789)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 789)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 789)									hx::AddEq(data->fPos,(int)2);
HXDLIN( 789)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 789)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)16: {
HXLINE( 789)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 789)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE( 789)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_ELLIPSE_dyn();
            					}
            					break;
            					case (int)7: {
HXLINE( 795)						{
HXLINE( 795)							Int _hx_tmp16 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 795)							switch((int)(_hx_tmp16)){
            								case (int)0: {
HXLINE( 795)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 795)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 795)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 795)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 795)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 795)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 795)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 795)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 795)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 795)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 795)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 795)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 795)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)8: {
HXLINE( 795)									hx::AddEq(data->fPos,(int)5);
HXDLIN( 795)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 795)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE( 795)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 795)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)13: {
HXLINE( 795)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 795)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 795)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 795)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)14: {
HXLINE( 795)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 795)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 795)									hx::AddEq(data->fPos,(int)2);
HXDLIN( 795)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 795)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)16: {
HXLINE( 795)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 795)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE( 795)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_ELLIPSE_dyn();
            					}
            					break;
            					case (int)8: {
HXLINE( 801)						{
HXLINE( 801)							Int _hx_tmp17 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 801)							switch((int)(_hx_tmp17)){
            								case (int)0: {
HXLINE( 801)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 801)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 801)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 801)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 801)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 801)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 801)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 801)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 801)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 801)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 801)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 801)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 801)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)8: {
HXLINE( 801)									hx::AddEq(data->fPos,(int)5);
HXDLIN( 801)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 801)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE( 801)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 801)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)13: {
HXLINE( 801)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 801)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 801)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 801)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)14: {
HXLINE( 801)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 801)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 801)									hx::AddEq(data->fPos,(int)2);
HXDLIN( 801)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 801)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)16: {
HXLINE( 801)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 801)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE( 801)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_ELLIPSE_dyn();
            					}
            					break;
            					case (int)11: {
HXLINE( 763)						{
HXLINE( 763)							{
HXLINE( 763)								Int _hx_tmp18 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 763)								switch((int)(_hx_tmp18)){
            									case (int)0: {
HXLINE( 763)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 763)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE( 763)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 763)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE( 763)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 763)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 763)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 763)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE( 763)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE( 763)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE( 763)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE( 763)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE( 763)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)8: {
HXLINE( 763)										hx::AddEq(data->fPos,(int)5);
HXDLIN( 763)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE( 763)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)11: {
            									}
            									break;
            									case (int)12: {
HXLINE( 763)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 763)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)13: {
HXLINE( 763)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 763)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 763)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 763)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)14: {
HXLINE( 763)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 763)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 763)										hx::AddEq(data->fPos,(int)2);
HXDLIN( 763)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE( 763)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)16: {
HXLINE( 763)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE( 763)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE( 763)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::END_FILL_dyn();
            						}
HXLINE( 764)						graphicsData->push( ::openfl::display::GraphicsEndFill_obj::__new());
            					}
            					break;
            					case (int)12: {
HXLINE( 752)						{
HXLINE( 752)							Int _hx_tmp19 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 752)							switch((int)(_hx_tmp19)){
            								case (int)0: {
HXLINE( 752)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 752)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 752)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 752)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 752)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 752)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 752)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 752)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 752)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 752)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 752)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 752)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 752)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)8: {
HXLINE( 752)									hx::AddEq(data->fPos,(int)5);
HXDLIN( 752)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 752)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE( 752)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 752)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)13: {
HXLINE( 752)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 752)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 752)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 752)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)14: {
HXLINE( 752)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 752)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 752)									hx::AddEq(data->fPos,(int)2);
HXDLIN( 752)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 752)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)16: {
HXLINE( 752)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 752)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE( 752)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_BITMAP_STYLE_dyn();
            					}
            					break;
            					case (int)13: {
HXLINE( 746)						{
HXLINE( 746)							Int _hx_tmp20 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 746)							switch((int)(_hx_tmp20)){
            								case (int)0: {
HXLINE( 746)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 746)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 746)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 746)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 746)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 746)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 746)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 746)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 746)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 746)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 746)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 746)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 746)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)8: {
HXLINE( 746)									hx::AddEq(data->fPos,(int)5);
HXDLIN( 746)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 746)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE( 746)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 746)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)13: {
HXLINE( 746)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 746)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 746)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 746)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)14: {
HXLINE( 746)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 746)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 746)									hx::AddEq(data->fPos,(int)2);
HXDLIN( 746)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 746)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)16: {
HXLINE( 746)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 746)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE( 746)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_GRADIENT_STYLE_dyn();
            					}
            					break;
            					case (int)14: {
HXLINE( 758)						{
HXLINE( 758)							Int _hx_tmp21 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 758)							switch((int)(_hx_tmp21)){
            								case (int)0: {
HXLINE( 758)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 758)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 758)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 758)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 758)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 758)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 758)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 758)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 758)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 758)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 758)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 758)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 758)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)8: {
HXLINE( 758)									hx::AddEq(data->fPos,(int)5);
HXDLIN( 758)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 758)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE( 758)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 758)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)13: {
HXLINE( 758)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 758)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 758)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 758)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)14: {
HXLINE( 758)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 758)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 758)									hx::AddEq(data->fPos,(int)2);
HXDLIN( 758)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 758)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)16: {
HXLINE( 758)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 758)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE( 758)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_STYLE_dyn();
HXDLIN( 758)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c4,"c") = data;
HXLINE( 759)						{
HXLINE( 759)							::Dynamic x2 =  ::openfl::display::GraphicsStroke_obj::__new(c4->buffer->o->__get(c4->oPos),c4->buffer->b->__get(c4->bPos),c4->buffer->o->__get((c4->oPos + (int)1)),c4->buffer->o->__get((c4->oPos + (int)2)),c4->buffer->o->__get((c4->oPos + (int)3)),c4->buffer->f->__get((c4->fPos + (int)1)),null());
HXDLIN( 759)							graphicsData->push(x2);
            						}
            					}
            					break;
            					case (int)15: {
HXLINE( 732)						{
HXLINE( 732)							Int _hx_tmp22 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 732)							switch((int)(_hx_tmp22)){
            								case (int)0: {
HXLINE( 732)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 732)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 732)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 732)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 732)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 732)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 732)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 732)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 732)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 732)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 732)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 732)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 732)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)8: {
HXLINE( 732)									hx::AddEq(data->fPos,(int)5);
HXDLIN( 732)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 732)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE( 732)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 732)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)13: {
HXLINE( 732)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 732)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 732)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 732)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)14: {
HXLINE( 732)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 732)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 732)									hx::AddEq(data->fPos,(int)2);
HXDLIN( 732)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 732)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)16: {
HXLINE( 732)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 732)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE( 732)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_TO_dyn();
HXDLIN( 732)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c5,"c") = data;
HXLINE( 733)						path =  ::openfl::display::GraphicsPath_obj::__new(null(),null(),null());
HXLINE( 734)						Float _hx_tmp23 = c5->buffer->f->__get(c5->fPos);
HXDLIN( 734)						Float _hx_tmp24 = c5->buffer->f->__get((c5->fPos + (int)1));
HXDLIN( 734)						path->lineTo(_hx_tmp23,_hx_tmp24);
HXLINE( 735)						graphicsData->push(path);
            					}
            					break;
            					case (int)16: {
HXLINE( 739)						{
HXLINE( 739)							Int _hx_tmp25 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 739)							switch((int)(_hx_tmp25)){
            								case (int)0: {
HXLINE( 739)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 739)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 739)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 739)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 739)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 739)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 739)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 739)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 739)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 739)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 739)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 739)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 739)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)8: {
HXLINE( 739)									hx::AddEq(data->fPos,(int)5);
HXDLIN( 739)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 739)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE( 739)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 739)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)13: {
HXLINE( 739)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 739)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 739)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 739)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)14: {
HXLINE( 739)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 739)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 739)									hx::AddEq(data->fPos,(int)2);
HXDLIN( 739)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 739)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)16: {
HXLINE( 739)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 739)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE( 739)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::MOVE_TO_dyn();
HXDLIN( 739)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c6,"c") = data;
HXLINE( 740)						path =  ::openfl::display::GraphicsPath_obj::__new(null(),null(),null());
HXLINE( 741)						Float _hx_tmp26 = c6->buffer->f->__get(c6->fPos);
HXDLIN( 741)						Float _hx_tmp27 = c6->buffer->f->__get((c6->fPos + (int)1));
HXDLIN( 741)						path->moveTo(_hx_tmp26,_hx_tmp27);
HXLINE( 742)						graphicsData->push(path);
            					}
            					break;
            					default:{
HXLINE( 807)						{
HXLINE( 807)							Int _hx_tmp28 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 807)							switch((int)(_hx_tmp28)){
            								case (int)0: {
HXLINE( 807)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 807)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 807)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 807)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 807)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 807)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 807)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 807)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 807)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 807)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 807)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 807)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 807)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)8: {
HXLINE( 807)									hx::AddEq(data->fPos,(int)5);
HXDLIN( 807)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 807)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE( 807)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 807)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)13: {
HXLINE( 807)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 807)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 807)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 807)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)14: {
HXLINE( 807)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 807)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 807)									hx::AddEq(data->fPos,(int)2);
HXDLIN( 807)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 807)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)16: {
HXLINE( 807)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 807)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE( 807)						data->prev = type;
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Graphics_obj,_hx___readGraphicsData,(void))

void Graphics_obj::_hx___update(){
            	HX_STACK_FRAME("openfl.display.Graphics","__update",0x711b5982,"openfl.display.Graphics.__update","openfl/display/Graphics.hx",816,0x8d299ce7)
            	HX_STACK_THIS(this)
HXLINE( 818)		Bool _hx_tmp;
HXDLIN( 818)		Bool _hx_tmp1;
HXDLIN( 818)		Bool _hx_tmp2 = hx::IsNotNull( this->_hx___bounds );
HXDLIN( 818)		if (_hx_tmp2) {
HXLINE( 818)			_hx_tmp1 = (this->_hx___bounds->width <= (int)0);
            		}
            		else {
HXLINE( 818)			_hx_tmp1 = true;
            		}
HXDLIN( 818)		if (!(_hx_tmp1)) {
HXLINE( 818)			_hx_tmp = (this->_hx___bounds->height <= (int)0);
            		}
            		else {
HXLINE( 818)			_hx_tmp = true;
            		}
HXDLIN( 818)		if (_hx_tmp) {
HXLINE( 818)			return;
            		}
HXLINE( 820)		HX_VARI(  ::openfl::geom::Matrix,parentTransform) = this->_hx___owner->_hx___getRenderTransform();
HXLINE( 821)		HX_VAR( Float,scaleX);
HXDLIN( 821)		HX_VAR( Float,scaleY);
HXLINE( 823)		Bool _hx_tmp3 = (parentTransform->b == (int)0);
HXDLIN( 823)		if (_hx_tmp3) {
HXLINE( 825)			scaleX = ::Math_obj::abs(parentTransform->a);
            		}
            		else {
HXLINE( 829)			Float _hx_tmp4 = ((parentTransform->a * parentTransform->a) + (parentTransform->b * parentTransform->b));
HXDLIN( 829)			scaleX = ::Math_obj::sqrt(_hx_tmp4);
            		}
HXLINE( 833)		Bool _hx_tmp5 = (parentTransform->c == (int)0);
HXDLIN( 833)		if (_hx_tmp5) {
HXLINE( 835)			scaleY = ::Math_obj::abs(parentTransform->d);
            		}
            		else {
HXLINE( 839)			Float _hx_tmp6 = ((parentTransform->c * parentTransform->c) + (parentTransform->d * parentTransform->d));
HXDLIN( 839)			scaleY = ::Math_obj::sqrt(_hx_tmp6);
            		}
HXLINE( 848)		HX_VARI( Float,width) = (this->_hx___bounds->width * scaleX);
HXLINE( 849)		HX_VARI( Float,height) = (this->_hx___bounds->height * scaleY);
HXLINE( 851)		Bool _hx_tmp7;
HXDLIN( 851)		Float _hx_tmp8 = (width - this->_hx___width);
HXDLIN( 851)		Float _hx_tmp9 = ::Math_obj::abs(_hx_tmp8);
HXDLIN( 851)		if (!((_hx_tmp9 > (int)2))) {
HXLINE( 851)			Float _hx_tmp10 = (height - this->_hx___height);
HXDLIN( 851)			Float _hx_tmp11 = ::Math_obj::abs(_hx_tmp10);
HXDLIN( 851)			_hx_tmp7 = (_hx_tmp11 > (int)2);
            		}
            		else {
HXLINE( 851)			_hx_tmp7 = true;
            		}
HXDLIN( 851)		if (_hx_tmp7) {
HXLINE( 853)			this->set___dirty(true);
            		}
HXLINE( 857)		this->_hx___width = ::Math_obj::floor(width);
HXLINE( 858)		this->_hx___height = ::Math_obj::floor(height);
HXLINE( 860)		Bool _hx_tmp12;
HXDLIN( 860)		if ((this->_hx___width > (int)0)) {
HXLINE( 860)			_hx_tmp12 = (this->_hx___height <= (int)0);
            		}
            		else {
HXLINE( 860)			_hx_tmp12 = true;
            		}
HXDLIN( 860)		if (_hx_tmp12) {
HXLINE( 860)			return;
            		}
HXLINE( 862)		this->_hx___renderTransform->a = ((Float)this->_hx___width / (Float)this->_hx___bounds->width);
HXLINE( 863)		this->_hx___renderTransform->d = ((Float)this->_hx___height / (Float)this->_hx___bounds->height);
HXLINE( 865)		this->_hx___worldTransform->a = ((Float)(int)1 / (Float)this->_hx___renderTransform->a);
HXLINE( 866)		this->_hx___worldTransform->b = (int)0;
HXLINE( 867)		this->_hx___worldTransform->c = (int)0;
HXLINE( 868)		this->_hx___worldTransform->d = ((Float)(int)1 / (Float)this->_hx___renderTransform->d);
HXLINE( 869)		this->_hx___worldTransform->tx = this->_hx___bounds->x;
HXLINE( 870)		this->_hx___worldTransform->ty = this->_hx___bounds->y;
HXLINE( 871)		this->_hx___worldTransform->concat(this->_hx___owner->_hx___renderTransform);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Graphics_obj,_hx___update,(void))

Bool Graphics_obj::set___dirty(Bool value){
            	HX_STACK_FRAME("openfl.display.Graphics","set___dirty",0x3f74a55c,"openfl.display.Graphics.set___dirty","openfl/display/Graphics.hx",883,0x8d299ce7)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 885)		Bool _hx_tmp;
HXDLIN( 885)		if (value) {
HXLINE( 885)			_hx_tmp = hx::IsNotNull( this->_hx___owner );
            		}
            		else {
HXLINE( 885)			_hx_tmp = false;
            		}
HXDLIN( 885)		if (_hx_tmp) {
HXLINE( 887)			HX_VARI(  ::openfl::display::DisplayObject,_this) = this->_hx___owner;
HXDLIN( 887)			Bool _hx_tmp1 = !(_this->_hx___renderDirty);
HXDLIN( 887)			if (_hx_tmp1) {
HXLINE( 887)				_this->_hx___renderDirty = true;
HXDLIN( 887)				::openfl::display::DisplayObject_obj::_hx___worldRenderDirty++;
            			}
            		}
HXLINE( 891)		return (this->_hx___dirty = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Graphics_obj,set___dirty,return )


Graphics_obj::Graphics_obj()
{
}

void Graphics_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Graphics);
	HX_MARK_MEMBER_NAME(_hx___bounds,"__bounds");
	HX_MARK_MEMBER_NAME(_hx___commands,"__commands");
	HX_MARK_MEMBER_NAME(_hx___dirty,"__dirty");
	HX_MARK_MEMBER_NAME(_hx___height,"__height");
	HX_MARK_MEMBER_NAME(_hx___positionX,"__positionX");
	HX_MARK_MEMBER_NAME(_hx___positionY,"__positionY");
	HX_MARK_MEMBER_NAME(_hx___renderTransform,"__renderTransform");
	HX_MARK_MEMBER_NAME(_hx___strokePadding,"__strokePadding");
	HX_MARK_MEMBER_NAME(_hx___transformDirty,"__transformDirty");
	HX_MARK_MEMBER_NAME(_hx___visible,"__visible");
	HX_MARK_MEMBER_NAME(_hx___owner,"__owner");
	HX_MARK_MEMBER_NAME(_hx___width,"__width");
	HX_MARK_MEMBER_NAME(_hx___worldTransform,"__worldTransform");
	HX_MARK_MEMBER_NAME(_hx___cairo,"__cairo");
	HX_MARK_MEMBER_NAME(_hx___bitmap,"__bitmap");
	HX_MARK_END_CLASS();
}

void Graphics_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_hx___bounds,"__bounds");
	HX_VISIT_MEMBER_NAME(_hx___commands,"__commands");
	HX_VISIT_MEMBER_NAME(_hx___dirty,"__dirty");
	HX_VISIT_MEMBER_NAME(_hx___height,"__height");
	HX_VISIT_MEMBER_NAME(_hx___positionX,"__positionX");
	HX_VISIT_MEMBER_NAME(_hx___positionY,"__positionY");
	HX_VISIT_MEMBER_NAME(_hx___renderTransform,"__renderTransform");
	HX_VISIT_MEMBER_NAME(_hx___strokePadding,"__strokePadding");
	HX_VISIT_MEMBER_NAME(_hx___transformDirty,"__transformDirty");
	HX_VISIT_MEMBER_NAME(_hx___visible,"__visible");
	HX_VISIT_MEMBER_NAME(_hx___owner,"__owner");
	HX_VISIT_MEMBER_NAME(_hx___width,"__width");
	HX_VISIT_MEMBER_NAME(_hx___worldTransform,"__worldTransform");
	HX_VISIT_MEMBER_NAME(_hx___cairo,"__cairo");
	HX_VISIT_MEMBER_NAME(_hx___bitmap,"__bitmap");
}

hx::Val Graphics_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"lineTo") ) { return hx::Val( lineTo_dyn()); }
		if (HX_FIELD_EQ(inName,"moveTo") ) { return hx::Val( moveTo_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"__dirty") ) { return hx::Val( _hx___dirty); }
		if (HX_FIELD_EQ(inName,"__owner") ) { return hx::Val( _hx___owner); }
		if (HX_FIELD_EQ(inName,"__width") ) { return hx::Val( _hx___width); }
		if (HX_FIELD_EQ(inName,"__cairo") ) { return hx::Val( _hx___cairo); }
		if (HX_FIELD_EQ(inName,"curveTo") ) { return hx::Val( curveTo_dyn()); }
		if (HX_FIELD_EQ(inName,"endFill") ) { return hx::Val( endFill_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__bounds") ) { return hx::Val( _hx___bounds); }
		if (HX_FIELD_EQ(inName,"__height") ) { return hx::Val( _hx___height); }
		if (HX_FIELD_EQ(inName,"__bitmap") ) { return hx::Val( _hx___bitmap); }
		if (HX_FIELD_EQ(inName,"copyFrom") ) { return hx::Val( copyFrom_dyn()); }
		if (HX_FIELD_EQ(inName,"drawPath") ) { return hx::Val( drawPath_dyn()); }
		if (HX_FIELD_EQ(inName,"drawRect") ) { return hx::Val( drawRect_dyn()); }
		if (HX_FIELD_EQ(inName,"__update") ) { return hx::Val( _hx___update_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__visible") ) { return hx::Val( _hx___visible); }
		if (HX_FIELD_EQ(inName,"beginFill") ) { return hx::Val( beginFill_dyn()); }
		if (HX_FIELD_EQ(inName,"lineStyle") ) { return hx::Val( lineStyle_dyn()); }
		if (HX_FIELD_EQ(inName,"__cleanup") ) { return hx::Val( _hx___cleanup_dyn()); }
		if (HX_FIELD_EQ(inName,"__hitTest") ) { return hx::Val( _hx___hitTest_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__commands") ) { return hx::Val( _hx___commands); }
		if (HX_FIELD_EQ(inName,"drawCircle") ) { return hx::Val( drawCircle_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__positionX") ) { return hx::Val( _hx___positionX); }
		if (HX_FIELD_EQ(inName,"__positionY") ) { return hx::Val( _hx___positionY); }
		if (HX_FIELD_EQ(inName,"drawEllipse") ) { return hx::Val( drawEllipse_dyn()); }
		if (HX_FIELD_EQ(inName,"__getBounds") ) { return hx::Val( _hx___getBounds_dyn()); }
		if (HX_FIELD_EQ(inName,"set___dirty") ) { return hx::Val( set___dirty_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"cubicCurveTo") ) { return hx::Val( cubicCurveTo_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"drawRoundRect") ) { return hx::Val( drawRoundRect_dyn()); }
		if (HX_FIELD_EQ(inName,"drawTriangles") ) { return hx::Val( drawTriangles_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__strokePadding") ) { return hx::Val( _hx___strokePadding); }
		if (HX_FIELD_EQ(inName,"beginBitmapFill") ) { return hx::Val( beginBitmapFill_dyn()); }
		if (HX_FIELD_EQ(inName,"lineBitmapStyle") ) { return hx::Val( lineBitmapStyle_dyn()); }
		if (HX_FIELD_EQ(inName,"__inflateBounds") ) { return hx::Val( _hx___inflateBounds_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__transformDirty") ) { return hx::Val( _hx___transformDirty); }
		if (HX_FIELD_EQ(inName,"__worldTransform") ) { return hx::Val( _hx___worldTransform); }
		if (HX_FIELD_EQ(inName,"drawGraphicsData") ) { return hx::Val( drawGraphicsData_dyn()); }
		if (HX_FIELD_EQ(inName,"readGraphicsData") ) { return hx::Val( readGraphicsData_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__renderTransform") ) { return hx::Val( _hx___renderTransform); }
		if (HX_FIELD_EQ(inName,"beginGradientFill") ) { return hx::Val( beginGradientFill_dyn()); }
		if (HX_FIELD_EQ(inName,"lineGradientStyle") ) { return hx::Val( lineGradientStyle_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__readGraphicsData") ) { return hx::Val( _hx___readGraphicsData_dyn()); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"drawRoundRectComplex") ) { return hx::Val( drawRoundRectComplex_dyn()); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"__calculateBezierQuadPoint") ) { return hx::Val( _hx___calculateBezierQuadPoint_dyn()); }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"__calculateBezierCubicPoint") ) { return hx::Val( _hx___calculateBezierCubicPoint_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Graphics_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"__dirty") ) { if (inCallProp == hx::paccAlways) return hx::Val( set___dirty(inValue) );_hx___dirty=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__owner") ) { _hx___owner=inValue.Cast<  ::openfl::display::DisplayObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__width") ) { _hx___width=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__cairo") ) { _hx___cairo=inValue.Cast<  ::lime::graphics::cairo::Cairo >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__bounds") ) { _hx___bounds=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__height") ) { _hx___height=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__bitmap") ) { _hx___bitmap=inValue.Cast<  ::openfl::display::BitmapData >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__visible") ) { _hx___visible=inValue.Cast< Bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__commands") ) { _hx___commands=inValue.Cast<  ::openfl::_internal::renderer::DrawCommandBuffer >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__positionX") ) { _hx___positionX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__positionY") ) { _hx___positionY=inValue.Cast< Float >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__strokePadding") ) { _hx___strokePadding=inValue.Cast< Float >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__transformDirty") ) { _hx___transformDirty=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__worldTransform") ) { _hx___worldTransform=inValue.Cast<  ::openfl::geom::Matrix >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__renderTransform") ) { _hx___renderTransform=inValue.Cast<  ::openfl::geom::Matrix >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Graphics_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("__bounds","\x95","\xf1","\x4c","\x0e"));
	outFields->push(HX_HCSTRING("__commands","\xe8","\x23","\x8e","\x61"));
	outFields->push(HX_HCSTRING("__dirty","\xf2","\xa8","\x2e","\x44"));
	outFields->push(HX_HCSTRING("__height","\x07","\x73","\x7b","\xaa"));
	outFields->push(HX_HCSTRING("__positionX","\x6f","\x3c","\x7e","\xfe"));
	outFields->push(HX_HCSTRING("__positionY","\x70","\x3c","\x7e","\xfe"));
	outFields->push(HX_HCSTRING("__renderTransform","\x16","\xb8","\x95","\xb1"));
	outFields->push(HX_HCSTRING("__strokePadding","\xd9","\x6d","\xda","\xc4"));
	outFields->push(HX_HCSTRING("__transformDirty","\x26","\xf6","\x91","\x84"));
	outFields->push(HX_HCSTRING("__visible","\x52","\xc9","\x72","\x24"));
	outFields->push(HX_HCSTRING("__owner","\x13","\xf1","\xd4","\xa2"));
	outFields->push(HX_HCSTRING("__width","\xe6","\x0e","\xc1","\x34"));
	outFields->push(HX_HCSTRING("__worldTransform","\xda","\xa7","\xd8","\x9a"));
	outFields->push(HX_HCSTRING("__cairo","\x68","\x89","\x77","\xab"));
	outFields->push(HX_HCSTRING("__bitmap","\x0f","\x7b","\x3b","\x99"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Graphics_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(Graphics_obj,_hx___bounds),HX_HCSTRING("__bounds","\x95","\xf1","\x4c","\x0e")},
	{hx::fsObject /*::openfl::_internal::renderer::DrawCommandBuffer*/ ,(int)offsetof(Graphics_obj,_hx___commands),HX_HCSTRING("__commands","\xe8","\x23","\x8e","\x61")},
	{hx::fsBool,(int)offsetof(Graphics_obj,_hx___dirty),HX_HCSTRING("__dirty","\xf2","\xa8","\x2e","\x44")},
	{hx::fsInt,(int)offsetof(Graphics_obj,_hx___height),HX_HCSTRING("__height","\x07","\x73","\x7b","\xaa")},
	{hx::fsFloat,(int)offsetof(Graphics_obj,_hx___positionX),HX_HCSTRING("__positionX","\x6f","\x3c","\x7e","\xfe")},
	{hx::fsFloat,(int)offsetof(Graphics_obj,_hx___positionY),HX_HCSTRING("__positionY","\x70","\x3c","\x7e","\xfe")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(int)offsetof(Graphics_obj,_hx___renderTransform),HX_HCSTRING("__renderTransform","\x16","\xb8","\x95","\xb1")},
	{hx::fsFloat,(int)offsetof(Graphics_obj,_hx___strokePadding),HX_HCSTRING("__strokePadding","\xd9","\x6d","\xda","\xc4")},
	{hx::fsBool,(int)offsetof(Graphics_obj,_hx___transformDirty),HX_HCSTRING("__transformDirty","\x26","\xf6","\x91","\x84")},
	{hx::fsBool,(int)offsetof(Graphics_obj,_hx___visible),HX_HCSTRING("__visible","\x52","\xc9","\x72","\x24")},
	{hx::fsObject /*::openfl::display::DisplayObject*/ ,(int)offsetof(Graphics_obj,_hx___owner),HX_HCSTRING("__owner","\x13","\xf1","\xd4","\xa2")},
	{hx::fsInt,(int)offsetof(Graphics_obj,_hx___width),HX_HCSTRING("__width","\xe6","\x0e","\xc1","\x34")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(int)offsetof(Graphics_obj,_hx___worldTransform),HX_HCSTRING("__worldTransform","\xda","\xa7","\xd8","\x9a")},
	{hx::fsObject /*::lime::graphics::cairo::Cairo*/ ,(int)offsetof(Graphics_obj,_hx___cairo),HX_HCSTRING("__cairo","\x68","\x89","\x77","\xab")},
	{hx::fsObject /*::openfl::display::BitmapData*/ ,(int)offsetof(Graphics_obj,_hx___bitmap),HX_HCSTRING("__bitmap","\x0f","\x7b","\x3b","\x99")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Graphics_obj_sStaticStorageInfo = 0;
#endif

static ::String Graphics_obj_sMemberFields[] = {
	HX_HCSTRING("__bounds","\x95","\xf1","\x4c","\x0e"),
	HX_HCSTRING("__commands","\xe8","\x23","\x8e","\x61"),
	HX_HCSTRING("__dirty","\xf2","\xa8","\x2e","\x44"),
	HX_HCSTRING("__height","\x07","\x73","\x7b","\xaa"),
	HX_HCSTRING("__positionX","\x6f","\x3c","\x7e","\xfe"),
	HX_HCSTRING("__positionY","\x70","\x3c","\x7e","\xfe"),
	HX_HCSTRING("__renderTransform","\x16","\xb8","\x95","\xb1"),
	HX_HCSTRING("__strokePadding","\xd9","\x6d","\xda","\xc4"),
	HX_HCSTRING("__transformDirty","\x26","\xf6","\x91","\x84"),
	HX_HCSTRING("__visible","\x52","\xc9","\x72","\x24"),
	HX_HCSTRING("__owner","\x13","\xf1","\xd4","\xa2"),
	HX_HCSTRING("__width","\xe6","\x0e","\xc1","\x34"),
	HX_HCSTRING("__worldTransform","\xda","\xa7","\xd8","\x9a"),
	HX_HCSTRING("__cairo","\x68","\x89","\x77","\xab"),
	HX_HCSTRING("__bitmap","\x0f","\x7b","\x3b","\x99"),
	HX_HCSTRING("beginBitmapFill","\x9b","\xc9","\x07","\x6a"),
	HX_HCSTRING("beginFill","\x4c","\xad","\x95","\x8c"),
	HX_HCSTRING("beginGradientFill","\x5c","\x3c","\x03","\x2e"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("copyFrom","\xbf","\x0b","\x61","\xc8"),
	HX_HCSTRING("cubicCurveTo","\xe0","\x07","\x90","\x2e"),
	HX_HCSTRING("curveTo","\x0a","\x60","\x88","\xce"),
	HX_HCSTRING("drawCircle","\x34","\xed","\xd0","\x97"),
	HX_HCSTRING("drawEllipse","\x3a","\x85","\xce","\x54"),
	HX_HCSTRING("drawGraphicsData","\xb9","\xaa","\x6e","\x60"),
	HX_HCSTRING("drawPath","\xc9","\x8f","\xbb","\x5e"),
	HX_HCSTRING("drawRect","\x48","\xf7","\x10","\x60"),
	HX_HCSTRING("drawRoundRect","\xee","\xc3","\xaa","\xe2"),
	HX_HCSTRING("drawRoundRectComplex","\xe2","\x43","\x2c","\x11"),
	HX_HCSTRING("drawTriangles","\x07","\x44","\x68","\xde"),
	HX_HCSTRING("endFill","\xfe","\x87","\xe0","\x25"),
	HX_HCSTRING("lineBitmapStyle","\x2e","\x3f","\x21","\x45"),
	HX_HCSTRING("lineGradientStyle","\x8d","\x24","\xf2","\xc1"),
	HX_HCSTRING("lineStyle","\x9d","\xa8","\x18","\xcb"),
	HX_HCSTRING("lineTo","\x8f","\x46","\xa0","\xec"),
	HX_HCSTRING("moveTo","\xec","\xd2","\xac","\xcc"),
	HX_HCSTRING("readGraphicsData","\x0b","\x7d","\x00","\x87"),
	HX_HCSTRING("__calculateBezierCubicPoint","\x0b","\xc2","\xaf","\xf4"),
	HX_HCSTRING("__calculateBezierQuadPoint","\x44","\x46","\xe8","\x5e"),
	HX_HCSTRING("__cleanup","\x04","\x5d","\x90","\x2c"),
	HX_HCSTRING("__getBounds","\x8b","\x58","\xa0","\x10"),
	HX_HCSTRING("__hitTest","\x25","\xb1","\xcd","\x63"),
	HX_HCSTRING("__inflateBounds","\x3c","\x6f","\xee","\xb6"),
	HX_HCSTRING("__readGraphicsData","\x2b","\x10","\x91","\xf2"),
	HX_HCSTRING("__update","\x29","\xf1","\x34","\x2f"),
	HX_HCSTRING("set___dirty","\x15","\x10","\x96","\xd4"),
	::String(null()) };

static void Graphics_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Graphics_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Graphics_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Graphics_obj::__mClass,"__mClass");
};

#endif

hx::Class Graphics_obj::__mClass;

void Graphics_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.display.Graphics","\x35","\x67","\x20","\x87");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Graphics_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Graphics_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Graphics_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Graphics_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Graphics_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Graphics_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace display
