// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_lime__backend_native_NativeApplication
#include <lime/_backend/native/NativeApplication.h>
#endif
#ifndef INCLUDED_lime_app_Application
#include <lime/app/Application.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app_Module
#include <lime/app/Module.h>
#endif
#ifndef INCLUDED_lime_app_Preloader
#include <lime/app/Preloader.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_Application
#include <openfl/display/Application.h>
#endif
#ifndef INCLUDED_openfl_display_Window
#include <openfl/display/Window.h>
#endif

namespace openfl{
namespace display{

void Application_obj::__construct(){
            	HX_STACK_FRAME("openfl.display.Application","new",0x436ec718,"openfl.display.Application.new","openfl/display/Application.hx",12,0xe1d30bda)
            	HX_STACK_THIS(this)
HXLINE(  14)		super::__construct();
HXLINE(  16)		Bool _hx_tmp = hx::IsNull( ::openfl::Lib_obj::application );
HXDLIN(  16)		if (_hx_tmp) {
HXLINE(  18)			::openfl::Lib_obj::application = hx::ObjectPtr<OBJ_>(this);
            		}
            	}

Dynamic Application_obj::__CreateEmpty() { return new Application_obj; }

hx::ObjectPtr< Application_obj > Application_obj::__new()
{
	hx::ObjectPtr< Application_obj > _hx_result = new Application_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Application_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Application_obj > _hx_result = new Application_obj();
	_hx_result->__construct();
	return _hx_result;
}

void Application_obj::create( ::Dynamic config){
            	HX_STACK_FRAME("openfl.display.Application","create",0xb9517344,"openfl.display.Application.create","openfl/display/Application.hx",25,0xe1d30bda)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(config,"config")
HXLINE(  27)		this->config = config;
HXLINE(  29)		this->backend->create(config);
HXLINE(  31)		Bool _hx_tmp = hx::IsNotNull( config );
HXDLIN(  31)		if (_hx_tmp) {
HXLINE(  33)			Bool _hx_tmp1 = ::Reflect_obj::hasField(config,HX_("fps",e9,c7,4d,00));
HXDLIN(  33)			if (_hx_tmp1) {
HXLINE(  35)				Float value = ( (Float)(config->__Field(HX_("fps",e9,c7,4d,00),hx::paccDynamic)) );
HXDLIN(  35)				this->backend->setFrameRate(value);
            			}
HXLINE(  39)			Bool _hx_tmp2 = ::Reflect_obj::hasField(config,HX_("windows",83,de,74,e8));
HXDLIN(  39)			if (_hx_tmp2) {
HXLINE(  41)				HX_VARI( Int,_g) = (int)0;
HXDLIN(  41)				HX_VARI( ::Array< ::Dynamic>,_g1) = ( (::Array< ::Dynamic>)(config->__Field(HX_("windows",83,de,74,e8),hx::paccDynamic)) );
HXDLIN(  41)				while((_g < _g1->length)){
HXLINE(  41)					HX_VARI(  ::Dynamic,windowConfig) = _g1->__get(_g);
HXDLIN(  41)					++_g;
HXLINE(  43)					HX_VARI(  ::openfl::display::Window,window) =  ::openfl::display::Window_obj::__new(windowConfig);
HXLINE(  44)					this->createWindow(window);
            				}
            			}
HXLINE(  54)			Bool _hx_tmp3;
HXDLIN(  54)			Bool _hx_tmp4 = hx::IsNotNull( this->_hx___preloader );
HXDLIN(  54)			if (_hx_tmp4) {
HXLINE(  54)				_hx_tmp3 = this->_hx___preloader->complete;
            			}
            			else {
HXLINE(  54)				_hx_tmp3 = true;
            			}
HXDLIN(  54)			if (_hx_tmp3) {
HXLINE(  56)				this->onPreloadComplete();
            			}
            		}
            	}



Application_obj::Application_obj()
{
}

hx::Val Application_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return hx::Val( create_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Application_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Application_obj_sStaticStorageInfo = 0;
#endif

static ::String Application_obj_sMemberFields[] = {
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	::String(null()) };

static void Application_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Application_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Application_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Application_obj::__mClass,"__mClass");
};

#endif

hx::Class Application_obj::__mClass;

void Application_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.display.Application","\x26","\x9b","\x0f","\x74");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Application_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Application_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Application_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Application_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Application_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Application_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace display
