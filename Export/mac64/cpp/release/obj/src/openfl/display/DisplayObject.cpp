// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_graphics_GLRenderContext
#include <lime/graphics/GLRenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo_Cairo
#include <lime/graphics/cairo/Cairo.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GL
#include <lime/graphics/opengl/GL.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLBuffer
#include <lime/graphics/opengl/GLBuffer.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_lime_ui_MouseCursor
#include <lime/ui/MouseCursor.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_AbstractBlendModeManager
#include <openfl/_internal/renderer/AbstractBlendModeManager.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_AbstractFilterManager
#include <openfl/_internal/renderer/AbstractFilterManager.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_AbstractMaskManager
#include <openfl/_internal/renderer/AbstractMaskManager.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_AbstractRenderer
#include <openfl/_internal/renderer/AbstractRenderer.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_AbstractShaderManager
#include <openfl/_internal/renderer/AbstractShaderManager.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_DrawCommandBuffer
#include <openfl/_internal/renderer/DrawCommandBuffer.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_RenderSession
#include <openfl/_internal/renderer/RenderSession.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_cairo_CairoDisplayObject
#include <openfl/_internal/renderer/cairo/CairoDisplayObject.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_cairo_CairoGraphics
#include <openfl/_internal/renderer/cairo/CairoGraphics.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_canvas_CanvasGraphics
#include <openfl/_internal/renderer/canvas/CanvasGraphics.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_GLRenderer
#include <openfl/_internal/renderer/opengl/GLRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_LoaderInfo
#include <openfl/display/LoaderInfo.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderData
#include <openfl/display/ShaderData.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderInput_openfl_display_BitmapData
#include <openfl/display/ShaderInput_openfl_display_BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderParameter_Float
#include <openfl/display/ShaderParameter_Float.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_errors_TypeError
#include <openfl/errors/TypeError.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_events_TouchEvent
#include <openfl/events/TouchEvent.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_geom_Transform
#include <openfl/geom/Transform.h>
#endif

namespace openfl{
namespace display{

void DisplayObject_obj::__construct(){
            	HX_STACK_FRAME("openfl.display.DisplayObject","new",0xb225b469,"openfl.display.DisplayObject.new","openfl/display/DisplayObject.hx",124,0xc7539829)
            	HX_STACK_THIS(this)
HXLINE( 126)		super::__construct(null());
HXLINE( 128)		this->_hx___alpha = (int)1;
HXLINE( 129)		this->_hx___blendMode = (int)10;
HXLINE( 130)		this->_hx___cacheAsBitmap = false;
HXLINE( 131)		this->_hx___transform =  ::openfl::geom::Matrix_obj::__new(null(),null(),null(),null(),null(),null());
HXLINE( 132)		this->_hx___visible = true;
HXLINE( 134)		this->_hx___rotation = (int)0;
HXLINE( 135)		this->_hx___rotationSine = (int)0;
HXLINE( 136)		this->_hx___rotationCosine = (int)1;
HXLINE( 138)		this->_hx___worldAlpha = (int)1;
HXLINE( 139)		this->_hx___worldTransform =  ::openfl::geom::Matrix_obj::__new(null(),null(),null(),null(),null(),null());
HXLINE( 140)		this->_hx___worldColorTransform =  ::openfl::geom::ColorTransform_obj::__new(null(),null(),null(),null(),null(),null(),null(),null());
HXLINE( 141)		this->_hx___renderTransform =  ::openfl::geom::Matrix_obj::__new(null(),null(),null(),null(),null(),null());
HXLINE( 147)		::String _hx_tmp = (HX_("instance",95,1f,e1,59) + ++::openfl::display::DisplayObject_obj::_hx___instanceCount);
HXDLIN( 147)		this->set_name(_hx_tmp);
            	}

Dynamic DisplayObject_obj::__CreateEmpty() { return new DisplayObject_obj; }

hx::ObjectPtr< DisplayObject_obj > DisplayObject_obj::__new()
{
	hx::ObjectPtr< DisplayObject_obj > _hx_result = new DisplayObject_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic DisplayObject_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< DisplayObject_obj > _hx_result = new DisplayObject_obj();
	_hx_result->__construct();
	return _hx_result;
}

static ::openfl::display::IBitmapDrawable_obj _hx_openfl_display_DisplayObject__hx_openfl_display_IBitmapDrawable= {
	( void (hx::Object::*)( ::openfl::_internal::renderer::RenderSession))&::openfl::display::DisplayObject_obj::_hx___renderCairo,
	( void (hx::Object::*)( ::openfl::_internal::renderer::RenderSession))&::openfl::display::DisplayObject_obj::_hx___renderCairoMask,
	( void (hx::Object::*)( ::openfl::_internal::renderer::RenderSession))&::openfl::display::DisplayObject_obj::_hx___renderCanvas,
	( void (hx::Object::*)( ::openfl::_internal::renderer::RenderSession))&::openfl::display::DisplayObject_obj::_hx___renderCanvasMask,
	( void (hx::Object::*)( ::openfl::_internal::renderer::RenderSession))&::openfl::display::DisplayObject_obj::_hx___renderGL,
	( void (hx::Object::*)(Bool))&::openfl::display::DisplayObject_obj::_hx___updateChildren,
	( void (hx::Object::*)( ::openfl::geom::Matrix))&::openfl::display::DisplayObject_obj::_hx___updateTransforms,
	( void (hx::Object::*)( ::openfl::display::Graphics))&::openfl::display::DisplayObject_obj::_hx___updateMask,
};

void *DisplayObject_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xc1c6fbe4: return &_hx_openfl_display_DisplayObject__hx_openfl_display_IBitmapDrawable;
	}
	return super::_hx_getInterface(inHash);
}

void DisplayObject_obj::addEventListener(::String type, ::Dynamic listener,hx::Null< Bool >  __o_useCapture,hx::Null< Int >  __o_priority,hx::Null< Bool >  __o_useWeakReference){
Bool useCapture = __o_useCapture.Default(false);
Int priority = __o_priority.Default(0);
Bool useWeakReference = __o_useWeakReference.Default(false);
            	HX_STACK_FRAME("openfl.display.DisplayObject","addEventListener",0xe74b9624,"openfl.display.DisplayObject.addEventListener","openfl/display/DisplayObject.hx",152,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(type,"type")
            	HX_STACK_ARG(listener,"listener")
            	HX_STACK_ARG(useCapture,"useCapture")
            	HX_STACK_ARG(priority,"priority")
            	HX_STACK_ARG(useWeakReference,"useWeakReference")
HXLINE( 154)		::String _hx_switch_0 = type;
            		if (  (_hx_switch_0==HX_("activate",b3,1b,ac,e5)) ||  (_hx_switch_0==HX_("deactivate",34,5c,01,3c)) ||  (_hx_switch_0==HX_("enterFrame",f5,03,50,02)) ||  (_hx_switch_0==HX_("exitFrame",2f,64,48,12)) ||  (_hx_switch_0==HX_("frameConstructed",09,89,5d,98)) ||  (_hx_switch_0==HX_("render",56,6b,29,05)) ){
HXLINE( 158)			Bool _hx_tmp = !(::openfl::display::DisplayObject_obj::_hx___broadcastEvents->exists(type));
HXDLIN( 158)			if (_hx_tmp) {
HXLINE( 160)				::openfl::display::DisplayObject_obj::_hx___broadcastEvents->set(type,::Array_obj< ::Dynamic>::__new(0));
            			}
HXLINE( 164)			HX_VARI( ::Array< ::Dynamic>,dispatchers) = ( (::Array< ::Dynamic>)(::openfl::display::DisplayObject_obj::_hx___broadcastEvents->get(type)) );
HXLINE( 166)			Int _hx_tmp1 = dispatchers->indexOf(hx::ObjectPtr<OBJ_>(this),null());
HXDLIN( 166)			if ((_hx_tmp1 == (int)-1)) {
HXLINE( 168)				dispatchers->push(hx::ObjectPtr<OBJ_>(this));
            			}
HXLINE( 156)			goto _hx_goto_0;
            		}
            		/* default */{
            		}
            		_hx_goto_0:;
HXLINE( 176)		this->super::addEventListener(type,listener,useCapture,priority,useWeakReference);
            	}


Bool DisplayObject_obj::dispatchEvent( ::openfl::events::Event event){
            	HX_STACK_FRAME("openfl.display.DisplayObject","dispatchEvent",0xe6cd7049,"openfl.display.DisplayObject.dispatchEvent","openfl/display/DisplayObject.hx",181,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(event,"event")
HXLINE( 183)		Bool _hx_tmp = ::Std_obj::is(event,hx::ClassOf< ::openfl::events::MouseEvent >());
HXDLIN( 183)		if (_hx_tmp) {
HXLINE( 185)			HX_VARI(  ::openfl::events::MouseEvent,mouseEvent) = ( ( ::openfl::events::MouseEvent)(event) );
HXLINE( 186)			HX_VARI(  ::openfl::geom::Matrix,_this) = this->_hx___getRenderTransform();
HXDLIN( 186)			Float _hx_tmp1 = (((mouseEvent->localX * _this->a) + (mouseEvent->localY * _this->c)) + _this->tx);
HXDLIN( 186)			mouseEvent->stageX = _hx_tmp1;
HXLINE( 187)			HX_VARI_NAME(  ::openfl::geom::Matrix,_this1,"_this") = this->_hx___getRenderTransform();
HXDLIN( 187)			Float _hx_tmp2 = (((mouseEvent->localX * _this1->b) + (mouseEvent->localY * _this1->d)) + _this1->ty);
HXDLIN( 187)			mouseEvent->stageY = _hx_tmp2;
            		}
            		else {
HXLINE( 189)			Bool _hx_tmp3 = ::Std_obj::is(event,hx::ClassOf< ::openfl::events::TouchEvent >());
HXDLIN( 189)			if (_hx_tmp3) {
HXLINE( 191)				HX_VARI(  ::openfl::events::TouchEvent,touchEvent) = ( ( ::openfl::events::TouchEvent)(event) );
HXLINE( 192)				HX_VARI_NAME(  ::openfl::geom::Matrix,_this2,"_this") = this->_hx___getRenderTransform();
HXDLIN( 192)				Float _hx_tmp4 = (((touchEvent->localX * _this2->a) + (touchEvent->localY * _this2->c)) + _this2->tx);
HXDLIN( 192)				touchEvent->stageX = _hx_tmp4;
HXLINE( 193)				HX_VARI_NAME(  ::openfl::geom::Matrix,_this3,"_this") = this->_hx___getRenderTransform();
HXDLIN( 193)				Float _hx_tmp5 = (((touchEvent->localX * _this3->b) + (touchEvent->localY * _this3->d)) + _this3->ty);
HXDLIN( 193)				touchEvent->stageY = _hx_tmp5;
            			}
            		}
HXLINE( 197)		return this->super::dispatchEvent(event);
            	}


 ::openfl::geom::Rectangle DisplayObject_obj::getBounds( ::openfl::display::DisplayObject targetCoordinateSpace){
            	HX_STACK_FRAME("openfl.display.DisplayObject","getBounds",0xdb0a2074,"openfl.display.DisplayObject.getBounds","openfl/display/DisplayObject.hx",202,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(targetCoordinateSpace,"targetCoordinateSpace")
HXLINE( 204)		HX_VAR(  ::openfl::geom::Matrix,matrix);
HXLINE( 206)		Bool _hx_tmp = hx::IsNotNull( targetCoordinateSpace );
HXDLIN( 206)		if (_hx_tmp) {
HXLINE( 208)			matrix = this->_hx___getWorldTransform()->clone();
HXLINE( 209)			 ::openfl::geom::Matrix _hx_tmp1 = targetCoordinateSpace->_hx___getWorldTransform()->clone()->invert();
HXDLIN( 209)			matrix->concat(_hx_tmp1);
            		}
            		else {
HXLINE( 213)			matrix = ::openfl::geom::Matrix_obj::_hx___temp;
HXLINE( 214)			matrix->identity();
            		}
HXLINE( 218)		HX_VARI(  ::openfl::geom::Rectangle,bounds) =  ::openfl::geom::Rectangle_obj::__new(null(),null(),null(),null());
HXLINE( 219)		this->_hx___getBounds(bounds,matrix);
HXLINE( 221)		return bounds;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,getBounds,return )

 ::openfl::geom::Rectangle DisplayObject_obj::getRect( ::openfl::display::DisplayObject targetCoordinateSpace){
            	HX_STACK_FRAME("openfl.display.DisplayObject","getRect",0x17591963,"openfl.display.DisplayObject.getRect","openfl/display/DisplayObject.hx",229,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(targetCoordinateSpace,"targetCoordinateSpace")
HXLINE( 229)		return this->getBounds(targetCoordinateSpace);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,getRect,return )

 ::openfl::geom::Point DisplayObject_obj::globalToLocal( ::openfl::geom::Point pos){
            	HX_STACK_FRAME("openfl.display.DisplayObject","globalToLocal",0x8c16f816,"openfl.display.DisplayObject.globalToLocal","openfl/display/DisplayObject.hx",234,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pos,"pos")
HXLINE( 236)		pos = pos->clone();
HXLINE( 237)		{
HXLINE( 237)			HX_VARI(  ::openfl::geom::Matrix,_this) = this->_hx___getRenderTransform();
HXDLIN( 237)			HX_VARI( Float,norm) = ((_this->a * _this->d) - (_this->b * _this->c));
HXDLIN( 237)			if ((norm == (int)0)) {
HXLINE( 237)				pos->x = -(_this->tx);
HXDLIN( 237)				pos->y = -(_this->ty);
            			}
            			else {
HXLINE( 237)				HX_VARI( Float,px) = (((Float)((Float)1.0) / (Float)norm) * ((_this->c * (_this->ty - pos->y)) + (_this->d * (pos->x - _this->tx))));
HXDLIN( 237)				Float _hx_tmp = ((Float)((Float)1.0) / (Float)norm);
HXDLIN( 237)				Float _hx_tmp1 = (_this->a * (pos->y - _this->ty));
HXDLIN( 237)				Float _hx_tmp2 = (_this->b * (_this->tx - pos->x));
HXDLIN( 237)				pos->y = (_hx_tmp * (_hx_tmp1 + _hx_tmp2));
HXDLIN( 237)				pos->x = px;
            			}
            		}
HXLINE( 238)		return pos;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,globalToLocal,return )

Bool DisplayObject_obj::hitTestObject( ::openfl::display::DisplayObject obj){
            	HX_STACK_FRAME("openfl.display.DisplayObject","hitTestObject",0xf7ccfe2d,"openfl.display.DisplayObject.hitTestObject","openfl/display/DisplayObject.hx",243,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE( 245)		Bool _hx_tmp;
HXDLIN( 245)		Bool _hx_tmp1;
HXDLIN( 245)		Bool _hx_tmp2 = hx::IsNotNull( obj );
HXDLIN( 245)		if (_hx_tmp2) {
HXLINE( 245)			_hx_tmp1 = hx::IsNotNull( obj->parent );
            		}
            		else {
HXLINE( 245)			_hx_tmp1 = false;
            		}
HXDLIN( 245)		if (_hx_tmp1) {
HXLINE( 245)			_hx_tmp = hx::IsNotNull( this->parent );
            		}
            		else {
HXLINE( 245)			_hx_tmp = false;
            		}
HXDLIN( 245)		if (_hx_tmp) {
HXLINE( 247)			HX_VARI(  ::openfl::geom::Rectangle,currentBounds) = this->getBounds(hx::ObjectPtr<OBJ_>(this));
HXLINE( 248)			HX_VARI(  ::openfl::geom::Rectangle,targetBounds) = obj->getBounds(hx::ObjectPtr<OBJ_>(this));
HXLINE( 250)			return currentBounds->intersects(targetBounds);
            		}
HXLINE( 254)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,hitTestObject,return )

Bool DisplayObject_obj::hitTestPoint(Float x,Float y,hx::Null< Bool >  __o_shapeFlag){
Bool shapeFlag = __o_shapeFlag.Default(false);
            	HX_STACK_FRAME("openfl.display.DisplayObject","hitTestPoint",0x05917ca2,"openfl.display.DisplayObject.hitTestPoint","openfl/display/DisplayObject.hx",261,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(shapeFlag,"shapeFlag")
HXLINE( 261)		Bool _hx_tmp = hx::IsNotNull( this->stage );
HXDLIN( 261)		if (_hx_tmp) {
HXLINE( 263)			return this->_hx___hitTest(x,y,shapeFlag,null(),false,hx::ObjectPtr<OBJ_>(this));
            		}
            		else {
HXLINE( 267)			return false;
            		}
HXLINE( 261)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC3(DisplayObject_obj,hitTestPoint,return )

 ::openfl::geom::Point DisplayObject_obj::localToGlobal( ::openfl::geom::Point point){
            	HX_STACK_FRAME("openfl.display.DisplayObject","localToGlobal",0x6853eb12,"openfl.display.DisplayObject.localToGlobal","openfl/display/DisplayObject.hx",276,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(point,"point")
HXLINE( 276)		return this->_hx___getRenderTransform()->transformPoint(point);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,localToGlobal,return )

void DisplayObject_obj::removeEventListener(::String type, ::Dynamic listener,hx::Null< Bool >  __o_useCapture){
Bool useCapture = __o_useCapture.Default(false);
            	HX_STACK_FRAME("openfl.display.DisplayObject","removeEventListener",0x3ae1cdd3,"openfl.display.DisplayObject.removeEventListener","openfl/display/DisplayObject.hx",281,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(type,"type")
            	HX_STACK_ARG(listener,"listener")
            	HX_STACK_ARG(useCapture,"useCapture")
HXLINE( 283)		this->super::removeEventListener(type,listener,useCapture);
HXLINE( 285)		::String _hx_switch_0 = type;
            		if (  (_hx_switch_0==HX_("activate",b3,1b,ac,e5)) ||  (_hx_switch_0==HX_("deactivate",34,5c,01,3c)) ||  (_hx_switch_0==HX_("enterFrame",f5,03,50,02)) ||  (_hx_switch_0==HX_("exitFrame",2f,64,48,12)) ||  (_hx_switch_0==HX_("frameConstructed",09,89,5d,98)) ||  (_hx_switch_0==HX_("render",56,6b,29,05)) ){
HXLINE( 289)			Bool _hx_tmp = !(this->hasEventListener(type));
HXDLIN( 289)			if (_hx_tmp) {
HXLINE( 291)				Bool _hx_tmp1 = ::openfl::display::DisplayObject_obj::_hx___broadcastEvents->exists(type);
HXDLIN( 291)				if (_hx_tmp1) {
HXLINE( 293)					( (::Array< ::Dynamic>)(::openfl::display::DisplayObject_obj::_hx___broadcastEvents->get(type)) )->remove(hx::ObjectPtr<OBJ_>(this));
            				}
            			}
HXLINE( 289)			goto _hx_goto_1;
            		}
            		/* default */{
            		}
            		_hx_goto_1:;
            	}


void DisplayObject_obj::_hx___cleanup(){
            	HX_STACK_FRAME("openfl.display.DisplayObject","__cleanup",0x25266dcd,"openfl.display.DisplayObject.__cleanup","openfl/display/DisplayObject.hx",306,0xc7539829)
            	HX_STACK_THIS(this)
HXLINE( 308)		this->_hx___cairo = null();
HXLINE( 315)		Bool _hx_tmp = hx::IsNotNull( this->_hx___graphics );
HXDLIN( 315)		if (_hx_tmp) {
HXLINE( 317)			this->_hx___graphics->_hx___cleanup();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,_hx___cleanup,(void))

Bool DisplayObject_obj::_hx___dispatch( ::openfl::events::Event event){
            	HX_STACK_FRAME("openfl.display.DisplayObject","__dispatch",0x4c54e0f1,"openfl.display.DisplayObject.__dispatch","openfl/display/DisplayObject.hx",324,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(event,"event")
HXLINE( 326)		Bool _hx_tmp;
HXDLIN( 326)		Bool _hx_tmp1 = hx::IsNotNull( this->_hx___eventMap );
HXDLIN( 326)		if (_hx_tmp1) {
HXLINE( 326)			_hx_tmp = this->hasEventListener(event->type);
            		}
            		else {
HXLINE( 326)			_hx_tmp = false;
            		}
HXDLIN( 326)		if (_hx_tmp) {
HXLINE( 328)			HX_VARI( Bool,result) = this->super::_hx___dispatchEvent(event);
HXLINE( 330)			if (event->_hx___isCanceled) {
HXLINE( 332)				return false;
            			}
HXLINE( 336)			return result;
            		}
HXLINE( 340)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___dispatch,return )

Bool DisplayObject_obj::_hx___dispatchChildren( ::openfl::events::Event event){
            	HX_STACK_FRAME("openfl.display.DisplayObject","__dispatchChildren",0xdb948f50,"openfl.display.DisplayObject.__dispatchChildren","openfl/display/DisplayObject.hx",347,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(event,"event")
HXLINE( 347)		return this->_hx___dispatchEvent(event);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___dispatchChildren,return )

Bool DisplayObject_obj::_hx___dispatchEvent( ::openfl::events::Event event){
            	HX_STACK_FRAME("openfl.display.DisplayObject","__dispatchEvent",0xd8f34d69,"openfl.display.DisplayObject.__dispatchEvent","openfl/display/DisplayObject.hx",352,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(event,"event")
HXLINE( 354)		HX_VARI( Bool,result) = this->super::_hx___dispatchEvent(event);
HXLINE( 356)		if (event->_hx___isCanceled) {
HXLINE( 358)			return false;
            		}
HXLINE( 362)		Bool _hx_tmp;
HXDLIN( 362)		Bool _hx_tmp1;
HXDLIN( 362)		if (event->bubbles) {
HXLINE( 362)			_hx_tmp1 = hx::IsNotNull( this->parent );
            		}
            		else {
HXLINE( 362)			_hx_tmp1 = false;
            		}
HXDLIN( 362)		if (_hx_tmp1) {
HXLINE( 362)			_hx_tmp = hx::IsNotEq( this->parent,hx::ObjectPtr<OBJ_>(this) );
            		}
            		else {
HXLINE( 362)			_hx_tmp = false;
            		}
HXDLIN( 362)		if (_hx_tmp) {
HXLINE( 364)			event->eventPhase = (int)3;
HXLINE( 366)			Bool _hx_tmp2 = hx::IsNull( event->target );
HXDLIN( 366)			if (_hx_tmp2) {
HXLINE( 368)				event->target = hx::ObjectPtr<OBJ_>(this);
            			}
HXLINE( 372)			this->parent->_hx___dispatchEvent(event);
            		}
HXLINE( 376)		return result;
            	}


void DisplayObject_obj::_hx___enterFrame(Int deltaTime){
            	HX_STACK_FRAME("openfl.display.DisplayObject","__enterFrame",0x5c5351ec,"openfl.display.DisplayObject.__enterFrame","openfl/display/DisplayObject.hx",381,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(deltaTime,"deltaTime")
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___enterFrame,(void))

void DisplayObject_obj::_hx___getBounds( ::openfl::geom::Rectangle rect, ::openfl::geom::Matrix matrix){
            	HX_STACK_FRAME("openfl.display.DisplayObject","__getBounds",0xe772ed94,"openfl.display.DisplayObject.__getBounds","openfl/display/DisplayObject.hx",390,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(rect,"rect")
            	HX_STACK_ARG(matrix,"matrix")
HXLINE( 390)		Bool _hx_tmp = hx::IsNotNull( this->_hx___graphics );
HXDLIN( 390)		if (_hx_tmp) {
HXLINE( 392)			this->_hx___graphics->_hx___getBounds(rect,matrix);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObject_obj,_hx___getBounds,(void))

::hx::EnumBase DisplayObject_obj::_hx___getCursor(){
            	HX_STACK_FRAME("openfl.display.DisplayObject","__getCursor",0xc03df5f5,"openfl.display.DisplayObject.__getCursor","openfl/display/DisplayObject.hx",401,0xc7539829)
            	HX_STACK_THIS(this)
HXLINE( 401)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,_hx___getCursor,return )

Bool DisplayObject_obj::_hx___getInteractive(::Array< ::Dynamic> stack){
            	HX_STACK_FRAME("openfl.display.DisplayObject","__getInteractive",0xee1ea663,"openfl.display.DisplayObject.__getInteractive","openfl/display/DisplayObject.hx",408,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(stack,"stack")
HXLINE( 408)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___getInteractive,return )

void DisplayObject_obj::_hx___getLocalBounds( ::openfl::geom::Rectangle rect){
            	HX_STACK_FRAME("openfl.display.DisplayObject","__getLocalBounds",0xd51d8ec1,"openfl.display.DisplayObject.__getLocalBounds","openfl/display/DisplayObject.hx",415,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(rect,"rect")
HXLINE( 415)		this->_hx___getBounds(rect,this->_hx___transform);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___getLocalBounds,(void))

void DisplayObject_obj::_hx___getRenderBounds( ::openfl::geom::Rectangle rect, ::openfl::geom::Matrix matrix){
            	HX_STACK_FRAME("openfl.display.DisplayObject","__getRenderBounds",0xb06992ca,"openfl.display.DisplayObject.__getRenderBounds","openfl/display/DisplayObject.hx",422,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(rect,"rect")
            	HX_STACK_ARG(matrix,"matrix")
HXLINE( 422)		Bool _hx_tmp = hx::IsNull( this->_hx___scrollRect );
HXDLIN( 422)		if (_hx_tmp) {
HXLINE( 424)			this->_hx___getBounds(rect,matrix);
            		}
            		else {
HXLINE( 428)			HX_VARI(  ::openfl::geom::Rectangle,r) = ::openfl::geom::Rectangle_obj::_hx___temp;
HXLINE( 429)			r->copyFrom(this->_hx___scrollRect);
HXLINE( 430)			r->_hx___transform(r,matrix);
HXLINE( 431)			rect->_hx___expand(matrix->tx,matrix->ty,r->width,r->height);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObject_obj,_hx___getRenderBounds,(void))

 ::openfl::geom::Matrix DisplayObject_obj::_hx___getRenderTransform(){
            	HX_STACK_FRAME("openfl.display.DisplayObject","__getRenderTransform",0x9985c437,"openfl.display.DisplayObject.__getRenderTransform","openfl/display/DisplayObject.hx",438,0xc7539829)
            	HX_STACK_THIS(this)
HXLINE( 440)		this->_hx___getWorldTransform();
HXLINE( 441)		return this->_hx___renderTransform;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,_hx___getRenderTransform,return )

 ::openfl::geom::Matrix DisplayObject_obj::_hx___getWorldTransform(){
            	HX_STACK_FRAME("openfl.display.DisplayObject","__getWorldTransform",0x71693ad9,"openfl.display.DisplayObject.__getWorldTransform","openfl/display/DisplayObject.hx",446,0xc7539829)
            	HX_STACK_THIS(this)
HXLINE( 448)		Bool _hx_tmp;
HXDLIN( 448)		if (!(this->_hx___transformDirty)) {
HXLINE( 448)			_hx_tmp = (::openfl::display::DisplayObject_obj::_hx___worldTransformDirty > (int)0);
            		}
            		else {
HXLINE( 448)			_hx_tmp = true;
            		}
HXDLIN( 448)		if (_hx_tmp) {
HXLINE( 450)			HX_VARI( ::Array< ::Dynamic>,list) = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 451)			HX_VARI(  ::openfl::display::DisplayObject,current) = hx::ObjectPtr<OBJ_>(this);
HXLINE( 452)			HX_VARI( Bool,transformDirty) = this->_hx___transformDirty;
HXLINE( 454)			Bool _hx_tmp1 = hx::IsNull( this->parent );
HXDLIN( 454)			if (_hx_tmp1) {
HXLINE( 456)				if (transformDirty) {
HXLINE( 456)					this->_hx___update(true,false,null());
            				}
            			}
            			else {
HXLINE( 460)				while(hx::IsNotEq( current,this->stage )){
HXLINE( 462)					list->push(current);
HXLINE( 463)					current = current->parent;
HXLINE( 465)					Bool _hx_tmp2;
HXDLIN( 465)					if (hx::IsNotEq( current,this->stage )) {
HXLINE( 465)						_hx_tmp2 = current->_hx___transformDirty;
            					}
            					else {
HXLINE( 465)						_hx_tmp2 = false;
            					}
HXDLIN( 465)					if (_hx_tmp2) {
HXLINE( 467)						transformDirty = true;
            					}
            				}
            			}
HXLINE( 475)			if (transformDirty) {
HXLINE( 477)				HX_VARI( Int,i) = list->length;
HXLINE( 478)				while(true){
HXLINE( 478)					Int _hx_tmp3 = --i;
HXDLIN( 478)					if (!((_hx_tmp3 >= (int)0))) {
HXLINE( 478)						goto _hx_goto_3;
            					}
HXLINE( 480)					list->__get(i).StaticCast<  ::openfl::display::DisplayObject >()->_hx___update(true,false,null());
            				}
            				_hx_goto_3:;
            			}
            		}
HXLINE( 488)		return this->_hx___worldTransform;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,_hx___getWorldTransform,return )

Bool DisplayObject_obj::_hx___hitTest(Float x,Float y,Bool shapeFlag,::Array< ::Dynamic> stack,Bool interactiveOnly, ::openfl::display::DisplayObject hitObject){
            	HX_STACK_FRAME("openfl.display.DisplayObject","__hitTest",0x5c63c1ee,"openfl.display.DisplayObject.__hitTest","openfl/display/DisplayObject.hx",493,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(shapeFlag,"shapeFlag")
            	HX_STACK_ARG(stack,"stack")
            	HX_STACK_ARG(interactiveOnly,"interactiveOnly")
            	HX_STACK_ARG(hitObject,"hitObject")
HXLINE( 495)		Bool _hx_tmp = hx::IsNotNull( this->_hx___graphics );
HXDLIN( 495)		if (_hx_tmp) {
HXLINE( 497)			Bool _hx_tmp1;
HXDLIN( 497)			Bool _hx_tmp2 = !(!(hitObject->get_visible()));
HXDLIN( 497)			if (_hx_tmp2) {
HXLINE( 497)				_hx_tmp1 = this->_hx___isMask;
            			}
            			else {
HXLINE( 497)				_hx_tmp1 = true;
            			}
HXDLIN( 497)			if (_hx_tmp1) {
HXLINE( 497)				return false;
            			}
HXLINE( 498)			Bool _hx_tmp3;
HXDLIN( 498)			 ::openfl::display::DisplayObject _hx_tmp4 = this->get_mask();
HXDLIN( 498)			Bool _hx_tmp5 = hx::IsNotNull( _hx_tmp4 );
HXDLIN( 498)			if (_hx_tmp5) {
HXLINE( 498)				_hx_tmp3 = !(this->get_mask()->_hx___hitTestMask(x,y));
            			}
            			else {
HXLINE( 498)				_hx_tmp3 = false;
            			}
HXDLIN( 498)			if (_hx_tmp3) {
HXLINE( 498)				return false;
            			}
HXLINE( 500)			 ::openfl::geom::Matrix _hx_tmp6 = this->_hx___getRenderTransform();
HXDLIN( 500)			Bool _hx_tmp7 = this->_hx___graphics->_hx___hitTest(x,y,shapeFlag,_hx_tmp6);
HXDLIN( 500)			if (_hx_tmp7) {
HXLINE( 502)				Bool _hx_tmp8;
HXDLIN( 502)				Bool _hx_tmp9 = hx::IsNotNull( stack );
HXDLIN( 502)				if (_hx_tmp9) {
HXLINE( 502)					_hx_tmp8 = !(interactiveOnly);
            				}
            				else {
HXLINE( 502)					_hx_tmp8 = false;
            				}
HXDLIN( 502)				if (_hx_tmp8) {
HXLINE( 504)					stack->push(hitObject);
            				}
HXLINE( 508)				return true;
            			}
            		}
HXLINE( 514)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC6(DisplayObject_obj,_hx___hitTest,return )

Bool DisplayObject_obj::_hx___hitTestMask(Float x,Float y){
            	HX_STACK_FRAME("openfl.display.DisplayObject","__hitTestMask",0x5c65bdfa,"openfl.display.DisplayObject.__hitTestMask","openfl/display/DisplayObject.hx",519,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE( 521)		Bool _hx_tmp = hx::IsNotNull( this->_hx___graphics );
HXDLIN( 521)		if (_hx_tmp) {
HXLINE( 523)			 ::openfl::geom::Matrix _hx_tmp1 = this->_hx___getRenderTransform();
HXDLIN( 523)			Bool _hx_tmp2 = this->_hx___graphics->_hx___hitTest(x,y,true,_hx_tmp1);
HXDLIN( 523)			if (_hx_tmp2) {
HXLINE( 525)				return true;
            			}
            		}
HXLINE( 531)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObject_obj,_hx___hitTestMask,return )

void DisplayObject_obj::_hx___readGraphicsData( ::openfl::_Vector::ObjectVector graphicsData,Bool recurse){
            	HX_STACK_FRAME("openfl.display.DisplayObject","__readGraphicsData",0xd9311e42,"openfl.display.DisplayObject.__readGraphicsData","openfl/display/DisplayObject.hx",538,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(graphicsData,"graphicsData")
            	HX_STACK_ARG(recurse,"recurse")
HXLINE( 538)		Bool _hx_tmp = hx::IsNotNull( this->_hx___graphics );
HXDLIN( 538)		if (_hx_tmp) {
HXLINE( 540)			this->_hx___graphics->_hx___readGraphicsData(graphicsData);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObject_obj,_hx___readGraphicsData,(void))

void DisplayObject_obj::_hx___renderCairo( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACK_FRAME("openfl.display.DisplayObject","__renderCairo",0x75ab477b,"openfl.display.DisplayObject.__renderCairo","openfl/display/DisplayObject.hx",549,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(renderSession,"renderSession")
HXLINE( 549)		::openfl::_internal::renderer::cairo::CairoDisplayObject_obj::render(hx::ObjectPtr<OBJ_>(this),renderSession);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___renderCairo,(void))

void DisplayObject_obj::_hx___renderCairoMask( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACK_FRAME("openfl.display.DisplayObject","__renderCairoMask",0x9fd38e07,"openfl.display.DisplayObject.__renderCairoMask","openfl/display/DisplayObject.hx",556,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(renderSession,"renderSession")
HXLINE( 556)		Bool _hx_tmp = hx::IsNotNull( this->_hx___graphics );
HXDLIN( 556)		if (_hx_tmp) {
HXLINE( 558)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::renderMask(this->_hx___graphics,renderSession);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___renderCairoMask,(void))

void DisplayObject_obj::_hx___renderCanvas( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACK_FRAME("openfl.display.DisplayObject","__renderCanvas",0x83845285,"openfl.display.DisplayObject.__renderCanvas","openfl/display/DisplayObject.hx",567,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(renderSession,"renderSession")
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___renderCanvas,(void))

void DisplayObject_obj::_hx___renderCanvasMask( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACK_FRAME("openfl.display.DisplayObject","__renderCanvasMask",0x388fe611,"openfl.display.DisplayObject.__renderCanvasMask","openfl/display/DisplayObject.hx",574,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(renderSession,"renderSession")
HXLINE( 574)		Bool _hx_tmp = hx::IsNotNull( this->_hx___graphics );
HXDLIN( 574)		if (_hx_tmp) {
HXLINE( 576)			::openfl::_internal::renderer::canvas::CanvasGraphics_obj::renderMask(this->_hx___graphics,renderSession);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___renderCanvasMask,(void))

void DisplayObject_obj::_hx___renderDOM( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACK_FRAME("openfl.display.DisplayObject","__renderDOM",0xd2568ab5,"openfl.display.DisplayObject.__renderDOM","openfl/display/DisplayObject.hx",585,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(renderSession,"renderSession")
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___renderDOM,(void))

void DisplayObject_obj::_hx___renderGL( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACK_FRAME("openfl.display.DisplayObject","__renderGL",0xe0ccbd32,"openfl.display.DisplayObject.__renderGL","openfl/display/DisplayObject.hx",592,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(renderSession,"renderSession")
HXLINE( 592)		Bool _hx_tmp;
HXDLIN( 592)		Bool _hx_tmp1 = hx::IsNull( this->opaqueBackground );
HXDLIN( 592)		if (_hx_tmp1) {
HXLINE( 592)			_hx_tmp = hx::IsNull( this->_hx___graphics );
            		}
            		else {
HXLINE( 592)			_hx_tmp = false;
            		}
HXDLIN( 592)		if (!(_hx_tmp)) {
HXLINE( 592)			Bool _hx_tmp2;
HXDLIN( 592)			if (!(!(this->_hx___renderable))) {
HXLINE( 592)				_hx_tmp2 = (this->_hx___worldAlpha <= (int)0);
            			}
            			else {
HXLINE( 592)				_hx_tmp2 = true;
            			}
HXDLIN( 592)			if (!(_hx_tmp2)) {
HXLINE( 592)				Bool _hx_tmp3;
HXDLIN( 592)				Bool _hx_tmp4;
HXDLIN( 592)				Bool _hx_tmp5 = hx::IsNotNull( this->opaqueBackground );
HXDLIN( 592)				if (_hx_tmp5) {
HXLINE( 592)					Float _hx_tmp6 = this->get_width();
HXDLIN( 592)					_hx_tmp4 = (_hx_tmp6 > (int)0);
            				}
            				else {
HXLINE( 592)					_hx_tmp4 = false;
            				}
HXDLIN( 592)				if (_hx_tmp4) {
HXLINE( 592)					Float _hx_tmp7 = this->get_height();
HXDLIN( 592)					_hx_tmp3 = (_hx_tmp7 > (int)0);
            				}
            				else {
HXLINE( 592)					_hx_tmp3 = false;
            				}
HXDLIN( 592)				if (_hx_tmp3) {
HXLINE( 592)					renderSession->maskManager->pushObject(hx::ObjectPtr<OBJ_>(this),null());
HXDLIN( 592)					HX_VARI(  ::lime::graphics::GLRenderContext,gl) = renderSession->gl;
HXDLIN( 592)					HX_VARI(  ::openfl::geom::Rectangle,rect) = ::openfl::geom::Rectangle_obj::_hx___temp;
HXDLIN( 592)					Float _hx_tmp8 = this->get_width();
HXDLIN( 592)					Float _hx_tmp9 = this->get_height();
HXDLIN( 592)					rect->setTo((int)0,(int)0,_hx_tmp8,_hx_tmp9);
HXDLIN( 592)					renderSession->maskManager->pushRect(rect,this->_hx___renderTransform);
HXDLIN( 592)					HX_VARI( Int,color) = this->opaqueBackground;
HXDLIN( 592)					::lime::graphics::opengl::GL_obj::cffi_lime_gl_clear_color(((Float)((int)hx::UShr(color,(int)16) & (int)(int)255) / (Float)(int)255),((Float)((int)hx::UShr(color,(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)color & (int)(int)255) / (Float)(int)255),(int)1);
HXDLIN( 592)					{
HXLINE( 592)						Int mask = gl->COLOR_BUFFER_BIT;
HXDLIN( 592)						::lime::graphics::opengl::GL_obj::cffi_lime_gl_clear(mask);
            					}
HXDLIN( 592)					renderSession->maskManager->popRect();
HXDLIN( 592)					renderSession->maskManager->popObject(hx::ObjectPtr<OBJ_>(this),null());
            				}
HXDLIN( 592)				Bool _hx_tmp10 = hx::IsNotNull( this->_hx___graphics );
HXDLIN( 592)				if (_hx_tmp10) {
HXLINE( 592)					Bool _hx_tmp11;
HXDLIN( 592)					if (!(!(this->_hx___renderable))) {
HXLINE( 592)						_hx_tmp11 = (this->_hx___worldAlpha <= (int)0);
            					}
            					else {
HXLINE( 592)						_hx_tmp11 = true;
            					}
HXDLIN( 592)					if (!(_hx_tmp11)) {
HXLINE( 592)						HX_VARI(  ::openfl::display::Graphics,graphics) = this->_hx___graphics;
HXDLIN( 592)						Bool _hx_tmp12 = hx::IsNotNull( graphics );
HXDLIN( 592)						if (_hx_tmp12) {
HXLINE( 592)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::render(graphics,renderSession,this->_hx___renderTransform);
HXDLIN( 592)							Bool _hx_tmp13;
HXDLIN( 592)							Bool _hx_tmp14 = hx::IsNotNull( graphics->_hx___bitmap );
HXDLIN( 592)							if (_hx_tmp14) {
HXLINE( 592)								_hx_tmp13 = graphics->_hx___visible;
            							}
            							else {
HXLINE( 592)								_hx_tmp13 = false;
            							}
HXDLIN( 592)							if (_hx_tmp13) {
HXLINE( 592)								HX_VARI(  ::openfl::_internal::renderer::opengl::GLRenderer,renderer) = ( ( ::openfl::_internal::renderer::opengl::GLRenderer)(renderSession->renderer) );
HXDLIN( 592)								HX_VARI_NAME(  ::lime::graphics::GLRenderContext,gl1,"gl") = renderSession->gl;
HXDLIN( 592)								 ::Dynamic _hx_tmp15 = this->get_blendMode();
HXDLIN( 592)								renderSession->blendModeManager->setBlendMode(_hx_tmp15);
HXDLIN( 592)								renderSession->maskManager->pushObject(hx::ObjectPtr<OBJ_>(this),null());
HXDLIN( 592)								HX_VARI(  ::openfl::display::Shader,shader) = renderSession->filterManager->pushObject(hx::ObjectPtr<OBJ_>(this));
HXDLIN( 592)								shader->get_data()->uImage0->input = graphics->_hx___bitmap;
HXDLIN( 592)								shader->get_data()->uImage0->smoothing = renderSession->allowSmoothing;
HXDLIN( 592)								shader->get_data()->uMatrix->value = renderer->getMatrix(graphics->_hx___worldTransform);
HXDLIN( 592)								renderSession->shaderManager->setShader(shader);
HXDLIN( 592)								{
HXLINE( 592)									Int target = gl1->ARRAY_BUFFER;
HXDLIN( 592)									HX_VARI(  ::lime::graphics::opengl::GLBuffer,buffer) = graphics->_hx___bitmap->getBuffer(gl1,this->_hx___worldAlpha);
HXDLIN( 592)									{
HXLINE( 592)										 ::Dynamic buffer1;
HXDLIN( 592)										Bool _hx_tmp16 = hx::IsNull( buffer );
HXDLIN( 592)										if (_hx_tmp16) {
HXLINE( 592)											buffer1 = null();
            										}
            										else {
HXLINE( 592)											buffer1 = buffer->id;
            										}
HXDLIN( 592)										::lime::graphics::opengl::GL_obj::cffi_lime_gl_bind_buffer(target,hx::DynamicPtr(buffer1));
            									}
            								}
HXDLIN( 592)								{
HXLINE( 592)									Int indx = shader->get_data()->aPosition->index;
HXDLIN( 592)									Int type = gl1->FLOAT;
HXDLIN( 592)									::lime::graphics::opengl::GL_obj::cffi_lime_gl_vertex_attrib_pointer(indx,(int)3,type,false,(int)24,(int)0);
            								}
HXDLIN( 592)								{
HXLINE( 592)									Int indx1 = shader->get_data()->aTexCoord->index;
HXDLIN( 592)									Int type1 = gl1->FLOAT;
HXDLIN( 592)									::lime::graphics::opengl::GL_obj::cffi_lime_gl_vertex_attrib_pointer(indx1,(int)2,type1,false,(int)24,(int)12);
            								}
HXDLIN( 592)								{
HXLINE( 592)									Int indx2 = shader->get_data()->aAlpha->index;
HXDLIN( 592)									Int type2 = gl1->FLOAT;
HXDLIN( 592)									::lime::graphics::opengl::GL_obj::cffi_lime_gl_vertex_attrib_pointer(indx2,(int)1,type2,false,(int)24,(int)20);
            								}
HXDLIN( 592)								{
HXLINE( 592)									Int mode = gl1->TRIANGLE_STRIP;
HXDLIN( 592)									::lime::graphics::opengl::GL_obj::cffi_lime_gl_draw_arrays(mode,(int)0,(int)4);
            								}
HXDLIN( 592)								renderSession->filterManager->popObject(hx::ObjectPtr<OBJ_>(this));
HXDLIN( 592)								renderSession->maskManager->popObject(hx::ObjectPtr<OBJ_>(this),null());
            							}
            						}
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___renderGL,(void))

void DisplayObject_obj::_hx___setRenderDirty(){
            	HX_STACK_FRAME("openfl.display.DisplayObject","__setRenderDirty",0x7766cdd1,"openfl.display.DisplayObject.__setRenderDirty","openfl/display/DisplayObject.hx",599,0xc7539829)
            	HX_STACK_THIS(this)
HXLINE( 599)		Bool _hx_tmp = !(this->_hx___renderDirty);
HXDLIN( 599)		if (_hx_tmp) {
HXLINE( 601)			this->_hx___renderDirty = true;
HXLINE( 602)			::openfl::display::DisplayObject_obj::_hx___worldRenderDirty++;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,_hx___setRenderDirty,(void))

void DisplayObject_obj::_hx___setStageReference( ::openfl::display::Stage stage){
            	HX_STACK_FRAME("openfl.display.DisplayObject","__setStageReference",0xda522b58,"openfl.display.DisplayObject.__setStageReference","openfl/display/DisplayObject.hx",611,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(stage,"stage")
HXLINE( 611)		this->stage = stage;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___setStageReference,(void))

void DisplayObject_obj::_hx___setTransformDirty(){
            	HX_STACK_FRAME("openfl.display.DisplayObject","__setTransformDirty",0x7e906131,"openfl.display.DisplayObject.__setTransformDirty","openfl/display/DisplayObject.hx",618,0xc7539829)
            	HX_STACK_THIS(this)
HXLINE( 618)		Bool _hx_tmp = !(this->_hx___transformDirty);
HXDLIN( 618)		if (_hx_tmp) {
HXLINE( 620)			this->_hx___transformDirty = true;
HXLINE( 621)			::openfl::display::DisplayObject_obj::_hx___worldTransformDirty++;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,_hx___setTransformDirty,(void))

void DisplayObject_obj::_hx___stopAllMovieClips(){
            	HX_STACK_FRAME("openfl.display.DisplayObject","__stopAllMovieClips",0x3954cfdb,"openfl.display.DisplayObject.__stopAllMovieClips","openfl/display/DisplayObject.hx",628,0xc7539829)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,_hx___stopAllMovieClips,(void))

void DisplayObject_obj::_hx___update(Bool transformOnly,Bool updateChildren, ::openfl::display::Graphics maskGraphics){
            	HX_STACK_FRAME("openfl.display.DisplayObject","__update",0x3f3ecc80,"openfl.display.DisplayObject.__update","openfl/display/DisplayObject.hx",635,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(transformOnly,"transformOnly")
            	HX_STACK_ARG(updateChildren,"updateChildren")
            	HX_STACK_ARG(maskGraphics,"maskGraphics")
HXLINE( 637)		Bool _hx_tmp;
HXDLIN( 637)		Bool _hx_tmp1;
HXDLIN( 637)		Bool _hx_tmp2;
HXDLIN( 637)		Bool _hx_tmp3 = this->get_visible();
HXDLIN( 637)		if (_hx_tmp3) {
HXLINE( 637)			Float _hx_tmp4 = this->get_scaleX();
HXDLIN( 637)			_hx_tmp2 = (_hx_tmp4 != (int)0);
            		}
            		else {
HXLINE( 637)			_hx_tmp2 = false;
            		}
HXDLIN( 637)		if (_hx_tmp2) {
HXLINE( 637)			Float _hx_tmp5 = this->get_scaleY();
HXDLIN( 637)			_hx_tmp1 = (_hx_tmp5 != (int)0);
            		}
            		else {
HXLINE( 637)			_hx_tmp1 = false;
            		}
HXDLIN( 637)		if (_hx_tmp1) {
HXLINE( 637)			_hx_tmp = !(this->_hx___isMask);
            		}
            		else {
HXLINE( 637)			_hx_tmp = false;
            		}
HXDLIN( 637)		this->_hx___renderable = _hx_tmp;
HXLINE( 638)		this->_hx___updateTransforms(null());
HXLINE( 640)		Bool _hx_tmp6;
HXDLIN( 640)		if (updateChildren) {
HXLINE( 640)			_hx_tmp6 = this->_hx___transformDirty;
            		}
            		else {
HXLINE( 640)			_hx_tmp6 = false;
            		}
HXDLIN( 640)		if (_hx_tmp6) {
HXLINE( 642)			this->_hx___transformDirty = false;
HXLINE( 643)			::openfl::display::DisplayObject_obj::_hx___worldTransformDirty--;
            		}
HXLINE( 647)		Bool _hx_tmp7 = hx::IsNotNull( maskGraphics );
HXDLIN( 647)		if (_hx_tmp7) {
HXLINE( 649)			this->_hx___updateMask(maskGraphics);
            		}
HXLINE( 653)		if (!(transformOnly)) {
HXLINE( 671)			 ::openfl::geom::ColorTransform _hx_tmp8 = this->get_transform()->get_colorTransform();
HXDLIN( 671)			Bool _hx_tmp9 = !(this->_hx___worldColorTransform->_hx___equals(_hx_tmp8,null()));
HXDLIN( 671)			if (_hx_tmp9) {
HXLINE( 673)				this->_hx___worldColorTransform = this->get_transform()->get_colorTransform()->_hx___clone();
            			}
HXLINE( 677)			HX_VAR_NAME(  ::openfl::display::DisplayObject,_hx___parent,"__parent");
HXDLIN( 677)			Bool _hx_tmp10 = hx::IsNotNull( this->parent );
HXDLIN( 677)			if (_hx_tmp10) {
HXLINE( 677)				_hx___parent = this->parent;
            			}
            			else {
HXLINE( 677)				_hx___parent = this->_hx___renderParent;
            			}
HXLINE( 679)			Bool _hx_tmp11 = hx::IsNotNull( _hx___parent );
HXDLIN( 679)			if (_hx_tmp11) {
HXLINE( 683)				Float _hx_tmp12 = this->get_alpha();
HXDLIN( 683)				this->_hx___worldAlpha = (_hx_tmp12 * _hx___parent->_hx___worldAlpha);
HXLINE( 684)				this->_hx___worldColorTransform->_hx___combine(_hx___parent->_hx___worldColorTransform);
HXLINE( 686)				Bool _hx_tmp13;
HXDLIN( 686)				 ::Dynamic _hx_tmp14 = this->get_blendMode();
HXDLIN( 686)				Bool _hx_tmp15 = hx::IsNotNull( _hx_tmp14 );
HXDLIN( 686)				if (_hx_tmp15) {
HXLINE( 686)					 ::Dynamic _hx_tmp16 = this->get_blendMode();
HXDLIN( 686)					_hx_tmp13 = hx::IsEq( _hx_tmp16,(int)10 );
            				}
            				else {
HXLINE( 686)					_hx_tmp13 = true;
            				}
HXDLIN( 686)				if (_hx_tmp13) {
HXLINE( 688)					this->_hx___blendMode = _hx___parent->_hx___blendMode;
            				}
            			}
            			else {
HXLINE( 727)				this->_hx___worldAlpha = this->get_alpha();
            			}
HXLINE( 752)			Bool _hx_tmp17;
HXDLIN( 752)			if (updateChildren) {
HXLINE( 752)				_hx_tmp17 = this->_hx___renderDirty;
            			}
            			else {
HXLINE( 752)				_hx_tmp17 = false;
            			}
HXDLIN( 752)			if (_hx_tmp17) {
HXLINE( 754)				this->_hx___renderDirty = false;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(DisplayObject_obj,_hx___update,(void))

void DisplayObject_obj::_hx___updateChildren(Bool transformOnly){
            	HX_STACK_FRAME("openfl.display.DisplayObject","__updateChildren",0xcfbb21df,"openfl.display.DisplayObject.__updateChildren","openfl/display/DisplayObject.hx",763,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(transformOnly,"transformOnly")
HXLINE( 765)		Bool _hx_tmp;
HXDLIN( 765)		Bool _hx_tmp1;
HXDLIN( 765)		Bool _hx_tmp2;
HXDLIN( 765)		Bool _hx_tmp3 = this->get_visible();
HXDLIN( 765)		if (_hx_tmp3) {
HXLINE( 765)			Float _hx_tmp4 = this->get_scaleX();
HXDLIN( 765)			_hx_tmp2 = (_hx_tmp4 != (int)0);
            		}
            		else {
HXLINE( 765)			_hx_tmp2 = false;
            		}
HXDLIN( 765)		if (_hx_tmp2) {
HXLINE( 765)			Float _hx_tmp5 = this->get_scaleY();
HXDLIN( 765)			_hx_tmp1 = (_hx_tmp5 != (int)0);
            		}
            		else {
HXLINE( 765)			_hx_tmp1 = false;
            		}
HXDLIN( 765)		if (_hx_tmp1) {
HXLINE( 765)			_hx_tmp = !(this->_hx___isMask);
            		}
            		else {
HXLINE( 765)			_hx_tmp = false;
            		}
HXDLIN( 765)		this->_hx___renderable = _hx_tmp;
HXLINE( 766)		this->_hx___worldAlpha = this->get_alpha();
HXLINE( 768)		Bool _hx_tmp6 = this->_hx___transformDirty;
HXDLIN( 768)		if (_hx_tmp6) {
HXLINE( 770)			this->_hx___transformDirty = false;
HXLINE( 771)			::openfl::display::DisplayObject_obj::_hx___worldTransformDirty--;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___updateChildren,(void))

void DisplayObject_obj::_hx___updateMask( ::openfl::display::Graphics maskGraphics){
            	HX_STACK_FRAME("openfl.display.DisplayObject","__updateMask",0x5b0e798c,"openfl.display.DisplayObject.__updateMask","openfl/display/DisplayObject.hx",780,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(maskGraphics,"maskGraphics")
HXLINE( 780)		Bool _hx_tmp = hx::IsNotNull( this->_hx___graphics );
HXDLIN( 780)		if (_hx_tmp) {
HXLINE( 782)			maskGraphics->_hx___commands->overrideMatrix(this->_hx___worldTransform);
HXLINE( 783)			maskGraphics->_hx___commands->append(this->_hx___graphics->_hx___commands);
HXLINE( 784)			maskGraphics->set___dirty(true);
HXLINE( 785)			maskGraphics->_hx___visible = true;
HXLINE( 787)			Bool _hx_tmp1 = hx::IsNull( maskGraphics->_hx___bounds );
HXDLIN( 787)			if (_hx_tmp1) {
HXLINE( 789)				maskGraphics->_hx___bounds =  ::openfl::geom::Rectangle_obj::__new(null(),null(),null(),null());
            			}
HXLINE( 793)			this->_hx___graphics->_hx___getBounds(maskGraphics->_hx___bounds,::openfl::geom::Matrix_obj::_hx___identity);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___updateMask,(void))

void DisplayObject_obj::_hx___updateTransforms( ::openfl::geom::Matrix overrideTransform){
            	HX_STACK_FRAME("openfl.display.DisplayObject","__updateTransforms",0x37510227,"openfl.display.DisplayObject.__updateTransforms","openfl/display/DisplayObject.hx",800,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(overrideTransform,"overrideTransform")
HXLINE( 802)		HX_VARI( Bool,overrided) = hx::IsNotNull( overrideTransform );
HXLINE( 803)		HX_VAR(  ::openfl::geom::Matrix,local);
HXDLIN( 803)		if (overrided) {
HXLINE( 803)			local = overrideTransform;
            		}
            		else {
HXLINE( 803)			local = this->_hx___transform;
            		}
HXLINE( 805)		Bool _hx_tmp = hx::IsNull( this->_hx___worldTransform );
HXDLIN( 805)		if (_hx_tmp) {
HXLINE( 807)			this->_hx___worldTransform =  ::openfl::geom::Matrix_obj::__new(null(),null(),null(),null(),null(),null());
            		}
HXLINE( 811)		Bool _hx_tmp1 = hx::IsNull( this->_hx___renderTransform );
HXDLIN( 811)		if (_hx_tmp1) {
HXLINE( 813)			this->_hx___renderTransform =  ::openfl::geom::Matrix_obj::__new(null(),null(),null(),null(),null(),null());
            		}
HXLINE( 817)		Bool _hx_tmp2;
HXDLIN( 817)		if (!(overrided)) {
HXLINE( 817)			_hx_tmp2 = hx::IsNotNull( this->parent );
            		}
            		else {
HXLINE( 817)			_hx_tmp2 = false;
            		}
HXDLIN( 817)		if (_hx_tmp2) {
HXLINE( 819)			HX_VARI(  ::openfl::geom::Matrix,parentTransform) = this->parent->_hx___worldTransform;
HXLINE( 821)			Float _hx_tmp3 = (local->a * parentTransform->a);
HXDLIN( 821)			Float _hx_tmp4 = (local->b * parentTransform->c);
HXDLIN( 821)			this->_hx___worldTransform->a = (_hx_tmp3 + _hx_tmp4);
HXLINE( 822)			Float _hx_tmp5 = (local->a * parentTransform->b);
HXDLIN( 822)			Float _hx_tmp6 = (local->b * parentTransform->d);
HXDLIN( 822)			this->_hx___worldTransform->b = (_hx_tmp5 + _hx_tmp6);
HXLINE( 823)			Float _hx_tmp7 = (local->c * parentTransform->a);
HXDLIN( 823)			Float _hx_tmp8 = (local->d * parentTransform->c);
HXDLIN( 823)			this->_hx___worldTransform->c = (_hx_tmp7 + _hx_tmp8);
HXLINE( 824)			Float _hx_tmp9 = (local->c * parentTransform->b);
HXDLIN( 824)			Float _hx_tmp10 = (local->d * parentTransform->d);
HXDLIN( 824)			this->_hx___worldTransform->d = (_hx_tmp9 + _hx_tmp10);
HXLINE( 825)			Float _hx_tmp11 = ((local->tx * parentTransform->a) + (local->ty * parentTransform->c));
HXDLIN( 825)			this->_hx___worldTransform->tx = (_hx_tmp11 + parentTransform->tx);
HXLINE( 826)			Float _hx_tmp12 = ((local->tx * parentTransform->b) + (local->ty * parentTransform->d));
HXDLIN( 826)			this->_hx___worldTransform->ty = (_hx_tmp12 + parentTransform->ty);
HXLINE( 828)			parentTransform = this->parent->_hx___renderTransform;
HXLINE( 830)			Float _hx_tmp13 = (local->a * parentTransform->a);
HXDLIN( 830)			Float _hx_tmp14 = (local->b * parentTransform->c);
HXDLIN( 830)			this->_hx___renderTransform->a = (_hx_tmp13 + _hx_tmp14);
HXLINE( 831)			Float _hx_tmp15 = (local->a * parentTransform->b);
HXDLIN( 831)			Float _hx_tmp16 = (local->b * parentTransform->d);
HXDLIN( 831)			this->_hx___renderTransform->b = (_hx_tmp15 + _hx_tmp16);
HXLINE( 832)			Float _hx_tmp17 = (local->c * parentTransform->a);
HXDLIN( 832)			Float _hx_tmp18 = (local->d * parentTransform->c);
HXDLIN( 832)			this->_hx___renderTransform->c = (_hx_tmp17 + _hx_tmp18);
HXLINE( 833)			Float _hx_tmp19 = (local->c * parentTransform->b);
HXDLIN( 833)			Float _hx_tmp20 = (local->d * parentTransform->d);
HXDLIN( 833)			this->_hx___renderTransform->d = (_hx_tmp19 + _hx_tmp20);
HXLINE( 834)			Float _hx_tmp21 = ((local->tx * parentTransform->a) + (local->ty * parentTransform->c));
HXDLIN( 834)			this->_hx___renderTransform->tx = (_hx_tmp21 + parentTransform->tx);
HXLINE( 835)			Float _hx_tmp22 = ((local->tx * parentTransform->b) + (local->ty * parentTransform->d));
HXDLIN( 835)			this->_hx___renderTransform->ty = (_hx_tmp22 + parentTransform->ty);
            		}
            		else {
HXLINE( 839)			this->_hx___worldTransform->copyFrom(local);
HXLINE( 840)			this->_hx___renderTransform->copyFrom(local);
            		}
HXLINE( 844)		Bool _hx_tmp23 = hx::IsNotNull( this->_hx___scrollRect );
HXDLIN( 844)		if (_hx_tmp23) {
HXLINE( 846)			HX_VARI(  ::openfl::geom::Matrix,_this) = this->_hx___renderTransform;
HXDLIN( 846)			HX_VARI( Float,px) = -(this->_hx___scrollRect->x);
HXDLIN( 846)			HX_VARI( Float,py) = -(this->_hx___scrollRect->y);
HXDLIN( 846)			Float _hx_tmp24 = ((px * _this->a) + (py * _this->c));
HXDLIN( 846)			_this->tx = (_hx_tmp24 + _this->tx);
HXDLIN( 846)			Float _hx_tmp25 = ((px * _this->b) + (py * _this->d));
HXDLIN( 846)			_this->ty = (_hx_tmp25 + _this->ty);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___updateTransforms,(void))

Float DisplayObject_obj::get_alpha(){
            	HX_STACK_FRAME("openfl.display.DisplayObject","get_alpha",0x5dd6147e,"openfl.display.DisplayObject.get_alpha","openfl/display/DisplayObject.hx",862,0xc7539829)
            	HX_STACK_THIS(this)
HXLINE( 862)		return this->_hx___alpha;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_alpha,return )

Float DisplayObject_obj::set_alpha(Float value){
            	HX_STACK_FRAME("openfl.display.DisplayObject","set_alpha",0x4127008a,"openfl.display.DisplayObject.set_alpha","openfl/display/DisplayObject.hx",867,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 869)		Bool _hx_tmp = (value > ((Float)1.0));
HXDLIN( 869)		if (_hx_tmp) {
HXLINE( 869)			value = ((Float)1.0);
            		}
HXLINE( 870)		Bool _hx_tmp1 = (value != this->_hx___alpha);
HXDLIN( 870)		if (_hx_tmp1) {
HXLINE( 870)			Bool _hx_tmp2 = !(this->_hx___renderDirty);
HXDLIN( 870)			if (_hx_tmp2) {
HXLINE( 870)				this->_hx___renderDirty = true;
HXDLIN( 870)				::openfl::display::DisplayObject_obj::_hx___worldRenderDirty++;
            			}
            		}
HXLINE( 871)		return (this->_hx___alpha = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_alpha,return )

 ::Dynamic DisplayObject_obj::get_blendMode(){
            	HX_STACK_FRAME("openfl.display.DisplayObject","get_blendMode",0xee046174,"openfl.display.DisplayObject.get_blendMode","openfl/display/DisplayObject.hx",878,0xc7539829)
            	HX_STACK_THIS(this)
HXLINE( 878)		return this->_hx___blendMode;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_blendMode,return )

 ::Dynamic DisplayObject_obj::set_blendMode( ::Dynamic value){
            	HX_STACK_FRAME("openfl.display.DisplayObject","set_blendMode",0x330a4380,"openfl.display.DisplayObject.set_blendMode","openfl/display/DisplayObject.hx",883,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 885)		Bool _hx_tmp = hx::IsNull( value );
HXDLIN( 885)		if (_hx_tmp) {
HXLINE( 885)			value = (int)10;
            		}
HXLINE( 886)		return (this->_hx___blendMode = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_blendMode,return )

Bool DisplayObject_obj::get_cacheAsBitmap(){
            	HX_STACK_FRAME("openfl.display.DisplayObject","get_cacheAsBitmap",0xa5311003,"openfl.display.DisplayObject.get_cacheAsBitmap","openfl/display/DisplayObject.hx",893,0xc7539829)
            	HX_STACK_THIS(this)
HXLINE( 893)		Bool _hx_tmp = hx::IsNull( this->_hx___filters );
HXDLIN( 893)		if (_hx_tmp) {
HXLINE( 893)			return this->_hx___cacheAsBitmap;
            		}
            		else {
HXLINE( 893)			return true;
            		}
HXDLIN( 893)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_cacheAsBitmap,return )

Bool DisplayObject_obj::set_cacheAsBitmap(Bool value){
            	HX_STACK_FRAME("openfl.display.DisplayObject","set_cacheAsBitmap",0xc89ee80f,"openfl.display.DisplayObject.set_cacheAsBitmap","openfl/display/DisplayObject.hx",898,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 900)		Bool _hx_tmp = !(this->_hx___renderDirty);
HXDLIN( 900)		if (_hx_tmp) {
HXLINE( 900)			this->_hx___renderDirty = true;
HXDLIN( 900)			::openfl::display::DisplayObject_obj::_hx___worldRenderDirty++;
            		}
HXLINE( 901)		return (this->_hx___cacheAsBitmap = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_cacheAsBitmap,return )

 ::openfl::geom::Matrix DisplayObject_obj::get_cacheAsBitmapMatrix(){
            	HX_STACK_FRAME("openfl.display.DisplayObject","get_cacheAsBitmapMatrix",0xe47a1ea4,"openfl.display.DisplayObject.get_cacheAsBitmapMatrix","openfl/display/DisplayObject.hx",908,0xc7539829)
            	HX_STACK_THIS(this)
HXLINE( 908)		return this->_hx___cacheAsBitmapMatrix;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_cacheAsBitmapMatrix,return )

 ::openfl::geom::Matrix DisplayObject_obj::set_cacheAsBitmapMatrix( ::openfl::geom::Matrix value){
            	HX_STACK_FRAME("openfl.display.DisplayObject","set_cacheAsBitmapMatrix",0xe6db87b0,"openfl.display.DisplayObject.set_cacheAsBitmapMatrix","openfl/display/DisplayObject.hx",913,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 915)		Bool _hx_tmp = !(this->_hx___renderDirty);
HXDLIN( 915)		if (_hx_tmp) {
HXLINE( 915)			this->_hx___renderDirty = true;
HXDLIN( 915)			::openfl::display::DisplayObject_obj::_hx___worldRenderDirty++;
            		}
HXLINE( 916)		return (this->_hx___cacheAsBitmapMatrix = value->clone());
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_cacheAsBitmapMatrix,return )

::Array< ::Dynamic> DisplayObject_obj::get_filters(){
            	HX_STACK_FRAME("openfl.display.DisplayObject","get_filters",0x661396db,"openfl.display.DisplayObject.get_filters","openfl/display/DisplayObject.hx",923,0xc7539829)
            	HX_STACK_THIS(this)
HXLINE( 923)		Bool _hx_tmp = hx::IsNull( this->_hx___filters );
HXDLIN( 923)		if (_hx_tmp) {
HXLINE( 925)			return ::Array_obj< ::Dynamic>::__new();
            		}
            		else {
HXLINE( 929)			return this->_hx___filters->copy();
            		}
HXLINE( 923)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_filters,return )

::Array< ::Dynamic> DisplayObject_obj::set_filters(::Array< ::Dynamic> value){
            	HX_STACK_FRAME("openfl.display.DisplayObject","set_filters",0x70809de7,"openfl.display.DisplayObject.set_filters","openfl/display/DisplayObject.hx",936,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 938)		Bool _hx_tmp;
HXDLIN( 938)		Bool _hx_tmp1 = hx::IsNotNull( value );
HXDLIN( 938)		if (_hx_tmp1) {
HXLINE( 938)			_hx_tmp = (value->length > (int)0);
            		}
            		else {
HXLINE( 938)			_hx_tmp = false;
            		}
HXDLIN( 938)		if (_hx_tmp) {
HXLINE( 940)			this->_hx___filters = value;
            		}
            		else {
HXLINE( 945)			this->_hx___filters = null();
            		}
HXLINE( 950)		Bool _hx_tmp2 = !(this->_hx___renderDirty);
HXDLIN( 950)		if (_hx_tmp2) {
HXLINE( 950)			this->_hx___renderDirty = true;
HXDLIN( 950)			::openfl::display::DisplayObject_obj::_hx___worldRenderDirty++;
            		}
HXLINE( 952)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_filters,return )

Float DisplayObject_obj::get_height(){
            	HX_STACK_FRAME("openfl.display.DisplayObject","get_height",0x7d8c16c7,"openfl.display.DisplayObject.get_height","openfl/display/DisplayObject.hx",957,0xc7539829)
            	HX_STACK_THIS(this)
HXLINE( 959)		HX_VARI(  ::openfl::geom::Rectangle,bounds) =  ::openfl::geom::Rectangle_obj::__new(null(),null(),null(),null());
HXLINE( 960)		this->_hx___getBounds(bounds,this->_hx___transform);
HXLINE( 962)		return bounds->height;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_height,return )

Float DisplayObject_obj::set_height(Float value){
            	HX_STACK_FRAME("openfl.display.DisplayObject","set_height",0x8109b53b,"openfl.display.DisplayObject.set_height","openfl/display/DisplayObject.hx",967,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 969)		HX_VARI(  ::openfl::geom::Rectangle,bounds) =  ::openfl::geom::Rectangle_obj::__new(null(),null(),null(),null());
HXLINE( 971)		HX_VARI(  ::openfl::geom::Matrix,matrix) = ::openfl::geom::Matrix_obj::_hx___temp;
HXLINE( 972)		matrix->identity();
HXLINE( 974)		this->_hx___getBounds(bounds,matrix);
HXLINE( 976)		Bool _hx_tmp = (value != bounds->height);
HXDLIN( 976)		if (_hx_tmp) {
HXLINE( 978)			Float _hx_tmp1 = ((Float)value / (Float)bounds->height);
HXDLIN( 978)			this->set_scaleY(_hx_tmp1);
            		}
            		else {
HXLINE( 982)			this->set_scaleY((int)1);
            		}
HXLINE( 986)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_height,return )

 ::openfl::display::DisplayObject DisplayObject_obj::get_mask(){
            	HX_STACK_FRAME("openfl.display.DisplayObject","get_mask",0xd81ad7cc,"openfl.display.DisplayObject.get_mask","openfl/display/DisplayObject.hx",993,0xc7539829)
            	HX_STACK_THIS(this)
HXLINE( 993)		return this->_hx___mask;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_mask,return )

 ::openfl::display::DisplayObject DisplayObject_obj::set_mask( ::openfl::display::DisplayObject value){
            	HX_STACK_FRAME("openfl.display.DisplayObject","set_mask",0x86783140,"openfl.display.DisplayObject.set_mask","openfl/display/DisplayObject.hx",998,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1000)		if (hx::IsNotEq( value,this->_hx___mask )) {
HXLINE(1002)			Bool _hx_tmp = !(this->_hx___transformDirty);
HXDLIN(1002)			if (_hx_tmp) {
HXLINE(1002)				this->_hx___transformDirty = true;
HXDLIN(1002)				::openfl::display::DisplayObject_obj::_hx___worldTransformDirty++;
            			}
HXLINE(1003)			Bool _hx_tmp1 = !(this->_hx___renderDirty);
HXDLIN(1003)			if (_hx_tmp1) {
HXLINE(1003)				this->_hx___renderDirty = true;
HXDLIN(1003)				::openfl::display::DisplayObject_obj::_hx___worldRenderDirty++;
            			}
            		}
HXLINE(1007)		Bool _hx_tmp2 = hx::IsNotNull( this->_hx___mask );
HXDLIN(1007)		if (_hx_tmp2) {
HXLINE(1009)			this->_hx___mask->_hx___isMask = false;
HXLINE(1010)			{
HXLINE(1010)				HX_VARI(  ::openfl::display::DisplayObject,_this) = this->_hx___mask;
HXDLIN(1010)				Bool _hx_tmp3 = !(_this->_hx___transformDirty);
HXDLIN(1010)				if (_hx_tmp3) {
HXLINE(1010)					_this->_hx___transformDirty = true;
HXDLIN(1010)					::openfl::display::DisplayObject_obj::_hx___worldTransformDirty++;
            				}
            			}
HXLINE(1011)			{
HXLINE(1011)				HX_VARI_NAME(  ::openfl::display::DisplayObject,_this1,"_this") = this->_hx___mask;
HXDLIN(1011)				Bool _hx_tmp4 = !(_this1->_hx___renderDirty);
HXDLIN(1011)				if (_hx_tmp4) {
HXLINE(1011)					_this1->_hx___renderDirty = true;
HXDLIN(1011)					::openfl::display::DisplayObject_obj::_hx___worldRenderDirty++;
            				}
            			}
            		}
HXLINE(1015)		Bool _hx_tmp5 = hx::IsNotNull( value );
HXDLIN(1015)		if (_hx_tmp5) {
HXLINE(1017)			value->_hx___isMask = true;
            		}
HXLINE(1021)		return (this->_hx___mask = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_mask,return )

Float DisplayObject_obj::get_mouseX(){
            	HX_STACK_FRAME("openfl.display.DisplayObject","get_mouseX",0x474e5973,"openfl.display.DisplayObject.get_mouseX","openfl/display/DisplayObject.hx",1026,0xc7539829)
            	HX_STACK_THIS(this)
HXLINE(1028)		HX_VAR( Float,mouseX);
HXDLIN(1028)		Bool _hx_tmp = hx::IsNotNull( this->stage );
HXDLIN(1028)		if (_hx_tmp) {
HXLINE(1028)			mouseX = this->stage->_hx___mouseX;
            		}
            		else {
HXLINE(1028)			mouseX = ::openfl::Lib_obj::current->stage->_hx___mouseX;
            		}
HXLINE(1029)		HX_VAR( Float,mouseY);
HXDLIN(1029)		Bool _hx_tmp1 = hx::IsNotNull( this->stage );
HXDLIN(1029)		if (_hx_tmp1) {
HXLINE(1029)			mouseY = this->stage->_hx___mouseY;
            		}
            		else {
HXLINE(1029)			mouseY = ::openfl::Lib_obj::current->stage->_hx___mouseY;
            		}
HXLINE(1031)		HX_VARI(  ::openfl::geom::Matrix,_this) = this->_hx___getRenderTransform();
HXDLIN(1031)		HX_VARI( Float,norm) = ((_this->a * _this->d) - (_this->b * _this->c));
HXDLIN(1031)		if ((norm == (int)0)) {
HXLINE(1031)			return -(_this->tx);
            		}
            		else {
HXLINE(1031)			return (((Float)((Float)1.0) / (Float)norm) * ((_this->c * (_this->ty - mouseY)) + (_this->d * (mouseX - _this->tx))));
            		}
HXDLIN(1031)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_mouseX,return )

Float DisplayObject_obj::get_mouseY(){
            	HX_STACK_FRAME("openfl.display.DisplayObject","get_mouseY",0x474e5974,"openfl.display.DisplayObject.get_mouseY","openfl/display/DisplayObject.hx",1036,0xc7539829)
            	HX_STACK_THIS(this)
HXLINE(1038)		HX_VAR( Float,mouseX);
HXDLIN(1038)		Bool _hx_tmp = hx::IsNotNull( this->stage );
HXDLIN(1038)		if (_hx_tmp) {
HXLINE(1038)			mouseX = this->stage->_hx___mouseX;
            		}
            		else {
HXLINE(1038)			mouseX = ::openfl::Lib_obj::current->stage->_hx___mouseX;
            		}
HXLINE(1039)		HX_VAR( Float,mouseY);
HXDLIN(1039)		Bool _hx_tmp1 = hx::IsNotNull( this->stage );
HXDLIN(1039)		if (_hx_tmp1) {
HXLINE(1039)			mouseY = this->stage->_hx___mouseY;
            		}
            		else {
HXLINE(1039)			mouseY = ::openfl::Lib_obj::current->stage->_hx___mouseY;
            		}
HXLINE(1041)		HX_VARI(  ::openfl::geom::Matrix,_this) = this->_hx___getRenderTransform();
HXDLIN(1041)		HX_VARI( Float,norm) = ((_this->a * _this->d) - (_this->b * _this->c));
HXDLIN(1041)		if ((norm == (int)0)) {
HXLINE(1041)			return -(_this->ty);
            		}
            		else {
HXLINE(1041)			return (((Float)((Float)1.0) / (Float)norm) * ((_this->a * (mouseY - _this->ty)) + (_this->b * (_this->tx - mouseX))));
            		}
HXDLIN(1041)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_mouseY,return )

::String DisplayObject_obj::get_name(){
            	HX_STACK_FRAME("openfl.display.DisplayObject","get_name",0xd8c4092b,"openfl.display.DisplayObject.get_name","openfl/display/DisplayObject.hx",1048,0xc7539829)
            	HX_STACK_THIS(this)
HXLINE(1048)		return this->_hx___name;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_name,return )

::String DisplayObject_obj::set_name(::String value){
            	HX_STACK_FRAME("openfl.display.DisplayObject","set_name",0x8721629f,"openfl.display.DisplayObject.set_name","openfl/display/DisplayObject.hx",1055,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1055)		return (this->_hx___name = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_name,return )

 ::openfl::display::DisplayObject DisplayObject_obj::get_root(){
            	HX_STACK_FRAME("openfl.display.DisplayObject","get_root",0xdb738502,"openfl.display.DisplayObject.get_root","openfl/display/DisplayObject.hx",1060,0xc7539829)
            	HX_STACK_THIS(this)
HXLINE(1062)		Bool _hx_tmp = hx::IsNotNull( this->stage );
HXDLIN(1062)		if (_hx_tmp) {
HXLINE(1064)			return ::openfl::Lib_obj::current;
            		}
HXLINE(1068)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_root,return )

Float DisplayObject_obj::get_rotation(){
            	HX_STACK_FRAME("openfl.display.DisplayObject","get_rotation",0xdf0fc41e,"openfl.display.DisplayObject.get_rotation","openfl/display/DisplayObject.hx",1075,0xc7539829)
            	HX_STACK_THIS(this)
HXLINE(1075)		return this->_hx___rotation;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_rotation,return )

Float DisplayObject_obj::set_rotation(Float value){
            	HX_STACK_FRAME("openfl.display.DisplayObject","set_rotation",0xf408e792,"openfl.display.DisplayObject.set_rotation","openfl/display/DisplayObject.hx",1080,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1082)		Bool _hx_tmp = (value != this->_hx___rotation);
HXDLIN(1082)		if (_hx_tmp) {
HXLINE(1084)			this->_hx___rotation = value;
HXLINE(1085)			HX_VARI( Float,radians) = (this->_hx___rotation * ((Float)::Math_obj::PI / (Float)(int)180));
HXLINE(1086)			this->_hx___rotationSine = ::Math_obj::sin(radians);
HXLINE(1087)			this->_hx___rotationCosine = ::Math_obj::cos(radians);
HXLINE(1089)			HX_VARI_NAME( Float,_hx___scaleX,"__scaleX") = this->get_scaleX();
HXLINE(1090)			HX_VARI_NAME( Float,_hx___scaleY,"__scaleY") = this->get_scaleY();
HXLINE(1092)			this->_hx___transform->a = (this->_hx___rotationCosine * _hx___scaleX);
HXLINE(1093)			this->_hx___transform->b = (this->_hx___rotationSine * _hx___scaleX);
HXLINE(1094)			this->_hx___transform->c = (-(this->_hx___rotationSine) * _hx___scaleY);
HXLINE(1095)			this->_hx___transform->d = (this->_hx___rotationCosine * _hx___scaleY);
HXLINE(1097)			Bool _hx_tmp1 = !(this->_hx___transformDirty);
HXDLIN(1097)			if (_hx_tmp1) {
HXLINE(1097)				this->_hx___transformDirty = true;
HXDLIN(1097)				::openfl::display::DisplayObject_obj::_hx___worldTransformDirty++;
            			}
            		}
HXLINE(1101)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_rotation,return )

Float DisplayObject_obj::get_scaleX(){
            	HX_STACK_FRAME("openfl.display.DisplayObject","get_scaleX",0xb765f96e,"openfl.display.DisplayObject.get_scaleX","openfl/display/DisplayObject.hx",1108,0xc7539829)
            	HX_STACK_THIS(this)
HXLINE(1108)		Bool _hx_tmp = (this->_hx___transform->b == (int)0);
HXDLIN(1108)		if (_hx_tmp) {
HXLINE(1110)			return this->_hx___transform->a;
            		}
            		else {
HXLINE(1114)			Float _hx_tmp1 = ((this->_hx___transform->a * this->_hx___transform->a) + (this->_hx___transform->b * this->_hx___transform->b));
HXDLIN(1114)			return ::Math_obj::sqrt(_hx_tmp1);
            		}
HXLINE(1108)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_scaleX,return )

Float DisplayObject_obj::set_scaleX(Float value){
            	HX_STACK_FRAME("openfl.display.DisplayObject","set_scaleX",0xbae397e2,"openfl.display.DisplayObject.set_scaleX","openfl/display/DisplayObject.hx",1121,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1123)		Bool _hx_tmp = (this->_hx___transform->b == (int)0);
HXDLIN(1123)		if (_hx_tmp) {
HXLINE(1125)			Bool _hx_tmp1 = (value != this->_hx___transform->a);
HXDLIN(1125)			if (_hx_tmp1) {
HXLINE(1125)				Bool _hx_tmp2 = !(this->_hx___transformDirty);
HXDLIN(1125)				if (_hx_tmp2) {
HXLINE(1125)					this->_hx___transformDirty = true;
HXDLIN(1125)					::openfl::display::DisplayObject_obj::_hx___worldTransformDirty++;
            				}
            			}
HXLINE(1126)			this->_hx___transform->a = value;
            		}
            		else {
HXLINE(1130)			HX_VARI( Float,a) = (this->_hx___rotationCosine * value);
HXLINE(1131)			HX_VARI( Float,b) = (this->_hx___rotationSine * value);
HXLINE(1133)			Bool _hx_tmp3;
HXDLIN(1133)			if ((this->_hx___transform->a == a)) {
HXLINE(1133)				_hx_tmp3 = (this->_hx___transform->b != b);
            			}
            			else {
HXLINE(1133)				_hx_tmp3 = true;
            			}
HXDLIN(1133)			if (_hx_tmp3) {
HXLINE(1135)				Bool _hx_tmp4 = !(this->_hx___transformDirty);
HXDLIN(1135)				if (_hx_tmp4) {
HXLINE(1135)					this->_hx___transformDirty = true;
HXDLIN(1135)					::openfl::display::DisplayObject_obj::_hx___worldTransformDirty++;
            				}
            			}
HXLINE(1139)			this->_hx___transform->a = a;
HXLINE(1140)			this->_hx___transform->b = b;
            		}
HXLINE(1144)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_scaleX,return )

Float DisplayObject_obj::get_scaleY(){
            	HX_STACK_FRAME("openfl.display.DisplayObject","get_scaleY",0xb765f96f,"openfl.display.DisplayObject.get_scaleY","openfl/display/DisplayObject.hx",1151,0xc7539829)
            	HX_STACK_THIS(this)
HXLINE(1151)		Bool _hx_tmp = (this->_hx___transform->c == (int)0);
HXDLIN(1151)		if (_hx_tmp) {
HXLINE(1153)			return this->_hx___transform->d;
            		}
            		else {
HXLINE(1157)			Float _hx_tmp1 = ((this->_hx___transform->c * this->_hx___transform->c) + (this->_hx___transform->d * this->_hx___transform->d));
HXDLIN(1157)			return ::Math_obj::sqrt(_hx_tmp1);
            		}
HXLINE(1151)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_scaleY,return )

Float DisplayObject_obj::set_scaleY(Float value){
            	HX_STACK_FRAME("openfl.display.DisplayObject","set_scaleY",0xbae397e3,"openfl.display.DisplayObject.set_scaleY","openfl/display/DisplayObject.hx",1164,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1166)		Bool _hx_tmp = (this->_hx___transform->c == (int)0);
HXDLIN(1166)		if (_hx_tmp) {
HXLINE(1168)			Bool _hx_tmp1 = (value != this->_hx___transform->d);
HXDLIN(1168)			if (_hx_tmp1) {
HXLINE(1168)				Bool _hx_tmp2 = !(this->_hx___transformDirty);
HXDLIN(1168)				if (_hx_tmp2) {
HXLINE(1168)					this->_hx___transformDirty = true;
HXDLIN(1168)					::openfl::display::DisplayObject_obj::_hx___worldTransformDirty++;
            				}
            			}
HXLINE(1169)			this->_hx___transform->d = value;
            		}
            		else {
HXLINE(1173)			HX_VARI( Float,c) = (-(this->_hx___rotationSine) * value);
HXLINE(1174)			HX_VARI( Float,d) = (this->_hx___rotationCosine * value);
HXLINE(1176)			Bool _hx_tmp3;
HXDLIN(1176)			if ((this->_hx___transform->d == d)) {
HXLINE(1176)				_hx_tmp3 = (this->_hx___transform->c != c);
            			}
            			else {
HXLINE(1176)				_hx_tmp3 = true;
            			}
HXDLIN(1176)			if (_hx_tmp3) {
HXLINE(1178)				Bool _hx_tmp4 = !(this->_hx___transformDirty);
HXDLIN(1178)				if (_hx_tmp4) {
HXLINE(1178)					this->_hx___transformDirty = true;
HXDLIN(1178)					::openfl::display::DisplayObject_obj::_hx___worldTransformDirty++;
            				}
            			}
HXLINE(1182)			this->_hx___transform->c = c;
HXLINE(1183)			this->_hx___transform->d = d;
            		}
HXLINE(1187)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_scaleY,return )

 ::openfl::geom::Rectangle DisplayObject_obj::get_scrollRect(){
            	HX_STACK_FRAME("openfl.display.DisplayObject","get_scrollRect",0xba87dab1,"openfl.display.DisplayObject.get_scrollRect","openfl/display/DisplayObject.hx",1192,0xc7539829)
            	HX_STACK_THIS(this)
HXLINE(1194)		Bool _hx_tmp = hx::IsNull( this->_hx___scrollRect );
HXDLIN(1194)		if (_hx_tmp) {
HXLINE(1194)			return null();
            		}
HXLINE(1196)		return this->_hx___scrollRect->clone();
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_scrollRect,return )

 ::openfl::geom::Rectangle DisplayObject_obj::set_scrollRect( ::openfl::geom::Rectangle value){
            	HX_STACK_FRAME("openfl.display.DisplayObject","set_scrollRect",0xdaa7c325,"openfl.display.DisplayObject.set_scrollRect","openfl/display/DisplayObject.hx",1201,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1203)		if (hx::IsNotEq( value,this->_hx___scrollRect )) {
HXLINE(1205)			Bool _hx_tmp = !(this->_hx___transformDirty);
HXDLIN(1205)			if (_hx_tmp) {
HXLINE(1205)				this->_hx___transformDirty = true;
HXDLIN(1205)				::openfl::display::DisplayObject_obj::_hx___worldTransformDirty++;
            			}
            		}
HXLINE(1210)		return (this->_hx___scrollRect = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_scrollRect,return )

 ::openfl::geom::Transform DisplayObject_obj::get_transform(){
            	HX_STACK_FRAME("openfl.display.DisplayObject","get_transform",0x275faa8c,"openfl.display.DisplayObject.get_transform","openfl/display/DisplayObject.hx",1215,0xc7539829)
            	HX_STACK_THIS(this)
HXLINE(1217)		Bool _hx_tmp = hx::IsNull( this->_hx___objectTransform );
HXDLIN(1217)		if (_hx_tmp) {
HXLINE(1219)			this->_hx___objectTransform =  ::openfl::geom::Transform_obj::__new(hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE(1223)		return this->_hx___objectTransform;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_transform,return )

 ::openfl::geom::Transform DisplayObject_obj::set_transform( ::openfl::geom::Transform value){
            	HX_STACK_FRAME("openfl.display.DisplayObject","set_transform",0x6c658c98,"openfl.display.DisplayObject.set_transform","openfl/display/DisplayObject.hx",1228,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1230)		Bool _hx_tmp = hx::IsNull( value );
HXDLIN(1230)		if (_hx_tmp) {
HXLINE(1232)			HX_STACK_DO_THROW( ::openfl::errors::TypeError_obj::__new(HX_("Parameter transform must be non-null.",56,12,fe,6e)));
            		}
HXLINE(1236)		Bool _hx_tmp1 = hx::IsNull( this->_hx___objectTransform );
HXDLIN(1236)		if (_hx_tmp1) {
HXLINE(1238)			this->_hx___objectTransform =  ::openfl::geom::Transform_obj::__new(hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE(1242)		Bool _hx_tmp2 = !(this->_hx___transformDirty);
HXDLIN(1242)		if (_hx_tmp2) {
HXLINE(1242)			this->_hx___transformDirty = true;
HXDLIN(1242)			::openfl::display::DisplayObject_obj::_hx___worldTransformDirty++;
            		}
HXLINE(1243)		 ::openfl::geom::Matrix _hx_tmp3 = value->get_matrix();
HXDLIN(1243)		this->_hx___objectTransform->set_matrix(_hx_tmp3);
HXLINE(1244)		 ::openfl::geom::ColorTransform _hx_tmp4 = value->get_colorTransform()->_hx___clone();
HXDLIN(1244)		this->_hx___objectTransform->set_colorTransform(_hx_tmp4);
HXLINE(1246)		return this->_hx___objectTransform;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_transform,return )

Bool DisplayObject_obj::get_visible(){
            	HX_STACK_FRAME("openfl.display.DisplayObject","get_visible",0xfff16d92,"openfl.display.DisplayObject.get_visible","openfl/display/DisplayObject.hx",1253,0xc7539829)
            	HX_STACK_THIS(this)
HXLINE(1253)		return this->_hx___visible;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_visible,return )

Bool DisplayObject_obj::set_visible(Bool value){
            	HX_STACK_FRAME("openfl.display.DisplayObject","set_visible",0x0a5e749e,"openfl.display.DisplayObject.set_visible","openfl/display/DisplayObject.hx",1258,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1260)		Bool _hx_tmp = (value != this->_hx___visible);
HXDLIN(1260)		if (_hx_tmp) {
HXLINE(1260)			Bool _hx_tmp1 = !(this->_hx___renderDirty);
HXDLIN(1260)			if (_hx_tmp1) {
HXLINE(1260)				this->_hx___renderDirty = true;
HXDLIN(1260)				::openfl::display::DisplayObject_obj::_hx___worldRenderDirty++;
            			}
            		}
HXLINE(1261)		return (this->_hx___visible = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_visible,return )

Float DisplayObject_obj::get_width(){
            	HX_STACK_FRAME("openfl.display.DisplayObject","get_width",0x06a22326,"openfl.display.DisplayObject.get_width","openfl/display/DisplayObject.hx",1266,0xc7539829)
            	HX_STACK_THIS(this)
HXLINE(1268)		HX_VARI(  ::openfl::geom::Rectangle,bounds) =  ::openfl::geom::Rectangle_obj::__new(null(),null(),null(),null());
HXLINE(1269)		this->_hx___getBounds(bounds,this->_hx___transform);
HXLINE(1271)		return bounds->width;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_width,return )

Float DisplayObject_obj::set_width(Float value){
            	HX_STACK_FRAME("openfl.display.DisplayObject","set_width",0xe9f30f32,"openfl.display.DisplayObject.set_width","openfl/display/DisplayObject.hx",1276,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1278)		HX_VARI(  ::openfl::geom::Rectangle,bounds) =  ::openfl::geom::Rectangle_obj::__new(null(),null(),null(),null());
HXLINE(1280)		HX_VARI(  ::openfl::geom::Matrix,matrix) = ::openfl::geom::Matrix_obj::_hx___temp;
HXLINE(1281)		matrix->identity();
HXLINE(1283)		this->_hx___getBounds(bounds,matrix);
HXLINE(1285)		Bool _hx_tmp = (value != bounds->width);
HXDLIN(1285)		if (_hx_tmp) {
HXLINE(1287)			Float _hx_tmp1 = ((Float)value / (Float)bounds->width);
HXDLIN(1287)			this->set_scaleX(_hx_tmp1);
            		}
            		else {
HXLINE(1291)			this->set_scaleX((int)1);
            		}
HXLINE(1295)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_width,return )

Float DisplayObject_obj::get_x(){
            	HX_STACK_FRAME("openfl.display.DisplayObject","get_x",0xc67a5d98,"openfl.display.DisplayObject.get_x","openfl/display/DisplayObject.hx",1302,0xc7539829)
            	HX_STACK_THIS(this)
HXLINE(1302)		return this->_hx___transform->tx;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_x,return )

Float DisplayObject_obj::set_x(Float value){
            	HX_STACK_FRAME("openfl.display.DisplayObject","set_x",0xaf4953a4,"openfl.display.DisplayObject.set_x","openfl/display/DisplayObject.hx",1307,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1309)		Bool _hx_tmp = (value != this->_hx___transform->tx);
HXDLIN(1309)		if (_hx_tmp) {
HXLINE(1309)			Bool _hx_tmp1 = !(this->_hx___transformDirty);
HXDLIN(1309)			if (_hx_tmp1) {
HXLINE(1309)				this->_hx___transformDirty = true;
HXDLIN(1309)				::openfl::display::DisplayObject_obj::_hx___worldTransformDirty++;
            			}
            		}
HXLINE(1310)		return (this->_hx___transform->tx = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_x,return )

Float DisplayObject_obj::get_y(){
            	HX_STACK_FRAME("openfl.display.DisplayObject","get_y",0xc67a5d99,"openfl.display.DisplayObject.get_y","openfl/display/DisplayObject.hx",1317,0xc7539829)
            	HX_STACK_THIS(this)
HXLINE(1317)		return this->_hx___transform->ty;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_y,return )

Float DisplayObject_obj::set_y(Float value){
            	HX_STACK_FRAME("openfl.display.DisplayObject","set_y",0xaf4953a5,"openfl.display.DisplayObject.set_y","openfl/display/DisplayObject.hx",1322,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1324)		Bool _hx_tmp = (value != this->_hx___transform->ty);
HXDLIN(1324)		if (_hx_tmp) {
HXLINE(1324)			Bool _hx_tmp1 = !(this->_hx___transformDirty);
HXDLIN(1324)			if (_hx_tmp1) {
HXLINE(1324)				this->_hx___transformDirty = true;
HXDLIN(1324)				::openfl::display::DisplayObject_obj::_hx___worldTransformDirty++;
            			}
            		}
HXLINE(1325)		return (this->_hx___transform->ty = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_y,return )

 ::haxe::ds::StringMap DisplayObject_obj::_hx___broadcastEvents;

Int DisplayObject_obj::_hx___instanceCount;

Int DisplayObject_obj::_hx___worldRenderDirty;

Int DisplayObject_obj::_hx___worldTransformDirty;


DisplayObject_obj::DisplayObject_obj()
{
	HX_INIT_IMPLEMENT_DYNAMIC;
}

void DisplayObject_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(DisplayObject);
	HX_MARK_DYNAMIC;
	HX_MARK_MEMBER_NAME(loaderInfo,"loaderInfo");
	HX_MARK_MEMBER_NAME(opaqueBackground,"opaqueBackground");
	HX_MARK_MEMBER_NAME(parent,"parent");
	HX_MARK_MEMBER_NAME(scale9Grid,"scale9Grid");
	HX_MARK_MEMBER_NAME(stage,"stage");
	HX_MARK_MEMBER_NAME(_hx___worldColorTransform,"__worldColorTransform");
	HX_MARK_MEMBER_NAME(_hx___worldTransform,"__worldTransform");
	HX_MARK_MEMBER_NAME(_hx___alpha,"__alpha");
	HX_MARK_MEMBER_NAME(_hx___blendMode,"__blendMode");
	HX_MARK_MEMBER_NAME(_hx___cacheAsBitmap,"__cacheAsBitmap");
	HX_MARK_MEMBER_NAME(_hx___cacheAsBitmapMatrix,"__cacheAsBitmapMatrix");
	HX_MARK_MEMBER_NAME(_hx___cairo,"__cairo");
	HX_MARK_MEMBER_NAME(_hx___children,"__children");
	HX_MARK_MEMBER_NAME(_hx___filters,"__filters");
	HX_MARK_MEMBER_NAME(_hx___forceCacheAsBitmap,"__forceCacheAsBitmap");
	HX_MARK_MEMBER_NAME(_hx___graphics,"__graphics");
	HX_MARK_MEMBER_NAME(_hx___interactive,"__interactive");
	HX_MARK_MEMBER_NAME(_hx___isMask,"__isMask");
	HX_MARK_MEMBER_NAME(_hx___mask,"__mask");
	HX_MARK_MEMBER_NAME(_hx___name,"__name");
	HX_MARK_MEMBER_NAME(_hx___objectTransform,"__objectTransform");
	HX_MARK_MEMBER_NAME(_hx___renderable,"__renderable");
	HX_MARK_MEMBER_NAME(_hx___renderDirty,"__renderDirty");
	HX_MARK_MEMBER_NAME(_hx___renderParent,"__renderParent");
	HX_MARK_MEMBER_NAME(_hx___renderTransform,"__renderTransform");
	HX_MARK_MEMBER_NAME(_hx___rotation,"__rotation");
	HX_MARK_MEMBER_NAME(_hx___rotationCosine,"__rotationCosine");
	HX_MARK_MEMBER_NAME(_hx___rotationSine,"__rotationSine");
	HX_MARK_MEMBER_NAME(_hx___scrollRect,"__scrollRect");
	HX_MARK_MEMBER_NAME(_hx___transform,"__transform");
	HX_MARK_MEMBER_NAME(_hx___transformDirty,"__transformDirty");
	HX_MARK_MEMBER_NAME(_hx___visible,"__visible");
	HX_MARK_MEMBER_NAME(_hx___worldAlpha,"__worldAlpha");
	HX_MARK_MEMBER_NAME(_hx___worldAlphaChanged,"__worldAlphaChanged");
	HX_MARK_MEMBER_NAME(_hx___worldClip,"__worldClip");
	HX_MARK_MEMBER_NAME(_hx___worldClipChanged,"__worldClipChanged");
	HX_MARK_MEMBER_NAME(_hx___worldTransformCache,"__worldTransformCache");
	HX_MARK_MEMBER_NAME(_hx___worldTransformChanged,"__worldTransformChanged");
	HX_MARK_MEMBER_NAME(_hx___worldVisible,"__worldVisible");
	HX_MARK_MEMBER_NAME(_hx___worldVisibleChanged,"__worldVisibleChanged");
	HX_MARK_MEMBER_NAME(_hx___worldZ,"__worldZ");
	 ::openfl::events::EventDispatcher_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void DisplayObject_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_DYNAMIC;
	HX_VISIT_MEMBER_NAME(loaderInfo,"loaderInfo");
	HX_VISIT_MEMBER_NAME(opaqueBackground,"opaqueBackground");
	HX_VISIT_MEMBER_NAME(parent,"parent");
	HX_VISIT_MEMBER_NAME(scale9Grid,"scale9Grid");
	HX_VISIT_MEMBER_NAME(stage,"stage");
	HX_VISIT_MEMBER_NAME(_hx___worldColorTransform,"__worldColorTransform");
	HX_VISIT_MEMBER_NAME(_hx___worldTransform,"__worldTransform");
	HX_VISIT_MEMBER_NAME(_hx___alpha,"__alpha");
	HX_VISIT_MEMBER_NAME(_hx___blendMode,"__blendMode");
	HX_VISIT_MEMBER_NAME(_hx___cacheAsBitmap,"__cacheAsBitmap");
	HX_VISIT_MEMBER_NAME(_hx___cacheAsBitmapMatrix,"__cacheAsBitmapMatrix");
	HX_VISIT_MEMBER_NAME(_hx___cairo,"__cairo");
	HX_VISIT_MEMBER_NAME(_hx___children,"__children");
	HX_VISIT_MEMBER_NAME(_hx___filters,"__filters");
	HX_VISIT_MEMBER_NAME(_hx___forceCacheAsBitmap,"__forceCacheAsBitmap");
	HX_VISIT_MEMBER_NAME(_hx___graphics,"__graphics");
	HX_VISIT_MEMBER_NAME(_hx___interactive,"__interactive");
	HX_VISIT_MEMBER_NAME(_hx___isMask,"__isMask");
	HX_VISIT_MEMBER_NAME(_hx___mask,"__mask");
	HX_VISIT_MEMBER_NAME(_hx___name,"__name");
	HX_VISIT_MEMBER_NAME(_hx___objectTransform,"__objectTransform");
	HX_VISIT_MEMBER_NAME(_hx___renderable,"__renderable");
	HX_VISIT_MEMBER_NAME(_hx___renderDirty,"__renderDirty");
	HX_VISIT_MEMBER_NAME(_hx___renderParent,"__renderParent");
	HX_VISIT_MEMBER_NAME(_hx___renderTransform,"__renderTransform");
	HX_VISIT_MEMBER_NAME(_hx___rotation,"__rotation");
	HX_VISIT_MEMBER_NAME(_hx___rotationCosine,"__rotationCosine");
	HX_VISIT_MEMBER_NAME(_hx___rotationSine,"__rotationSine");
	HX_VISIT_MEMBER_NAME(_hx___scrollRect,"__scrollRect");
	HX_VISIT_MEMBER_NAME(_hx___transform,"__transform");
	HX_VISIT_MEMBER_NAME(_hx___transformDirty,"__transformDirty");
	HX_VISIT_MEMBER_NAME(_hx___visible,"__visible");
	HX_VISIT_MEMBER_NAME(_hx___worldAlpha,"__worldAlpha");
	HX_VISIT_MEMBER_NAME(_hx___worldAlphaChanged,"__worldAlphaChanged");
	HX_VISIT_MEMBER_NAME(_hx___worldClip,"__worldClip");
	HX_VISIT_MEMBER_NAME(_hx___worldClipChanged,"__worldClipChanged");
	HX_VISIT_MEMBER_NAME(_hx___worldTransformCache,"__worldTransformCache");
	HX_VISIT_MEMBER_NAME(_hx___worldTransformChanged,"__worldTransformChanged");
	HX_VISIT_MEMBER_NAME(_hx___worldVisible,"__worldVisible");
	HX_VISIT_MEMBER_NAME(_hx___worldVisibleChanged,"__worldVisibleChanged");
	HX_VISIT_MEMBER_NAME(_hx___worldZ,"__worldZ");
	 ::openfl::events::EventDispatcher_obj::__Visit(HX_VISIT_ARG);
}

hx::Val DisplayObject_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_x()); }
		if (HX_FIELD_EQ(inName,"y") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_y()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"mask") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_mask()); }
		if (HX_FIELD_EQ(inName,"name") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_name()); }
		if (HX_FIELD_EQ(inName,"root") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_root()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"alpha") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_alpha()); }
		if (HX_FIELD_EQ(inName,"stage") ) { return hx::Val( stage); }
		if (HX_FIELD_EQ(inName,"width") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_width()); }
		if (HX_FIELD_EQ(inName,"get_x") ) { return hx::Val( get_x_dyn()); }
		if (HX_FIELD_EQ(inName,"set_x") ) { return hx::Val( set_x_dyn()); }
		if (HX_FIELD_EQ(inName,"get_y") ) { return hx::Val( get_y_dyn()); }
		if (HX_FIELD_EQ(inName,"set_y") ) { return hx::Val( set_y_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_height()); }
		if (HX_FIELD_EQ(inName,"mouseX") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_mouseX()); }
		if (HX_FIELD_EQ(inName,"mouseY") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_mouseY()); }
		if (HX_FIELD_EQ(inName,"parent") ) { return hx::Val( parent); }
		if (HX_FIELD_EQ(inName,"scaleX") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_scaleX()); }
		if (HX_FIELD_EQ(inName,"scaleY") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_scaleY()); }
		if (HX_FIELD_EQ(inName,"__mask") ) { return hx::Val( _hx___mask); }
		if (HX_FIELD_EQ(inName,"__name") ) { return hx::Val( _hx___name); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"filters") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_filters()); }
		if (HX_FIELD_EQ(inName,"visible") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_visible()); }
		if (HX_FIELD_EQ(inName,"__alpha") ) { return hx::Val( _hx___alpha); }
		if (HX_FIELD_EQ(inName,"__cairo") ) { return hx::Val( _hx___cairo); }
		if (HX_FIELD_EQ(inName,"getRect") ) { return hx::Val( getRect_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"rotation") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_rotation()); }
		if (HX_FIELD_EQ(inName,"__isMask") ) { return hx::Val( _hx___isMask); }
		if (HX_FIELD_EQ(inName,"__worldZ") ) { return hx::Val( _hx___worldZ); }
		if (HX_FIELD_EQ(inName,"__update") ) { return hx::Val( _hx___update_dyn()); }
		if (HX_FIELD_EQ(inName,"get_mask") ) { return hx::Val( get_mask_dyn()); }
		if (HX_FIELD_EQ(inName,"set_mask") ) { return hx::Val( set_mask_dyn()); }
		if (HX_FIELD_EQ(inName,"get_name") ) { return hx::Val( get_name_dyn()); }
		if (HX_FIELD_EQ(inName,"set_name") ) { return hx::Val( set_name_dyn()); }
		if (HX_FIELD_EQ(inName,"get_root") ) { return hx::Val( get_root_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"blendMode") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_blendMode()); }
		if (HX_FIELD_EQ(inName,"transform") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_transform()); }
		if (HX_FIELD_EQ(inName,"__filters") ) { return hx::Val( _hx___filters); }
		if (HX_FIELD_EQ(inName,"__visible") ) { return hx::Val( _hx___visible); }
		if (HX_FIELD_EQ(inName,"getBounds") ) { return hx::Val( getBounds_dyn()); }
		if (HX_FIELD_EQ(inName,"__cleanup") ) { return hx::Val( _hx___cleanup_dyn()); }
		if (HX_FIELD_EQ(inName,"__hitTest") ) { return hx::Val( _hx___hitTest_dyn()); }
		if (HX_FIELD_EQ(inName,"get_alpha") ) { return hx::Val( get_alpha_dyn()); }
		if (HX_FIELD_EQ(inName,"set_alpha") ) { return hx::Val( set_alpha_dyn()); }
		if (HX_FIELD_EQ(inName,"get_width") ) { return hx::Val( get_width_dyn()); }
		if (HX_FIELD_EQ(inName,"set_width") ) { return hx::Val( set_width_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"loaderInfo") ) { return hx::Val( loaderInfo); }
		if (HX_FIELD_EQ(inName,"scale9Grid") ) { return hx::Val( scale9Grid); }
		if (HX_FIELD_EQ(inName,"scrollRect") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_scrollRect()); }
		if (HX_FIELD_EQ(inName,"__children") ) { return hx::Val( _hx___children); }
		if (HX_FIELD_EQ(inName,"__graphics") ) { return hx::Val( _hx___graphics); }
		if (HX_FIELD_EQ(inName,"__rotation") ) { return hx::Val( _hx___rotation); }
		if (HX_FIELD_EQ(inName,"__dispatch") ) { return hx::Val( _hx___dispatch_dyn()); }
		if (HX_FIELD_EQ(inName,"__renderGL") ) { return hx::Val( _hx___renderGL_dyn()); }
		if (HX_FIELD_EQ(inName,"get_height") ) { return hx::Val( get_height_dyn()); }
		if (HX_FIELD_EQ(inName,"set_height") ) { return hx::Val( set_height_dyn()); }
		if (HX_FIELD_EQ(inName,"get_mouseX") ) { return hx::Val( get_mouseX_dyn()); }
		if (HX_FIELD_EQ(inName,"get_mouseY") ) { return hx::Val( get_mouseY_dyn()); }
		if (HX_FIELD_EQ(inName,"get_scaleX") ) { return hx::Val( get_scaleX_dyn()); }
		if (HX_FIELD_EQ(inName,"set_scaleX") ) { return hx::Val( set_scaleX_dyn()); }
		if (HX_FIELD_EQ(inName,"get_scaleY") ) { return hx::Val( get_scaleY_dyn()); }
		if (HX_FIELD_EQ(inName,"set_scaleY") ) { return hx::Val( set_scaleY_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__blendMode") ) { return hx::Val( _hx___blendMode); }
		if (HX_FIELD_EQ(inName,"__transform") ) { return hx::Val( _hx___transform); }
		if (HX_FIELD_EQ(inName,"__worldClip") ) { return hx::Val( _hx___worldClip); }
		if (HX_FIELD_EQ(inName,"__getBounds") ) { return hx::Val( _hx___getBounds_dyn()); }
		if (HX_FIELD_EQ(inName,"__getCursor") ) { return hx::Val( _hx___getCursor_dyn()); }
		if (HX_FIELD_EQ(inName,"__renderDOM") ) { return hx::Val( _hx___renderDOM_dyn()); }
		if (HX_FIELD_EQ(inName,"get_filters") ) { return hx::Val( get_filters_dyn()); }
		if (HX_FIELD_EQ(inName,"set_filters") ) { return hx::Val( set_filters_dyn()); }
		if (HX_FIELD_EQ(inName,"get_visible") ) { return hx::Val( get_visible_dyn()); }
		if (HX_FIELD_EQ(inName,"set_visible") ) { return hx::Val( set_visible_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__renderable") ) { return hx::Val( _hx___renderable); }
		if (HX_FIELD_EQ(inName,"__scrollRect") ) { return hx::Val( _hx___scrollRect); }
		if (HX_FIELD_EQ(inName,"__worldAlpha") ) { return hx::Val( _hx___worldAlpha); }
		if (HX_FIELD_EQ(inName,"hitTestPoint") ) { return hx::Val( hitTestPoint_dyn()); }
		if (HX_FIELD_EQ(inName,"__enterFrame") ) { return hx::Val( _hx___enterFrame_dyn()); }
		if (HX_FIELD_EQ(inName,"__updateMask") ) { return hx::Val( _hx___updateMask_dyn()); }
		if (HX_FIELD_EQ(inName,"get_rotation") ) { return hx::Val( get_rotation_dyn()); }
		if (HX_FIELD_EQ(inName,"set_rotation") ) { return hx::Val( set_rotation_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"cacheAsBitmap") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_cacheAsBitmap()); }
		if (HX_FIELD_EQ(inName,"__interactive") ) { return hx::Val( _hx___interactive); }
		if (HX_FIELD_EQ(inName,"__renderDirty") ) { return hx::Val( _hx___renderDirty); }
		if (HX_FIELD_EQ(inName,"dispatchEvent") ) { return hx::Val( dispatchEvent_dyn()); }
		if (HX_FIELD_EQ(inName,"globalToLocal") ) { return hx::Val( globalToLocal_dyn()); }
		if (HX_FIELD_EQ(inName,"hitTestObject") ) { return hx::Val( hitTestObject_dyn()); }
		if (HX_FIELD_EQ(inName,"localToGlobal") ) { return hx::Val( localToGlobal_dyn()); }
		if (HX_FIELD_EQ(inName,"__hitTestMask") ) { return hx::Val( _hx___hitTestMask_dyn()); }
		if (HX_FIELD_EQ(inName,"__renderCairo") ) { return hx::Val( _hx___renderCairo_dyn()); }
		if (HX_FIELD_EQ(inName,"get_blendMode") ) { return hx::Val( get_blendMode_dyn()); }
		if (HX_FIELD_EQ(inName,"set_blendMode") ) { return hx::Val( set_blendMode_dyn()); }
		if (HX_FIELD_EQ(inName,"get_transform") ) { return hx::Val( get_transform_dyn()); }
		if (HX_FIELD_EQ(inName,"set_transform") ) { return hx::Val( set_transform_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__renderParent") ) { return hx::Val( _hx___renderParent); }
		if (HX_FIELD_EQ(inName,"__rotationSine") ) { return hx::Val( _hx___rotationSine); }
		if (HX_FIELD_EQ(inName,"__worldVisible") ) { return hx::Val( _hx___worldVisible); }
		if (HX_FIELD_EQ(inName,"__renderCanvas") ) { return hx::Val( _hx___renderCanvas_dyn()); }
		if (HX_FIELD_EQ(inName,"get_scrollRect") ) { return hx::Val( get_scrollRect_dyn()); }
		if (HX_FIELD_EQ(inName,"set_scrollRect") ) { return hx::Val( set_scrollRect_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__cacheAsBitmap") ) { return hx::Val( _hx___cacheAsBitmap); }
		if (HX_FIELD_EQ(inName,"__dispatchEvent") ) { return hx::Val( _hx___dispatchEvent_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"opaqueBackground") ) { return hx::Val( opaqueBackground); }
		if (HX_FIELD_EQ(inName,"__worldTransform") ) { return hx::Val( _hx___worldTransform); }
		if (HX_FIELD_EQ(inName,"__rotationCosine") ) { return hx::Val( _hx___rotationCosine); }
		if (HX_FIELD_EQ(inName,"__transformDirty") ) { return hx::Val( _hx___transformDirty); }
		if (HX_FIELD_EQ(inName,"addEventListener") ) { return hx::Val( addEventListener_dyn()); }
		if (HX_FIELD_EQ(inName,"__getInteractive") ) { return hx::Val( _hx___getInteractive_dyn()); }
		if (HX_FIELD_EQ(inName,"__getLocalBounds") ) { return hx::Val( _hx___getLocalBounds_dyn()); }
		if (HX_FIELD_EQ(inName,"__setRenderDirty") ) { return hx::Val( _hx___setRenderDirty_dyn()); }
		if (HX_FIELD_EQ(inName,"__updateChildren") ) { return hx::Val( _hx___updateChildren_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__objectTransform") ) { return hx::Val( _hx___objectTransform); }
		if (HX_FIELD_EQ(inName,"__renderTransform") ) { return hx::Val( _hx___renderTransform); }
		if (HX_FIELD_EQ(inName,"__getRenderBounds") ) { return hx::Val( _hx___getRenderBounds_dyn()); }
		if (HX_FIELD_EQ(inName,"__renderCairoMask") ) { return hx::Val( _hx___renderCairoMask_dyn()); }
		if (HX_FIELD_EQ(inName,"get_cacheAsBitmap") ) { return hx::Val( get_cacheAsBitmap_dyn()); }
		if (HX_FIELD_EQ(inName,"set_cacheAsBitmap") ) { return hx::Val( set_cacheAsBitmap_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__worldClipChanged") ) { return hx::Val( _hx___worldClipChanged); }
		if (HX_FIELD_EQ(inName,"__dispatchChildren") ) { return hx::Val( _hx___dispatchChildren_dyn()); }
		if (HX_FIELD_EQ(inName,"__readGraphicsData") ) { return hx::Val( _hx___readGraphicsData_dyn()); }
		if (HX_FIELD_EQ(inName,"__renderCanvasMask") ) { return hx::Val( _hx___renderCanvasMask_dyn()); }
		if (HX_FIELD_EQ(inName,"__updateTransforms") ) { return hx::Val( _hx___updateTransforms_dyn()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"cacheAsBitmapMatrix") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_cacheAsBitmapMatrix()); }
		if (HX_FIELD_EQ(inName,"__worldAlphaChanged") ) { return hx::Val( _hx___worldAlphaChanged); }
		if (HX_FIELD_EQ(inName,"removeEventListener") ) { return hx::Val( removeEventListener_dyn()); }
		if (HX_FIELD_EQ(inName,"__getWorldTransform") ) { return hx::Val( _hx___getWorldTransform_dyn()); }
		if (HX_FIELD_EQ(inName,"__setStageReference") ) { return hx::Val( _hx___setStageReference_dyn()); }
		if (HX_FIELD_EQ(inName,"__setTransformDirty") ) { return hx::Val( _hx___setTransformDirty_dyn()); }
		if (HX_FIELD_EQ(inName,"__stopAllMovieClips") ) { return hx::Val( _hx___stopAllMovieClips_dyn()); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__forceCacheAsBitmap") ) { return hx::Val( _hx___forceCacheAsBitmap); }
		if (HX_FIELD_EQ(inName,"__getRenderTransform") ) { return hx::Val( _hx___getRenderTransform_dyn()); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__worldColorTransform") ) { return hx::Val( _hx___worldColorTransform); }
		if (HX_FIELD_EQ(inName,"__cacheAsBitmapMatrix") ) { return hx::Val( _hx___cacheAsBitmapMatrix); }
		if (HX_FIELD_EQ(inName,"__worldTransformCache") ) { return hx::Val( _hx___worldTransformCache); }
		if (HX_FIELD_EQ(inName,"__worldVisibleChanged") ) { return hx::Val( _hx___worldVisibleChanged); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"__worldTransformChanged") ) { return hx::Val( _hx___worldTransformChanged); }
		if (HX_FIELD_EQ(inName,"get_cacheAsBitmapMatrix") ) { return hx::Val( get_cacheAsBitmapMatrix_dyn()); }
		if (HX_FIELD_EQ(inName,"set_cacheAsBitmapMatrix") ) { return hx::Val( set_cacheAsBitmapMatrix_dyn()); }
	}
	HX_CHECK_DYNAMIC_GET_FIELD(inName);
	return super::__Field(inName,inCallProp);
}

bool DisplayObject_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 15:
		if (HX_FIELD_EQ(inName,"__instanceCount") ) { outValue = _hx___instanceCount; return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__broadcastEvents") ) { outValue = _hx___broadcastEvents; return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__worldRenderDirty") ) { outValue = _hx___worldRenderDirty; return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__worldTransformDirty") ) { outValue = _hx___worldTransformDirty; return true; }
	}
	return false;
}

hx::Val DisplayObject_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_x(inValue) ); }
		if (HX_FIELD_EQ(inName,"y") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_y(inValue) ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"mask") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_mask(inValue) ); }
		if (HX_FIELD_EQ(inName,"name") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_name(inValue) ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"alpha") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_alpha(inValue) ); }
		if (HX_FIELD_EQ(inName,"stage") ) { stage=inValue.Cast<  ::openfl::display::Stage >(); return inValue; }
		if (HX_FIELD_EQ(inName,"width") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_width(inValue) ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_height(inValue) ); }
		if (HX_FIELD_EQ(inName,"parent") ) { parent=inValue.Cast<  ::openfl::display::DisplayObjectContainer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scaleX") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_scaleX(inValue) ); }
		if (HX_FIELD_EQ(inName,"scaleY") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_scaleY(inValue) ); }
		if (HX_FIELD_EQ(inName,"__mask") ) { _hx___mask=inValue.Cast<  ::openfl::display::DisplayObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__name") ) { _hx___name=inValue.Cast< ::String >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"filters") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_filters(inValue) ); }
		if (HX_FIELD_EQ(inName,"visible") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_visible(inValue) ); }
		if (HX_FIELD_EQ(inName,"__alpha") ) { _hx___alpha=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__cairo") ) { _hx___cairo=inValue.Cast<  ::lime::graphics::cairo::Cairo >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"rotation") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_rotation(inValue) ); }
		if (HX_FIELD_EQ(inName,"__isMask") ) { _hx___isMask=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__worldZ") ) { _hx___worldZ=inValue.Cast< Int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"blendMode") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_blendMode(inValue) ); }
		if (HX_FIELD_EQ(inName,"transform") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_transform(inValue) ); }
		if (HX_FIELD_EQ(inName,"__filters") ) { _hx___filters=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__visible") ) { _hx___visible=inValue.Cast< Bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"loaderInfo") ) { loaderInfo=inValue.Cast<  ::openfl::display::LoaderInfo >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scale9Grid") ) { scale9Grid=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scrollRect") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_scrollRect(inValue) ); }
		if (HX_FIELD_EQ(inName,"__children") ) { _hx___children=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__graphics") ) { _hx___graphics=inValue.Cast<  ::openfl::display::Graphics >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__rotation") ) { _hx___rotation=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__blendMode") ) { _hx___blendMode=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__transform") ) { _hx___transform=inValue.Cast<  ::openfl::geom::Matrix >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__worldClip") ) { _hx___worldClip=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__renderable") ) { _hx___renderable=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__scrollRect") ) { _hx___scrollRect=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__worldAlpha") ) { _hx___worldAlpha=inValue.Cast< Float >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"cacheAsBitmap") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_cacheAsBitmap(inValue) ); }
		if (HX_FIELD_EQ(inName,"__interactive") ) { _hx___interactive=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__renderDirty") ) { _hx___renderDirty=inValue.Cast< Bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__renderParent") ) { _hx___renderParent=inValue.Cast<  ::openfl::display::DisplayObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__rotationSine") ) { _hx___rotationSine=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__worldVisible") ) { _hx___worldVisible=inValue.Cast< Bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__cacheAsBitmap") ) { _hx___cacheAsBitmap=inValue.Cast< Bool >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"opaqueBackground") ) { opaqueBackground=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__worldTransform") ) { _hx___worldTransform=inValue.Cast<  ::openfl::geom::Matrix >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__rotationCosine") ) { _hx___rotationCosine=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__transformDirty") ) { _hx___transformDirty=inValue.Cast< Bool >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__objectTransform") ) { _hx___objectTransform=inValue.Cast<  ::openfl::geom::Transform >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__renderTransform") ) { _hx___renderTransform=inValue.Cast<  ::openfl::geom::Matrix >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__worldClipChanged") ) { _hx___worldClipChanged=inValue.Cast< Bool >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"cacheAsBitmapMatrix") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_cacheAsBitmapMatrix(inValue) ); }
		if (HX_FIELD_EQ(inName,"__worldAlphaChanged") ) { _hx___worldAlphaChanged=inValue.Cast< Bool >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__forceCacheAsBitmap") ) { _hx___forceCacheAsBitmap=inValue.Cast< Bool >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__worldColorTransform") ) { _hx___worldColorTransform=inValue.Cast<  ::openfl::geom::ColorTransform >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__cacheAsBitmapMatrix") ) { _hx___cacheAsBitmapMatrix=inValue.Cast<  ::openfl::geom::Matrix >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__worldTransformCache") ) { _hx___worldTransformCache=inValue.Cast<  ::openfl::geom::Matrix >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__worldVisibleChanged") ) { _hx___worldVisibleChanged=inValue.Cast< Bool >(); return inValue; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"__worldTransformChanged") ) { _hx___worldTransformChanged=inValue.Cast< Bool >(); return inValue; }
	}
	try { return super::__SetField(inName,inValue,inCallProp); }
	catch(Dynamic e) { HX_DYNAMIC_SET_FIELD(inName,inValue); }
	return inValue;
}

bool DisplayObject_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 15:
		if (HX_FIELD_EQ(inName,"__instanceCount") ) { _hx___instanceCount=ioValue.Cast< Int >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__broadcastEvents") ) { _hx___broadcastEvents=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__worldRenderDirty") ) { _hx___worldRenderDirty=ioValue.Cast< Int >(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__worldTransformDirty") ) { _hx___worldTransformDirty=ioValue.Cast< Int >(); return true; }
	}
	return false;
}

void DisplayObject_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("alpha","\x5e","\xa7","\x96","\x21"));
	outFields->push(HX_HCSTRING("blendMode","\x54","\xe4","\x37","\x0c"));
	outFields->push(HX_HCSTRING("cacheAsBitmap","\xe3","\x82","\x0f","\x6a"));
	outFields->push(HX_HCSTRING("cacheAsBitmapMatrix","\x84","\xf9","\x81","\x95"));
	outFields->push(HX_HCSTRING("filters","\xbb","\xa1","\x46","\x09"));
	outFields->push(HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"));
	outFields->push(HX_HCSTRING("loaderInfo","\x21","\xb2","\xe4","\xb6"));
	outFields->push(HX_HCSTRING("mask","\xec","\x40","\x56","\x48"));
	outFields->push(HX_HCSTRING("mouseX","\x93","\x4a","\x0e","\xcc"));
	outFields->push(HX_HCSTRING("mouseY","\x94","\x4a","\x0e","\xcc"));
	outFields->push(HX_HCSTRING("name","\x4b","\x72","\xff","\x48"));
	outFields->push(HX_HCSTRING("opaqueBackground","\x2f","\xb8","\xa7","\x1a"));
	outFields->push(HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed"));
	outFields->push(HX_HCSTRING("root","\x22","\xee","\xae","\x4b"));
	outFields->push(HX_HCSTRING("rotation","\x3e","\x3d","\x86","\x08"));
	outFields->push(HX_HCSTRING("scale9Grid","\xd5","\x50","\x22","\x8f"));
	outFields->push(HX_HCSTRING("scaleX","\x8e","\xea","\x25","\x3c"));
	outFields->push(HX_HCSTRING("scaleY","\x8f","\xea","\x25","\x3c"));
	outFields->push(HX_HCSTRING("scrollRect","\xd1","\xdb","\x66","\x09"));
	outFields->push(HX_HCSTRING("stage","\xbe","\x6a","\x0b","\x84"));
	outFields->push(HX_HCSTRING("transform","\x6c","\x2d","\x93","\x45"));
	outFields->push(HX_HCSTRING("visible","\x72","\x78","\x24","\xa3"));
	outFields->push(HX_HCSTRING("width","\x06","\xb6","\x62","\xca"));
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("y","\x79","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("__worldColorTransform","\x5b","\xce","\x21","\xa3"));
	outFields->push(HX_HCSTRING("__worldTransform","\xda","\xa7","\xd8","\x9a"));
	outFields->push(HX_HCSTRING("__alpha","\x3e","\x00","\xf5","\x8b"));
	outFields->push(HX_HCSTRING("__blendMode","\x34","\x2d","\x64","\x3a"));
	outFields->push(HX_HCSTRING("__cacheAsBitmap","\xc3","\xbb","\xc1","\xf1"));
	outFields->push(HX_HCSTRING("__cacheAsBitmapMatrix","\x64","\x1a","\x76","\x03"));
	outFields->push(HX_HCSTRING("__cairo","\x68","\x89","\x77","\xab"));
	outFields->push(HX_HCSTRING("__children","\x5f","\x8c","\xa2","\x13"));
	outFields->push(HX_HCSTRING("__filters","\x9b","\xf2","\x94","\x8a"));
	outFields->push(HX_HCSTRING("__forceCacheAsBitmap","\x18","\xa5","\xdf","\xcb"));
	outFields->push(HX_HCSTRING("__graphics","\xeb","\x6b","\xa0","\xb5"));
	outFields->push(HX_HCSTRING("__interactive","\xc2","\x7e","\xd1","\x84"));
	outFields->push(HX_HCSTRING("__isMask","\x16","\x71","\xec","\x0d"));
	outFields->push(HX_HCSTRING("__mask","\x0c","\xa4","\x4e","\xf7"));
	outFields->push(HX_HCSTRING("__name","\x6b","\xd5","\xf7","\xf7"));
	outFields->push(HX_HCSTRING("__objectTransform","\x8d","\x6f","\x30","\x54"));
	outFields->push(HX_HCSTRING("__renderable","\x10","\xb7","\x2c","\x2b"));
	outFields->push(HX_HCSTRING("__renderDirty","\xbc","\xbd","\xf9","\xed"));
	outFields->push(HX_HCSTRING("__renderParent","\x40","\x8c","\x94","\x7d"));
	outFields->push(HX_HCSTRING("__renderTransform","\x16","\xb8","\x95","\xb1"));
	outFields->push(HX_HCSTRING("__rotation","\x5e","\xb0","\xbe","\xab"));
	outFields->push(HX_HCSTRING("__rotationCosine","\xf7","\x71","\x7b","\x14"));
	outFields->push(HX_HCSTRING("__rotationSine","\xcb","\xf9","\xad","\x3f"));
	outFields->push(HX_HCSTRING("__scrollRect","\xf1","\x56","\xfa","\x41"));
	outFields->push(HX_HCSTRING("__transform","\x4c","\x76","\xbf","\x73"));
	outFields->push(HX_HCSTRING("__transformDirty","\x26","\xf6","\x91","\x84"));
	outFields->push(HX_HCSTRING("__visible","\x52","\xc9","\x72","\x24"));
	outFields->push(HX_HCSTRING("__worldAlpha","\xcc","\xd2","\xd6","\xc5"));
	outFields->push(HX_HCSTRING("__worldAlphaChanged","\x88","\x37","\xd8","\xd0"));
	outFields->push(HX_HCSTRING("__worldClip","\x22","\x0b","\x0b","\x7d"));
	outFields->push(HX_HCSTRING("__worldClipChanged","\xf2","\x55","\x0d","\x68"));
	outFields->push(HX_HCSTRING("__worldTransformCache","\x08","\xac","\x78","\xad"));
	outFields->push(HX_HCSTRING("__worldTransformChanged","\x3a","\x40","\xad","\x27"));
	outFields->push(HX_HCSTRING("__worldVisible","\x60","\xdb","\x58","\xf8"));
	outFields->push(HX_HCSTRING("__worldVisibleChanged","\x74","\x29","\x51","\x77"));
	outFields->push(HX_HCSTRING("__worldZ","\xe8","\x5c","\xce","\x71"));
	HX_APPEND_DYNAMIC_FIELDS(outFields);
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo DisplayObject_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::openfl::display::LoaderInfo*/ ,(int)offsetof(DisplayObject_obj,loaderInfo),HX_HCSTRING("loaderInfo","\x21","\xb2","\xe4","\xb6")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(DisplayObject_obj,opaqueBackground),HX_HCSTRING("opaqueBackground","\x2f","\xb8","\xa7","\x1a")},
	{hx::fsObject /*::openfl::display::DisplayObjectContainer*/ ,(int)offsetof(DisplayObject_obj,parent),HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(DisplayObject_obj,scale9Grid),HX_HCSTRING("scale9Grid","\xd5","\x50","\x22","\x8f")},
	{hx::fsObject /*::openfl::display::Stage*/ ,(int)offsetof(DisplayObject_obj,stage),HX_HCSTRING("stage","\xbe","\x6a","\x0b","\x84")},
	{hx::fsObject /*::openfl::geom::ColorTransform*/ ,(int)offsetof(DisplayObject_obj,_hx___worldColorTransform),HX_HCSTRING("__worldColorTransform","\x5b","\xce","\x21","\xa3")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(int)offsetof(DisplayObject_obj,_hx___worldTransform),HX_HCSTRING("__worldTransform","\xda","\xa7","\xd8","\x9a")},
	{hx::fsFloat,(int)offsetof(DisplayObject_obj,_hx___alpha),HX_HCSTRING("__alpha","\x3e","\x00","\xf5","\x8b")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(DisplayObject_obj,_hx___blendMode),HX_HCSTRING("__blendMode","\x34","\x2d","\x64","\x3a")},
	{hx::fsBool,(int)offsetof(DisplayObject_obj,_hx___cacheAsBitmap),HX_HCSTRING("__cacheAsBitmap","\xc3","\xbb","\xc1","\xf1")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(int)offsetof(DisplayObject_obj,_hx___cacheAsBitmapMatrix),HX_HCSTRING("__cacheAsBitmapMatrix","\x64","\x1a","\x76","\x03")},
	{hx::fsObject /*::lime::graphics::cairo::Cairo*/ ,(int)offsetof(DisplayObject_obj,_hx___cairo),HX_HCSTRING("__cairo","\x68","\x89","\x77","\xab")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(DisplayObject_obj,_hx___children),HX_HCSTRING("__children","\x5f","\x8c","\xa2","\x13")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(DisplayObject_obj,_hx___filters),HX_HCSTRING("__filters","\x9b","\xf2","\x94","\x8a")},
	{hx::fsBool,(int)offsetof(DisplayObject_obj,_hx___forceCacheAsBitmap),HX_HCSTRING("__forceCacheAsBitmap","\x18","\xa5","\xdf","\xcb")},
	{hx::fsObject /*::openfl::display::Graphics*/ ,(int)offsetof(DisplayObject_obj,_hx___graphics),HX_HCSTRING("__graphics","\xeb","\x6b","\xa0","\xb5")},
	{hx::fsBool,(int)offsetof(DisplayObject_obj,_hx___interactive),HX_HCSTRING("__interactive","\xc2","\x7e","\xd1","\x84")},
	{hx::fsBool,(int)offsetof(DisplayObject_obj,_hx___isMask),HX_HCSTRING("__isMask","\x16","\x71","\xec","\x0d")},
	{hx::fsObject /*::openfl::display::DisplayObject*/ ,(int)offsetof(DisplayObject_obj,_hx___mask),HX_HCSTRING("__mask","\x0c","\xa4","\x4e","\xf7")},
	{hx::fsString,(int)offsetof(DisplayObject_obj,_hx___name),HX_HCSTRING("__name","\x6b","\xd5","\xf7","\xf7")},
	{hx::fsObject /*::openfl::geom::Transform*/ ,(int)offsetof(DisplayObject_obj,_hx___objectTransform),HX_HCSTRING("__objectTransform","\x8d","\x6f","\x30","\x54")},
	{hx::fsBool,(int)offsetof(DisplayObject_obj,_hx___renderable),HX_HCSTRING("__renderable","\x10","\xb7","\x2c","\x2b")},
	{hx::fsBool,(int)offsetof(DisplayObject_obj,_hx___renderDirty),HX_HCSTRING("__renderDirty","\xbc","\xbd","\xf9","\xed")},
	{hx::fsObject /*::openfl::display::DisplayObject*/ ,(int)offsetof(DisplayObject_obj,_hx___renderParent),HX_HCSTRING("__renderParent","\x40","\x8c","\x94","\x7d")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(int)offsetof(DisplayObject_obj,_hx___renderTransform),HX_HCSTRING("__renderTransform","\x16","\xb8","\x95","\xb1")},
	{hx::fsFloat,(int)offsetof(DisplayObject_obj,_hx___rotation),HX_HCSTRING("__rotation","\x5e","\xb0","\xbe","\xab")},
	{hx::fsFloat,(int)offsetof(DisplayObject_obj,_hx___rotationCosine),HX_HCSTRING("__rotationCosine","\xf7","\x71","\x7b","\x14")},
	{hx::fsFloat,(int)offsetof(DisplayObject_obj,_hx___rotationSine),HX_HCSTRING("__rotationSine","\xcb","\xf9","\xad","\x3f")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(DisplayObject_obj,_hx___scrollRect),HX_HCSTRING("__scrollRect","\xf1","\x56","\xfa","\x41")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(int)offsetof(DisplayObject_obj,_hx___transform),HX_HCSTRING("__transform","\x4c","\x76","\xbf","\x73")},
	{hx::fsBool,(int)offsetof(DisplayObject_obj,_hx___transformDirty),HX_HCSTRING("__transformDirty","\x26","\xf6","\x91","\x84")},
	{hx::fsBool,(int)offsetof(DisplayObject_obj,_hx___visible),HX_HCSTRING("__visible","\x52","\xc9","\x72","\x24")},
	{hx::fsFloat,(int)offsetof(DisplayObject_obj,_hx___worldAlpha),HX_HCSTRING("__worldAlpha","\xcc","\xd2","\xd6","\xc5")},
	{hx::fsBool,(int)offsetof(DisplayObject_obj,_hx___worldAlphaChanged),HX_HCSTRING("__worldAlphaChanged","\x88","\x37","\xd8","\xd0")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(DisplayObject_obj,_hx___worldClip),HX_HCSTRING("__worldClip","\x22","\x0b","\x0b","\x7d")},
	{hx::fsBool,(int)offsetof(DisplayObject_obj,_hx___worldClipChanged),HX_HCSTRING("__worldClipChanged","\xf2","\x55","\x0d","\x68")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(int)offsetof(DisplayObject_obj,_hx___worldTransformCache),HX_HCSTRING("__worldTransformCache","\x08","\xac","\x78","\xad")},
	{hx::fsBool,(int)offsetof(DisplayObject_obj,_hx___worldTransformChanged),HX_HCSTRING("__worldTransformChanged","\x3a","\x40","\xad","\x27")},
	{hx::fsBool,(int)offsetof(DisplayObject_obj,_hx___worldVisible),HX_HCSTRING("__worldVisible","\x60","\xdb","\x58","\xf8")},
	{hx::fsBool,(int)offsetof(DisplayObject_obj,_hx___worldVisibleChanged),HX_HCSTRING("__worldVisibleChanged","\x74","\x29","\x51","\x77")},
	{hx::fsInt,(int)offsetof(DisplayObject_obj,_hx___worldZ),HX_HCSTRING("__worldZ","\xe8","\x5c","\xce","\x71")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo DisplayObject_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &DisplayObject_obj::_hx___broadcastEvents,HX_HCSTRING("__broadcastEvents","\xda","\x4d","\x64","\x5a")},
	{hx::fsInt,(void *) &DisplayObject_obj::_hx___instanceCount,HX_HCSTRING("__instanceCount","\xda","\x31","\x1e","\x3f")},
	{hx::fsInt,(void *) &DisplayObject_obj::_hx___worldRenderDirty,HX_HCSTRING("__worldRenderDirty","\xca","\xee","\xec","\xf2")},
	{hx::fsInt,(void *) &DisplayObject_obj::_hx___worldTransformDirty,HX_HCSTRING("__worldTransformDirty","\xd8","\x61","\x34","\x46")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String DisplayObject_obj_sMemberFields[] = {
	HX_HCSTRING("loaderInfo","\x21","\xb2","\xe4","\xb6"),
	HX_HCSTRING("opaqueBackground","\x2f","\xb8","\xa7","\x1a"),
	HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed"),
	HX_HCSTRING("scale9Grid","\xd5","\x50","\x22","\x8f"),
	HX_HCSTRING("stage","\xbe","\x6a","\x0b","\x84"),
	HX_HCSTRING("__worldColorTransform","\x5b","\xce","\x21","\xa3"),
	HX_HCSTRING("__worldTransform","\xda","\xa7","\xd8","\x9a"),
	HX_HCSTRING("__alpha","\x3e","\x00","\xf5","\x8b"),
	HX_HCSTRING("__blendMode","\x34","\x2d","\x64","\x3a"),
	HX_HCSTRING("__cacheAsBitmap","\xc3","\xbb","\xc1","\xf1"),
	HX_HCSTRING("__cacheAsBitmapMatrix","\x64","\x1a","\x76","\x03"),
	HX_HCSTRING("__cairo","\x68","\x89","\x77","\xab"),
	HX_HCSTRING("__children","\x5f","\x8c","\xa2","\x13"),
	HX_HCSTRING("__filters","\x9b","\xf2","\x94","\x8a"),
	HX_HCSTRING("__forceCacheAsBitmap","\x18","\xa5","\xdf","\xcb"),
	HX_HCSTRING("__graphics","\xeb","\x6b","\xa0","\xb5"),
	HX_HCSTRING("__interactive","\xc2","\x7e","\xd1","\x84"),
	HX_HCSTRING("__isMask","\x16","\x71","\xec","\x0d"),
	HX_HCSTRING("__mask","\x0c","\xa4","\x4e","\xf7"),
	HX_HCSTRING("__name","\x6b","\xd5","\xf7","\xf7"),
	HX_HCSTRING("__objectTransform","\x8d","\x6f","\x30","\x54"),
	HX_HCSTRING("__renderable","\x10","\xb7","\x2c","\x2b"),
	HX_HCSTRING("__renderDirty","\xbc","\xbd","\xf9","\xed"),
	HX_HCSTRING("__renderParent","\x40","\x8c","\x94","\x7d"),
	HX_HCSTRING("__renderTransform","\x16","\xb8","\x95","\xb1"),
	HX_HCSTRING("__rotation","\x5e","\xb0","\xbe","\xab"),
	HX_HCSTRING("__rotationCosine","\xf7","\x71","\x7b","\x14"),
	HX_HCSTRING("__rotationSine","\xcb","\xf9","\xad","\x3f"),
	HX_HCSTRING("__scrollRect","\xf1","\x56","\xfa","\x41"),
	HX_HCSTRING("__transform","\x4c","\x76","\xbf","\x73"),
	HX_HCSTRING("__transformDirty","\x26","\xf6","\x91","\x84"),
	HX_HCSTRING("__visible","\x52","\xc9","\x72","\x24"),
	HX_HCSTRING("__worldAlpha","\xcc","\xd2","\xd6","\xc5"),
	HX_HCSTRING("__worldAlphaChanged","\x88","\x37","\xd8","\xd0"),
	HX_HCSTRING("__worldClip","\x22","\x0b","\x0b","\x7d"),
	HX_HCSTRING("__worldClipChanged","\xf2","\x55","\x0d","\x68"),
	HX_HCSTRING("__worldTransformCache","\x08","\xac","\x78","\xad"),
	HX_HCSTRING("__worldTransformChanged","\x3a","\x40","\xad","\x27"),
	HX_HCSTRING("__worldVisible","\x60","\xdb","\x58","\xf8"),
	HX_HCSTRING("__worldVisibleChanged","\x74","\x29","\x51","\x77"),
	HX_HCSTRING("__worldZ","\xe8","\x5c","\xce","\x71"),
	HX_HCSTRING("addEventListener","\xcd","\x0b","\x64","\xf1"),
	HX_HCSTRING("dispatchEvent","\x00","\xc7","\x64","\xc6"),
	HX_HCSTRING("getBounds","\xab","\x0f","\x74","\xe2"),
	HX_HCSTRING("getRect","\xda","\xfc","\x29","\x1e"),
	HX_HCSTRING("globalToLocal","\xcd","\x4e","\xae","\x6b"),
	HX_HCSTRING("hitTestObject","\xe4","\x54","\x64","\xd7"),
	HX_HCSTRING("hitTestPoint","\xcb","\xa9","\x21","\xe4"),
	HX_HCSTRING("localToGlobal","\xc9","\x41","\xeb","\x47"),
	HX_HCSTRING("removeEventListener","\xca","\x87","\x75","\x55"),
	HX_HCSTRING("__cleanup","\x04","\x5d","\x90","\x2c"),
	HX_HCSTRING("__dispatch","\xda","\x41","\x9c","\xc1"),
	HX_HCSTRING("__dispatchChildren","\x39","\x81","\xf4","\xf4"),
	HX_HCSTRING("__dispatchEvent","\xe0","\xff","\x16","\x4e"),
	HX_HCSTRING("__enterFrame","\x15","\x7f","\xe3","\x3a"),
	HX_HCSTRING("__getBounds","\x8b","\x58","\xa0","\x10"),
	HX_HCSTRING("__getCursor","\xec","\x60","\x6b","\xe9"),
	HX_HCSTRING("__getInteractive","\x0c","\x1c","\x37","\xf8"),
	HX_HCSTRING("__getLocalBounds","\x6a","\x04","\x36","\xdf"),
	HX_HCSTRING("__getRenderBounds","\x01","\x11","\xb8","\x7b"),
	HX_HCSTRING("__getRenderTransform","\x60","\xc2","\x34","\xc0"),
	HX_HCSTRING("__getWorldTransform","\xd0","\xf4","\xfc","\x8b"),
	HX_HCSTRING("__hitTest","\x25","\xb1","\xcd","\x63"),
	HX_HCSTRING("__hitTestMask","\xb1","\x14","\xfd","\x3b"),
	HX_HCSTRING("__readGraphicsData","\x2b","\x10","\x91","\xf2"),
	HX_HCSTRING("__renderCairo","\x32","\x9e","\x42","\x55"),
	HX_HCSTRING("__renderCairoMask","\x3e","\x0c","\x22","\x6b"),
	HX_HCSTRING("__renderCanvas","\xee","\xdb","\x58","\x48"),
	HX_HCSTRING("__renderCanvasMask","\xfa","\xd7","\xef","\x51"),
	HX_HCSTRING("__renderDOM","\xac","\xf5","\x83","\xfb"),
	HX_HCSTRING("__renderGL","\x1b","\x1e","\x14","\x56"),
	HX_HCSTRING("__setRenderDirty","\x7a","\x43","\x7f","\x81"),
	HX_HCSTRING("__setStageReference","\x4f","\xe5","\xe5","\xf4"),
	HX_HCSTRING("__setTransformDirty","\x28","\x1b","\x24","\x99"),
	HX_HCSTRING("__stopAllMovieClips","\xd2","\x89","\xe8","\x53"),
	HX_HCSTRING("__update","\x29","\xf1","\x34","\x2f"),
	HX_HCSTRING("__updateChildren","\x88","\x97","\xd3","\xd9"),
	HX_HCSTRING("__updateMask","\xb5","\xa6","\x9e","\x39"),
	HX_HCSTRING("__updateTransforms","\x10","\xf4","\xb0","\x50"),
	HX_HCSTRING("get_alpha","\xb5","\x03","\x40","\x65"),
	HX_HCSTRING("set_alpha","\xc1","\xef","\x90","\x48"),
	HX_HCSTRING("get_blendMode","\x2b","\xb8","\x9b","\xcd"),
	HX_HCSTRING("set_blendMode","\x37","\x9a","\xa1","\x12"),
	HX_HCSTRING("get_cacheAsBitmap","\x3a","\x8e","\x7f","\x70"),
	HX_HCSTRING("set_cacheAsBitmap","\x46","\x66","\xed","\x93"),
	HX_HCSTRING("get_cacheAsBitmapMatrix","\x1b","\xa0","\xd7","\x9d"),
	HX_HCSTRING("set_cacheAsBitmapMatrix","\x27","\x09","\x39","\xa0"),
	HX_HCSTRING("get_filters","\xd2","\x01","\x41","\x8f"),
	HX_HCSTRING("set_filters","\xde","\x08","\xae","\x99"),
	HX_HCSTRING("get_height","\xb0","\x77","\xd3","\xf2"),
	HX_HCSTRING("set_height","\x24","\x16","\x51","\xf6"),
	HX_HCSTRING("get_mask","\x75","\xfc","\x10","\xc8"),
	HX_HCSTRING("set_mask","\xe9","\x55","\x6e","\x76"),
	HX_HCSTRING("get_mouseX","\x5c","\xba","\x95","\xbc"),
	HX_HCSTRING("get_mouseY","\x5d","\xba","\x95","\xbc"),
	HX_HCSTRING("get_name","\xd4","\x2d","\xba","\xc8"),
	HX_HCSTRING("set_name","\x48","\x87","\x17","\x77"),
	HX_HCSTRING("get_root","\xab","\xa9","\x69","\xcb"),
	HX_HCSTRING("get_rotation","\x47","\xf1","\x9f","\xbd"),
	HX_HCSTRING("set_rotation","\xbb","\x14","\x99","\xd2"),
	HX_HCSTRING("get_scaleX","\x57","\x5a","\xad","\x2c"),
	HX_HCSTRING("set_scaleX","\xcb","\xf8","\x2a","\x30"),
	HX_HCSTRING("get_scaleY","\x58","\x5a","\xad","\x2c"),
	HX_HCSTRING("set_scaleY","\xcc","\xf8","\x2a","\x30"),
	HX_HCSTRING("get_scrollRect","\x1a","\x64","\x5c","\x7f"),
	HX_HCSTRING("set_scrollRect","\x8e","\x4c","\x7c","\x9f"),
	HX_HCSTRING("get_transform","\x43","\x01","\xf7","\x06"),
	HX_HCSTRING("set_transform","\x4f","\xe3","\xfc","\x4b"),
	HX_HCSTRING("get_visible","\x89","\xd8","\x1e","\x29"),
	HX_HCSTRING("set_visible","\x95","\xdf","\x8b","\x33"),
	HX_HCSTRING("get_width","\x5d","\x12","\x0c","\x0e"),
	HX_HCSTRING("set_width","\x69","\xfe","\x5c","\xf1"),
	HX_HCSTRING("get_x","\x4f","\xa5","\x60","\x91"),
	HX_HCSTRING("set_x","\x5b","\x9b","\x2f","\x7a"),
	HX_HCSTRING("get_y","\x50","\xa5","\x60","\x91"),
	HX_HCSTRING("set_y","\x5c","\x9b","\x2f","\x7a"),
	::String(null()) };

static void DisplayObject_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(DisplayObject_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::_hx___broadcastEvents,"__broadcastEvents");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::_hx___instanceCount,"__instanceCount");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::_hx___worldRenderDirty,"__worldRenderDirty");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::_hx___worldTransformDirty,"__worldTransformDirty");
};

#ifdef HXCPP_VISIT_ALLOCS
static void DisplayObject_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::_hx___broadcastEvents,"__broadcastEvents");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::_hx___instanceCount,"__instanceCount");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::_hx___worldRenderDirty,"__worldRenderDirty");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::_hx___worldTransformDirty,"__worldTransformDirty");
};

#endif

hx::Class DisplayObject_obj::__mClass;

static ::String DisplayObject_obj_sStaticFields[] = {
	HX_HCSTRING("__broadcastEvents","\xda","\x4d","\x64","\x5a"),
	HX_HCSTRING("__instanceCount","\xda","\x31","\x1e","\x3f"),
	HX_HCSTRING("__worldRenderDirty","\xca","\xee","\xec","\xf2"),
	HX_HCSTRING("__worldTransformDirty","\xd8","\x61","\x34","\x46"),
	::String(null())
};

void DisplayObject_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.display.DisplayObject","\xf7","\x4b","\x6f","\xea");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &DisplayObject_obj::__GetStatic;
	__mClass->mSetStaticField = &DisplayObject_obj::__SetStatic;
	__mClass->mMarkFunc = DisplayObject_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(DisplayObject_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(DisplayObject_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< DisplayObject_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = DisplayObject_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = DisplayObject_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = DisplayObject_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void DisplayObject_obj::__boot()
{
{
            	HX_STACK_FRAME("openfl.display.DisplayObject","boot",0x26f12809,"openfl.display.DisplayObject.boot","openfl/display/DisplayObject.hx",48,0xc7539829)
HXLINE(  48)		_hx___broadcastEvents =  ::haxe::ds::StringMap_obj::__new();
            	}
{
            	HX_STACK_FRAME("openfl.display.DisplayObject","boot",0x26f12809,"openfl.display.DisplayObject.boot","openfl/display/DisplayObject.hx",49,0xc7539829)
HXLINE(  49)		_hx___instanceCount = (int)0;
            	}
{
            	HX_STACK_FRAME("openfl.display.DisplayObject","boot",0x26f12809,"openfl.display.DisplayObject.boot","openfl/display/DisplayObject.hx",50,0xc7539829)
HXLINE(  50)		_hx___worldRenderDirty = (int)0;
            	}
{
            	HX_STACK_FRAME("openfl.display.DisplayObject","boot",0x26f12809,"openfl.display.DisplayObject.boot","openfl/display/DisplayObject.hx",51,0xc7539829)
HXLINE(  51)		_hx___worldTransformDirty = (int)0;
            	}
}

} // end namespace openfl
} // end namespace display
