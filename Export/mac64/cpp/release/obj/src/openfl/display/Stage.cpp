// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_lime__backend_native_NativeApplication
#include <lime/_backend/native/NativeApplication.h>
#endif
#ifndef INCLUDED_lime_app_Application
#include <lime/app/Application.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app_Module
#include <lime/app/Module.h>
#endif
#ifndef INCLUDED_lime_app_Preloader
#include <lime/app/Preloader.h>
#endif
#ifndef INCLUDED_lime_app__Event_Float_Float_Int_Void
#include <lime/app/_Event_Float_Float_Int_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_Float_Float_Void
#include <lime/app/_Event_Float_Float_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_Int_Int_Void
#include <lime/app/_Event_Int_Int_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_Int_Void
#include <lime/app/_Event_Int_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_String_Int_Int_Void
#include <lime/app/_Event_String_Int_Int_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_String_Void
#include <lime/app/_Event_String_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_Void_Void
#include <lime/app/_Event_Void_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_lime_graphics_RenderContext_Void
#include <lime/app/_Event_lime_graphics_RenderContext_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_lime_ui_GamepadAxis_Float_Void
#include <lime/app/_Event_lime_ui_GamepadAxis_Float_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_lime_ui_GamepadButton_Void
#include <lime/app/_Event_lime_ui_GamepadButton_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_lime_ui_Gamepad_Void
#include <lime/app/_Event_lime_ui_Gamepad_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void
#include <lime/app/_Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_lime_ui_Touch_Void
#include <lime/app/_Event_lime_ui_Touch_Void.h>
#endif
#ifndef INCLUDED_lime_graphics_CanvasRenderContext
#include <lime/graphics/CanvasRenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics_ConsoleRenderContext
#include <lime/graphics/ConsoleRenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics_DOMRenderContext
#include <lime/graphics/DOMRenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics_GLRenderContext
#include <lime/graphics/GLRenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics_RenderContext
#include <lime/graphics/RenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics_Renderer
#include <lime/graphics/Renderer.h>
#endif
#ifndef INCLUDED_lime_graphics_RendererType
#include <lime/graphics/RendererType.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo_Cairo
#include <lime/graphics/cairo/Cairo.h>
#endif
#ifndef INCLUDED_lime_ui_Gamepad
#include <lime/ui/Gamepad.h>
#endif
#ifndef INCLUDED_lime_ui_Joystick
#include <lime/ui/Joystick.h>
#endif
#ifndef INCLUDED_lime_ui_Mouse
#include <lime/ui/Mouse.h>
#endif
#ifndef INCLUDED_lime_ui_MouseCursor
#include <lime/ui/MouseCursor.h>
#endif
#ifndef INCLUDED_lime_ui_Touch
#include <lime/ui/Touch.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_lime_ui__KeyModifier_KeyModifier_Impl_
#include <lime/ui/_KeyModifier/KeyModifier_Impl_.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_AbstractRenderer
#include <openfl/_internal/renderer/AbstractRenderer.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_RenderSession
#include <openfl/_internal/renderer/RenderSession.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_cairo_CairoRenderer
#include <openfl/_internal/renderer/cairo/CairoRenderer.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_canvas_CanvasRenderer
#include <openfl/_internal/renderer/canvas/CanvasRenderer.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_console_ConsoleRenderer
#include <openfl/_internal/renderer/console/ConsoleRenderer.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_dom_DOMRenderer
#include <openfl/_internal/renderer/dom/DOMRenderer.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_GLRenderer
#include <openfl/_internal/renderer/opengl/GLRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_display_Stage3D
#include <openfl/display/Stage3D.h>
#endif
#ifndef INCLUDED_openfl_events_ActivityEvent
#include <openfl/events/ActivityEvent.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_FocusEvent
#include <openfl/events/FocusEvent.h>
#endif
#ifndef INCLUDED_openfl_events_FullScreenEvent
#include <openfl/events/FullScreenEvent.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_KeyboardEvent
#include <openfl/events/KeyboardEvent.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_events_TextEvent
#include <openfl/events/TextEvent.h>
#endif
#ifndef INCLUDED_openfl_events_TouchEvent
#include <openfl/events/TouchEvent.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_ui_GameInput
#include <openfl/ui/GameInput.h>
#endif
#ifndef INCLUDED_openfl_ui_Keyboard
#include <openfl/ui/Keyboard.h>
#endif
#ifndef INCLUDED_openfl_ui_Mouse
#include <openfl/ui/Mouse.h>
#endif

namespace openfl{
namespace display{

void Stage_obj::__construct( ::lime::ui::Window window, ::Dynamic color){
            	HX_STACK_FRAME("openfl.display.Stage","new",0x908e7106,"openfl.display.Stage.new","openfl/display/Stage.hx",129,0xadca4c2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(window,"window")
            	HX_STACK_ARG(color,"color")
HXLINE( 135)		super::__construct();
HXLINE( 137)		this->application = window->application;
HXLINE( 138)		this->window = window;
HXLINE( 140)		Bool _hx_tmp = hx::IsNull( color );
HXDLIN( 140)		if (_hx_tmp) {
HXLINE( 142)			this->_hx___transparent = true;
HXLINE( 143)			this->set_color((int)0);
            		}
            		else {
HXLINE( 147)			this->set_color(color);
            		}
HXLINE( 151)		this->set_name(null());
HXLINE( 153)		this->_hx___deltaTime = (int)0;
HXLINE( 154)		this->_hx___displayState = (int)2;
HXLINE( 155)		this->_hx___mouseX = (int)0;
HXLINE( 156)		this->_hx___mouseY = (int)0;
HXLINE( 157)		this->_hx___lastClickTime = (int)0;
HXLINE( 158)		this->_hx___logicalWidth = (int)0;
HXLINE( 159)		this->_hx___logicalHeight = (int)0;
HXLINE( 160)		this->_hx___displayMatrix =  ::openfl::geom::Matrix_obj::__new(null(),null(),null(),null(),null(),null());
HXLINE( 162)		Int length = null();
HXDLIN( 162)		Bool fixed = null();
HXDLIN( 162)		 ::openfl::_Vector::ObjectVector _hx_tmp1 =  ::openfl::_Vector::ObjectVector_obj::__new(length,fixed,null());
HXDLIN( 162)		this->stage3Ds = _hx_tmp1;
HXLINE( 163)		{
HXLINE( 163)			 ::openfl::display::Stage3D x =  ::openfl::display::Stage3D_obj::__new();
HXDLIN( 163)			this->stage3Ds->push(x);
            		}
HXLINE( 165)		this->_hx___resize();
HXLINE( 167)		this->stage = hx::ObjectPtr<OBJ_>(this);
HXLINE( 169)		this->align = (int)6;
HXLINE( 174)		this->allowsFullScreen = true;
HXLINE( 175)		this->allowsFullScreenInteractive = true;
HXLINE( 177)		this->quality = (int)1;
HXLINE( 178)		this->scaleMode = (int)2;
HXLINE( 179)		this->stageFocusRect = true;
HXLINE( 182)		this->_hx___macKeyboard = true;
HXLINE( 187)		this->_hx___clearBeforeRender = true;
HXLINE( 188)		this->_hx___stack = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 189)		this->_hx___rollOutStack = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 191)		Bool _hx_tmp2 = hx::IsNull( ::openfl::Lib_obj::current->stage );
HXDLIN( 191)		if (_hx_tmp2) {
HXLINE( 193)			this->stage->addChild(::openfl::Lib_obj::current);
            		}
            	}

Dynamic Stage_obj::__CreateEmpty() { return new Stage_obj; }

hx::ObjectPtr< Stage_obj > Stage_obj::__new( ::lime::ui::Window window, ::Dynamic color)
{
	hx::ObjectPtr< Stage_obj > _hx_result = new Stage_obj();
	_hx_result->__construct(window,color);
	return _hx_result;
}

Dynamic Stage_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Stage_obj > _hx_result = new Stage_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

static ::lime::app::IModule_obj _hx_openfl_display_Stage__hx_lime_app_IModule= {
	( void (hx::Object::*)( ::lime::graphics::Renderer))&::openfl::display::Stage_obj::addRenderer,
	( void (hx::Object::*)( ::lime::ui::Window))&::openfl::display::Stage_obj::addWindow,
	( void (hx::Object::*)( ::lime::app::Application))&::openfl::display::Stage_obj::registerModule,
	( void (hx::Object::*)( ::lime::graphics::Renderer))&::openfl::display::Stage_obj::removeRenderer,
	( void (hx::Object::*)( ::lime::ui::Window))&::openfl::display::Stage_obj::removeWindow,
	( void (hx::Object::*)( ::lime::app::Preloader))&::openfl::display::Stage_obj::setPreloader,
	( void (hx::Object::*)( ::lime::app::Application))&::openfl::display::Stage_obj::unregisterModule,
};

void *Stage_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xf464d6e9: return &_hx_openfl_display_Stage__hx_lime_app_IModule;
	}
	return super::_hx_getInterface(inHash);
}

void Stage_obj::addRenderer( ::lime::graphics::Renderer renderer){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::Dynamic,f, ::lime::graphics::Renderer,a1) HXARGC(0)
            		void _hx_run(){
            			HX_STACK_FRAME("openfl.display.Stage","addRenderer",0xe89cb32a,"openfl.display.Stage.addRenderer","openfl/display/Stage.hx",202,0xadca4c2c)
HXLINE( 202)			f(a1);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_1, ::lime::graphics::Renderer,a11, ::Dynamic,f1) HXARGC(0)
            		void _hx_run(){
            			HX_STACK_FRAME("openfl.display.Stage","addRenderer",0xe89cb32a,"openfl.display.Stage.addRenderer","openfl/display/Stage.hx",203,0xadca4c2c)
HXLINE( 203)			f1(a11);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_2, ::lime::graphics::Renderer,a12, ::Dynamic,f2) HXARGC(1)
            		void _hx_run(::hx::EnumBase a2){
            			HX_STACK_FRAME("openfl.display.Stage","addRenderer",0xe89cb32a,"openfl.display.Stage.addRenderer","openfl/display/Stage.hx",204,0xadca4c2c)
            			HX_STACK_ARG(a2,"a2")
HXLINE( 204)			f2(a12,a2);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("openfl.display.Stage","addRenderer",0xe89cb32a,"openfl.display.Stage.addRenderer","openfl/display/Stage.hx",200,0xadca4c2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(renderer,"renderer")
HXLINE( 202)		 ::Dynamic f = this->render_dyn();
HXDLIN( 202)		 ::lime::graphics::Renderer a1 = renderer;
HXDLIN( 202)		 ::Dynamic _hx_tmp =  ::Dynamic(new _hx_Closure_0(f,a1));
HXDLIN( 202)		renderer->onRender->add(_hx_tmp,null(),null());
HXLINE( 203)		 ::Dynamic f1 = this->onRenderContextLost_dyn();
HXDLIN( 203)		 ::lime::graphics::Renderer a11 = renderer;
HXDLIN( 203)		 ::Dynamic _hx_tmp1 =  ::Dynamic(new _hx_Closure_1(a11,f1));
HXDLIN( 203)		renderer->onContextLost->add(_hx_tmp1,null(),null());
HXLINE( 204)		 ::Dynamic f2 = this->onRenderContextRestored_dyn();
HXDLIN( 204)		 ::lime::graphics::Renderer a12 = renderer;
HXDLIN( 204)		 ::Dynamic _hx_tmp2 =  ::Dynamic(new _hx_Closure_2(a12,f2));
HXDLIN( 204)		renderer->onContextRestored->add(_hx_tmp2,null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,addRenderer,(void))

void Stage_obj::addWindow( ::lime::ui::Window window){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::Dynamic,f, ::lime::ui::Window,a1) HXARGC(0)
            		void _hx_run(){
            			HX_STACK_FRAME("openfl.display.Stage","addWindow",0xe38e6a17,"openfl.display.Stage.addWindow","openfl/display/Stage.hx",213,0xadca4c2c)
HXLINE( 213)			f(a1);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_1, ::lime::ui::Window,a11, ::Dynamic,f1) HXARGC(0)
            		void _hx_run(){
            			HX_STACK_FRAME("openfl.display.Stage","addWindow",0xe38e6a17,"openfl.display.Stage.addWindow","openfl/display/Stage.hx",214,0xadca4c2c)
HXLINE( 214)			f1(a11);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_2, ::lime::ui::Window,a12, ::Dynamic,f2) HXARGC(0)
            		void _hx_run(){
            			HX_STACK_FRAME("openfl.display.Stage","addWindow",0xe38e6a17,"openfl.display.Stage.addWindow","openfl/display/Stage.hx",215,0xadca4c2c)
HXLINE( 215)			f2(a12);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_3, ::lime::ui::Window,a13, ::Dynamic,f3) HXARGC(0)
            		void _hx_run(){
            			HX_STACK_FRAME("openfl.display.Stage","addWindow",0xe38e6a17,"openfl.display.Stage.addWindow","openfl/display/Stage.hx",216,0xadca4c2c)
HXLINE( 216)			f3(a13);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_4, ::lime::ui::Window,a14, ::Dynamic,f4) HXARGC(1)
            		void _hx_run(::String a2){
            			HX_STACK_FRAME("openfl.display.Stage","addWindow",0xe38e6a17,"openfl.display.Stage.addWindow","openfl/display/Stage.hx",217,0xadca4c2c)
            			HX_STACK_ARG(a2,"a2")
HXLINE( 217)			f4(a14,a2);
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_5, ::Dynamic,f5, ::lime::ui::Window,a15) HXARGC(0)
            		void _hx_run(){
            			HX_STACK_FRAME("openfl.display.Stage","addWindow",0xe38e6a17,"openfl.display.Stage.addWindow","openfl/display/Stage.hx",218,0xadca4c2c)
HXLINE( 218)			f5(a15);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_6, ::Dynamic,f6, ::lime::ui::Window,a16) HXARGC(0)
            		void _hx_run(){
            			HX_STACK_FRAME("openfl.display.Stage","addWindow",0xe38e6a17,"openfl.display.Stage.addWindow","openfl/display/Stage.hx",219,0xadca4c2c)
HXLINE( 219)			f6(a16);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_7, ::lime::ui::Window,a17, ::Dynamic,f7) HXARGC(0)
            		void _hx_run(){
            			HX_STACK_FRAME("openfl.display.Stage","addWindow",0xe38e6a17,"openfl.display.Stage.addWindow","openfl/display/Stage.hx",220,0xadca4c2c)
HXLINE( 220)			f7(a17);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_8, ::lime::ui::Window,a18, ::Dynamic,f8) HXARGC(0)
            		void _hx_run(){
            			HX_STACK_FRAME("openfl.display.Stage","addWindow",0xe38e6a17,"openfl.display.Stage.addWindow","openfl/display/Stage.hx",221,0xadca4c2c)
HXLINE( 221)			f8(a18);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_9, ::Dynamic,f9, ::lime::ui::Window,a19) HXARGC(2)
            		void _hx_run(Int a21,Int a3){
            			HX_STACK_FRAME("openfl.display.Stage","addWindow",0xe38e6a17,"openfl.display.Stage.addWindow","openfl/display/Stage.hx",222,0xadca4c2c)
            			HX_STACK_ARG(a21,"a21")
            			HX_STACK_ARG(a3,"a3")
HXLINE( 222)			f9(a19,a21,a3);
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_10, ::Dynamic,f10, ::lime::ui::Window,a110) HXARGC(2)
            		void _hx_run(Int a22,Int a31){
            			HX_STACK_FRAME("openfl.display.Stage","addWindow",0xe38e6a17,"openfl.display.Stage.addWindow","openfl/display/Stage.hx",223,0xadca4c2c)
            			HX_STACK_ARG(a22,"a22")
            			HX_STACK_ARG(a31,"a31")
HXLINE( 223)			f10(a110,a22,a31);
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_11, ::Dynamic,f11, ::lime::ui::Window,a111) HXARGC(0)
            		void _hx_run(){
            			HX_STACK_FRAME("openfl.display.Stage","addWindow",0xe38e6a17,"openfl.display.Stage.addWindow","openfl/display/Stage.hx",224,0xadca4c2c)
HXLINE( 224)			f11(a111);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_12, ::lime::ui::Window,a112, ::Dynamic,f12) HXARGC(0)
            		void _hx_run(){
            			HX_STACK_FRAME("openfl.display.Stage","addWindow",0xe38e6a17,"openfl.display.Stage.addWindow","openfl/display/Stage.hx",225,0xadca4c2c)
HXLINE( 225)			f12(a112);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_13, ::Dynamic,f13, ::lime::ui::Window,a113) HXARGC(3)
            		void _hx_run(Float x,Float y,Int a23){
            			HX_STACK_FRAME("openfl.display.Stage","addWindow",0xe38e6a17,"openfl.display.Stage.addWindow","openfl/display/Stage.hx",226,0xadca4c2c)
            			HX_STACK_ARG(x,"x")
            			HX_STACK_ARG(y,"y")
            			HX_STACK_ARG(a23,"a23")
HXLINE( 226)			f13(a113,x,y,a23);
            		}
            		HX_END_LOCAL_FUNC3((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_14, ::Dynamic,f14, ::lime::ui::Window,a114) HXARGC(2)
            		void _hx_run(Float x1,Float y1){
            			HX_STACK_FRAME("openfl.display.Stage","addWindow",0xe38e6a17,"openfl.display.Stage.addWindow","openfl/display/Stage.hx",227,0xadca4c2c)
            			HX_STACK_ARG(x1,"x1")
            			HX_STACK_ARG(y1,"y1")
HXLINE( 227)			f14(a114,x1,y1);
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_15, ::Dynamic,f15, ::lime::ui::Window,a115) HXARGC(2)
            		void _hx_run(Float x2,Float y2){
            			HX_STACK_FRAME("openfl.display.Stage","addWindow",0xe38e6a17,"openfl.display.Stage.addWindow","openfl/display/Stage.hx",228,0xadca4c2c)
            			HX_STACK_ARG(x2,"x2")
            			HX_STACK_ARG(y2,"y2")
HXLINE( 228)			f15(a115,x2,y2);
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_16, ::lime::ui::Window,a116, ::Dynamic,f16) HXARGC(3)
            		void _hx_run(Float x3,Float y3,Int a24){
            			HX_STACK_FRAME("openfl.display.Stage","addWindow",0xe38e6a17,"openfl.display.Stage.addWindow","openfl/display/Stage.hx",229,0xadca4c2c)
            			HX_STACK_ARG(x3,"x3")
            			HX_STACK_ARG(y3,"y3")
            			HX_STACK_ARG(a24,"a24")
HXLINE( 229)			f16(a116,x3,y3,a24);
            		}
            		HX_END_LOCAL_FUNC3((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_17, ::Dynamic,f17, ::lime::ui::Window,a117) HXARGC(2)
            		void _hx_run(Float a25,Float a32){
            			HX_STACK_FRAME("openfl.display.Stage","addWindow",0xe38e6a17,"openfl.display.Stage.addWindow","openfl/display/Stage.hx",230,0xadca4c2c)
            			HX_STACK_ARG(a25,"a25")
            			HX_STACK_ARG(a32,"a32")
HXLINE( 230)			f17(a117,a25,a32);
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_18, ::lime::ui::Window,a118, ::Dynamic,f18) HXARGC(2)
            		void _hx_run(Float x4,Float y4){
            			HX_STACK_FRAME("openfl.display.Stage","addWindow",0xe38e6a17,"openfl.display.Stage.addWindow","openfl/display/Stage.hx",231,0xadca4c2c)
            			HX_STACK_ARG(x4,"x4")
            			HX_STACK_ARG(y4,"y4")
HXLINE( 231)			f18(a118,x4,y4);
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_19, ::Dynamic,f19, ::lime::ui::Window,a119) HXARGC(2)
            		void _hx_run(Int a26,Int a33){
            			HX_STACK_FRAME("openfl.display.Stage","addWindow",0xe38e6a17,"openfl.display.Stage.addWindow","openfl/display/Stage.hx",232,0xadca4c2c)
            			HX_STACK_ARG(a26,"a26")
            			HX_STACK_ARG(a33,"a33")
HXLINE( 232)			f19(a119,a26,a33);
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_20, ::lime::ui::Window,a120, ::Dynamic,f20) HXARGC(0)
            		void _hx_run(){
            			HX_STACK_FRAME("openfl.display.Stage","addWindow",0xe38e6a17,"openfl.display.Stage.addWindow","openfl/display/Stage.hx",233,0xadca4c2c)
HXLINE( 233)			f20(a120);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_21, ::lime::ui::Window,a121, ::Dynamic,f21) HXARGC(3)
            		void _hx_run(::String a27,Int a34,Int a4){
            			HX_STACK_FRAME("openfl.display.Stage","addWindow",0xe38e6a17,"openfl.display.Stage.addWindow","openfl/display/Stage.hx",234,0xadca4c2c)
            			HX_STACK_ARG(a27,"a27")
            			HX_STACK_ARG(a34,"a34")
            			HX_STACK_ARG(a4,"a4")
HXLINE( 234)			f21(a121,a27,a34,a4);
            		}
            		HX_END_LOCAL_FUNC3((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_22, ::lime::ui::Window,a122, ::Dynamic,f22) HXARGC(1)
            		void _hx_run(::String a28){
            			HX_STACK_FRAME("openfl.display.Stage","addWindow",0xe38e6a17,"openfl.display.Stage.addWindow","openfl/display/Stage.hx",235,0xadca4c2c)
            			HX_STACK_ARG(a28,"a28")
HXLINE( 235)			f22(a122,a28);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("openfl.display.Stage","addWindow",0xe38e6a17,"openfl.display.Stage.addWindow","openfl/display/Stage.hx",209,0xadca4c2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(window,"window")
HXLINE( 211)		if (hx::IsNotEq( this->window,window )) {
HXLINE( 211)			return;
            		}
HXLINE( 213)		 ::Dynamic f = this->onWindowActivate_dyn();
HXDLIN( 213)		 ::lime::ui::Window a1 = window;
HXDLIN( 213)		 ::Dynamic _hx_tmp =  ::Dynamic(new _hx_Closure_0(f,a1));
HXDLIN( 213)		window->onActivate->add(_hx_tmp,null(),null());
HXLINE( 214)		 ::Dynamic f1 = this->onWindowClose_dyn();
HXDLIN( 214)		 ::lime::ui::Window a11 = window;
HXDLIN( 214)		 ::Dynamic _hx_tmp1 =  ::Dynamic(new _hx_Closure_1(a11,f1));
HXDLIN( 214)		window->onClose->add(_hx_tmp1,null(),null());
HXLINE( 215)		 ::Dynamic f2 = this->onWindowCreate_dyn();
HXDLIN( 215)		 ::lime::ui::Window a12 = window;
HXDLIN( 215)		 ::Dynamic _hx_tmp2 =  ::Dynamic(new _hx_Closure_2(a12,f2));
HXDLIN( 215)		window->onCreate->add(_hx_tmp2,null(),null());
HXLINE( 216)		 ::Dynamic f3 = this->onWindowDeactivate_dyn();
HXDLIN( 216)		 ::lime::ui::Window a13 = window;
HXDLIN( 216)		 ::Dynamic _hx_tmp3 =  ::Dynamic(new _hx_Closure_3(a13,f3));
HXDLIN( 216)		window->onDeactivate->add(_hx_tmp3,null(),null());
HXLINE( 217)		 ::Dynamic f4 = this->onWindowDropFile_dyn();
HXDLIN( 217)		 ::lime::ui::Window a14 = window;
HXDLIN( 217)		 ::Dynamic _hx_tmp4 =  ::Dynamic(new _hx_Closure_4(a14,f4));
HXDLIN( 217)		window->onDropFile->add(_hx_tmp4,null(),null());
HXLINE( 218)		 ::Dynamic f5 = this->onWindowEnter_dyn();
HXDLIN( 218)		 ::lime::ui::Window a15 = window;
HXDLIN( 218)		 ::Dynamic _hx_tmp5 =  ::Dynamic(new _hx_Closure_5(f5,a15));
HXDLIN( 218)		window->onEnter->add(_hx_tmp5,null(),null());
HXLINE( 219)		 ::Dynamic f6 = this->onWindowFocusIn_dyn();
HXDLIN( 219)		 ::lime::ui::Window a16 = window;
HXDLIN( 219)		 ::Dynamic _hx_tmp6 =  ::Dynamic(new _hx_Closure_6(f6,a16));
HXDLIN( 219)		window->onFocusIn->add(_hx_tmp6,null(),null());
HXLINE( 220)		 ::Dynamic f7 = this->onWindowFocusOut_dyn();
HXDLIN( 220)		 ::lime::ui::Window a17 = window;
HXDLIN( 220)		 ::Dynamic _hx_tmp7 =  ::Dynamic(new _hx_Closure_7(a17,f7));
HXDLIN( 220)		window->onFocusOut->add(_hx_tmp7,null(),null());
HXLINE( 221)		 ::Dynamic f8 = this->onWindowFullscreen_dyn();
HXDLIN( 221)		 ::lime::ui::Window a18 = window;
HXDLIN( 221)		 ::Dynamic _hx_tmp8 =  ::Dynamic(new _hx_Closure_8(a18,f8));
HXDLIN( 221)		window->onFullscreen->add(_hx_tmp8,null(),null());
HXLINE( 222)		 ::Dynamic f9 = this->onKeyDown_dyn();
HXDLIN( 222)		 ::lime::ui::Window a19 = window;
HXDLIN( 222)		 ::Dynamic _hx_tmp9 =  ::Dynamic(new _hx_Closure_9(f9,a19));
HXDLIN( 222)		window->onKeyDown->add(_hx_tmp9,null(),null());
HXLINE( 223)		 ::Dynamic f10 = this->onKeyUp_dyn();
HXDLIN( 223)		 ::lime::ui::Window a110 = window;
HXDLIN( 223)		 ::Dynamic _hx_tmp10 =  ::Dynamic(new _hx_Closure_10(f10,a110));
HXDLIN( 223)		window->onKeyUp->add(_hx_tmp10,null(),null());
HXLINE( 224)		 ::Dynamic f11 = this->onWindowLeave_dyn();
HXDLIN( 224)		 ::lime::ui::Window a111 = window;
HXDLIN( 224)		 ::Dynamic _hx_tmp11 =  ::Dynamic(new _hx_Closure_11(f11,a111));
HXDLIN( 224)		window->onLeave->add(_hx_tmp11,null(),null());
HXLINE( 225)		 ::Dynamic f12 = this->onWindowMinimize_dyn();
HXDLIN( 225)		 ::lime::ui::Window a112 = window;
HXDLIN( 225)		 ::Dynamic _hx_tmp12 =  ::Dynamic(new _hx_Closure_12(a112,f12));
HXDLIN( 225)		window->onMinimize->add(_hx_tmp12,null(),null());
HXLINE( 226)		 ::Dynamic f13 = this->onMouseDown_dyn();
HXDLIN( 226)		 ::lime::ui::Window a113 = window;
HXDLIN( 226)		 ::Dynamic _hx_tmp13 =  ::Dynamic(new _hx_Closure_13(f13,a113));
HXDLIN( 226)		window->onMouseDown->add(_hx_tmp13,null(),null());
HXLINE( 227)		 ::Dynamic f14 = this->onMouseMove_dyn();
HXDLIN( 227)		 ::lime::ui::Window a114 = window;
HXDLIN( 227)		 ::Dynamic _hx_tmp14 =  ::Dynamic(new _hx_Closure_14(f14,a114));
HXDLIN( 227)		window->onMouseMove->add(_hx_tmp14,null(),null());
HXLINE( 228)		 ::Dynamic f15 = this->onMouseMoveRelative_dyn();
HXDLIN( 228)		 ::lime::ui::Window a115 = window;
HXDLIN( 228)		 ::Dynamic _hx_tmp15 =  ::Dynamic(new _hx_Closure_15(f15,a115));
HXDLIN( 228)		window->onMouseMoveRelative->add(_hx_tmp15,null(),null());
HXLINE( 229)		 ::Dynamic f16 = this->onMouseUp_dyn();
HXDLIN( 229)		 ::lime::ui::Window a116 = window;
HXDLIN( 229)		 ::Dynamic _hx_tmp16 =  ::Dynamic(new _hx_Closure_16(a116,f16));
HXDLIN( 229)		window->onMouseUp->add(_hx_tmp16,null(),null());
HXLINE( 230)		 ::Dynamic f17 = this->onMouseWheel_dyn();
HXDLIN( 230)		 ::lime::ui::Window a117 = window;
HXDLIN( 230)		 ::Dynamic _hx_tmp17 =  ::Dynamic(new _hx_Closure_17(f17,a117));
HXDLIN( 230)		window->onMouseWheel->add(_hx_tmp17,null(),null());
HXLINE( 231)		 ::Dynamic f18 = this->onWindowMove_dyn();
HXDLIN( 231)		 ::lime::ui::Window a118 = window;
HXDLIN( 231)		 ::Dynamic _hx_tmp18 =  ::Dynamic(new _hx_Closure_18(a118,f18));
HXDLIN( 231)		window->onMove->add(_hx_tmp18,null(),null());
HXLINE( 232)		 ::Dynamic f19 = this->onWindowResize_dyn();
HXDLIN( 232)		 ::lime::ui::Window a119 = window;
HXDLIN( 232)		 ::Dynamic _hx_tmp19 =  ::Dynamic(new _hx_Closure_19(f19,a119));
HXDLIN( 232)		window->onResize->add(_hx_tmp19,null(),null());
HXLINE( 233)		 ::Dynamic f20 = this->onWindowRestore_dyn();
HXDLIN( 233)		 ::lime::ui::Window a120 = window;
HXDLIN( 233)		 ::Dynamic _hx_tmp20 =  ::Dynamic(new _hx_Closure_20(a120,f20));
HXDLIN( 233)		window->onRestore->add(_hx_tmp20,null(),null());
HXLINE( 234)		 ::Dynamic f21 = this->onTextEdit_dyn();
HXDLIN( 234)		 ::lime::ui::Window a121 = window;
HXDLIN( 234)		 ::Dynamic _hx_tmp21 =  ::Dynamic(new _hx_Closure_21(a121,f21));
HXDLIN( 234)		window->onTextEdit->add(_hx_tmp21,null(),null());
HXLINE( 235)		 ::Dynamic f22 = this->onTextInput_dyn();
HXDLIN( 235)		 ::lime::ui::Window a122 = window;
HXDLIN( 235)		 ::Dynamic _hx_tmp22 =  ::Dynamic(new _hx_Closure_22(a122,f22));
HXDLIN( 235)		window->onTextInput->add(_hx_tmp22,null(),null());
HXLINE( 237)		Bool _hx_tmp23 = (window->id > (int)-1);
HXDLIN( 237)		if (_hx_tmp23) {
HXLINE( 239)			this->onWindowCreate(window);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,addWindow,(void))

void Stage_obj::registerModule( ::lime::app::Application application){
            	HX_STACK_FRAME("openfl.display.Stage","registerModule",0x13bf3089,"openfl.display.Stage.registerModule","openfl/display/Stage.hx",246,0xadca4c2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(application,"application")
HXLINE( 248)		application->onExit->add(this->onModuleExit_dyn(),false,(int)0);
HXLINE( 249)		application->onUpdate->add(this->update_dyn(),null(),null());
HXLINE( 251)		{
HXLINE( 251)			HX_VARI(  ::Dynamic,tmp) = ::lime::ui::Gamepad_obj::devices->iterator();
HXDLIN( 251)			while(true){
HXLINE( 251)				Bool _hx_tmp = !(( (Bool)( ::Dynamic(tmp->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN( 251)				if (_hx_tmp) {
HXLINE( 251)					goto _hx_goto_0;
            				}
HXDLIN( 251)				HX_VARI(  ::lime::ui::Gamepad,gamepad) = ( ( ::lime::ui::Gamepad)( ::Dynamic(tmp->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))()) );
HXLINE( 253)				this->_hx___onGamepadConnect(gamepad);
            			}
            			_hx_goto_0:;
            		}
HXLINE( 257)		::lime::ui::Gamepad_obj::onConnect->add(this->_hx___onGamepadConnect_dyn(),null(),null());
HXLINE( 258)		::lime::ui::Touch_obj::onStart->add(this->onTouchStart_dyn(),null(),null());
HXLINE( 259)		::lime::ui::Touch_obj::onMove->add(this->onTouchMove_dyn(),null(),null());
HXLINE( 260)		::lime::ui::Touch_obj::onEnd->add(this->onTouchEnd_dyn(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,registerModule,(void))

void Stage_obj::removeRenderer( ::lime::graphics::Renderer renderer){
            	HX_STACK_FRAME("openfl.display.Stage","removeRenderer",0x09dc76c1,"openfl.display.Stage.removeRenderer","openfl/display/Stage.hx",265,0xadca4c2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(renderer,"renderer")
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,removeRenderer,(void))

void Stage_obj::removeWindow( ::lime::ui::Window window){
            	HX_STACK_FRAME("openfl.display.Stage","removeWindow",0x957549ee,"openfl.display.Stage.removeWindow","openfl/display/Stage.hx",266,0xadca4c2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(window,"window")
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,removeWindow,(void))

void Stage_obj::setPreloader( ::lime::app::Preloader preloader){
            	HX_STACK_FRAME("openfl.display.Stage","setPreloader",0x7a86bf0e,"openfl.display.Stage.setPreloader","openfl/display/Stage.hx",267,0xadca4c2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(preloader,"preloader")
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,setPreloader,(void))

void Stage_obj::unregisterModule( ::lime::app::Application application){
            	HX_STACK_FRAME("openfl.display.Stage","unregisterModule",0x783b9b22,"openfl.display.Stage.unregisterModule","openfl/display/Stage.hx",270,0xadca4c2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(application,"application")
HXLINE( 272)		application->onExit->remove(this->onModuleExit_dyn());
HXLINE( 273)		application->onUpdate->remove(this->update_dyn());
HXLINE( 275)		::lime::ui::Gamepad_obj::onConnect->remove(this->_hx___onGamepadConnect_dyn());
HXLINE( 276)		::lime::ui::Touch_obj::onStart->remove(this->onTouchStart_dyn());
HXLINE( 277)		::lime::ui::Touch_obj::onMove->remove(this->onTouchMove_dyn());
HXLINE( 278)		::lime::ui::Touch_obj::onEnd->remove(this->onTouchEnd_dyn());
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,unregisterModule,(void))

 ::openfl::geom::Point Stage_obj::globalToLocal( ::openfl::geom::Point pos){
            	HX_STACK_FRAME("openfl.display.Stage","globalToLocal",0xdbaa7af3,"openfl.display.Stage.globalToLocal","openfl/display/Stage.hx",285,0xadca4c2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pos,"pos")
HXLINE( 285)		return pos->clone();
            	}


void Stage_obj::invalidate(){
            	HX_STACK_FRAME("openfl.display.Stage","invalidate",0x70397995,"openfl.display.Stage.invalidate","openfl/display/Stage.hx",292,0xadca4c2c)
            	HX_STACK_THIS(this)
HXLINE( 292)		this->_hx___invalidated = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,invalidate,(void))

 ::openfl::geom::Point Stage_obj::localToGlobal( ::openfl::geom::Point pos){
            	HX_STACK_FRAME("openfl.display.Stage","localToGlobal",0xb7e76def,"openfl.display.Stage.localToGlobal","openfl/display/Stage.hx",299,0xadca4c2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pos,"pos")
HXLINE( 299)		return pos->clone();
            	}


void Stage_obj::onGamepadAxisMove( ::lime::ui::Gamepad gamepad,Int axis,Float value){
            	HX_STACK_FRAME("openfl.display.Stage","onGamepadAxisMove",0xc5912eda,"openfl.display.Stage.onGamepadAxisMove","openfl/display/Stage.hx",306,0xadca4c2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(gamepad,"gamepad")
            	HX_STACK_ARG(axis,"axis")
            	HX_STACK_ARG(value,"value")
HXLINE( 306)		::openfl::ui::GameInput_obj::_hx___onGamepadAxisMove(gamepad,axis,value);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Stage_obj,onGamepadAxisMove,(void))

void Stage_obj::onGamepadButtonDown( ::lime::ui::Gamepad gamepad,Int button){
            	HX_STACK_FRAME("openfl.display.Stage","onGamepadButtonDown",0xf94bb7fc,"openfl.display.Stage.onGamepadButtonDown","openfl/display/Stage.hx",313,0xadca4c2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(gamepad,"gamepad")
            	HX_STACK_ARG(button,"button")
HXLINE( 313)		::openfl::ui::GameInput_obj::_hx___onGamepadButtonDown(gamepad,button);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Stage_obj,onGamepadButtonDown,(void))

void Stage_obj::onGamepadButtonUp( ::lime::ui::Gamepad gamepad,Int button){
            	HX_STACK_FRAME("openfl.display.Stage","onGamepadButtonUp",0x91cf2b75,"openfl.display.Stage.onGamepadButtonUp","openfl/display/Stage.hx",320,0xadca4c2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(gamepad,"gamepad")
            	HX_STACK_ARG(button,"button")
HXLINE( 320)		::openfl::ui::GameInput_obj::_hx___onGamepadButtonUp(gamepad,button);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Stage_obj,onGamepadButtonUp,(void))

void Stage_obj::onGamepadConnect( ::lime::ui::Gamepad gamepad){
            	HX_STACK_FRAME("openfl.display.Stage","onGamepadConnect",0xd0dcc662,"openfl.display.Stage.onGamepadConnect","openfl/display/Stage.hx",327,0xadca4c2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(gamepad,"gamepad")
HXLINE( 327)		::openfl::ui::GameInput_obj::_hx___onGamepadConnect(gamepad);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,onGamepadConnect,(void))

void Stage_obj::onGamepadDisconnect( ::lime::ui::Gamepad gamepad){
            	HX_STACK_FRAME("openfl.display.Stage","onGamepadDisconnect",0xb62bb4e4,"openfl.display.Stage.onGamepadDisconnect","openfl/display/Stage.hx",334,0xadca4c2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(gamepad,"gamepad")
HXLINE( 334)		::openfl::ui::GameInput_obj::_hx___onGamepadDisconnect(gamepad);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,onGamepadDisconnect,(void))

void Stage_obj::onJoystickAxisMove( ::lime::ui::Joystick joystick,Int axis,Float value){
            	HX_STACK_FRAME("openfl.display.Stage","onJoystickAxisMove",0x5fc8fe87,"openfl.display.Stage.onJoystickAxisMove","openfl/display/Stage.hx",339,0xadca4c2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(joystick,"joystick")
            	HX_STACK_ARG(axis,"axis")
            	HX_STACK_ARG(value,"value")
            	}


HX_DEFINE_DYNAMIC_FUNC3(Stage_obj,onJoystickAxisMove,(void))

void Stage_obj::onJoystickButtonDown( ::lime::ui::Joystick joystick,Int button){
            	HX_STACK_FRAME("openfl.display.Stage","onJoystickButtonDown",0x6cd88ce9,"openfl.display.Stage.onJoystickButtonDown","openfl/display/Stage.hx",346,0xadca4c2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(joystick,"joystick")
            	HX_STACK_ARG(button,"button")
            	}


HX_DEFINE_DYNAMIC_FUNC2(Stage_obj,onJoystickButtonDown,(void))

void Stage_obj::onJoystickButtonUp( ::lime::ui::Joystick joystick,Int button){
            	HX_STACK_FRAME("openfl.display.Stage","onJoystickButtonUp",0x2c06fb22,"openfl.display.Stage.onJoystickButtonUp","openfl/display/Stage.hx",353,0xadca4c2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(joystick,"joystick")
            	HX_STACK_ARG(button,"button")
            	}


HX_DEFINE_DYNAMIC_FUNC2(Stage_obj,onJoystickButtonUp,(void))

void Stage_obj::onJoystickConnect( ::lime::ui::Joystick joystick){
            	HX_STACK_FRAME("openfl.display.Stage","onJoystickConnect",0x9b994b55,"openfl.display.Stage.onJoystickConnect","openfl/display/Stage.hx",360,0xadca4c2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(joystick,"joystick")
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,onJoystickConnect,(void))

void Stage_obj::onJoystickDisconnect( ::lime::ui::Joystick joystick){
            	HX_STACK_FRAME("openfl.display.Stage","onJoystickDisconnect",0x29b889d1,"openfl.display.Stage.onJoystickDisconnect","openfl/display/Stage.hx",367,0xadca4c2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(joystick,"joystick")
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,onJoystickDisconnect,(void))

void Stage_obj::onJoystickHatMove( ::lime::ui::Joystick joystick,Int hat,Int position){
            	HX_STACK_FRAME("openfl.display.Stage","onJoystickHatMove",0x3124a777,"openfl.display.Stage.onJoystickHatMove","openfl/display/Stage.hx",374,0xadca4c2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(joystick,"joystick")
            	HX_STACK_ARG(hat,"hat")
            	HX_STACK_ARG(position,"position")
            	}


HX_DEFINE_DYNAMIC_FUNC3(Stage_obj,onJoystickHatMove,(void))

void Stage_obj::onJoystickTrackballMove( ::lime::ui::Joystick joystick,Int trackball,Float value){
            	HX_STACK_FRAME("openfl.display.Stage","onJoystickTrackballMove",0x38b5dfe6,"openfl.display.Stage.onJoystickTrackballMove","openfl/display/Stage.hx",381,0xadca4c2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(joystick,"joystick")
            	HX_STACK_ARG(trackball,"trackball")
            	HX_STACK_ARG(value,"value")
            	}


HX_DEFINE_DYNAMIC_FUNC3(Stage_obj,onJoystickTrackballMove,(void))

void Stage_obj::onKeyDown( ::lime::ui::Window window,Int keyCode,Int modifier){
            	HX_STACK_FRAME("openfl.display.Stage","onKeyDown",0x4ccfc368,"openfl.display.Stage.onKeyDown","openfl/display/Stage.hx",388,0xadca4c2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(window,"window")
            	HX_STACK_ARG(keyCode,"keyCode")
            	HX_STACK_ARG(modifier,"modifier")
HXLINE( 390)		Bool _hx_tmp;
HXDLIN( 390)		Bool _hx_tmp1 = hx::IsNotNull( this->window );
HXDLIN( 390)		if (_hx_tmp1) {
HXLINE( 390)			_hx_tmp = hx::IsNotEq( this->window,window );
            		}
            		else {
HXLINE( 390)			_hx_tmp = true;
            		}
HXDLIN( 390)		if (_hx_tmp) {
HXLINE( 390)			return;
            		}
HXLINE( 392)		this->_hx___onKey(HX_("keyDown",a1,69,47,9c),keyCode,modifier);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Stage_obj,onKeyDown,(void))

void Stage_obj::onKeyUp( ::lime::ui::Window window,Int keyCode,Int modifier){
            	HX_STACK_FRAME("openfl.display.Stage","onKeyUp",0x5bcb43e1,"openfl.display.Stage.onKeyUp","openfl/display/Stage.hx",397,0xadca4c2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(window,"window")
            	HX_STACK_ARG(keyCode,"keyCode")
            	HX_STACK_ARG(modifier,"modifier")
HXLINE( 399)		Bool _hx_tmp;
HXDLIN( 399)		Bool _hx_tmp1 = hx::IsNotNull( this->window );
HXDLIN( 399)		if (_hx_tmp1) {
HXLINE( 399)			_hx_tmp = hx::IsNotEq( this->window,window );
            		}
            		else {
HXLINE( 399)			_hx_tmp = true;
            		}
HXDLIN( 399)		if (_hx_tmp) {
HXLINE( 399)			return;
            		}
HXLINE( 401)		this->_hx___onKey(HX_("keyUp",da,b9,fe,de),keyCode,modifier);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Stage_obj,onKeyUp,(void))

void Stage_obj::onModuleExit(Int code){
            	HX_STACK_FRAME("openfl.display.Stage","onModuleExit",0xdf5eda83,"openfl.display.Stage.onModuleExit","openfl/display/Stage.hx",408,0xadca4c2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(code,"code")
HXLINE( 408)		Bool _hx_tmp = hx::IsNotNull( this->window );
HXDLIN( 408)		if (_hx_tmp) {
HXLINE( 410)			this->_hx___broadcastEvent( ::openfl::events::Event_obj::__new(HX_("deactivate",34,5c,01,3c),null(),null()));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,onModuleExit,(void))

void Stage_obj::onMouseDown( ::lime::ui::Window window,Float x,Float y,Int button){
            	HX_STACK_FRAME("openfl.display.Stage","onMouseDown",0x156a4aae,"openfl.display.Stage.onMouseDown","openfl/display/Stage.hx",417,0xadca4c2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(window,"window")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(button,"button")
HXLINE( 419)		Bool _hx_tmp;
HXDLIN( 419)		Bool _hx_tmp1 = hx::IsNotNull( this->window );
HXDLIN( 419)		if (_hx_tmp1) {
HXLINE( 419)			_hx_tmp = hx::IsNotEq( this->window,window );
            		}
            		else {
HXLINE( 419)			_hx_tmp = true;
            		}
HXDLIN( 419)		if (_hx_tmp) {
HXLINE( 419)			return;
            		}
HXLINE( 421)		HX_VAR( ::String,type);
HXDLIN( 421)		switch((int)(button)){
            			case (int)1: {
HXLINE( 421)				type = HX_("middleMouseDown",12,2b,fe,01);
            			}
            			break;
            			case (int)2: {
HXLINE( 421)				type = HX_("rightMouseDown",ab,29,d7,cd);
            			}
            			break;
            			default:{
HXLINE( 421)				type = HX_("mouseDown",27,b1,c2,ee);
            			}
            		}
HXLINE( 429)		Float _hx_tmp2 = (x * window->_hx___scale);
HXDLIN( 429)		Int _hx_tmp3 = ::Std_obj::_hx_int(_hx_tmp2);
HXDLIN( 429)		Float _hx_tmp4 = (y * window->_hx___scale);
HXDLIN( 429)		Int _hx_tmp5 = ::Std_obj::_hx_int(_hx_tmp4);
HXDLIN( 429)		this->_hx___onMouse(type,_hx_tmp3,_hx_tmp5,button);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Stage_obj,onMouseDown,(void))

void Stage_obj::onMouseMove( ::lime::ui::Window window,Float x,Float y){
            	HX_STACK_FRAME("openfl.display.Stage","onMouseMove",0x1b5d355d,"openfl.display.Stage.onMouseMove","openfl/display/Stage.hx",434,0xadca4c2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(window,"window")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE( 436)		Bool _hx_tmp;
HXDLIN( 436)		Bool _hx_tmp1 = hx::IsNotNull( this->window );
HXDLIN( 436)		if (_hx_tmp1) {
HXLINE( 436)			_hx_tmp = hx::IsNotEq( this->window,window );
            		}
            		else {
HXLINE( 436)			_hx_tmp = true;
            		}
HXDLIN( 436)		if (_hx_tmp) {
HXLINE( 436)			return;
            		}
HXLINE( 438)		Float _hx_tmp2 = (x * window->_hx___scale);
HXDLIN( 438)		Int _hx_tmp3 = ::Std_obj::_hx_int(_hx_tmp2);
HXDLIN( 438)		Float _hx_tmp4 = (y * window->_hx___scale);
HXDLIN( 438)		Int _hx_tmp5 = ::Std_obj::_hx_int(_hx_tmp4);
HXDLIN( 438)		this->_hx___onMouse(HX_("mouseMove",d6,9b,b5,f4),_hx_tmp3,_hx_tmp5,(int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Stage_obj,onMouseMove,(void))

void Stage_obj::onMouseMoveRelative( ::lime::ui::Window window,Float x,Float y){
            	HX_STACK_FRAME("openfl.display.Stage","onMouseMoveRelative",0xec53d349,"openfl.display.Stage.onMouseMoveRelative","openfl/display/Stage.hx",443,0xadca4c2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(window,"window")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	}


HX_DEFINE_DYNAMIC_FUNC3(Stage_obj,onMouseMoveRelative,(void))

void Stage_obj::onMouseUp( ::lime::ui::Window window,Float x,Float y,Int button){
            	HX_STACK_FRAME("openfl.display.Stage","onMouseUp",0x70fb4da7,"openfl.display.Stage.onMouseUp","openfl/display/Stage.hx",450,0xadca4c2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(window,"window")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(button,"button")
HXLINE( 452)		Bool _hx_tmp;
HXDLIN( 452)		Bool _hx_tmp1 = hx::IsNotNull( this->window );
HXDLIN( 452)		if (_hx_tmp1) {
HXLINE( 452)			_hx_tmp = hx::IsNotEq( this->window,window );
            		}
            		else {
HXLINE( 452)			_hx_tmp = true;
            		}
HXDLIN( 452)		if (_hx_tmp) {
HXLINE( 452)			return;
            		}
HXLINE( 454)		HX_VAR( ::String,type);
HXDLIN( 454)		switch((int)(button)){
            			case (int)1: {
HXLINE( 454)				type = HX_("middleMouseUp",0b,8d,f5,3a);
            			}
            			break;
            			case (int)2: {
HXLINE( 454)				type = HX_("rightMouseUp",64,83,21,ab);
            			}
            			break;
            			default:{
HXLINE( 454)				type = HX_("mouseUp",e0,f3,72,c0);
            			}
            		}
HXLINE( 462)		Float _hx_tmp2 = (x * window->_hx___scale);
HXDLIN( 462)		Int _hx_tmp3 = ::Std_obj::_hx_int(_hx_tmp2);
HXDLIN( 462)		Float _hx_tmp4 = (y * window->_hx___scale);
HXDLIN( 462)		Int _hx_tmp5 = ::Std_obj::_hx_int(_hx_tmp4);
HXDLIN( 462)		this->_hx___onMouse(type,_hx_tmp3,_hx_tmp5,button);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Stage_obj,onMouseUp,(void))

void Stage_obj::onMouseWheel( ::lime::ui::Window window,Float deltaX,Float deltaY){
            	HX_STACK_FRAME("openfl.display.Stage","onMouseWheel",0x9385e4cf,"openfl.display.Stage.onMouseWheel","openfl/display/Stage.hx",467,0xadca4c2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(window,"window")
            	HX_STACK_ARG(deltaX,"deltaX")
            	HX_STACK_ARG(deltaY,"deltaY")
HXLINE( 469)		Bool _hx_tmp;
HXDLIN( 469)		Bool _hx_tmp1 = hx::IsNotNull( this->window );
HXDLIN( 469)		if (_hx_tmp1) {
HXLINE( 469)			_hx_tmp = hx::IsNotEq( this->window,window );
            		}
            		else {
HXLINE( 469)			_hx_tmp = true;
            		}
HXDLIN( 469)		if (_hx_tmp) {
HXLINE( 469)			return;
            		}
HXLINE( 471)		Float _hx_tmp2 = (deltaX * window->_hx___scale);
HXDLIN( 471)		Int _hx_tmp3 = ::Std_obj::_hx_int(_hx_tmp2);
HXDLIN( 471)		Float _hx_tmp4 = (deltaY * window->_hx___scale);
HXDLIN( 471)		Int _hx_tmp5 = ::Std_obj::_hx_int(_hx_tmp4);
HXDLIN( 471)		this->_hx___onMouseWheel(_hx_tmp3,_hx_tmp5);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Stage_obj,onMouseWheel,(void))

void Stage_obj::onPreloadComplete(){
            	HX_STACK_FRAME("openfl.display.Stage","onPreloadComplete",0xfd196e69,"openfl.display.Stage.onPreloadComplete","openfl/display/Stage.hx",476,0xadca4c2c)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,onPreloadComplete,(void))

void Stage_obj::onPreloadProgress(Int loaded,Int total){
            	HX_STACK_FRAME("openfl.display.Stage","onPreloadProgress",0x037c655d,"openfl.display.Stage.onPreloadProgress","openfl/display/Stage.hx",483,0xadca4c2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(loaded,"loaded")
            	HX_STACK_ARG(total,"total")
            	}


HX_DEFINE_DYNAMIC_FUNC2(Stage_obj,onPreloadProgress,(void))

void Stage_obj::onRenderContextLost( ::lime::graphics::Renderer renderer){
            	HX_STACK_FRAME("openfl.display.Stage","onRenderContextLost",0xf63c6844,"openfl.display.Stage.onRenderContextLost","openfl/display/Stage.hx",490,0xadca4c2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(renderer,"renderer")
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,onRenderContextLost,(void))

void Stage_obj::onRenderContextRestored( ::lime::graphics::Renderer renderer,::hx::EnumBase context){
            	HX_STACK_FRAME("openfl.display.Stage","onRenderContextRestored",0x98dd6bb6,"openfl.display.Stage.onRenderContextRestored","openfl/display/Stage.hx",497,0xadca4c2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(renderer,"renderer")
            	HX_STACK_ARG(context,"context")
            	}


HX_DEFINE_DYNAMIC_FUNC2(Stage_obj,onRenderContextRestored,(void))

void Stage_obj::onTextEdit( ::lime::ui::Window window,::String text,Int start,Int length){
            	HX_STACK_FRAME("openfl.display.Stage","onTextEdit",0x0cd051b0,"openfl.display.Stage.onTextEdit","openfl/display/Stage.hx",504,0xadca4c2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(window,"window")
            	HX_STACK_ARG(text,"text")
            	HX_STACK_ARG(start,"start")
            	HX_STACK_ARG(length,"length")
            	}


HX_DEFINE_DYNAMIC_FUNC4(Stage_obj,onTextEdit,(void))

void Stage_obj::onTextInput( ::lime::ui::Window window,::String text){
            	HX_STACK_FRAME("openfl.display.Stage","onTextInput",0x7db2eda4,"openfl.display.Stage.onTextInput","openfl/display/Stage.hx",511,0xadca4c2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(window,"window")
            	HX_STACK_ARG(text,"text")
HXLINE( 513)		Bool _hx_tmp;
HXDLIN( 513)		Bool _hx_tmp1 = hx::IsNotNull( this->window );
HXDLIN( 513)		if (_hx_tmp1) {
HXLINE( 513)			_hx_tmp = hx::IsNotEq( this->window,window );
            		}
            		else {
HXLINE( 513)			_hx_tmp = true;
            		}
HXDLIN( 513)		if (_hx_tmp) {
HXLINE( 513)			return;
            		}
HXLINE( 515)		HX_VARI( ::Array< ::Dynamic>,stack) = ::Array_obj< ::Dynamic>::__new();
HXLINE( 517)		Bool _hx_tmp2 = hx::IsNull( this->_hx___focus );
HXDLIN( 517)		if (_hx_tmp2) {
HXLINE( 519)			this->_hx___getInteractive(stack);
            		}
            		else {
HXLINE( 523)			this->_hx___focus->_hx___getInteractive(stack);
            		}
HXLINE( 527)		HX_VARI(  ::openfl::events::TextEvent,event) =  ::openfl::events::TextEvent_obj::__new(HX_("textInput",1d,54,0b,57),true,false,text);
HXLINE( 528)		Bool _hx_tmp3 = (stack->length > (int)0);
HXDLIN( 528)		if (_hx_tmp3) {
HXLINE( 530)			stack->reverse();
HXLINE( 531)			this->_hx___fireEvent(event,stack);
            		}
            		else {
HXLINE( 535)			this->_hx___dispatchEvent(event);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Stage_obj,onTextInput,(void))

void Stage_obj::onTouchMove( ::lime::ui::Touch touch){
            	HX_STACK_FRAME("openfl.display.Stage","onTouchMove",0x34750bf7,"openfl.display.Stage.onTouchMove","openfl/display/Stage.hx",544,0xadca4c2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(touch,"touch")
HXLINE( 544)		this->_hx___onTouch(HX_("touchMove",70,72,cd,0d),touch);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,onTouchMove,(void))

void Stage_obj::onTouchEnd( ::lime::ui::Touch touch){
            	HX_STACK_FRAME("openfl.display.Stage","onTouchEnd",0xc6cff9b5,"openfl.display.Stage.onTouchEnd","openfl/display/Stage.hx",549,0xadca4c2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(touch,"touch")
HXLINE( 551)		if (hx::IsEq( this->_hx___primaryTouch,touch )) {
HXLINE( 553)			this->_hx___primaryTouch = null();
            		}
HXLINE( 557)		this->_hx___onTouch(HX_("touchEnd",5c,c5,09,00),touch);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,onTouchEnd,(void))

void Stage_obj::onTouchStart( ::lime::ui::Touch touch){
            	HX_STACK_FRAME("openfl.display.Stage","onTouchStart",0x299b14bc,"openfl.display.Stage.onTouchStart","openfl/display/Stage.hx",562,0xadca4c2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(touch,"touch")
HXLINE( 564)		Bool _hx_tmp = hx::IsNull( this->_hx___primaryTouch );
HXDLIN( 564)		if (_hx_tmp) {
HXLINE( 566)			this->_hx___primaryTouch = touch;
            		}
HXLINE( 570)		this->_hx___onTouch(HX_("touchBegin",ea,cd,e6,a9),touch);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,onTouchStart,(void))

void Stage_obj::onWindowActivate( ::lime::ui::Window window){
            	HX_STACK_FRAME("openfl.display.Stage","onWindowActivate",0xcfe358dc,"openfl.display.Stage.onWindowActivate","openfl/display/Stage.hx",575,0xadca4c2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(window,"window")
HXLINE( 577)		Bool _hx_tmp;
HXDLIN( 577)		Bool _hx_tmp1 = hx::IsNotNull( this->window );
HXDLIN( 577)		if (_hx_tmp1) {
HXLINE( 577)			_hx_tmp = hx::IsNotEq( this->window,window );
            		}
            		else {
HXLINE( 577)			_hx_tmp = true;
            		}
HXDLIN( 577)		if (_hx_tmp) {
HXLINE( 577)			return;
            		}
HXLINE( 579)		this->_hx___broadcastEvent( ::openfl::events::Event_obj::__new(HX_("activate",b3,1b,ac,e5),null(),null()));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,onWindowActivate,(void))

void Stage_obj::onWindowClose( ::lime::ui::Window window){
            	HX_STACK_FRAME("openfl.display.Stage","onWindowClose",0x0c1bf6ef,"openfl.display.Stage.onWindowClose","openfl/display/Stage.hx",586,0xadca4c2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(window,"window")
HXLINE( 586)		if (hx::IsEq( this->window,window )) {
HXLINE( 588)			this->window = null();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,onWindowClose,(void))

void Stage_obj::onWindowCreate( ::lime::ui::Window window){
            	HX_STACK_FRAME("openfl.display.Stage","onWindowCreate",0xfa19d7e5,"openfl.display.Stage.onWindowCreate","openfl/display/Stage.hx",595,0xadca4c2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(window,"window")
HXLINE( 597)		Bool _hx_tmp;
HXDLIN( 597)		Bool _hx_tmp1 = hx::IsNotNull( this->window );
HXDLIN( 597)		if (_hx_tmp1) {
HXLINE( 597)			_hx_tmp = hx::IsNotEq( this->window,window );
            		}
            		else {
HXLINE( 597)			_hx_tmp = true;
            		}
HXDLIN( 597)		if (_hx_tmp) {
HXLINE( 597)			return;
            		}
HXLINE( 599)		Bool _hx_tmp2 = hx::IsNotNull( window->renderer );
HXDLIN( 599)		if (_hx_tmp2) {
HXLINE( 601)			HX_VARI( ::hx::EnumBase,_g) = window->renderer->context;
HXDLIN( 601)			Int _hx_tmp3 = ( ( ::hx::EnumBase)(_g) )->_hx_getIndex();
HXDLIN( 601)			switch((int)(_hx_tmp3)){
            				case (int)0: {
HXLINE( 606)					this->_hx___renderer =  ::openfl::_internal::renderer::opengl::GLRenderer_obj::__new(hx::ObjectPtr<OBJ_>(this),_g->_hx_getObject(0).StaticCast<  ::lime::graphics::GLRenderContext >());
            				}
            				break;
            				case (int)1: {
HXLINE( 611)					this->_hx___renderer =  ::openfl::_internal::renderer::canvas::CanvasRenderer_obj::__new(hx::ObjectPtr<OBJ_>(this),_g->_hx_getObject(0).StaticCast<  ::lime::graphics::CanvasRenderContext >());
            				}
            				break;
            				case (int)2: {
HXLINE( 615)					this->_hx___renderer =  ::openfl::_internal::renderer::dom::DOMRenderer_obj::__new(hx::ObjectPtr<OBJ_>(this),_g->_hx_getObject(0).StaticCast<  ::lime::graphics::DOMRenderContext >());
            				}
            				break;
            				case (int)4: {
HXLINE( 620)					this->_hx___renderer =  ::openfl::_internal::renderer::cairo::CairoRenderer_obj::__new(hx::ObjectPtr<OBJ_>(this),_g->_hx_getObject(0).StaticCast<  ::lime::graphics::cairo::Cairo >());
            				}
            				break;
            				case (int)5: {
HXLINE( 626)					this->_hx___renderer =  ::openfl::_internal::renderer::console::ConsoleRenderer_obj::__new(hx::ObjectPtr<OBJ_>(this),_g->_hx_getObject(0).StaticCast<  ::lime::graphics::ConsoleRenderContext >());
            				}
            				break;
            				default:{
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,onWindowCreate,(void))

void Stage_obj::onWindowDeactivate( ::lime::ui::Window window){
            	HX_STACK_FRAME("openfl.display.Stage","onWindowDeactivate",0x9060f59d,"openfl.display.Stage.onWindowDeactivate","openfl/display/Stage.hx",638,0xadca4c2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(window,"window")
HXLINE( 640)		Bool _hx_tmp;
HXDLIN( 640)		Bool _hx_tmp1 = hx::IsNotNull( this->window );
HXDLIN( 640)		if (_hx_tmp1) {
HXLINE( 640)			_hx_tmp = hx::IsNotEq( this->window,window );
            		}
            		else {
HXLINE( 640)			_hx_tmp = true;
            		}
HXDLIN( 640)		if (_hx_tmp) {
HXLINE( 640)			return;
            		}
HXLINE( 642)		this->_hx___primaryTouch = null();
HXLINE( 643)		this->_hx___broadcastEvent( ::openfl::events::Event_obj::__new(HX_("deactivate",34,5c,01,3c),null(),null()));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,onWindowDeactivate,(void))

void Stage_obj::onWindowDropFile( ::lime::ui::Window window,::String file){
            	HX_STACK_FRAME("openfl.display.Stage","onWindowDropFile",0xd38db374,"openfl.display.Stage.onWindowDropFile","openfl/display/Stage.hx",648,0xadca4c2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(window,"window")
            	HX_STACK_ARG(file,"file")
            	}


HX_DEFINE_DYNAMIC_FUNC2(Stage_obj,onWindowDropFile,(void))

void Stage_obj::onWindowEnter( ::lime::ui::Window window){
            	HX_STACK_FRAME("openfl.display.Stage","onWindowEnter",0x343f4c4f,"openfl.display.Stage.onWindowEnter","openfl/display/Stage.hx",655,0xadca4c2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(window,"window")
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,onWindowEnter,(void))

void Stage_obj::onWindowFocusIn( ::lime::ui::Window window){
            	HX_STACK_FRAME("openfl.display.Stage","onWindowFocusIn",0x0c9ba0d4,"openfl.display.Stage.onWindowFocusIn","openfl/display/Stage.hx",662,0xadca4c2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(window,"window")
HXLINE( 664)		Bool _hx_tmp;
HXDLIN( 664)		Bool _hx_tmp1 = hx::IsNotNull( this->window );
HXDLIN( 664)		if (_hx_tmp1) {
HXLINE( 664)			_hx_tmp = hx::IsNotEq( this->window,window );
            		}
            		else {
HXLINE( 664)			_hx_tmp = true;
            		}
HXDLIN( 664)		if (_hx_tmp) {
HXLINE( 664)			return;
            		}
HXLINE( 666)		this->set_focus(this->_hx___cacheFocus);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,onWindowFocusIn,(void))

void Stage_obj::onWindowFocusOut( ::lime::ui::Window window){
            	HX_STACK_FRAME("openfl.display.Stage","onWindowFocusOut",0xfb95acbf,"openfl.display.Stage.onWindowFocusOut","openfl/display/Stage.hx",671,0xadca4c2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(window,"window")
HXLINE( 673)		Bool _hx_tmp;
HXDLIN( 673)		Bool _hx_tmp1 = hx::IsNotNull( this->window );
HXDLIN( 673)		if (_hx_tmp1) {
HXLINE( 673)			_hx_tmp = hx::IsNotEq( this->window,window );
            		}
            		else {
HXLINE( 673)			_hx_tmp = true;
            		}
HXDLIN( 673)		if (_hx_tmp) {
HXLINE( 673)			return;
            		}
HXLINE( 675)		HX_VARI(  ::openfl::display::InteractiveObject,currentFocus) = this->get_focus();
HXLINE( 676)		this->set_focus(null());
HXLINE( 677)		this->_hx___cacheFocus = currentFocus;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,onWindowFocusOut,(void))

void Stage_obj::onWindowFullscreen( ::lime::ui::Window window){
            	HX_STACK_FRAME("openfl.display.Stage","onWindowFullscreen",0x4e13d3a4,"openfl.display.Stage.onWindowFullscreen","openfl/display/Stage.hx",682,0xadca4c2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(window,"window")
HXLINE( 684)		Bool _hx_tmp;
HXDLIN( 684)		Bool _hx_tmp1 = hx::IsNotNull( this->window );
HXDLIN( 684)		if (_hx_tmp1) {
HXLINE( 684)			_hx_tmp = hx::IsNotEq( this->window,window );
            		}
            		else {
HXLINE( 684)			_hx_tmp = true;
            		}
HXDLIN( 684)		if (_hx_tmp) {
HXLINE( 684)			return;
            		}
HXLINE( 686)		this->_hx___resize();
HXLINE( 688)		Bool _hx_tmp2 = hx::IsEq( this->_hx___displayState,(int)2 );
HXDLIN( 688)		if (_hx_tmp2) {
HXLINE( 690)			this->_hx___displayState = (int)1;
HXLINE( 691)			this->_hx___dispatchEvent( ::openfl::events::FullScreenEvent_obj::__new(HX_("fullScreen",5b,ae,48,2e),false,false,false,true));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,onWindowFullscreen,(void))

void Stage_obj::onWindowLeave( ::lime::ui::Window window){
            	HX_STACK_FRAME("openfl.display.Stage","onWindowLeave",0x360c142e,"openfl.display.Stage.onWindowLeave","openfl/display/Stage.hx",698,0xadca4c2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(window,"window")
HXLINE( 700)		Bool _hx_tmp;
HXDLIN( 700)		Bool _hx_tmp1 = hx::IsNotNull( this->window );
HXDLIN( 700)		if (_hx_tmp1) {
HXLINE( 700)			_hx_tmp = hx::IsNotEq( this->window,window );
            		}
            		else {
HXLINE( 700)			_hx_tmp = true;
            		}
HXDLIN( 700)		if (_hx_tmp) {
HXLINE( 700)			return;
            		}
HXLINE( 702)		this->_hx___dispatchEvent( ::openfl::events::Event_obj::__new(HX_("mouseLeave",92,28,20,90),null(),null()));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,onWindowLeave,(void))

void Stage_obj::onWindowMinimize( ::lime::ui::Window window){
            	HX_STACK_FRAME("openfl.display.Stage","onWindowMinimize",0x0bb07c47,"openfl.display.Stage.onWindowMinimize","openfl/display/Stage.hx",707,0xadca4c2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(window,"window")
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,onWindowMinimize,(void))

void Stage_obj::onWindowMove( ::lime::ui::Window window,Float x,Float y){
            	HX_STACK_FRAME("openfl.display.Stage","onWindowMove",0x7f3617ba,"openfl.display.Stage.onWindowMove","openfl/display/Stage.hx",714,0xadca4c2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(window,"window")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	}


HX_DEFINE_DYNAMIC_FUNC3(Stage_obj,onWindowMove,(void))

void Stage_obj::onWindowResize( ::lime::ui::Window window,Int width,Int height){
            	HX_STACK_FRAME("openfl.display.Stage","onWindowResize",0x8685cadd,"openfl.display.Stage.onWindowResize","openfl/display/Stage.hx",721,0xadca4c2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(window,"window")
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
HXLINE( 723)		Bool _hx_tmp;
HXDLIN( 723)		Bool _hx_tmp1 = hx::IsNotNull( this->window );
HXDLIN( 723)		if (_hx_tmp1) {
HXLINE( 723)			_hx_tmp = hx::IsNotEq( this->window,window );
            		}
            		else {
HXLINE( 723)			_hx_tmp = true;
            		}
HXDLIN( 723)		if (_hx_tmp) {
HXLINE( 723)			return;
            		}
HXLINE( 725)		this->_hx___resize();
HXLINE( 727)		Bool _hx_tmp2;
HXDLIN( 727)		if (hx::IsNotEq( this->_hx___displayState,(int)2 )) {
HXLINE( 727)			_hx_tmp2 = !(window->_hx___fullscreen);
            		}
            		else {
HXLINE( 727)			_hx_tmp2 = false;
            		}
HXDLIN( 727)		if (_hx_tmp2) {
HXLINE( 729)			this->_hx___displayState = (int)2;
HXLINE( 730)			this->_hx___dispatchEvent( ::openfl::events::FullScreenEvent_obj::__new(HX_("fullScreen",5b,ae,48,2e),false,false,true,true));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Stage_obj,onWindowResize,(void))

void Stage_obj::onWindowRestore( ::lime::ui::Window window){
            	HX_STACK_FRAME("openfl.display.Stage","onWindowRestore",0x35c8c245,"openfl.display.Stage.onWindowRestore","openfl/display/Stage.hx",737,0xadca4c2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(window,"window")
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,onWindowRestore,(void))

void Stage_obj::render( ::lime::graphics::Renderer renderer){
            	HX_STACK_FRAME("openfl.display.Stage","render",0x050c3670,"openfl.display.Stage.render","openfl/display/Stage.hx",746,0xadca4c2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(renderer,"renderer")
HXLINE( 748)		Bool _hx_tmp;
HXDLIN( 748)		Bool _hx_tmp1 = hx::IsNotNull( renderer->window );
HXDLIN( 748)		if (_hx_tmp1) {
HXLINE( 748)			_hx_tmp = hx::IsNotEq( renderer->window,this->window );
            		}
            		else {
HXLINE( 748)			_hx_tmp = true;
            		}
HXDLIN( 748)		if (_hx_tmp) {
HXLINE( 748)			return;
            		}
HXLINE( 752)		Bool _hx_tmp2;
HXDLIN( 752)		Bool _hx_tmp3 = hx::IsNotNull( this->application );
HXDLIN( 752)		if (_hx_tmp3) {
HXLINE( 752)			_hx_tmp2 = (this->application->_hx___windows->length > (int)0);
            		}
            		else {
HXLINE( 752)			_hx_tmp2 = false;
            		}
HXDLIN( 752)		if (_hx_tmp2) {
HXLINE( 754)			Bool _hx_tmp4 = !(this->_hx___transformDirty);
HXDLIN( 754)			if (_hx_tmp4) {
HXLINE( 754)				this->_hx___transformDirty = true;
HXDLIN( 754)				::openfl::display::DisplayObject_obj::_hx___worldTransformDirty++;
            			}
HXLINE( 755)			Bool _hx_tmp5 = !(this->_hx___renderDirty);
HXDLIN( 755)			if (_hx_tmp5) {
HXLINE( 755)				this->_hx___renderDirty = true;
HXDLIN( 755)				::openfl::display::DisplayObject_obj::_hx___worldRenderDirty++;
            			}
            		}
HXLINE( 759)		if (this->_hx___rendering) {
HXLINE( 759)			return;
            		}
HXLINE( 760)		this->_hx___rendering = true;
HXLINE( 766)		Bool _hx_tmp6 = hx::IsNotNull( this->_hx___renderer );
HXDLIN( 766)		if (_hx_tmp6) {
HXLINE( 768)			this->_hx___renderer->clear();
            		}
HXLINE( 772)		this->_hx___broadcastEvent( ::openfl::events::Event_obj::__new(HX_("enterFrame",f5,03,50,02),null(),null()));
HXLINE( 773)		this->_hx___broadcastEvent( ::openfl::events::Event_obj::__new(HX_("exitFrame",2f,64,48,12),null(),null()));
HXLINE( 775)		Bool _hx_tmp7 = this->_hx___invalidated;
HXDLIN( 775)		if (_hx_tmp7) {
HXLINE( 777)			this->_hx___invalidated = false;
HXLINE( 778)			this->_hx___broadcastEvent( ::openfl::events::Event_obj::__new(HX_("render",56,6b,29,05),null(),null()));
            		}
HXLINE( 787)		this->_hx___renderable = true;
HXLINE( 789)		this->_hx___enterFrame(this->_hx___deltaTime);
HXLINE( 790)		this->_hx___deltaTime = (int)0;
HXLINE( 791)		this->_hx___update(false,true,null());
HXLINE( 793)		Bool _hx_tmp8 = hx::IsNotNull( this->_hx___renderer );
HXDLIN( 793)		if (_hx_tmp8) {
HXLINE( 795)			if (hx::IsEq( renderer->type,::lime::graphics::RendererType_obj::CAIRO_dyn() )) {
HXLINE( 797)				HX_VARI( ::hx::EnumBase,_g) = renderer->context;
HXDLIN( 797)				Int _hx_tmp9 = ( ( ::hx::EnumBase)(_g) )->_hx_getIndex();
HXDLIN( 797)				if ((_hx_tmp9 == (int)4)) {
HXLINE( 799)					HX_VARI(  ::lime::graphics::cairo::Cairo,cairo) = _g->_hx_getObject(0).StaticCast<  ::lime::graphics::cairo::Cairo >();
HXDLIN( 799)					{
HXLINE( 801)						hx::TCast<  ::openfl::_internal::renderer::cairo::CairoRenderer >::cast(this->_hx___renderer)->cairo = cairo;
HXLINE( 802)						this->_hx___renderer->renderSession->cairo = cairo;
            					}
            				}
            			}
HXLINE( 810)			this->_hx___renderer->render();
            		}
HXLINE( 819)		this->_hx___rendering = false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,render,(void))

void Stage_obj::update(Int deltaTime){
            	HX_STACK_FRAME("openfl.display.Stage","update",0x86e85123,"openfl.display.Stage.update","openfl/display/Stage.hx",826,0xadca4c2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(deltaTime,"deltaTime")
HXLINE( 826)		this->_hx___deltaTime = deltaTime;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,update,(void))

void Stage_obj::_hx___broadcastEvent( ::openfl::events::Event event){
            	HX_STACK_FRAME("openfl.display.Stage","__broadcastEvent",0x79aa0c13,"openfl.display.Stage.__broadcastEvent","openfl/display/Stage.hx",833,0xadca4c2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(event,"event")
HXLINE( 833)		Bool _hx_tmp = ::openfl::display::DisplayObject_obj::_hx___broadcastEvents->exists(event->type);
HXDLIN( 833)		if (_hx_tmp) {
HXLINE( 835)			HX_VARI( ::Array< ::Dynamic>,dispatchers) = ( (::Array< ::Dynamic>)(::openfl::display::DisplayObject_obj::_hx___broadcastEvents->get(event->type)) );
HXLINE( 837)			{
HXLINE( 837)				HX_VARI( Int,_g) = (int)0;
HXDLIN( 837)				while((_g < dispatchers->length)){
HXLINE( 837)					HX_VARI(  ::openfl::display::DisplayObject,dispatcher) = dispatchers->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 837)					++_g;
HXLINE( 839)					dispatcher->_hx___dispatch(event);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,_hx___broadcastEvent,(void))

void Stage_obj::_hx___drag( ::openfl::geom::Point mouse){
            	HX_STACK_FRAME("openfl.display.Stage","__drag",0xf14b5a2e,"openfl.display.Stage.__drag","openfl/display/Stage.hx",848,0xadca4c2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(mouse,"mouse")
HXLINE( 850)		HX_VARI(  ::openfl::display::DisplayObjectContainer,parent) = this->_hx___dragObject->parent;
HXLINE( 851)		Bool _hx_tmp = hx::IsNotNull( parent );
HXDLIN( 851)		if (_hx_tmp) {
HXLINE( 853)			HX_VARI(  ::openfl::geom::Matrix,_this) = parent->_hx___getWorldTransform();
HXDLIN( 853)			HX_VARI( Float,norm) = ((_this->a * _this->d) - (_this->b * _this->c));
HXDLIN( 853)			if ((norm == (int)0)) {
HXLINE( 853)				mouse->x = -(_this->tx);
HXDLIN( 853)				mouse->y = -(_this->ty);
            			}
            			else {
HXLINE( 853)				HX_VARI( Float,px) = (((Float)((Float)1.0) / (Float)norm) * ((_this->c * (_this->ty - mouse->y)) + (_this->d * (mouse->x - _this->tx))));
HXDLIN( 853)				Float _hx_tmp1 = ((Float)((Float)1.0) / (Float)norm);
HXDLIN( 853)				Float _hx_tmp2 = (_this->a * (mouse->y - _this->ty));
HXDLIN( 853)				Float _hx_tmp3 = (_this->b * (_this->tx - mouse->x));
HXDLIN( 853)				mouse->y = (_hx_tmp1 * (_hx_tmp2 + _hx_tmp3));
HXDLIN( 853)				mouse->x = px;
            			}
            		}
HXLINE( 857)		HX_VARI( Float,x) = (mouse->x + this->_hx___dragOffsetX);
HXLINE( 858)		HX_VARI( Float,y) = (mouse->y + this->_hx___dragOffsetY);
HXLINE( 860)		Bool _hx_tmp4 = hx::IsNotNull( this->_hx___dragBounds );
HXDLIN( 860)		if (_hx_tmp4) {
HXLINE( 862)			Bool _hx_tmp5 = (x < this->_hx___dragBounds->x);
HXDLIN( 862)			if (_hx_tmp5) {
HXLINE( 864)				x = this->_hx___dragBounds->x;
            			}
            			else {
HXLINE( 866)				Float _hx_tmp6 = this->_hx___dragBounds->get_right();
HXDLIN( 866)				if ((x > _hx_tmp6)) {
HXLINE( 868)					x = this->_hx___dragBounds->get_right();
            				}
            			}
HXLINE( 872)			Bool _hx_tmp7 = (y < this->_hx___dragBounds->y);
HXDLIN( 872)			if (_hx_tmp7) {
HXLINE( 874)				y = this->_hx___dragBounds->y;
            			}
            			else {
HXLINE( 876)				Float _hx_tmp8 = this->_hx___dragBounds->get_bottom();
HXDLIN( 876)				if ((y > _hx_tmp8)) {
HXLINE( 878)					y = this->_hx___dragBounds->get_bottom();
            				}
            			}
            		}
HXLINE( 884)		this->_hx___dragObject->set_x(x);
HXLINE( 885)		this->_hx___dragObject->set_y(y);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,_hx___drag,(void))

void Stage_obj::_hx___fireEvent( ::openfl::events::Event event,::Array< ::Dynamic> stack){
            	HX_STACK_FRAME("openfl.display.Stage","__fireEvent",0xa3fe300a,"openfl.display.Stage.__fireEvent","openfl/display/Stage.hx",890,0xadca4c2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(event,"event")
            	HX_STACK_ARG(stack,"stack")
HXLINE( 892)		HX_VAR(  ::openfl::display::DisplayObject,target);
HXLINE( 893)		HX_VARI( Int,length) = stack->length;
HXLINE( 895)		if ((length == (int)0)) {
HXLINE( 897)			event->eventPhase = (int)2;
HXLINE( 898)			target = ( ( ::openfl::display::DisplayObject)(event->target) );
HXLINE( 899)			target->_hx___dispatch(event);
            		}
            		else {
HXLINE( 903)			event->eventPhase = (int)1;
HXLINE( 904)			Int _hx_tmp = (stack->length - (int)1);
HXDLIN( 904)			event->target = stack->__get(_hx_tmp).StaticCast<  ::openfl::display::DisplayObject >();
HXLINE( 906)			{
HXLINE( 906)				HX_VARI( Int,_g1) = (int)0;
HXDLIN( 906)				HX_VARI( Int,_g) = (length - (int)1);
HXDLIN( 906)				while((_g1 < _g)){
HXLINE( 906)					HX_VARI( Int,i) = _g1++;
HXLINE( 908)					stack->__get(i).StaticCast<  ::openfl::display::DisplayObject >()->_hx___dispatch(event);
HXLINE( 910)					if (event->_hx___isCanceled) {
HXLINE( 912)						return;
            					}
            				}
            			}
HXLINE( 918)			event->eventPhase = (int)2;
HXLINE( 919)			target = ( ( ::openfl::display::DisplayObject)(event->target) );
HXLINE( 920)			target->_hx___dispatch(event);
HXLINE( 922)			if (event->_hx___isCanceled) {
HXLINE( 924)				return;
            			}
HXLINE( 928)			Bool _hx_tmp1 = event->bubbles;
HXDLIN( 928)			if (_hx_tmp1) {
HXLINE( 930)				event->eventPhase = (int)3;
HXLINE( 931)				HX_VARI_NAME( Int,i1,"i") = (length - (int)2);
HXLINE( 933)				while((i1 >= (int)0)){
HXLINE( 935)					stack->__get(i1).StaticCast<  ::openfl::display::DisplayObject >()->_hx___dispatch(event);
HXLINE( 937)					if (event->_hx___isCanceled) {
HXLINE( 939)						return;
            					}
HXLINE( 943)					--i1;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Stage_obj,_hx___fireEvent,(void))

Bool Stage_obj::_hx___getInteractive(::Array< ::Dynamic> stack){
            	HX_STACK_FRAME("openfl.display.Stage","__getInteractive",0xdc3c8ba6,"openfl.display.Stage.__getInteractive","openfl/display/Stage.hx",954,0xadca4c2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(stack,"stack")
HXLINE( 956)		Bool _hx_tmp = hx::IsNotNull( stack );
HXDLIN( 956)		if (_hx_tmp) {
HXLINE( 958)			stack->push(hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE( 962)		return true;
            	}


void Stage_obj::_hx___onKey(::String type,Int keyCode,Int modifier){
            	HX_STACK_FRAME("openfl.display.Stage","__onKey",0x83566246,"openfl.display.Stage.__onKey","openfl/display/Stage.hx",967,0xadca4c2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(type,"type")
            	HX_STACK_ARG(keyCode,"keyCode")
            	HX_STACK_ARG(modifier,"modifier")
HXLINE( 969)		::openfl::events::MouseEvent_obj::_hx___altKey = ::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_altKey(modifier);
HXLINE( 970)		::openfl::events::MouseEvent_obj::_hx___commandKey = ::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_metaKey(modifier);
HXLINE( 971)		::openfl::events::MouseEvent_obj::_hx___ctrlKey = ::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_ctrlKey(modifier);
HXLINE( 972)		::openfl::events::MouseEvent_obj::_hx___shiftKey = ::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier);
HXLINE( 974)		HX_VARI( ::Array< ::Dynamic>,stack) = ::Array_obj< ::Dynamic>::__new();
HXLINE( 976)		Bool _hx_tmp = hx::IsNull( this->_hx___focus );
HXDLIN( 976)		if (_hx_tmp) {
HXLINE( 978)			this->_hx___getInteractive(stack);
            		}
            		else {
HXLINE( 982)			this->_hx___focus->_hx___getInteractive(stack);
            		}
HXLINE( 986)		Bool _hx_tmp1 = (stack->length > (int)0);
HXDLIN( 986)		if (_hx_tmp1) {
HXLINE( 988)			HX_VAR( Int,keyLocation);
HXDLIN( 988)			switch((int)(keyCode)){
            				case (int)1073741908: case (int)1073741909: case (int)1073741910: case (int)1073741911: case (int)1073741912: case (int)1073741913: case (int)1073741914: case (int)1073741915: case (int)1073741916: case (int)1073741917: case (int)1073741918: case (int)1073741919: case (int)1073741920: case (int)1073741921: case (int)1073741922: case (int)1073741923: case (int)1073742044: {
HXLINE( 988)					keyLocation = (int)3;
            				}
            				break;
            				case (int)1073742048: case (int)1073742049: case (int)1073742050: case (int)1073742051: {
HXLINE( 988)					keyLocation = (int)1;
            				}
            				break;
            				case (int)1073742052: case (int)1073742053: case (int)1073742054: case (int)1073742055: {
HXLINE( 988)					keyLocation = (int)2;
            				}
            				break;
            				default:{
HXLINE( 988)					keyLocation = (int)0;
            				}
            			}
HXLINE( 989)			HX_VAR_NAME( Int,keyCode1,"keyCode");
HXDLIN( 989)			switch((int)(keyCode)){
            				case (int)8: {
HXLINE( 989)					keyCode1 = (int)8;
            				}
            				break;
            				case (int)9: {
HXLINE( 989)					keyCode1 = (int)9;
            				}
            				break;
            				case (int)13: {
HXLINE( 989)					keyCode1 = (int)13;
            				}
            				break;
            				case (int)27: {
HXLINE( 989)					keyCode1 = (int)27;
            				}
            				break;
            				case (int)32: {
HXLINE( 989)					keyCode1 = (int)32;
            				}
            				break;
            				case (int)33: {
HXLINE( 989)					keyCode1 = (int)49;
            				}
            				break;
            				case (int)34: {
HXLINE( 989)					keyCode1 = (int)222;
            				}
            				break;
            				case (int)35: {
HXLINE( 989)					keyCode1 = (int)51;
            				}
            				break;
            				case (int)36: {
HXLINE( 989)					keyCode1 = (int)52;
            				}
            				break;
            				case (int)37: {
HXLINE( 989)					keyCode1 = (int)53;
            				}
            				break;
            				case (int)38: {
HXLINE( 989)					keyCode1 = (int)55;
            				}
            				break;
            				case (int)39: {
HXLINE( 989)					keyCode1 = (int)222;
            				}
            				break;
            				case (int)40: {
HXLINE( 989)					keyCode1 = (int)57;
            				}
            				break;
            				case (int)41: {
HXLINE( 989)					keyCode1 = (int)48;
            				}
            				break;
            				case (int)42: {
HXLINE( 989)					keyCode1 = (int)56;
            				}
            				break;
            				case (int)44: {
HXLINE( 989)					keyCode1 = (int)188;
            				}
            				break;
            				case (int)45: {
HXLINE( 989)					keyCode1 = (int)189;
            				}
            				break;
            				case (int)46: {
HXLINE( 989)					keyCode1 = (int)190;
            				}
            				break;
            				case (int)47: {
HXLINE( 989)					keyCode1 = (int)191;
            				}
            				break;
            				case (int)48: {
HXLINE( 989)					keyCode1 = (int)48;
            				}
            				break;
            				case (int)49: {
HXLINE( 989)					keyCode1 = (int)49;
            				}
            				break;
            				case (int)50: {
HXLINE( 989)					keyCode1 = (int)50;
            				}
            				break;
            				case (int)51: {
HXLINE( 989)					keyCode1 = (int)51;
            				}
            				break;
            				case (int)52: {
HXLINE( 989)					keyCode1 = (int)52;
            				}
            				break;
            				case (int)53: {
HXLINE( 989)					keyCode1 = (int)53;
            				}
            				break;
            				case (int)54: {
HXLINE( 989)					keyCode1 = (int)54;
            				}
            				break;
            				case (int)55: {
HXLINE( 989)					keyCode1 = (int)55;
            				}
            				break;
            				case (int)56: {
HXLINE( 989)					keyCode1 = (int)56;
            				}
            				break;
            				case (int)57: {
HXLINE( 989)					keyCode1 = (int)57;
            				}
            				break;
            				case (int)58: {
HXLINE( 989)					keyCode1 = (int)186;
            				}
            				break;
            				case (int)59: {
HXLINE( 989)					keyCode1 = (int)186;
            				}
            				break;
            				case (int)60: {
HXLINE( 989)					keyCode1 = (int)60;
            				}
            				break;
            				case (int)61: {
HXLINE( 989)					keyCode1 = (int)187;
            				}
            				break;
            				case (int)62: {
HXLINE( 989)					keyCode1 = (int)190;
            				}
            				break;
            				case (int)63: {
HXLINE( 989)					keyCode1 = (int)191;
            				}
            				break;
            				case (int)64: {
HXLINE( 989)					keyCode1 = (int)50;
            				}
            				break;
            				case (int)91: {
HXLINE( 989)					keyCode1 = (int)219;
            				}
            				break;
            				case (int)92: {
HXLINE( 989)					keyCode1 = (int)220;
            				}
            				break;
            				case (int)93: {
HXLINE( 989)					keyCode1 = (int)221;
            				}
            				break;
            				case (int)94: {
HXLINE( 989)					keyCode1 = (int)54;
            				}
            				break;
            				case (int)95: {
HXLINE( 989)					keyCode1 = (int)189;
            				}
            				break;
            				case (int)96: {
HXLINE( 989)					keyCode1 = (int)192;
            				}
            				break;
            				case (int)97: {
HXLINE( 989)					keyCode1 = (int)65;
            				}
            				break;
            				case (int)98: {
HXLINE( 989)					keyCode1 = (int)66;
            				}
            				break;
            				case (int)99: {
HXLINE( 989)					keyCode1 = (int)67;
            				}
            				break;
            				case (int)100: {
HXLINE( 989)					keyCode1 = (int)68;
            				}
            				break;
            				case (int)101: {
HXLINE( 989)					keyCode1 = (int)69;
            				}
            				break;
            				case (int)102: {
HXLINE( 989)					keyCode1 = (int)70;
            				}
            				break;
            				case (int)103: {
HXLINE( 989)					keyCode1 = (int)71;
            				}
            				break;
            				case (int)104: {
HXLINE( 989)					keyCode1 = (int)72;
            				}
            				break;
            				case (int)105: {
HXLINE( 989)					keyCode1 = (int)73;
            				}
            				break;
            				case (int)106: {
HXLINE( 989)					keyCode1 = (int)74;
            				}
            				break;
            				case (int)107: {
HXLINE( 989)					keyCode1 = (int)75;
            				}
            				break;
            				case (int)108: {
HXLINE( 989)					keyCode1 = (int)76;
            				}
            				break;
            				case (int)109: {
HXLINE( 989)					keyCode1 = (int)77;
            				}
            				break;
            				case (int)110: {
HXLINE( 989)					keyCode1 = (int)78;
            				}
            				break;
            				case (int)111: {
HXLINE( 989)					keyCode1 = (int)79;
            				}
            				break;
            				case (int)112: {
HXLINE( 989)					keyCode1 = (int)80;
            				}
            				break;
            				case (int)113: {
HXLINE( 989)					keyCode1 = (int)81;
            				}
            				break;
            				case (int)114: {
HXLINE( 989)					keyCode1 = (int)82;
            				}
            				break;
            				case (int)115: {
HXLINE( 989)					keyCode1 = (int)83;
            				}
            				break;
            				case (int)116: {
HXLINE( 989)					keyCode1 = (int)84;
            				}
            				break;
            				case (int)117: {
HXLINE( 989)					keyCode1 = (int)85;
            				}
            				break;
            				case (int)118: {
HXLINE( 989)					keyCode1 = (int)86;
            				}
            				break;
            				case (int)119: {
HXLINE( 989)					keyCode1 = (int)87;
            				}
            				break;
            				case (int)120: {
HXLINE( 989)					keyCode1 = (int)88;
            				}
            				break;
            				case (int)121: {
HXLINE( 989)					keyCode1 = (int)89;
            				}
            				break;
            				case (int)122: {
HXLINE( 989)					keyCode1 = (int)90;
            				}
            				break;
            				case (int)127: {
HXLINE( 989)					keyCode1 = (int)46;
            				}
            				break;
            				case (int)1073741881: {
HXLINE( 989)					keyCode1 = (int)20;
            				}
            				break;
            				case (int)1073741882: {
HXLINE( 989)					keyCode1 = (int)112;
            				}
            				break;
            				case (int)1073741883: {
HXLINE( 989)					keyCode1 = (int)113;
            				}
            				break;
            				case (int)1073741884: {
HXLINE( 989)					keyCode1 = (int)114;
            				}
            				break;
            				case (int)1073741885: {
HXLINE( 989)					keyCode1 = (int)115;
            				}
            				break;
            				case (int)1073741886: {
HXLINE( 989)					keyCode1 = (int)116;
            				}
            				break;
            				case (int)1073741887: {
HXLINE( 989)					keyCode1 = (int)117;
            				}
            				break;
            				case (int)1073741888: {
HXLINE( 989)					keyCode1 = (int)118;
            				}
            				break;
            				case (int)1073741889: {
HXLINE( 989)					keyCode1 = (int)119;
            				}
            				break;
            				case (int)1073741890: {
HXLINE( 989)					keyCode1 = (int)120;
            				}
            				break;
            				case (int)1073741891: {
HXLINE( 989)					keyCode1 = (int)121;
            				}
            				break;
            				case (int)1073741892: {
HXLINE( 989)					keyCode1 = (int)122;
            				}
            				break;
            				case (int)1073741893: {
HXLINE( 989)					keyCode1 = (int)123;
            				}
            				break;
            				case (int)1073741894: {
HXLINE( 989)					keyCode1 = (int)301;
            				}
            				break;
            				case (int)1073741895: {
HXLINE( 989)					keyCode1 = (int)145;
            				}
            				break;
            				case (int)1073741896: {
HXLINE( 989)					keyCode1 = (int)19;
            				}
            				break;
            				case (int)1073741897: {
HXLINE( 989)					keyCode1 = (int)45;
            				}
            				break;
            				case (int)1073741898: {
HXLINE( 989)					keyCode1 = (int)36;
            				}
            				break;
            				case (int)1073741899: {
HXLINE( 989)					keyCode1 = (int)33;
            				}
            				break;
            				case (int)1073741901: {
HXLINE( 989)					keyCode1 = (int)35;
            				}
            				break;
            				case (int)1073741902: {
HXLINE( 989)					keyCode1 = (int)34;
            				}
            				break;
            				case (int)1073741903: {
HXLINE( 989)					keyCode1 = (int)39;
            				}
            				break;
            				case (int)1073741904: {
HXLINE( 989)					keyCode1 = (int)37;
            				}
            				break;
            				case (int)1073741905: {
HXLINE( 989)					keyCode1 = (int)40;
            				}
            				break;
            				case (int)1073741906: {
HXLINE( 989)					keyCode1 = (int)38;
            				}
            				break;
            				case (int)1073741907: {
HXLINE( 989)					keyCode1 = (int)144;
            				}
            				break;
            				case (int)1073741908: {
HXLINE( 989)					keyCode1 = (int)111;
            				}
            				break;
            				case (int)1073741909: {
HXLINE( 989)					keyCode1 = (int)106;
            				}
            				break;
            				case (int)1073741910: {
HXLINE( 989)					keyCode1 = (int)109;
            				}
            				break;
            				case (int)1073741911: {
HXLINE( 989)					keyCode1 = (int)107;
            				}
            				break;
            				case (int)1073741912: {
HXLINE( 989)					keyCode1 = (int)108;
            				}
            				break;
            				case (int)1073741913: {
HXLINE( 989)					keyCode1 = (int)97;
            				}
            				break;
            				case (int)1073741914: {
HXLINE( 989)					keyCode1 = (int)98;
            				}
            				break;
            				case (int)1073741915: {
HXLINE( 989)					keyCode1 = (int)99;
            				}
            				break;
            				case (int)1073741916: {
HXLINE( 989)					keyCode1 = (int)100;
            				}
            				break;
            				case (int)1073741917: {
HXLINE( 989)					keyCode1 = (int)101;
            				}
            				break;
            				case (int)1073741918: {
HXLINE( 989)					keyCode1 = (int)102;
            				}
            				break;
            				case (int)1073741919: {
HXLINE( 989)					keyCode1 = (int)103;
            				}
            				break;
            				case (int)1073741920: {
HXLINE( 989)					keyCode1 = (int)104;
            				}
            				break;
            				case (int)1073741921: {
HXLINE( 989)					keyCode1 = (int)105;
            				}
            				break;
            				case (int)1073741922: {
HXLINE( 989)					keyCode1 = (int)96;
            				}
            				break;
            				case (int)1073741923: {
HXLINE( 989)					keyCode1 = (int)110;
            				}
            				break;
            				case (int)1073741925: {
HXLINE( 989)					keyCode1 = (int)302;
            				}
            				break;
            				case (int)1073741928: {
HXLINE( 989)					keyCode1 = (int)124;
            				}
            				break;
            				case (int)1073741929: {
HXLINE( 989)					keyCode1 = (int)125;
            				}
            				break;
            				case (int)1073741930: {
HXLINE( 989)					keyCode1 = (int)126;
            				}
            				break;
            				case (int)1073741982: {
HXLINE( 989)					keyCode1 = (int)13;
            				}
            				break;
            				case (int)1073742044: {
HXLINE( 989)					keyCode1 = (int)110;
            				}
            				break;
            				case (int)1073742048: {
HXLINE( 989)					keyCode1 = (int)17;
            				}
            				break;
            				case (int)1073742049: {
HXLINE( 989)					keyCode1 = (int)16;
            				}
            				break;
            				case (int)1073742050: {
HXLINE( 989)					keyCode1 = (int)18;
            				}
            				break;
            				case (int)1073742051: {
HXLINE( 989)					keyCode1 = (int)15;
            				}
            				break;
            				case (int)1073742052: {
HXLINE( 989)					keyCode1 = (int)17;
            				}
            				break;
            				case (int)1073742053: {
HXLINE( 989)					keyCode1 = (int)16;
            				}
            				break;
            				case (int)1073742054: {
HXLINE( 989)					keyCode1 = (int)18;
            				}
            				break;
            				case (int)1073742055: {
HXLINE( 989)					keyCode1 = (int)15;
            				}
            				break;
            				default:{
HXLINE( 989)					keyCode1 = keyCode;
            				}
            			}
HXLINE( 990)			HX_VARI( Int,charCode) = ::openfl::ui::Keyboard_obj::_hx___getCharCode(keyCode1,::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier));
HXLINE( 992)			Bool _hx_tmp2;
HXDLIN( 992)			if (this->_hx___macKeyboard) {
HXLINE( 992)				if (!(::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_ctrlKey(modifier))) {
HXLINE( 992)					_hx_tmp2 = ::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_metaKey(modifier);
            				}
            				else {
HXLINE( 992)					_hx_tmp2 = true;
            				}
            			}
            			else {
HXLINE( 992)				_hx_tmp2 = ::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_ctrlKey(modifier);
            			}
HXDLIN( 992)			HX_VARI(  ::openfl::events::KeyboardEvent,event) =  ::openfl::events::KeyboardEvent_obj::__new(type,true,false,charCode,keyCode1,keyLocation,_hx_tmp2,::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_altKey(modifier),::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier),::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_ctrlKey(modifier),::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_metaKey(modifier));
HXLINE( 994)			stack->reverse();
HXLINE( 995)			this->_hx___fireEvent(event,stack);
HXLINE( 997)			Bool _hx_tmp3 = event->_hx___isCanceled;
HXDLIN( 997)			if (_hx_tmp3) {
HXLINE( 999)				if ((type == HX_("keyDown",a1,69,47,9c))) {
HXLINE(1001)					this->window->onKeyDown->cancel();
            				}
            				else {
HXLINE(1005)					this->window->onKeyUp->cancel();
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Stage_obj,_hx___onKey,(void))

void Stage_obj::_hx___onGamepadConnect( ::lime::ui::Gamepad gamepad){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::Dynamic,f, ::lime::ui::Gamepad,a1) HXARGC(2)
            		void _hx_run(Int a2,Float a3){
            			HX_STACK_FRAME("openfl.display.Stage","__onGamepadConnect",0x5c5bf402,"openfl.display.Stage.__onGamepadConnect","openfl/display/Stage.hx",1020,0xadca4c2c)
            			HX_STACK_ARG(a2,"a2")
            			HX_STACK_ARG(a3,"a3")
HXLINE(1020)			f(a1,a2,a3);
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_1, ::lime::ui::Gamepad,a11, ::Dynamic,f1) HXARGC(1)
            		void _hx_run(Int a21){
            			HX_STACK_FRAME("openfl.display.Stage","__onGamepadConnect",0x5c5bf402,"openfl.display.Stage.__onGamepadConnect","openfl/display/Stage.hx",1021,0xadca4c2c)
            			HX_STACK_ARG(a21,"a21")
HXLINE(1021)			f1(a11,a21);
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_2, ::lime::ui::Gamepad,a12, ::Dynamic,f2) HXARGC(1)
            		void _hx_run(Int a22){
            			HX_STACK_FRAME("openfl.display.Stage","__onGamepadConnect",0x5c5bf402,"openfl.display.Stage.__onGamepadConnect","openfl/display/Stage.hx",1022,0xadca4c2c)
            			HX_STACK_ARG(a22,"a22")
HXLINE(1022)			f2(a12,a22);
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_3, ::lime::ui::Gamepad,a13, ::Dynamic,f3) HXARGC(0)
            		void _hx_run(){
            			HX_STACK_FRAME("openfl.display.Stage","__onGamepadConnect",0x5c5bf402,"openfl.display.Stage.__onGamepadConnect","openfl/display/Stage.hx",1023,0xadca4c2c)
HXLINE(1023)			f3(a13);
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_STACK_FRAME("openfl.display.Stage","__onGamepadConnect",0x5c5bf402,"openfl.display.Stage.__onGamepadConnect","openfl/display/Stage.hx",1016,0xadca4c2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(gamepad,"gamepad")
HXLINE(1018)		this->onGamepadConnect(gamepad);
HXLINE(1020)		 ::Dynamic f = this->onGamepadAxisMove_dyn();
HXDLIN(1020)		 ::lime::ui::Gamepad a1 = gamepad;
HXDLIN(1020)		 ::Dynamic _hx_tmp =  ::Dynamic(new _hx_Closure_0(f,a1));
HXDLIN(1020)		gamepad->onAxisMove->add(_hx_tmp,null(),null());
HXLINE(1021)		 ::Dynamic f1 = this->onGamepadButtonDown_dyn();
HXDLIN(1021)		 ::lime::ui::Gamepad a11 = gamepad;
HXDLIN(1021)		 ::Dynamic _hx_tmp1 =  ::Dynamic(new _hx_Closure_1(a11,f1));
HXDLIN(1021)		gamepad->onButtonDown->add(_hx_tmp1,null(),null());
HXLINE(1022)		 ::Dynamic f2 = this->onGamepadButtonUp_dyn();
HXDLIN(1022)		 ::lime::ui::Gamepad a12 = gamepad;
HXDLIN(1022)		 ::Dynamic _hx_tmp2 =  ::Dynamic(new _hx_Closure_2(a12,f2));
HXDLIN(1022)		gamepad->onButtonUp->add(_hx_tmp2,null(),null());
HXLINE(1023)		 ::Dynamic f3 = this->onGamepadDisconnect_dyn();
HXDLIN(1023)		 ::lime::ui::Gamepad a13 = gamepad;
HXDLIN(1023)		 ::Dynamic _hx_tmp3 =  ::Dynamic(new _hx_Closure_3(a13,f3));
HXDLIN(1023)		gamepad->onDisconnect->add(_hx_tmp3,null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,_hx___onGamepadConnect,(void))

void Stage_obj::_hx___onMouse(::String type,Float x,Float y,Int button){
            	HX_STACK_FRAME("openfl.display.Stage","__onMouse",0xfccea68c,"openfl.display.Stage.__onMouse","openfl/display/Stage.hx",1028,0xadca4c2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(type,"type")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(button,"button")
HXLINE(1030)		if ((button > (int)2)) {
HXLINE(1030)			return;
            		}
HXLINE(1032)		HX_VARI(  ::openfl::geom::Point,targetPoint) =  ::openfl::geom::Point_obj::__new(x,y);
HXLINE(1033)		{
HXLINE(1033)			HX_VARI(  ::openfl::geom::Matrix,_this) = this->_hx___displayMatrix;
HXDLIN(1033)			HX_VARI( Float,norm) = ((_this->a * _this->d) - (_this->b * _this->c));
HXDLIN(1033)			if ((norm == (int)0)) {
HXLINE(1033)				targetPoint->x = -(_this->tx);
HXDLIN(1033)				targetPoint->y = -(_this->ty);
            			}
            			else {
HXLINE(1033)				HX_VARI( Float,px) = (((Float)((Float)1.0) / (Float)norm) * ((_this->c * (_this->ty - targetPoint->y)) + (_this->d * (targetPoint->x - _this->tx))));
HXDLIN(1033)				Float _hx_tmp = ((Float)((Float)1.0) / (Float)norm);
HXDLIN(1033)				Float _hx_tmp1 = (_this->a * (targetPoint->y - _this->ty));
HXDLIN(1033)				Float _hx_tmp2 = (_this->b * (_this->tx - targetPoint->x));
HXDLIN(1033)				targetPoint->y = (_hx_tmp * (_hx_tmp1 + _hx_tmp2));
HXDLIN(1033)				targetPoint->x = px;
            			}
            		}
HXLINE(1035)		this->_hx___mouseX = targetPoint->x;
HXLINE(1036)		this->_hx___mouseY = targetPoint->y;
HXLINE(1038)		HX_VARI( ::Array< ::Dynamic>,stack) = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1039)		HX_VARI(  ::openfl::display::InteractiveObject,target) = null();
HXLINE(1041)		Bool _hx_tmp3 = this->_hx___hitTest(this->_hx___mouseX,this->_hx___mouseY,true,stack,true,hx::ObjectPtr<OBJ_>(this));
HXDLIN(1041)		if (_hx_tmp3) {
HXLINE(1043)			target = ( ( ::openfl::display::InteractiveObject)(stack->__get((stack->length - (int)1)).StaticCast<  ::openfl::display::DisplayObject >()) );
            		}
            		else {
HXLINE(1047)			target = hx::ObjectPtr<OBJ_>(this);
HXLINE(1048)			stack = ::Array_obj< ::Dynamic>::__new(1)->init(0,hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE(1052)		Bool _hx_tmp4 = hx::IsNull( target );
HXDLIN(1052)		if (_hx_tmp4) {
HXLINE(1052)			target = hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE(1054)		HX_VARI( ::String,clickType) = null();
HXLINE(1056)		::String _hx_switch_0 = type;
            		if (  (_hx_switch_0==HX_("middleMouseDown",12,2b,fe,01)) ){
HXLINE(1074)			this->_hx___mouseDownMiddle = target;
HXDLIN(1074)			goto _hx_goto_4;
            		}
            		if (  (_hx_switch_0==HX_("middleMouseUp",0b,8d,f5,3a)) ){
HXLINE(1093)			if (hx::IsEq( this->_hx___mouseDownMiddle,target )) {
HXLINE(1095)				clickType = HX_("middleClick",b3,e4,e5,43);
            			}
HXLINE(1100)			this->_hx___mouseDownMiddle = null();
HXLINE(1091)			goto _hx_goto_4;
            		}
            		if (  (_hx_switch_0==HX_("mouseDown",27,b1,c2,ee)) ){
HXLINE(1060)			Bool _hx_tmp5 = target->get_tabEnabled();
HXDLIN(1060)			if (_hx_tmp5) {
HXLINE(1062)				this->set_focus(target);
            			}
            			else {
HXLINE(1066)				this->set_focus(null());
            			}
HXLINE(1070)			this->_hx___mouseDownLeft = target;
HXLINE(1058)			goto _hx_goto_4;
            		}
            		if (  (_hx_switch_0==HX_("mouseUp",e0,f3,72,c0)) ){
HXLINE(1082)			if (hx::IsEq( this->_hx___mouseDownLeft,target )) {
HXLINE(1084)				clickType = HX_("click",48,7c,5e,48);
            			}
HXLINE(1089)			this->_hx___mouseDownLeft = null();
HXLINE(1080)			goto _hx_goto_4;
            		}
            		if (  (_hx_switch_0==HX_("rightMouseDown",ab,29,d7,cd)) ){
HXLINE(1078)			this->_hx___mouseDownRight = target;
HXDLIN(1078)			goto _hx_goto_4;
            		}
            		if (  (_hx_switch_0==HX_("rightMouseUp",64,83,21,ab)) ){
HXLINE(1104)			if (hx::IsEq( this->_hx___mouseDownRight,target )) {
HXLINE(1106)				clickType = HX_("rightClick",cc,62,23,4b);
            			}
HXLINE(1110)			this->_hx___mouseDownRight = null();
HXLINE(1102)			goto _hx_goto_4;
            		}
            		/* default */{
            		}
            		_hx_goto_4:;
HXLINE(1116)		Float _hx_tmp6 = this->_hx___mouseX;
HXDLIN(1116)		Float _hx_tmp7 = this->_hx___mouseY;
HXDLIN(1116)		 ::openfl::geom::Point _hx_tmp8;
HXDLIN(1116)		if (hx::IsEq( target,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE(1116)			_hx_tmp8 = targetPoint;
            		}
            		else {
HXLINE(1116)			_hx_tmp8 = target->globalToLocal(targetPoint);
            		}
HXDLIN(1116)		 ::openfl::events::MouseEvent _hx_tmp9 = ::openfl::events::MouseEvent_obj::_hx___create(type,button,_hx_tmp6,_hx_tmp7,_hx_tmp8,target,null());
HXDLIN(1116)		this->_hx___fireEvent(_hx_tmp9,stack);
HXLINE(1118)		Bool _hx_tmp10 = hx::IsNotNull( clickType );
HXDLIN(1118)		if (_hx_tmp10) {
HXLINE(1120)			Float _hx_tmp11 = this->_hx___mouseX;
HXDLIN(1120)			Float _hx_tmp12 = this->_hx___mouseY;
HXDLIN(1120)			 ::openfl::geom::Point _hx_tmp13;
HXDLIN(1120)			if (hx::IsEq( target,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE(1120)				_hx_tmp13 = targetPoint;
            			}
            			else {
HXLINE(1120)				_hx_tmp13 = target->globalToLocal(targetPoint);
            			}
HXDLIN(1120)			 ::openfl::events::MouseEvent _hx_tmp14 = ::openfl::events::MouseEvent_obj::_hx___create(clickType,button,_hx_tmp11,_hx_tmp12,_hx_tmp13,target,null());
HXDLIN(1120)			this->_hx___fireEvent(_hx_tmp14,stack);
HXLINE(1122)			Bool _hx_tmp15;
HXDLIN(1122)			if ((type == HX_("mouseUp",e0,f3,72,c0))) {
HXLINE(1122)				_hx_tmp15 = target->doubleClickEnabled;
            			}
            			else {
HXLINE(1122)				_hx_tmp15 = false;
            			}
HXDLIN(1122)			if (_hx_tmp15) {
HXLINE(1124)				HX_VARI( Int,currentTime) = ::openfl::Lib_obj::getTimer();
HXLINE(1125)				Bool _hx_tmp16 = ((currentTime - this->_hx___lastClickTime) < (int)500);
HXDLIN(1125)				if (_hx_tmp16) {
HXLINE(1127)					Float _hx_tmp17 = this->_hx___mouseX;
HXDLIN(1127)					Float _hx_tmp18 = this->_hx___mouseY;
HXDLIN(1127)					 ::openfl::geom::Point _hx_tmp19;
HXDLIN(1127)					if (hx::IsEq( target,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE(1127)						_hx_tmp19 = targetPoint;
            					}
            					else {
HXLINE(1127)						_hx_tmp19 = target->globalToLocal(targetPoint);
            					}
HXDLIN(1127)					 ::openfl::events::MouseEvent _hx_tmp20 = ::openfl::events::MouseEvent_obj::_hx___create(HX_("doubleClick",77,03,76,cd),button,_hx_tmp17,_hx_tmp18,_hx_tmp19,target,null());
HXDLIN(1127)					this->_hx___fireEvent(_hx_tmp20,stack);
HXLINE(1128)					this->_hx___lastClickTime = (int)0;
            				}
            				else {
HXLINE(1132)					this->_hx___lastClickTime = currentTime;
            				}
            			}
            		}
HXLINE(1140)		if ((::openfl::ui::Mouse_obj::_hx___cursor == HX_("auto",6f,df,76,40))) {
HXLINE(1142)			HX_VARI( ::hx::EnumBase,cursor) = null();
HXLINE(1144)			Bool _hx_tmp21 = hx::IsNotNull( this->_hx___mouseDownLeft );
HXDLIN(1144)			if (_hx_tmp21) {
HXLINE(1146)				cursor = this->_hx___mouseDownLeft->_hx___getCursor();
            			}
            			else {
HXLINE(1150)				HX_VARI( Int,_g) = (int)0;
HXDLIN(1150)				while((_g < stack->length)){
HXLINE(1150)					HX_VARI_NAME(  ::openfl::display::DisplayObject,target1,"target") = stack->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN(1150)					++_g;
HXLINE(1152)					cursor = target1->_hx___getCursor();
HXLINE(1154)					Bool _hx_tmp22 = hx::IsNotNull( cursor );
HXDLIN(1154)					if (_hx_tmp22) {
HXLINE(1156)						::lime::ui::Mouse_obj::set_cursor(cursor);
HXLINE(1157)						goto _hx_goto_5;
            					}
            				}
            				_hx_goto_5:;
            			}
HXLINE(1165)			Bool _hx_tmp23 = hx::IsNull( cursor );
HXDLIN(1165)			if (_hx_tmp23) {
HXLINE(1167)				::lime::ui::Mouse_obj::set_cursor(::lime::ui::MouseCursor_obj::ARROW_dyn());
            			}
            		}
HXLINE(1173)		HX_VAR(  ::openfl::events::MouseEvent,event);
HXDLIN(1173)		HX_VAR(  ::openfl::geom::Point,localPoint);
HXLINE(1175)		if (hx::IsNotEq( target,this->_hx___mouseOverTarget )) {
HXLINE(1177)			Bool _hx_tmp24 = hx::IsNotNull( this->_hx___mouseOverTarget );
HXDLIN(1177)			if (_hx_tmp24) {
HXLINE(1179)				if (hx::IsEq( this->_hx___mouseOverTarget,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE(1179)					localPoint = targetPoint;
            				}
            				else {
HXLINE(1179)					localPoint = this->_hx___mouseOverTarget->globalToLocal(targetPoint);
            				}
HXLINE(1181)				event = ::openfl::events::MouseEvent_obj::_hx___create(HX_("mouseOut",69,e7,1d,a4),button,this->_hx___mouseX,this->_hx___mouseY,localPoint,this->_hx___mouseOverTarget,null());
HXLINE(1182)				this->_hx___mouseOverTarget->_hx___dispatchEvent(event);
            			}
            		}
HXLINE(1188)		{
HXLINE(1188)			HX_VARI_NAME( Int,_g1,"_g") = (int)0;
HXDLIN(1188)			HX_VARI_NAME( ::Array< ::Dynamic>,_g11,"_g1") = this->_hx___rollOutStack;
HXDLIN(1188)			while((_g1 < _g11->length)){
HXLINE(1188)				HX_VARI_NAME(  ::openfl::display::DisplayObject,target2,"target") = _g11->__get(_g1).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN(1188)				++_g1;
HXLINE(1190)				Int _hx_tmp25 = stack->indexOf(target2,null());
HXDLIN(1190)				if ((_hx_tmp25 == (int)-1)) {
HXLINE(1192)					this->_hx___rollOutStack->remove(target2);
HXLINE(1194)					localPoint = this->_hx___mouseOverTarget->globalToLocal(targetPoint);
HXLINE(1195)					event = ::openfl::events::MouseEvent_obj::_hx___create(HX_("rollOut",11,f9,11,5d),button,this->_hx___mouseX,this->_hx___mouseY,localPoint,this->_hx___mouseOverTarget,null());
HXLINE(1196)					event->bubbles = false;
HXLINE(1197)					target2->_hx___dispatchEvent(event);
            				}
            			}
            		}
HXLINE(1203)		{
HXLINE(1203)			HX_VARI_NAME( Int,_g2,"_g") = (int)0;
HXDLIN(1203)			while((_g2 < stack->length)){
HXLINE(1203)				HX_VARI_NAME(  ::openfl::display::DisplayObject,target3,"target") = stack->__get(_g2).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN(1203)				++_g2;
HXLINE(1205)				Int _hx_tmp26 = this->_hx___rollOutStack->indexOf(target3,null());
HXDLIN(1205)				if ((_hx_tmp26 == (int)-1)) {
HXLINE(1207)					Bool _hx_tmp27 = target3->hasEventListener(HX_("rollOver",71,ab,a8,12));
HXDLIN(1207)					if (_hx_tmp27) {
HXLINE(1209)						localPoint = target3->globalToLocal(targetPoint);
HXLINE(1210)						event = ::openfl::events::MouseEvent_obj::_hx___create(HX_("rollOver",71,ab,a8,12),button,this->_hx___mouseX,this->_hx___mouseY,localPoint,( ( ::openfl::display::InteractiveObject)(target3) ),null());
HXLINE(1211)						event->bubbles = false;
HXLINE(1212)						target3->_hx___dispatchEvent(event);
            					}
HXLINE(1216)					Bool _hx_tmp28 = target3->hasEventListener(HX_("rollOut",11,f9,11,5d));
HXDLIN(1216)					if (_hx_tmp28) {
HXLINE(1218)						this->_hx___rollOutStack->push(target3);
            					}
            				}
            			}
            		}
HXLINE(1226)		if (hx::IsNotEq( target,this->_hx___mouseOverTarget )) {
HXLINE(1228)			Bool _hx_tmp29 = hx::IsNotNull( target );
HXDLIN(1228)			if (_hx_tmp29) {
HXLINE(1230)				if (hx::IsEq( target,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE(1230)					localPoint = targetPoint;
            				}
            				else {
HXLINE(1230)					localPoint = target->globalToLocal(targetPoint);
            				}
HXLINE(1232)				event = ::openfl::events::MouseEvent_obj::_hx___create(HX_("mouseOver",19,4a,0d,f6),button,this->_hx___mouseX,this->_hx___mouseY,localPoint,target,null());
HXLINE(1233)				event->bubbles = true;
HXLINE(1234)				target->_hx___dispatchEvent(event);
            			}
HXLINE(1238)			this->_hx___mouseOverTarget = target;
            		}
HXLINE(1242)		Bool _hx_tmp30 = hx::IsNotNull( this->_hx___dragObject );
HXDLIN(1242)		if (_hx_tmp30) {
HXLINE(1244)			this->_hx___drag(targetPoint);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(Stage_obj,_hx___onMouse,(void))

void Stage_obj::_hx___onMouseWheel(Float deltaX,Float deltaY){
            	HX_STACK_FRAME("openfl.display.Stage","__onMouseWheel",0x6d35c26f,"openfl.display.Stage.__onMouseWheel","openfl/display/Stage.hx",1251,0xadca4c2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(deltaX,"deltaX")
            	HX_STACK_ARG(deltaY,"deltaY")
HXLINE(1253)		HX_VARI( Float,x) = this->_hx___mouseX;
HXLINE(1254)		HX_VARI( Float,y) = this->_hx___mouseY;
HXLINE(1256)		HX_VARI( ::Array< ::Dynamic>,stack) = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1257)		HX_VARI(  ::openfl::display::InteractiveObject,target) = null();
HXLINE(1259)		Bool _hx_tmp = this->_hx___hitTest(this->_hx___mouseX,this->_hx___mouseY,true,stack,true,hx::ObjectPtr<OBJ_>(this));
HXDLIN(1259)		if (_hx_tmp) {
HXLINE(1261)			target = ( ( ::openfl::display::InteractiveObject)(stack->__get((stack->length - (int)1)).StaticCast<  ::openfl::display::DisplayObject >()) );
            		}
            		else {
HXLINE(1265)			target = hx::ObjectPtr<OBJ_>(this);
HXLINE(1266)			stack = ::Array_obj< ::Dynamic>::__new(1)->init(0,hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE(1270)		Bool _hx_tmp1 = hx::IsNull( target );
HXDLIN(1270)		if (_hx_tmp1) {
HXLINE(1270)			target = hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE(1271)		HX_VARI(  ::openfl::geom::Point,targetPoint) =  ::openfl::geom::Point_obj::__new(x,y);
HXLINE(1272)		{
HXLINE(1272)			HX_VARI(  ::openfl::geom::Matrix,_this) = this->_hx___displayMatrix;
HXDLIN(1272)			HX_VARI( Float,norm) = ((_this->a * _this->d) - (_this->b * _this->c));
HXDLIN(1272)			if ((norm == (int)0)) {
HXLINE(1272)				targetPoint->x = -(_this->tx);
HXDLIN(1272)				targetPoint->y = -(_this->ty);
            			}
            			else {
HXLINE(1272)				HX_VARI( Float,px) = (((Float)((Float)1.0) / (Float)norm) * ((_this->c * (_this->ty - targetPoint->y)) + (_this->d * (targetPoint->x - _this->tx))));
HXDLIN(1272)				Float _hx_tmp2 = ((Float)((Float)1.0) / (Float)norm);
HXDLIN(1272)				Float _hx_tmp3 = (_this->a * (targetPoint->y - _this->ty));
HXDLIN(1272)				Float _hx_tmp4 = (_this->b * (_this->tx - targetPoint->x));
HXDLIN(1272)				targetPoint->y = (_hx_tmp2 * (_hx_tmp3 + _hx_tmp4));
HXDLIN(1272)				targetPoint->x = px;
            			}
            		}
HXLINE(1273)		HX_VARI( Int,delta) = ::Std_obj::_hx_int(deltaY);
HXLINE(1275)		Float _hx_tmp5 = this->_hx___mouseX;
HXDLIN(1275)		Float _hx_tmp6 = this->_hx___mouseY;
HXDLIN(1275)		 ::openfl::geom::Point _hx_tmp7;
HXDLIN(1275)		if (hx::IsEq( target,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE(1275)			_hx_tmp7 = targetPoint;
            		}
            		else {
HXLINE(1275)			_hx_tmp7 = target->globalToLocal(targetPoint);
            		}
HXDLIN(1275)		 ::openfl::events::MouseEvent _hx_tmp8 = ::openfl::events::MouseEvent_obj::_hx___create(HX_("mouseWheel",36,28,87,e7),(int)0,_hx_tmp5,_hx_tmp6,_hx_tmp7,target,delta);
HXDLIN(1275)		this->_hx___fireEvent(_hx_tmp8,stack);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Stage_obj,_hx___onMouseWheel,(void))

void Stage_obj::_hx___onTouch(::String type, ::lime::ui::Touch touch){
            	HX_STACK_FRAME("openfl.display.Stage","__onTouch",0x049ca826,"openfl.display.Stage.__onTouch","openfl/display/Stage.hx",1280,0xadca4c2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(type,"type")
            	HX_STACK_ARG(touch,"touch")
HXLINE(1282)		Float _hx_tmp = (touch->x * this->window->_hx___width);
HXDLIN(1282)		Int _hx_tmp1 = ::Math_obj::round(_hx_tmp);
HXDLIN(1282)		Float _hx_tmp2 = (touch->y * this->window->_hx___height);
HXDLIN(1282)		Int _hx_tmp3 = ::Math_obj::round(_hx_tmp2);
HXDLIN(1282)		HX_VARI(  ::openfl::geom::Point,point) =  ::openfl::geom::Point_obj::__new(_hx_tmp1,_hx_tmp3);
HXLINE(1283)		{
HXLINE(1283)			HX_VARI(  ::openfl::geom::Matrix,_this) = this->_hx___displayMatrix;
HXDLIN(1283)			HX_VARI( Float,norm) = ((_this->a * _this->d) - (_this->b * _this->c));
HXDLIN(1283)			if ((norm == (int)0)) {
HXLINE(1283)				point->x = -(_this->tx);
HXDLIN(1283)				point->y = -(_this->ty);
            			}
            			else {
HXLINE(1283)				HX_VARI( Float,px) = (((Float)((Float)1.0) / (Float)norm) * ((_this->c * (_this->ty - point->y)) + (_this->d * (point->x - _this->tx))));
HXDLIN(1283)				Float _hx_tmp4 = ((Float)((Float)1.0) / (Float)norm);
HXDLIN(1283)				Float _hx_tmp5 = (_this->a * (point->y - _this->ty));
HXDLIN(1283)				Float _hx_tmp6 = (_this->b * (_this->tx - point->x));
HXDLIN(1283)				point->y = (_hx_tmp4 * (_hx_tmp5 + _hx_tmp6));
HXDLIN(1283)				point->x = px;
            			}
            		}
HXLINE(1285)		HX_VARI( Float,touchX) = point->x;
HXLINE(1286)		HX_VARI( Float,touchY) = point->y;
HXLINE(1288)		HX_VARI_NAME( ::Array< ::Dynamic>,_hx___stack,"__stack") = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1290)		Bool _hx_tmp7 = this->_hx___hitTest(touchX,touchY,false,_hx___stack,true,hx::ObjectPtr<OBJ_>(this));
HXDLIN(1290)		if (_hx_tmp7) {
HXLINE(1292)			HX_VARI(  ::openfl::display::DisplayObject,target) = _hx___stack->__get((_hx___stack->length - (int)1)).StaticCast<  ::openfl::display::DisplayObject >();
HXLINE(1293)			Bool _hx_tmp8 = hx::IsNull( target );
HXDLIN(1293)			if (_hx_tmp8) {
HXLINE(1293)				target = hx::ObjectPtr<OBJ_>(this);
            			}
HXLINE(1294)			HX_VARI(  ::openfl::geom::Point,localPoint) = target->globalToLocal(point);
HXLINE(1296)			HX_VARI(  ::openfl::events::TouchEvent,touchEvent) = ::openfl::events::TouchEvent_obj::_hx___create(type,null(),touchX,touchY,localPoint,( ( ::openfl::display::InteractiveObject)(target) ));
HXLINE(1297)			touchEvent->touchPointID = touch->id;
HXLINE(1298)			touchEvent->isPrimaryTouchPoint = hx::IsEq( this->_hx___primaryTouch,touch );
HXLINE(1300)			this->_hx___fireEvent(touchEvent,_hx___stack);
            		}
            		else {
HXLINE(1304)			HX_VARI_NAME(  ::openfl::events::TouchEvent,touchEvent1,"touchEvent") = ::openfl::events::TouchEvent_obj::_hx___create(type,null(),touchX,touchY,point,hx::ObjectPtr<OBJ_>(this));
HXLINE(1305)			touchEvent1->touchPointID = touch->id;
HXLINE(1306)			touchEvent1->isPrimaryTouchPoint = hx::IsEq( this->_hx___primaryTouch,touch );
HXLINE(1308)			this->_hx___fireEvent(touchEvent1,::Array_obj< ::Dynamic>::__new(1)->init(0,this->stage));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Stage_obj,_hx___onTouch,(void))

void Stage_obj::_hx___renderDOM( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACK_FRAME("openfl.display.Stage","__renderDOM",0xffe8ac52,"openfl.display.Stage.__renderDOM","openfl/display/Stage.hx",1315,0xadca4c2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(renderSession,"renderSession")
HXLINE(1317)		{
HXLINE(1317)			HX_VARI( Int,_g) = (int)0;
HXDLIN(1317)			HX_VARI(  ::openfl::_Vector::ObjectVector,_g1) = this->stage3Ds;
HXDLIN(1317)			while(true){
HXLINE(1317)				Int _hx_tmp = _g1->get_length();
HXDLIN(1317)				if (!((_g < _hx_tmp))) {
HXLINE(1317)					goto _hx_goto_8;
            				}
HXDLIN(1317)				HX_VARI(  ::openfl::display::Stage3D,stage3D) = _g1->get(_g).StaticCast<  ::openfl::display::Stage3D >();
HXDLIN(1317)				++_g;
HXLINE(1319)				stage3D->_hx___renderDOM(hx::ObjectPtr<OBJ_>(this),renderSession);
            			}
            			_hx_goto_8:;
            		}
HXLINE(1323)		this->super::_hx___renderDOM(renderSession);
            	}


void Stage_obj::_hx___resize(){
            	HX_STACK_FRAME("openfl.display.Stage","__resize",0x872a0aae,"openfl.display.Stage.__resize","openfl/display/Stage.hx",1328,0xadca4c2c)
            	HX_STACK_THIS(this)
HXLINE(1330)		HX_VARI( Int,cacheWidth) = this->stageWidth;
HXLINE(1331)		HX_VARI( Int,cacheHeight) = this->stageHeight;
HXLINE(1333)		Float _hx_tmp = (this->window->_hx___width * this->window->_hx___scale);
HXDLIN(1333)		HX_VARI( Int,windowWidth) = ::Std_obj::_hx_int(_hx_tmp);
HXLINE(1334)		Float _hx_tmp1 = (this->window->_hx___height * this->window->_hx___scale);
HXDLIN(1334)		HX_VARI( Int,windowHeight) = ::Std_obj::_hx_int(_hx_tmp1);
HXLINE(1341)		this->_hx___displayMatrix->identity();
HXLINE(1343)		Bool _hx_tmp2;
HXDLIN(1343)		if ((this->_hx___logicalWidth == (int)0)) {
HXLINE(1343)			_hx_tmp2 = (this->_hx___logicalHeight == (int)0);
            		}
            		else {
HXLINE(1343)			_hx_tmp2 = false;
            		}
HXDLIN(1343)		if (_hx_tmp2) {
HXLINE(1345)			this->stageWidth = windowWidth;
HXLINE(1346)			this->stageHeight = windowHeight;
            		}
            		else {
HXLINE(1350)			this->stageWidth = this->_hx___logicalWidth;
HXLINE(1351)			this->stageHeight = this->_hx___logicalHeight;
HXLINE(1353)			HX_VARI( Float,scaleX) = ((Float)windowWidth / (Float)this->stageWidth);
HXLINE(1354)			HX_VARI( Float,scaleY) = ((Float)windowHeight / (Float)this->stageHeight);
HXLINE(1355)			HX_VARI( Float,targetScale) = ::Math_obj::min(scaleX,scaleY);
HXLINE(1357)			Float _hx_tmp3 = (windowWidth - (this->stageWidth * targetScale));
HXDLIN(1357)			HX_VARI( Int,offsetX) = ::Math_obj::round(((Float)_hx_tmp3 / (Float)(int)2));
HXLINE(1358)			Float _hx_tmp4 = (windowHeight - (this->stageHeight * targetScale));
HXDLIN(1358)			HX_VARI( Int,offsetY) = ::Math_obj::round(((Float)_hx_tmp4 / (Float)(int)2));
HXLINE(1360)			this->_hx___displayMatrix->scale(targetScale,targetScale);
HXLINE(1361)			this->_hx___displayMatrix->translate(offsetX,offsetY);
            		}
HXLINE(1365)		{
HXLINE(1365)			HX_VARI( Int,_g) = (int)0;
HXDLIN(1365)			HX_VARI(  ::openfl::_Vector::ObjectVector,_g1) = this->stage3Ds;
HXDLIN(1365)			while(true){
HXLINE(1365)				Int _hx_tmp5 = _g1->get_length();
HXDLIN(1365)				if (!((_g < _hx_tmp5))) {
HXLINE(1365)					goto _hx_goto_9;
            				}
HXDLIN(1365)				HX_VARI(  ::openfl::display::Stage3D,stage3D) = _g1->get(_g).StaticCast<  ::openfl::display::Stage3D >();
HXDLIN(1365)				++_g;
HXLINE(1367)				stage3D->_hx___resize(this->stageWidth,this->stageHeight);
            			}
            			_hx_goto_9:;
            		}
HXLINE(1371)		Bool _hx_tmp6 = hx::IsNotNull( this->_hx___renderer );
HXDLIN(1371)		if (_hx_tmp6) {
HXLINE(1373)			this->_hx___renderer->resize(windowWidth,windowHeight);
            		}
HXLINE(1377)		Bool _hx_tmp7;
HXDLIN(1377)		if ((this->stageWidth == cacheWidth)) {
HXLINE(1377)			_hx_tmp7 = (this->stageHeight != cacheHeight);
            		}
            		else {
HXLINE(1377)			_hx_tmp7 = true;
            		}
HXDLIN(1377)		if (_hx_tmp7) {
HXLINE(1379)			this->_hx___dispatchEvent( ::openfl::events::Event_obj::__new(HX_("resize",f4,59,7b,08),null(),null()));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,_hx___resize,(void))

void Stage_obj::_hx___setLogicalSize(Int width,Int height){
            	HX_STACK_FRAME("openfl.display.Stage","__setLogicalSize",0x16d2dd62,"openfl.display.Stage.__setLogicalSize","openfl/display/Stage.hx",1386,0xadca4c2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
HXLINE(1388)		this->_hx___logicalWidth = width;
HXLINE(1389)		this->_hx___logicalHeight = height;
HXLINE(1391)		this->_hx___resize();
            	}


HX_DEFINE_DYNAMIC_FUNC2(Stage_obj,_hx___setLogicalSize,(void))

void Stage_obj::_hx___startDrag( ::openfl::display::Sprite sprite,Bool lockCenter, ::openfl::geom::Rectangle bounds){
            	HX_STACK_FRAME("openfl.display.Stage","__startDrag",0x2df4a4fc,"openfl.display.Stage.__startDrag","openfl/display/Stage.hx",1396,0xadca4c2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(sprite,"sprite")
            	HX_STACK_ARG(lockCenter,"lockCenter")
            	HX_STACK_ARG(bounds,"bounds")
HXLINE(1398)		 ::openfl::geom::Rectangle _hx_tmp;
HXDLIN(1398)		Bool _hx_tmp1 = hx::IsNull( bounds );
HXDLIN(1398)		if (_hx_tmp1) {
HXLINE(1398)			_hx_tmp = null();
            		}
            		else {
HXLINE(1398)			_hx_tmp = bounds->clone();
            		}
HXDLIN(1398)		this->_hx___dragBounds = _hx_tmp;
HXLINE(1399)		this->_hx___dragObject = sprite;
HXLINE(1401)		Bool _hx_tmp2 = hx::IsNotNull( this->_hx___dragObject );
HXDLIN(1401)		if (_hx_tmp2) {
HXLINE(1403)			if (lockCenter) {
HXLINE(1405)				this->_hx___dragOffsetX = (int)0;
HXLINE(1406)				this->_hx___dragOffsetY = (int)0;
            			}
            			else {
HXLINE(1410)				Float _hx_tmp3 = this->get_mouseX();
HXDLIN(1410)				Float _hx_tmp4 = this->get_mouseY();
HXDLIN(1410)				HX_VARI(  ::openfl::geom::Point,mouse) =  ::openfl::geom::Point_obj::__new(_hx_tmp3,_hx_tmp4);
HXLINE(1411)				HX_VARI(  ::openfl::display::DisplayObjectContainer,parent) = this->_hx___dragObject->parent;
HXLINE(1413)				Bool _hx_tmp5 = hx::IsNotNull( parent );
HXDLIN(1413)				if (_hx_tmp5) {
HXLINE(1415)					HX_VARI(  ::openfl::geom::Matrix,_this) = parent->_hx___getWorldTransform();
HXDLIN(1415)					HX_VARI( Float,norm) = ((_this->a * _this->d) - (_this->b * _this->c));
HXDLIN(1415)					if ((norm == (int)0)) {
HXLINE(1415)						mouse->x = -(_this->tx);
HXDLIN(1415)						mouse->y = -(_this->ty);
            					}
            					else {
HXLINE(1415)						HX_VARI( Float,px) = (((Float)((Float)1.0) / (Float)norm) * ((_this->c * (_this->ty - mouse->y)) + (_this->d * (mouse->x - _this->tx))));
HXDLIN(1415)						Float _hx_tmp6 = ((Float)((Float)1.0) / (Float)norm);
HXDLIN(1415)						Float _hx_tmp7 = (_this->a * (mouse->y - _this->ty));
HXDLIN(1415)						Float _hx_tmp8 = (_this->b * (_this->tx - mouse->x));
HXDLIN(1415)						mouse->y = (_hx_tmp6 * (_hx_tmp7 + _hx_tmp8));
HXDLIN(1415)						mouse->x = px;
            					}
            				}
HXLINE(1419)				Float _hx_tmp9 = this->_hx___dragObject->get_x();
HXDLIN(1419)				this->_hx___dragOffsetX = (_hx_tmp9 - mouse->x);
HXLINE(1420)				Float _hx_tmp10 = this->_hx___dragObject->get_y();
HXDLIN(1420)				this->_hx___dragOffsetY = (_hx_tmp10 - mouse->y);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Stage_obj,_hx___startDrag,(void))

void Stage_obj::_hx___stopDrag( ::openfl::display::Sprite sprite){
            	HX_STACK_FRAME("openfl.display.Stage","__stopDrag",0x21724450,"openfl.display.Stage.__stopDrag","openfl/display/Stage.hx",1429,0xadca4c2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(sprite,"sprite")
HXLINE(1431)		this->_hx___dragBounds = null();
HXLINE(1432)		this->_hx___dragObject = null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,_hx___stopDrag,(void))

void Stage_obj::_hx___update(Bool transformOnly,Bool updateChildren, ::openfl::display::Graphics maskGrahpics){
            	HX_STACK_FRAME("openfl.display.Stage","__update",0x05b436c3,"openfl.display.Stage.__update","openfl/display/Stage.hx",1439,0xadca4c2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(transformOnly,"transformOnly")
            	HX_STACK_ARG(updateChildren,"updateChildren")
            	HX_STACK_ARG(maskGrahpics,"maskGrahpics")
HXLINE(1439)		if (transformOnly) {
HXLINE(1441)			Bool _hx_tmp = (::openfl::display::DisplayObject_obj::_hx___worldTransformDirty > (int)0);
HXDLIN(1441)			if (_hx_tmp) {
HXLINE(1443)				this->super::_hx___update(true,updateChildren,maskGrahpics);
HXLINE(1445)				if (updateChildren) {
HXLINE(1447)					::openfl::display::DisplayObject_obj::_hx___worldTransformDirty = (int)0;
HXLINE(1448)					this->_hx___dirty = true;
            				}
            			}
            		}
            		else {
HXLINE(1456)			Bool _hx_tmp1;
HXDLIN(1456)			Bool _hx_tmp2;
HXDLIN(1456)			if ((::openfl::display::DisplayObject_obj::_hx___worldTransformDirty <= (int)0)) {
HXLINE(1456)				_hx_tmp2 = this->_hx___dirty;
            			}
            			else {
HXLINE(1456)				_hx_tmp2 = true;
            			}
HXDLIN(1456)			if (!(_hx_tmp2)) {
HXLINE(1456)				_hx_tmp1 = (::openfl::display::DisplayObject_obj::_hx___worldRenderDirty > (int)0);
            			}
            			else {
HXLINE(1456)				_hx_tmp1 = true;
            			}
HXDLIN(1456)			if (_hx_tmp1) {
HXLINE(1458)				this->super::_hx___update(false,updateChildren,maskGrahpics);
HXLINE(1460)				if (updateChildren) {
HXLINE(1466)					::openfl::display::DisplayObject_obj::_hx___worldTransformDirty = (int)0;
HXLINE(1467)					::openfl::display::DisplayObject_obj::_hx___worldRenderDirty = (int)0;
HXLINE(1468)					this->_hx___dirty = false;
            				}
            			}
            		}
            	}


Int Stage_obj::get_color(){
            	HX_STACK_FRAME("openfl.display.Stage","get_color",0x66e36ee0,"openfl.display.Stage.get_color","openfl/display/Stage.hx",1501,0xadca4c2c)
            	HX_STACK_THIS(this)
HXLINE(1501)		return this->_hx___color;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,get_color,return )

Int Stage_obj::set_color(Int value){
            	HX_STACK_FRAME("openfl.display.Stage","set_color",0x4a345aec,"openfl.display.Stage.set_color","openfl/display/Stage.hx",1506,0xadca4c2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1512)		this->_hx___colorSplit = ::Array_obj< Float >::__new(3)->init(0,((Float)hx::UShr(((int)value & (int)(int)16711680),(int)16) / (Float)(int)255))->init(1,((Float)hx::UShr(((int)value & (int)(int)65280),(int)8) / (Float)(int)255))->init(2,((Float)((int)value & (int)(int)255) / (Float)(int)255));
HXLINE(1513)		::String _hx_tmp = ::StringTools_obj::hex(value,(int)6);
HXDLIN(1513)		this->_hx___colorString = (HX_("#",23,00,00,00) + _hx_tmp);
HXLINE(1515)		return (this->_hx___color = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,set_color,return )

 ::Dynamic Stage_obj::get_displayState(){
            	HX_STACK_FRAME("openfl.display.Stage","get_displayState",0x7908a892,"openfl.display.Stage.get_displayState","openfl/display/Stage.hx",1522,0xadca4c2c)
            	HX_STACK_THIS(this)
HXLINE(1522)		return this->_hx___displayState;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,get_displayState,return )

 ::Dynamic Stage_obj::set_displayState( ::Dynamic value){
            	HX_STACK_FRAME("openfl.display.Stage","set_displayState",0xcf4a9606,"openfl.display.Stage.set_displayState","openfl/display/Stage.hx",1527,0xadca4c2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1529)		Bool _hx_tmp = hx::IsNotNull( this->window );
HXDLIN(1529)		if (_hx_tmp) {
HXLINE(1531)			if (hx::IsEq( value,(int)2 )) {
HXLINE(1535)				Bool _hx_tmp1 = this->window->_hx___fullscreen;
HXDLIN(1535)				if (_hx_tmp1) {
HXLINE(1538)					this->window->set_fullscreen(false);
            				}
            			}
            			else {
HXLINE(1544)				Bool _hx_tmp2 = !(this->window->_hx___fullscreen);
HXDLIN(1544)				if (_hx_tmp2) {
HXLINE(1547)					this->window->set_fullscreen(true);
            				}
            			}
            		}
HXLINE(1555)		return (this->_hx___displayState = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,set_displayState,return )

 ::openfl::display::InteractiveObject Stage_obj::get_focus(){
            	HX_STACK_FRAME("openfl.display.Stage","get_focus",0x21105d55,"openfl.display.Stage.get_focus","openfl/display/Stage.hx",1562,0xadca4c2c)
            	HX_STACK_THIS(this)
HXLINE(1562)		return this->_hx___focus;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,get_focus,return )

 ::openfl::display::InteractiveObject Stage_obj::set_focus( ::openfl::display::InteractiveObject value){
            	HX_STACK_FRAME("openfl.display.Stage","set_focus",0x04614961,"openfl.display.Stage.set_focus","openfl/display/Stage.hx",1567,0xadca4c2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1569)		if (hx::IsNotEq( value,this->_hx___focus )) {
HXLINE(1571)			HX_VARI(  ::openfl::display::InteractiveObject,oldFocus) = this->_hx___focus;
HXLINE(1572)			this->_hx___focus = value;
HXLINE(1573)			this->_hx___cacheFocus = value;
HXLINE(1575)			Bool _hx_tmp = hx::IsNotNull( oldFocus );
HXDLIN(1575)			if (_hx_tmp) {
HXLINE(1577)				HX_VARI(  ::openfl::events::FocusEvent,event) =  ::openfl::events::FocusEvent_obj::__new(HX_("focusOut",96,6f,5e,11),true,false,this->_hx___focus,false,(int)0);
HXLINE(1578)				HX_VARI( ::Array< ::Dynamic>,stack) = ::Array_obj< ::Dynamic>::__new();
HXLINE(1579)				oldFocus->_hx___getInteractive(stack);
HXLINE(1580)				stack->reverse();
HXLINE(1581)				this->_hx___fireEvent(event,stack);
            			}
HXLINE(1585)			Bool _hx_tmp1 = hx::IsNotNull( this->_hx___focus );
HXDLIN(1585)			if (_hx_tmp1) {
HXLINE(1587)				HX_VARI_NAME(  ::openfl::events::FocusEvent,event1,"event") =  ::openfl::events::FocusEvent_obj::__new(HX_("focusIn",dd,45,83,41),true,false,oldFocus,false,(int)0);
HXLINE(1588)				HX_VARI_NAME( ::Array< ::Dynamic>,stack1,"stack") = ::Array_obj< ::Dynamic>::__new();
HXLINE(1589)				value->_hx___getInteractive(stack1);
HXLINE(1590)				stack1->reverse();
HXLINE(1591)				this->_hx___fireEvent(event1,stack1);
            			}
            		}
HXLINE(1597)		return this->_hx___focus;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,set_focus,return )

Float Stage_obj::get_frameRate(){
            	HX_STACK_FRAME("openfl.display.Stage","get_frameRate",0x6a8511aa,"openfl.display.Stage.get_frameRate","openfl/display/Stage.hx",1602,0xadca4c2c)
            	HX_STACK_THIS(this)
HXLINE(1604)		Bool _hx_tmp = hx::IsNotNull( this->application );
HXDLIN(1604)		if (_hx_tmp) {
HXLINE(1606)			return this->application->backend->getFrameRate();
            		}
HXLINE(1610)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,get_frameRate,return )

Float Stage_obj::set_frameRate(Float value){
            	HX_STACK_FRAME("openfl.display.Stage","set_frameRate",0xaf8af3b6,"openfl.display.Stage.set_frameRate","openfl/display/Stage.hx",1615,0xadca4c2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1617)		Bool _hx_tmp = hx::IsNotNull( this->application );
HXDLIN(1617)		if (_hx_tmp) {
HXLINE(1619)			return this->application->backend->setFrameRate(value);
            		}
HXLINE(1623)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,set_frameRate,return )

Float Stage_obj::get_mouseX(){
            	HX_STACK_FRAME("openfl.display.Stage","get_mouseX",0xa5a51a76,"openfl.display.Stage.get_mouseX","openfl/display/Stage.hx",1630,0xadca4c2c)
            	HX_STACK_THIS(this)
HXLINE(1630)		return this->_hx___mouseX;
            	}


Float Stage_obj::get_mouseY(){
            	HX_STACK_FRAME("openfl.display.Stage","get_mouseY",0xa5a51a77,"openfl.display.Stage.get_mouseY","openfl/display/Stage.hx",1637,0xadca4c2c)
            	HX_STACK_THIS(this)
HXLINE(1637)		return this->_hx___mouseY;
            	}



Stage_obj::Stage_obj()
{
}

void Stage_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Stage);
	HX_MARK_MEMBER_NAME(align,"align");
	HX_MARK_MEMBER_NAME(allowsFullScreen,"allowsFullScreen");
	HX_MARK_MEMBER_NAME(allowsFullScreenInteractive,"allowsFullScreenInteractive");
	HX_MARK_MEMBER_NAME(application,"application");
	HX_MARK_MEMBER_NAME(quality,"quality");
	HX_MARK_MEMBER_NAME(scaleMode,"scaleMode");
	HX_MARK_MEMBER_NAME(stage3Ds,"stage3Ds");
	HX_MARK_MEMBER_NAME(stageFocusRect,"stageFocusRect");
	HX_MARK_MEMBER_NAME(stageHeight,"stageHeight");
	HX_MARK_MEMBER_NAME(stageWidth,"stageWidth");
	HX_MARK_MEMBER_NAME(window,"window");
	HX_MARK_MEMBER_NAME(_hx___cacheFocus,"__cacheFocus");
	HX_MARK_MEMBER_NAME(_hx___clearBeforeRender,"__clearBeforeRender");
	HX_MARK_MEMBER_NAME(_hx___color,"__color");
	HX_MARK_MEMBER_NAME(_hx___colorSplit,"__colorSplit");
	HX_MARK_MEMBER_NAME(_hx___colorString,"__colorString");
	HX_MARK_MEMBER_NAME(_hx___deltaTime,"__deltaTime");
	HX_MARK_MEMBER_NAME(_hx___dirty,"__dirty");
	HX_MARK_MEMBER_NAME(_hx___displayMatrix,"__displayMatrix");
	HX_MARK_MEMBER_NAME(_hx___displayState,"__displayState");
	HX_MARK_MEMBER_NAME(_hx___dragBounds,"__dragBounds");
	HX_MARK_MEMBER_NAME(_hx___dragObject,"__dragObject");
	HX_MARK_MEMBER_NAME(_hx___dragOffsetX,"__dragOffsetX");
	HX_MARK_MEMBER_NAME(_hx___dragOffsetY,"__dragOffsetY");
	HX_MARK_MEMBER_NAME(_hx___focus,"__focus");
	HX_MARK_MEMBER_NAME(_hx___fullscreen,"__fullscreen");
	HX_MARK_MEMBER_NAME(_hx___invalidated,"__invalidated");
	HX_MARK_MEMBER_NAME(_hx___lastClickTime,"__lastClickTime");
	HX_MARK_MEMBER_NAME(_hx___logicalWidth,"__logicalWidth");
	HX_MARK_MEMBER_NAME(_hx___logicalHeight,"__logicalHeight");
	HX_MARK_MEMBER_NAME(_hx___macKeyboard,"__macKeyboard");
	HX_MARK_MEMBER_NAME(_hx___mouseDownLeft,"__mouseDownLeft");
	HX_MARK_MEMBER_NAME(_hx___mouseDownMiddle,"__mouseDownMiddle");
	HX_MARK_MEMBER_NAME(_hx___mouseDownRight,"__mouseDownRight");
	HX_MARK_MEMBER_NAME(_hx___mouseOverTarget,"__mouseOverTarget");
	HX_MARK_MEMBER_NAME(_hx___mouseX,"__mouseX");
	HX_MARK_MEMBER_NAME(_hx___mouseY,"__mouseY");
	HX_MARK_MEMBER_NAME(_hx___primaryTouch,"__primaryTouch");
	HX_MARK_MEMBER_NAME(_hx___renderer,"__renderer");
	HX_MARK_MEMBER_NAME(_hx___rendering,"__rendering");
	HX_MARK_MEMBER_NAME(_hx___rollOutStack,"__rollOutStack");
	HX_MARK_MEMBER_NAME(_hx___stack,"__stack");
	HX_MARK_MEMBER_NAME(_hx___transparent,"__transparent");
	HX_MARK_MEMBER_NAME(_hx___wasDirty,"__wasDirty");
	 ::openfl::display::DisplayObjectContainer_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Stage_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(align,"align");
	HX_VISIT_MEMBER_NAME(allowsFullScreen,"allowsFullScreen");
	HX_VISIT_MEMBER_NAME(allowsFullScreenInteractive,"allowsFullScreenInteractive");
	HX_VISIT_MEMBER_NAME(application,"application");
	HX_VISIT_MEMBER_NAME(quality,"quality");
	HX_VISIT_MEMBER_NAME(scaleMode,"scaleMode");
	HX_VISIT_MEMBER_NAME(stage3Ds,"stage3Ds");
	HX_VISIT_MEMBER_NAME(stageFocusRect,"stageFocusRect");
	HX_VISIT_MEMBER_NAME(stageHeight,"stageHeight");
	HX_VISIT_MEMBER_NAME(stageWidth,"stageWidth");
	HX_VISIT_MEMBER_NAME(window,"window");
	HX_VISIT_MEMBER_NAME(_hx___cacheFocus,"__cacheFocus");
	HX_VISIT_MEMBER_NAME(_hx___clearBeforeRender,"__clearBeforeRender");
	HX_VISIT_MEMBER_NAME(_hx___color,"__color");
	HX_VISIT_MEMBER_NAME(_hx___colorSplit,"__colorSplit");
	HX_VISIT_MEMBER_NAME(_hx___colorString,"__colorString");
	HX_VISIT_MEMBER_NAME(_hx___deltaTime,"__deltaTime");
	HX_VISIT_MEMBER_NAME(_hx___dirty,"__dirty");
	HX_VISIT_MEMBER_NAME(_hx___displayMatrix,"__displayMatrix");
	HX_VISIT_MEMBER_NAME(_hx___displayState,"__displayState");
	HX_VISIT_MEMBER_NAME(_hx___dragBounds,"__dragBounds");
	HX_VISIT_MEMBER_NAME(_hx___dragObject,"__dragObject");
	HX_VISIT_MEMBER_NAME(_hx___dragOffsetX,"__dragOffsetX");
	HX_VISIT_MEMBER_NAME(_hx___dragOffsetY,"__dragOffsetY");
	HX_VISIT_MEMBER_NAME(_hx___focus,"__focus");
	HX_VISIT_MEMBER_NAME(_hx___fullscreen,"__fullscreen");
	HX_VISIT_MEMBER_NAME(_hx___invalidated,"__invalidated");
	HX_VISIT_MEMBER_NAME(_hx___lastClickTime,"__lastClickTime");
	HX_VISIT_MEMBER_NAME(_hx___logicalWidth,"__logicalWidth");
	HX_VISIT_MEMBER_NAME(_hx___logicalHeight,"__logicalHeight");
	HX_VISIT_MEMBER_NAME(_hx___macKeyboard,"__macKeyboard");
	HX_VISIT_MEMBER_NAME(_hx___mouseDownLeft,"__mouseDownLeft");
	HX_VISIT_MEMBER_NAME(_hx___mouseDownMiddle,"__mouseDownMiddle");
	HX_VISIT_MEMBER_NAME(_hx___mouseDownRight,"__mouseDownRight");
	HX_VISIT_MEMBER_NAME(_hx___mouseOverTarget,"__mouseOverTarget");
	HX_VISIT_MEMBER_NAME(_hx___mouseX,"__mouseX");
	HX_VISIT_MEMBER_NAME(_hx___mouseY,"__mouseY");
	HX_VISIT_MEMBER_NAME(_hx___primaryTouch,"__primaryTouch");
	HX_VISIT_MEMBER_NAME(_hx___renderer,"__renderer");
	HX_VISIT_MEMBER_NAME(_hx___rendering,"__rendering");
	HX_VISIT_MEMBER_NAME(_hx___rollOutStack,"__rollOutStack");
	HX_VISIT_MEMBER_NAME(_hx___stack,"__stack");
	HX_VISIT_MEMBER_NAME(_hx___transparent,"__transparent");
	HX_VISIT_MEMBER_NAME(_hx___wasDirty,"__wasDirty");
	 ::openfl::display::DisplayObjectContainer_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Stage_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"align") ) { return hx::Val( align); }
		if (HX_FIELD_EQ(inName,"color") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_color()); }
		if (HX_FIELD_EQ(inName,"focus") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_focus()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"window") ) { return hx::Val( window); }
		if (HX_FIELD_EQ(inName,"render") ) { return hx::Val( render_dyn()); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
		if (HX_FIELD_EQ(inName,"__drag") ) { return hx::Val( _hx___drag_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"quality") ) { return hx::Val( quality); }
		if (HX_FIELD_EQ(inName,"__color") ) { return hx::Val( _hx___color); }
		if (HX_FIELD_EQ(inName,"__dirty") ) { return hx::Val( _hx___dirty); }
		if (HX_FIELD_EQ(inName,"__focus") ) { return hx::Val( _hx___focus); }
		if (HX_FIELD_EQ(inName,"__stack") ) { return hx::Val( _hx___stack); }
		if (HX_FIELD_EQ(inName,"onKeyUp") ) { return hx::Val( onKeyUp_dyn()); }
		if (HX_FIELD_EQ(inName,"__onKey") ) { return hx::Val( _hx___onKey_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"stage3Ds") ) { return hx::Val( stage3Ds); }
		if (HX_FIELD_EQ(inName,"__mouseX") ) { return hx::Val( _hx___mouseX); }
		if (HX_FIELD_EQ(inName,"__mouseY") ) { return hx::Val( _hx___mouseY); }
		if (HX_FIELD_EQ(inName,"__resize") ) { return hx::Val( _hx___resize_dyn()); }
		if (HX_FIELD_EQ(inName,"__update") ) { return hx::Val( _hx___update_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"frameRate") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_frameRate()); }
		if (HX_FIELD_EQ(inName,"scaleMode") ) { return hx::Val( scaleMode); }
		if (HX_FIELD_EQ(inName,"addWindow") ) { return hx::Val( addWindow_dyn()); }
		if (HX_FIELD_EQ(inName,"onKeyDown") ) { return hx::Val( onKeyDown_dyn()); }
		if (HX_FIELD_EQ(inName,"onMouseUp") ) { return hx::Val( onMouseUp_dyn()); }
		if (HX_FIELD_EQ(inName,"__onMouse") ) { return hx::Val( _hx___onMouse_dyn()); }
		if (HX_FIELD_EQ(inName,"__onTouch") ) { return hx::Val( _hx___onTouch_dyn()); }
		if (HX_FIELD_EQ(inName,"get_color") ) { return hx::Val( get_color_dyn()); }
		if (HX_FIELD_EQ(inName,"set_color") ) { return hx::Val( set_color_dyn()); }
		if (HX_FIELD_EQ(inName,"get_focus") ) { return hx::Val( get_focus_dyn()); }
		if (HX_FIELD_EQ(inName,"set_focus") ) { return hx::Val( set_focus_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"stageWidth") ) { return hx::Val( stageWidth); }
		if (HX_FIELD_EQ(inName,"__renderer") ) { return hx::Val( _hx___renderer); }
		if (HX_FIELD_EQ(inName,"__wasDirty") ) { return hx::Val( _hx___wasDirty); }
		if (HX_FIELD_EQ(inName,"invalidate") ) { return hx::Val( invalidate_dyn()); }
		if (HX_FIELD_EQ(inName,"onTextEdit") ) { return hx::Val( onTextEdit_dyn()); }
		if (HX_FIELD_EQ(inName,"onTouchEnd") ) { return hx::Val( onTouchEnd_dyn()); }
		if (HX_FIELD_EQ(inName,"__stopDrag") ) { return hx::Val( _hx___stopDrag_dyn()); }
		if (HX_FIELD_EQ(inName,"get_mouseX") ) { return hx::Val( get_mouseX_dyn()); }
		if (HX_FIELD_EQ(inName,"get_mouseY") ) { return hx::Val( get_mouseY_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"application") ) { return hx::Val( application); }
		if (HX_FIELD_EQ(inName,"stageHeight") ) { return hx::Val( stageHeight); }
		if (HX_FIELD_EQ(inName,"__deltaTime") ) { return hx::Val( _hx___deltaTime); }
		if (HX_FIELD_EQ(inName,"__rendering") ) { return hx::Val( _hx___rendering); }
		if (HX_FIELD_EQ(inName,"addRenderer") ) { return hx::Val( addRenderer_dyn()); }
		if (HX_FIELD_EQ(inName,"onMouseDown") ) { return hx::Val( onMouseDown_dyn()); }
		if (HX_FIELD_EQ(inName,"onMouseMove") ) { return hx::Val( onMouseMove_dyn()); }
		if (HX_FIELD_EQ(inName,"onTextInput") ) { return hx::Val( onTextInput_dyn()); }
		if (HX_FIELD_EQ(inName,"onTouchMove") ) { return hx::Val( onTouchMove_dyn()); }
		if (HX_FIELD_EQ(inName,"__fireEvent") ) { return hx::Val( _hx___fireEvent_dyn()); }
		if (HX_FIELD_EQ(inName,"__renderDOM") ) { return hx::Val( _hx___renderDOM_dyn()); }
		if (HX_FIELD_EQ(inName,"__startDrag") ) { return hx::Val( _hx___startDrag_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"displayState") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_displayState()); }
		if (HX_FIELD_EQ(inName,"__cacheFocus") ) { return hx::Val( _hx___cacheFocus); }
		if (HX_FIELD_EQ(inName,"__colorSplit") ) { return hx::Val( _hx___colorSplit); }
		if (HX_FIELD_EQ(inName,"__dragBounds") ) { return hx::Val( _hx___dragBounds); }
		if (HX_FIELD_EQ(inName,"__dragObject") ) { return hx::Val( _hx___dragObject); }
		if (HX_FIELD_EQ(inName,"__fullscreen") ) { return hx::Val( _hx___fullscreen); }
		if (HX_FIELD_EQ(inName,"removeWindow") ) { return hx::Val( removeWindow_dyn()); }
		if (HX_FIELD_EQ(inName,"setPreloader") ) { return hx::Val( setPreloader_dyn()); }
		if (HX_FIELD_EQ(inName,"onModuleExit") ) { return hx::Val( onModuleExit_dyn()); }
		if (HX_FIELD_EQ(inName,"onMouseWheel") ) { return hx::Val( onMouseWheel_dyn()); }
		if (HX_FIELD_EQ(inName,"onTouchStart") ) { return hx::Val( onTouchStart_dyn()); }
		if (HX_FIELD_EQ(inName,"onWindowMove") ) { return hx::Val( onWindowMove_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__colorString") ) { return hx::Val( _hx___colorString); }
		if (HX_FIELD_EQ(inName,"__dragOffsetX") ) { return hx::Val( _hx___dragOffsetX); }
		if (HX_FIELD_EQ(inName,"__dragOffsetY") ) { return hx::Val( _hx___dragOffsetY); }
		if (HX_FIELD_EQ(inName,"__invalidated") ) { return hx::Val( _hx___invalidated); }
		if (HX_FIELD_EQ(inName,"__macKeyboard") ) { return hx::Val( _hx___macKeyboard); }
		if (HX_FIELD_EQ(inName,"__transparent") ) { return hx::Val( _hx___transparent); }
		if (HX_FIELD_EQ(inName,"globalToLocal") ) { return hx::Val( globalToLocal_dyn()); }
		if (HX_FIELD_EQ(inName,"localToGlobal") ) { return hx::Val( localToGlobal_dyn()); }
		if (HX_FIELD_EQ(inName,"onWindowClose") ) { return hx::Val( onWindowClose_dyn()); }
		if (HX_FIELD_EQ(inName,"onWindowEnter") ) { return hx::Val( onWindowEnter_dyn()); }
		if (HX_FIELD_EQ(inName,"onWindowLeave") ) { return hx::Val( onWindowLeave_dyn()); }
		if (HX_FIELD_EQ(inName,"get_frameRate") ) { return hx::Val( get_frameRate_dyn()); }
		if (HX_FIELD_EQ(inName,"set_frameRate") ) { return hx::Val( set_frameRate_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"stageFocusRect") ) { return hx::Val( stageFocusRect); }
		if (HX_FIELD_EQ(inName,"__displayState") ) { return hx::Val( _hx___displayState); }
		if (HX_FIELD_EQ(inName,"__logicalWidth") ) { return hx::Val( _hx___logicalWidth); }
		if (HX_FIELD_EQ(inName,"__primaryTouch") ) { return hx::Val( _hx___primaryTouch); }
		if (HX_FIELD_EQ(inName,"__rollOutStack") ) { return hx::Val( _hx___rollOutStack); }
		if (HX_FIELD_EQ(inName,"registerModule") ) { return hx::Val( registerModule_dyn()); }
		if (HX_FIELD_EQ(inName,"removeRenderer") ) { return hx::Val( removeRenderer_dyn()); }
		if (HX_FIELD_EQ(inName,"onWindowCreate") ) { return hx::Val( onWindowCreate_dyn()); }
		if (HX_FIELD_EQ(inName,"onWindowResize") ) { return hx::Val( onWindowResize_dyn()); }
		if (HX_FIELD_EQ(inName,"__onMouseWheel") ) { return hx::Val( _hx___onMouseWheel_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__displayMatrix") ) { return hx::Val( _hx___displayMatrix); }
		if (HX_FIELD_EQ(inName,"__lastClickTime") ) { return hx::Val( _hx___lastClickTime); }
		if (HX_FIELD_EQ(inName,"__logicalHeight") ) { return hx::Val( _hx___logicalHeight); }
		if (HX_FIELD_EQ(inName,"__mouseDownLeft") ) { return hx::Val( _hx___mouseDownLeft); }
		if (HX_FIELD_EQ(inName,"onWindowFocusIn") ) { return hx::Val( onWindowFocusIn_dyn()); }
		if (HX_FIELD_EQ(inName,"onWindowRestore") ) { return hx::Val( onWindowRestore_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"allowsFullScreen") ) { return hx::Val( allowsFullScreen); }
		if (HX_FIELD_EQ(inName,"__mouseDownRight") ) { return hx::Val( _hx___mouseDownRight); }
		if (HX_FIELD_EQ(inName,"unregisterModule") ) { return hx::Val( unregisterModule_dyn()); }
		if (HX_FIELD_EQ(inName,"onGamepadConnect") ) { return hx::Val( onGamepadConnect_dyn()); }
		if (HX_FIELD_EQ(inName,"onWindowActivate") ) { return hx::Val( onWindowActivate_dyn()); }
		if (HX_FIELD_EQ(inName,"onWindowDropFile") ) { return hx::Val( onWindowDropFile_dyn()); }
		if (HX_FIELD_EQ(inName,"onWindowFocusOut") ) { return hx::Val( onWindowFocusOut_dyn()); }
		if (HX_FIELD_EQ(inName,"onWindowMinimize") ) { return hx::Val( onWindowMinimize_dyn()); }
		if (HX_FIELD_EQ(inName,"__broadcastEvent") ) { return hx::Val( _hx___broadcastEvent_dyn()); }
		if (HX_FIELD_EQ(inName,"__getInteractive") ) { return hx::Val( _hx___getInteractive_dyn()); }
		if (HX_FIELD_EQ(inName,"__setLogicalSize") ) { return hx::Val( _hx___setLogicalSize_dyn()); }
		if (HX_FIELD_EQ(inName,"get_displayState") ) { return hx::Val( get_displayState_dyn()); }
		if (HX_FIELD_EQ(inName,"set_displayState") ) { return hx::Val( set_displayState_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__mouseDownMiddle") ) { return hx::Val( _hx___mouseDownMiddle); }
		if (HX_FIELD_EQ(inName,"__mouseOverTarget") ) { return hx::Val( _hx___mouseOverTarget); }
		if (HX_FIELD_EQ(inName,"onGamepadAxisMove") ) { return hx::Val( onGamepadAxisMove_dyn()); }
		if (HX_FIELD_EQ(inName,"onGamepadButtonUp") ) { return hx::Val( onGamepadButtonUp_dyn()); }
		if (HX_FIELD_EQ(inName,"onJoystickConnect") ) { return hx::Val( onJoystickConnect_dyn()); }
		if (HX_FIELD_EQ(inName,"onJoystickHatMove") ) { return hx::Val( onJoystickHatMove_dyn()); }
		if (HX_FIELD_EQ(inName,"onPreloadComplete") ) { return hx::Val( onPreloadComplete_dyn()); }
		if (HX_FIELD_EQ(inName,"onPreloadProgress") ) { return hx::Val( onPreloadProgress_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"onJoystickAxisMove") ) { return hx::Val( onJoystickAxisMove_dyn()); }
		if (HX_FIELD_EQ(inName,"onJoystickButtonUp") ) { return hx::Val( onJoystickButtonUp_dyn()); }
		if (HX_FIELD_EQ(inName,"onWindowDeactivate") ) { return hx::Val( onWindowDeactivate_dyn()); }
		if (HX_FIELD_EQ(inName,"onWindowFullscreen") ) { return hx::Val( onWindowFullscreen_dyn()); }
		if (HX_FIELD_EQ(inName,"__onGamepadConnect") ) { return hx::Val( _hx___onGamepadConnect_dyn()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__clearBeforeRender") ) { return hx::Val( _hx___clearBeforeRender); }
		if (HX_FIELD_EQ(inName,"onGamepadButtonDown") ) { return hx::Val( onGamepadButtonDown_dyn()); }
		if (HX_FIELD_EQ(inName,"onGamepadDisconnect") ) { return hx::Val( onGamepadDisconnect_dyn()); }
		if (HX_FIELD_EQ(inName,"onMouseMoveRelative") ) { return hx::Val( onMouseMoveRelative_dyn()); }
		if (HX_FIELD_EQ(inName,"onRenderContextLost") ) { return hx::Val( onRenderContextLost_dyn()); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"onJoystickButtonDown") ) { return hx::Val( onJoystickButtonDown_dyn()); }
		if (HX_FIELD_EQ(inName,"onJoystickDisconnect") ) { return hx::Val( onJoystickDisconnect_dyn()); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"onJoystickTrackballMove") ) { return hx::Val( onJoystickTrackballMove_dyn()); }
		if (HX_FIELD_EQ(inName,"onRenderContextRestored") ) { return hx::Val( onRenderContextRestored_dyn()); }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"allowsFullScreenInteractive") ) { return hx::Val( allowsFullScreenInteractive); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Stage_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"align") ) { align=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"color") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_color(inValue) ); }
		if (HX_FIELD_EQ(inName,"focus") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_focus(inValue) ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"window") ) { window=inValue.Cast<  ::lime::ui::Window >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"quality") ) { quality=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__color") ) { _hx___color=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__dirty") ) { _hx___dirty=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__focus") ) { _hx___focus=inValue.Cast<  ::openfl::display::InteractiveObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__stack") ) { _hx___stack=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"stage3Ds") ) { stage3Ds=inValue.Cast<  ::openfl::_Vector::ObjectVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__mouseX") ) { _hx___mouseX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__mouseY") ) { _hx___mouseY=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"frameRate") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_frameRate(inValue) ); }
		if (HX_FIELD_EQ(inName,"scaleMode") ) { scaleMode=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"stageWidth") ) { stageWidth=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__renderer") ) { _hx___renderer=inValue.Cast<  ::openfl::_internal::renderer::AbstractRenderer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__wasDirty") ) { _hx___wasDirty=inValue.Cast< Bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"application") ) { application=inValue.Cast<  ::lime::app::Application >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stageHeight") ) { stageHeight=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__deltaTime") ) { _hx___deltaTime=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__rendering") ) { _hx___rendering=inValue.Cast< Bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"displayState") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_displayState(inValue) ); }
		if (HX_FIELD_EQ(inName,"__cacheFocus") ) { _hx___cacheFocus=inValue.Cast<  ::openfl::display::InteractiveObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__colorSplit") ) { _hx___colorSplit=inValue.Cast< ::Array< Float > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__dragBounds") ) { _hx___dragBounds=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__dragObject") ) { _hx___dragObject=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__fullscreen") ) { _hx___fullscreen=inValue.Cast< Bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__colorString") ) { _hx___colorString=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__dragOffsetX") ) { _hx___dragOffsetX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__dragOffsetY") ) { _hx___dragOffsetY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__invalidated") ) { _hx___invalidated=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__macKeyboard") ) { _hx___macKeyboard=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__transparent") ) { _hx___transparent=inValue.Cast< Bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"stageFocusRect") ) { stageFocusRect=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__displayState") ) { _hx___displayState=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__logicalWidth") ) { _hx___logicalWidth=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__primaryTouch") ) { _hx___primaryTouch=inValue.Cast<  ::lime::ui::Touch >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__rollOutStack") ) { _hx___rollOutStack=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__displayMatrix") ) { _hx___displayMatrix=inValue.Cast<  ::openfl::geom::Matrix >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__lastClickTime") ) { _hx___lastClickTime=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__logicalHeight") ) { _hx___logicalHeight=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__mouseDownLeft") ) { _hx___mouseDownLeft=inValue.Cast<  ::openfl::display::InteractiveObject >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"allowsFullScreen") ) { allowsFullScreen=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__mouseDownRight") ) { _hx___mouseDownRight=inValue.Cast<  ::openfl::display::InteractiveObject >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__mouseDownMiddle") ) { _hx___mouseDownMiddle=inValue.Cast<  ::openfl::display::InteractiveObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__mouseOverTarget") ) { _hx___mouseOverTarget=inValue.Cast<  ::openfl::display::InteractiveObject >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__clearBeforeRender") ) { _hx___clearBeforeRender=inValue.Cast< Bool >(); return inValue; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"allowsFullScreenInteractive") ) { allowsFullScreenInteractive=inValue.Cast< Bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Stage_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("align","\xc5","\x56","\x91","\x21"));
	outFields->push(HX_HCSTRING("allowsFullScreen","\xc5","\x66","\xdc","\x4b"));
	outFields->push(HX_HCSTRING("allowsFullScreenInteractive","\x1d","\x8b","\x2c","\xc8"));
	outFields->push(HX_HCSTRING("application","\x50","\xab","\x3e","\x2a"));
	outFields->push(HX_HCSTRING("color","\x63","\x71","\x5c","\x4a"));
	outFields->push(HX_HCSTRING("displayState","\x6f","\x4c","\x64","\x90"));
	outFields->push(HX_HCSTRING("focus","\xd8","\x5f","\x89","\x04"));
	outFields->push(HX_HCSTRING("frameRate","\xad","\x11","\x25","\x39"));
	outFields->push(HX_HCSTRING("quality","\xbf","\x04","\x4c","\x44"));
	outFields->push(HX_HCSTRING("scaleMode","\x0d","\xdb","\xd3","\x2b"));
	outFields->push(HX_HCSTRING("stage3Ds","\xa4","\x4e","\x30","\xe3"));
	outFields->push(HX_HCSTRING("stageFocusRect","\x7e","\xd2","\x81","\x74"));
	outFields->push(HX_HCSTRING("stageHeight","\x45","\x89","\x45","\x95"));
	outFields->push(HX_HCSTRING("stageWidth","\x68","\x0a","\xb3","\x1d"));
	outFields->push(HX_HCSTRING("window","\xf0","\x93","\x8c","\x52"));
	outFields->push(HX_HCSTRING("__cacheFocus","\x56","\x41","\xd5","\x7f"));
	outFields->push(HX_HCSTRING("__clearBeforeRender","\x42","\xa3","\xd5","\xf3"));
	outFields->push(HX_HCSTRING("__color","\x43","\xca","\xba","\xb4"));
	outFields->push(HX_HCSTRING("__colorSplit","\x97","\x7d","\x6e","\xde"));
	outFields->push(HX_HCSTRING("__colorString","\x74","\xfb","\xd0","\x13"));
	outFields->push(HX_HCSTRING("__deltaTime","\x05","\x85","\x88","\x23"));
	outFields->push(HX_HCSTRING("__dirty","\xf2","\xa8","\x2e","\x44"));
	outFields->push(HX_HCSTRING("__displayMatrix","\x03","\x2b","\xdd","\x04"));
	outFields->push(HX_HCSTRING("__displayState","\x8f","\xcf","\x24","\xb1"));
	outFields->push(HX_HCSTRING("__dragBounds","\xa9","\x10","\x1d","\x47"));
	outFields->push(HX_HCSTRING("__dragObject","\xf3","\x08","\x3f","\xf6"));
	outFields->push(HX_HCSTRING("__dragOffsetX","\xb1","\x6c","\xfe","\xd5"));
	outFields->push(HX_HCSTRING("__dragOffsetY","\xb2","\x6c","\xfe","\xd5"));
	outFields->push(HX_HCSTRING("__focus","\xb8","\xb8","\xe7","\x6e"));
	outFields->push(HX_HCSTRING("__fullscreen","\x5b","\xb5","\x47","\x32"));
	outFields->push(HX_HCSTRING("__invalidated","\x69","\x73","\x24","\x06"));
	outFields->push(HX_HCSTRING("__lastClickTime","\x1f","\x4c","\xe7","\xb1"));
	outFields->push(HX_HCSTRING("__logicalWidth","\x9d","\xce","\x2c","\x0d"));
	outFields->push(HX_HCSTRING("__logicalHeight","\x70","\x73","\x57","\x30"));
	outFields->push(HX_HCSTRING("__macKeyboard","\x36","\x6b","\x9a","\xd8"));
	outFields->push(HX_HCSTRING("__mouseDownLeft","\xae","\x3d","\x4b","\x93"));
	outFields->push(HX_HCSTRING("__mouseDownMiddle","\xbc","\x00","\x70","\x1d"));
	outFields->push(HX_HCSTRING("__mouseDownRight","\x55","\xc8","\x97","\xc5"));
	outFields->push(HX_HCSTRING("__mouseOverTarget","\x2a","\xfb","\x94","\x00"));
	outFields->push(HX_HCSTRING("__mouseX","\xb3","\xb5","\x3d","\x74"));
	outFields->push(HX_HCSTRING("__mouseY","\xb4","\xb5","\x3d","\x74"));
	outFields->push(HX_HCSTRING("__primaryTouch","\xbd","\x6b","\x1c","\x30"));
	outFields->push(HX_HCSTRING("__renderer","\x63","\x38","\x14","\x56"));
	outFields->push(HX_HCSTRING("__rendering","\x2c","\x24","\xa0","\xfb"));
	outFields->push(HX_HCSTRING("__rollOutStack","\x97","\xe3","\x31","\x86"));
	outFields->push(HX_HCSTRING("__stack","\x28","\xc0","\x69","\xee"));
	outFields->push(HX_HCSTRING("__transparent","\x32","\x6c","\x32","\x6b"));
	outFields->push(HX_HCSTRING("__wasDirty","\x49","\xbd","\x55","\x63"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Stage_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Stage_obj,align),HX_HCSTRING("align","\xc5","\x56","\x91","\x21")},
	{hx::fsBool,(int)offsetof(Stage_obj,allowsFullScreen),HX_HCSTRING("allowsFullScreen","\xc5","\x66","\xdc","\x4b")},
	{hx::fsBool,(int)offsetof(Stage_obj,allowsFullScreenInteractive),HX_HCSTRING("allowsFullScreenInteractive","\x1d","\x8b","\x2c","\xc8")},
	{hx::fsObject /*::lime::app::Application*/ ,(int)offsetof(Stage_obj,application),HX_HCSTRING("application","\x50","\xab","\x3e","\x2a")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Stage_obj,quality),HX_HCSTRING("quality","\xbf","\x04","\x4c","\x44")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Stage_obj,scaleMode),HX_HCSTRING("scaleMode","\x0d","\xdb","\xd3","\x2b")},
	{hx::fsObject /*::openfl::_Vector::ObjectVector*/ ,(int)offsetof(Stage_obj,stage3Ds),HX_HCSTRING("stage3Ds","\xa4","\x4e","\x30","\xe3")},
	{hx::fsBool,(int)offsetof(Stage_obj,stageFocusRect),HX_HCSTRING("stageFocusRect","\x7e","\xd2","\x81","\x74")},
	{hx::fsInt,(int)offsetof(Stage_obj,stageHeight),HX_HCSTRING("stageHeight","\x45","\x89","\x45","\x95")},
	{hx::fsInt,(int)offsetof(Stage_obj,stageWidth),HX_HCSTRING("stageWidth","\x68","\x0a","\xb3","\x1d")},
	{hx::fsObject /*::lime::ui::Window*/ ,(int)offsetof(Stage_obj,window),HX_HCSTRING("window","\xf0","\x93","\x8c","\x52")},
	{hx::fsObject /*::openfl::display::InteractiveObject*/ ,(int)offsetof(Stage_obj,_hx___cacheFocus),HX_HCSTRING("__cacheFocus","\x56","\x41","\xd5","\x7f")},
	{hx::fsBool,(int)offsetof(Stage_obj,_hx___clearBeforeRender),HX_HCSTRING("__clearBeforeRender","\x42","\xa3","\xd5","\xf3")},
	{hx::fsInt,(int)offsetof(Stage_obj,_hx___color),HX_HCSTRING("__color","\x43","\xca","\xba","\xb4")},
	{hx::fsObject /*Array< Float >*/ ,(int)offsetof(Stage_obj,_hx___colorSplit),HX_HCSTRING("__colorSplit","\x97","\x7d","\x6e","\xde")},
	{hx::fsString,(int)offsetof(Stage_obj,_hx___colorString),HX_HCSTRING("__colorString","\x74","\xfb","\xd0","\x13")},
	{hx::fsInt,(int)offsetof(Stage_obj,_hx___deltaTime),HX_HCSTRING("__deltaTime","\x05","\x85","\x88","\x23")},
	{hx::fsBool,(int)offsetof(Stage_obj,_hx___dirty),HX_HCSTRING("__dirty","\xf2","\xa8","\x2e","\x44")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(int)offsetof(Stage_obj,_hx___displayMatrix),HX_HCSTRING("__displayMatrix","\x03","\x2b","\xdd","\x04")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Stage_obj,_hx___displayState),HX_HCSTRING("__displayState","\x8f","\xcf","\x24","\xb1")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(Stage_obj,_hx___dragBounds),HX_HCSTRING("__dragBounds","\xa9","\x10","\x1d","\x47")},
	{hx::fsObject /*::openfl::display::Sprite*/ ,(int)offsetof(Stage_obj,_hx___dragObject),HX_HCSTRING("__dragObject","\xf3","\x08","\x3f","\xf6")},
	{hx::fsFloat,(int)offsetof(Stage_obj,_hx___dragOffsetX),HX_HCSTRING("__dragOffsetX","\xb1","\x6c","\xfe","\xd5")},
	{hx::fsFloat,(int)offsetof(Stage_obj,_hx___dragOffsetY),HX_HCSTRING("__dragOffsetY","\xb2","\x6c","\xfe","\xd5")},
	{hx::fsObject /*::openfl::display::InteractiveObject*/ ,(int)offsetof(Stage_obj,_hx___focus),HX_HCSTRING("__focus","\xb8","\xb8","\xe7","\x6e")},
	{hx::fsBool,(int)offsetof(Stage_obj,_hx___fullscreen),HX_HCSTRING("__fullscreen","\x5b","\xb5","\x47","\x32")},
	{hx::fsBool,(int)offsetof(Stage_obj,_hx___invalidated),HX_HCSTRING("__invalidated","\x69","\x73","\x24","\x06")},
	{hx::fsInt,(int)offsetof(Stage_obj,_hx___lastClickTime),HX_HCSTRING("__lastClickTime","\x1f","\x4c","\xe7","\xb1")},
	{hx::fsInt,(int)offsetof(Stage_obj,_hx___logicalWidth),HX_HCSTRING("__logicalWidth","\x9d","\xce","\x2c","\x0d")},
	{hx::fsInt,(int)offsetof(Stage_obj,_hx___logicalHeight),HX_HCSTRING("__logicalHeight","\x70","\x73","\x57","\x30")},
	{hx::fsBool,(int)offsetof(Stage_obj,_hx___macKeyboard),HX_HCSTRING("__macKeyboard","\x36","\x6b","\x9a","\xd8")},
	{hx::fsObject /*::openfl::display::InteractiveObject*/ ,(int)offsetof(Stage_obj,_hx___mouseDownLeft),HX_HCSTRING("__mouseDownLeft","\xae","\x3d","\x4b","\x93")},
	{hx::fsObject /*::openfl::display::InteractiveObject*/ ,(int)offsetof(Stage_obj,_hx___mouseDownMiddle),HX_HCSTRING("__mouseDownMiddle","\xbc","\x00","\x70","\x1d")},
	{hx::fsObject /*::openfl::display::InteractiveObject*/ ,(int)offsetof(Stage_obj,_hx___mouseDownRight),HX_HCSTRING("__mouseDownRight","\x55","\xc8","\x97","\xc5")},
	{hx::fsObject /*::openfl::display::InteractiveObject*/ ,(int)offsetof(Stage_obj,_hx___mouseOverTarget),HX_HCSTRING("__mouseOverTarget","\x2a","\xfb","\x94","\x00")},
	{hx::fsFloat,(int)offsetof(Stage_obj,_hx___mouseX),HX_HCSTRING("__mouseX","\xb3","\xb5","\x3d","\x74")},
	{hx::fsFloat,(int)offsetof(Stage_obj,_hx___mouseY),HX_HCSTRING("__mouseY","\xb4","\xb5","\x3d","\x74")},
	{hx::fsObject /*::lime::ui::Touch*/ ,(int)offsetof(Stage_obj,_hx___primaryTouch),HX_HCSTRING("__primaryTouch","\xbd","\x6b","\x1c","\x30")},
	{hx::fsObject /*::openfl::_internal::renderer::AbstractRenderer*/ ,(int)offsetof(Stage_obj,_hx___renderer),HX_HCSTRING("__renderer","\x63","\x38","\x14","\x56")},
	{hx::fsBool,(int)offsetof(Stage_obj,_hx___rendering),HX_HCSTRING("__rendering","\x2c","\x24","\xa0","\xfb")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Stage_obj,_hx___rollOutStack),HX_HCSTRING("__rollOutStack","\x97","\xe3","\x31","\x86")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Stage_obj,_hx___stack),HX_HCSTRING("__stack","\x28","\xc0","\x69","\xee")},
	{hx::fsBool,(int)offsetof(Stage_obj,_hx___transparent),HX_HCSTRING("__transparent","\x32","\x6c","\x32","\x6b")},
	{hx::fsBool,(int)offsetof(Stage_obj,_hx___wasDirty),HX_HCSTRING("__wasDirty","\x49","\xbd","\x55","\x63")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Stage_obj_sStaticStorageInfo = 0;
#endif

static ::String Stage_obj_sMemberFields[] = {
	HX_HCSTRING("align","\xc5","\x56","\x91","\x21"),
	HX_HCSTRING("allowsFullScreen","\xc5","\x66","\xdc","\x4b"),
	HX_HCSTRING("allowsFullScreenInteractive","\x1d","\x8b","\x2c","\xc8"),
	HX_HCSTRING("application","\x50","\xab","\x3e","\x2a"),
	HX_HCSTRING("quality","\xbf","\x04","\x4c","\x44"),
	HX_HCSTRING("scaleMode","\x0d","\xdb","\xd3","\x2b"),
	HX_HCSTRING("stage3Ds","\xa4","\x4e","\x30","\xe3"),
	HX_HCSTRING("stageFocusRect","\x7e","\xd2","\x81","\x74"),
	HX_HCSTRING("stageHeight","\x45","\x89","\x45","\x95"),
	HX_HCSTRING("stageWidth","\x68","\x0a","\xb3","\x1d"),
	HX_HCSTRING("window","\xf0","\x93","\x8c","\x52"),
	HX_HCSTRING("__cacheFocus","\x56","\x41","\xd5","\x7f"),
	HX_HCSTRING("__clearBeforeRender","\x42","\xa3","\xd5","\xf3"),
	HX_HCSTRING("__color","\x43","\xca","\xba","\xb4"),
	HX_HCSTRING("__colorSplit","\x97","\x7d","\x6e","\xde"),
	HX_HCSTRING("__colorString","\x74","\xfb","\xd0","\x13"),
	HX_HCSTRING("__deltaTime","\x05","\x85","\x88","\x23"),
	HX_HCSTRING("__dirty","\xf2","\xa8","\x2e","\x44"),
	HX_HCSTRING("__displayMatrix","\x03","\x2b","\xdd","\x04"),
	HX_HCSTRING("__displayState","\x8f","\xcf","\x24","\xb1"),
	HX_HCSTRING("__dragBounds","\xa9","\x10","\x1d","\x47"),
	HX_HCSTRING("__dragObject","\xf3","\x08","\x3f","\xf6"),
	HX_HCSTRING("__dragOffsetX","\xb1","\x6c","\xfe","\xd5"),
	HX_HCSTRING("__dragOffsetY","\xb2","\x6c","\xfe","\xd5"),
	HX_HCSTRING("__focus","\xb8","\xb8","\xe7","\x6e"),
	HX_HCSTRING("__fullscreen","\x5b","\xb5","\x47","\x32"),
	HX_HCSTRING("__invalidated","\x69","\x73","\x24","\x06"),
	HX_HCSTRING("__lastClickTime","\x1f","\x4c","\xe7","\xb1"),
	HX_HCSTRING("__logicalWidth","\x9d","\xce","\x2c","\x0d"),
	HX_HCSTRING("__logicalHeight","\x70","\x73","\x57","\x30"),
	HX_HCSTRING("__macKeyboard","\x36","\x6b","\x9a","\xd8"),
	HX_HCSTRING("__mouseDownLeft","\xae","\x3d","\x4b","\x93"),
	HX_HCSTRING("__mouseDownMiddle","\xbc","\x00","\x70","\x1d"),
	HX_HCSTRING("__mouseDownRight","\x55","\xc8","\x97","\xc5"),
	HX_HCSTRING("__mouseOverTarget","\x2a","\xfb","\x94","\x00"),
	HX_HCSTRING("__mouseX","\xb3","\xb5","\x3d","\x74"),
	HX_HCSTRING("__mouseY","\xb4","\xb5","\x3d","\x74"),
	HX_HCSTRING("__primaryTouch","\xbd","\x6b","\x1c","\x30"),
	HX_HCSTRING("__renderer","\x63","\x38","\x14","\x56"),
	HX_HCSTRING("__rendering","\x2c","\x24","\xa0","\xfb"),
	HX_HCSTRING("__rollOutStack","\x97","\xe3","\x31","\x86"),
	HX_HCSTRING("__stack","\x28","\xc0","\x69","\xee"),
	HX_HCSTRING("__transparent","\x32","\x6c","\x32","\x6b"),
	HX_HCSTRING("__wasDirty","\x49","\xbd","\x55","\x63"),
	HX_HCSTRING("addRenderer","\x84","\xfc","\x37","\xe4"),
	HX_HCSTRING("addWindow","\xf1","\xc8","\xb0","\x0a"),
	HX_HCSTRING("registerModule","\x6f","\xbb","\x14","\x87"),
	HX_HCSTRING("removeRenderer","\xa7","\x01","\x32","\x7d"),
	HX_HCSTRING("removeWindow","\x54","\x2f","\xba","\xc1"),
	HX_HCSTRING("setPreloader","\x74","\xa4","\xcb","\xa6"),
	HX_HCSTRING("unregisterModule","\x88","\x2b","\x36","\x94"),
	HX_HCSTRING("globalToLocal","\xcd","\x4e","\xae","\x6b"),
	HX_HCSTRING("invalidate","\x7b","\x19","\x2a","\x87"),
	HX_HCSTRING("localToGlobal","\xc9","\x41","\xeb","\x47"),
	HX_HCSTRING("onGamepadAxisMove","\xb4","\xf7","\xd4","\x24"),
	HX_HCSTRING("onGamepadButtonDown","\x56","\xeb","\xb6","\x87"),
	HX_HCSTRING("onGamepadButtonUp","\x4f","\xf4","\x12","\xf1"),
	HX_HCSTRING("onGamepadConnect","\xc8","\x56","\xd7","\xec"),
	HX_HCSTRING("onGamepadDisconnect","\x3e","\xe8","\x96","\x44"),
	HX_HCSTRING("onJoystickAxisMove","\x6d","\xf4","\xd4","\x5b"),
	HX_HCSTRING("onJoystickButtonDown","\x4f","\x48","\x3a","\x7c"),
	HX_HCSTRING("onJoystickButtonUp","\x08","\xf1","\x12","\x28"),
	HX_HCSTRING("onJoystickConnect","\x2f","\x14","\xdd","\xfa"),
	HX_HCSTRING("onJoystickDisconnect","\x37","\x45","\x1a","\x39"),
	HX_HCSTRING("onJoystickHatMove","\x51","\x70","\x68","\x90"),
	HX_HCSTRING("onJoystickTrackballMove","\x40","\xc8","\x46","\x1a"),
	HX_HCSTRING("onKeyDown","\x42","\x22","\xf2","\x73"),
	HX_HCSTRING("onKeyUp","\x3b","\x58","\x3c","\x75"),
	HX_HCSTRING("onModuleExit","\xe9","\xbf","\xa3","\x0b"),
	HX_HCSTRING("onMouseDown","\x08","\x94","\x05","\x11"),
	HX_HCSTRING("onMouseMove","\xb7","\x7e","\xf8","\x16"),
	HX_HCSTRING("onMouseMoveRelative","\xa3","\x06","\xbf","\x7a"),
	HX_HCSTRING("onMouseUp","\x81","\xac","\x1d","\x98"),
	HX_HCSTRING("onMouseWheel","\x35","\xca","\xca","\xbf"),
	HX_HCSTRING("onPreloadComplete","\x43","\x37","\x5d","\x5c"),
	HX_HCSTRING("onPreloadProgress","\x37","\x2e","\xc0","\x62"),
	HX_HCSTRING("onRenderContextLost","\x9e","\x9b","\xa7","\x84"),
	HX_HCSTRING("onRenderContextRestored","\x10","\x54","\x6e","\x7a"),
	HX_HCSTRING("onTextEdit","\x96","\xf1","\xc0","\x23"),
	HX_HCSTRING("onTextInput","\xfe","\x36","\x4e","\x79"),
	HX_HCSTRING("onTouchMove","\x51","\x55","\x10","\x30"),
	HX_HCSTRING("onTouchEnd","\x9b","\x99","\xc0","\xdd"),
	HX_HCSTRING("onTouchStart","\x22","\xfa","\xdf","\x55"),
	HX_HCSTRING("onWindowActivate","\x42","\xe9","\xdd","\xeb"),
	HX_HCSTRING("onWindowClose","\xc9","\xca","\x1f","\x9c"),
	HX_HCSTRING("onWindowCreate","\xcb","\x62","\x6f","\x6d"),
	HX_HCSTRING("onWindowDeactivate","\x83","\xeb","\x6c","\x8c"),
	HX_HCSTRING("onWindowDropFile","\xda","\x43","\x88","\xef"),
	HX_HCSTRING("onWindowEnter","\x29","\x20","\x43","\xc4"),
	HX_HCSTRING("onWindowFocusIn","\x2e","\x9f","\x1f","\x84"),
	HX_HCSTRING("onWindowFocusOut","\x25","\x3d","\x90","\x17"),
	HX_HCSTRING("onWindowFullscreen","\x8a","\xc9","\x1f","\x4a"),
	HX_HCSTRING("onWindowLeave","\x08","\xe8","\x0f","\xc6"),
	HX_HCSTRING("onWindowMinimize","\xad","\x0c","\xab","\x27"),
	HX_HCSTRING("onWindowMove","\x20","\xfd","\x7a","\xab"),
	HX_HCSTRING("onWindowResize","\xc3","\x55","\xdb","\xf9"),
	HX_HCSTRING("onWindowRestore","\x9f","\xc0","\x4c","\xad"),
	HX_HCSTRING("render","\x56","\x6b","\x29","\x05"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("__broadcastEvent","\x79","\x9c","\xa4","\x95"),
	HX_HCSTRING("__drag","\x14","\x8f","\x68","\xf1"),
	HX_HCSTRING("__fireEvent","\x64","\x79","\x99","\x9f"),
	HX_HCSTRING("__getInteractive","\x0c","\x1c","\x37","\xf8"),
	HX_HCSTRING("__onKey","\xa0","\x76","\xc7","\x9c"),
	HX_HCSTRING("__onGamepadConnect","\xe8","\xe9","\x67","\x58"),
	HX_HCSTRING("__onMouse","\x66","\x05","\xf1","\x23"),
	HX_HCSTRING("__onMouseWheel","\x55","\x4d","\x8b","\xe0"),
	HX_HCSTRING("__onTouch","\x00","\x07","\xbf","\x2b"),
	HX_HCSTRING("__renderDOM","\xac","\xf5","\x83","\xfb"),
	HX_HCSTRING("__resize","\x14","\xc5","\xaa","\xb0"),
	HX_HCSTRING("__setLogicalSize","\xc8","\x6d","\xcd","\x32"),
	HX_HCSTRING("__startDrag","\x56","\xee","\x8f","\x29"),
	HX_HCSTRING("__stopDrag","\x36","\xe4","\x62","\x38"),
	HX_HCSTRING("__update","\x29","\xf1","\x34","\x2f"),
	HX_HCSTRING("get_color","\xba","\xcd","\x05","\x8e"),
	HX_HCSTRING("set_color","\xc6","\xb9","\x56","\x71"),
	HX_HCSTRING("get_displayState","\xf8","\x38","\x03","\x95"),
	HX_HCSTRING("set_displayState","\x6c","\x26","\x45","\xeb"),
	HX_HCSTRING("get_focus","\x2f","\xbc","\x32","\x48"),
	HX_HCSTRING("set_focus","\x3b","\xa8","\x83","\x2b"),
	HX_HCSTRING("get_frameRate","\x84","\xe5","\x88","\xfa"),
	HX_HCSTRING("set_frameRate","\x90","\xc7","\x8e","\x3f"),
	HX_HCSTRING("get_mouseX","\x5c","\xba","\x95","\xbc"),
	HX_HCSTRING("get_mouseY","\x5d","\xba","\x95","\xbc"),
	::String(null()) };

static void Stage_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Stage_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Stage_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Stage_obj::__mClass,"__mClass");
};

#endif

hx::Class Stage_obj::__mClass;

void Stage_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.display.Stage","\x14","\x36","\x7c","\x5c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Stage_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Stage_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Stage_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Stage_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Stage_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Stage_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace display
