// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo_Cairo
#include <lime/graphics/cairo/Cairo.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo__CairoFTFontFace_CairoFTFontFace_Impl_
#include <lime/graphics/cairo/_CairoFTFontFace/CairoFTFontFace_Impl_.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo__CairoFontOptions_CairoFontOptions_Impl_
#include <lime/graphics/cairo/_CairoFontOptions/CairoFontOptions_Impl_.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo__CairoImageSurface_CairoImageSurface_Impl_
#include <lime/graphics/cairo/_CairoImageSurface/CairoImageSurface_Impl_.h>
#endif
#ifndef INCLUDED_lime_math_Matrix3
#include <lime/math/Matrix3.h>
#endif
#ifndef INCLUDED_lime_text_Font
#include <lime/text/Font.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_RenderSession
#include <openfl/_internal/renderer/RenderSession.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_cairo_CairoTextField
#include <openfl/_internal/renderer/cairo/CairoTextField.h>
#endif
#ifndef INCLUDED_openfl__internal_text_TextEngine
#include <openfl/_internal/text/TextEngine.h>
#endif
#ifndef INCLUDED_openfl__internal_text_TextLayoutGroup
#include <openfl/_internal/text/TextLayoutGroup.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_text_Font
#include <openfl/text/Font.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif

namespace openfl{
namespace _internal{
namespace renderer{
namespace cairo{

void CairoTextField_obj::__construct() { }

Dynamic CairoTextField_obj::__CreateEmpty() { return new CairoTextField_obj; }

hx::ObjectPtr< CairoTextField_obj > CairoTextField_obj::__new()
{
	hx::ObjectPtr< CairoTextField_obj > _hx_result = new CairoTextField_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic CairoTextField_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< CairoTextField_obj > _hx_result = new CairoTextField_obj();
	_hx_result->__construct();
	return _hx_result;
}

void CairoTextField_obj::render( ::openfl::text::TextField textField, ::openfl::_internal::renderer::RenderSession renderSession, ::openfl::geom::Matrix transform){
            	HX_STACK_FRAME("openfl._internal.renderer.cairo.CairoTextField","render",0xabb9797e,"openfl._internal.renderer.cairo.CairoTextField.render","openfl/_internal/renderer/cairo/CairoTextField.hx",29,0xfadfb778)
            	HX_STACK_ARG(textField,"textField")
            	HX_STACK_ARG(renderSession,"renderSession")
            	HX_STACK_ARG(transform,"transform")
HXLINE(  33)		HX_VARI(  ::openfl::_internal::text::TextEngine,textEngine) = textField->_hx___textEngine;
HXLINE(  34)		HX_VARI(  ::openfl::geom::Rectangle,bounds) = textEngine->bounds;
HXLINE(  35)		HX_VARI(  ::openfl::display::Graphics,graphics) = textField->_hx___graphics;
HXLINE(  36)		HX_VARI(  ::lime::graphics::cairo::Cairo,cairo) = graphics->_hx___cairo;
HXLINE(  38)		Bool _hx_tmp = textField->_hx___dirty;
HXDLIN(  38)		if (_hx_tmp) {
HXLINE(  40)			textField->_hx___updateLayout();
HXLINE(  42)			Bool _hx_tmp1 = hx::IsNull( graphics->_hx___bounds );
HXDLIN(  42)			if (_hx_tmp1) {
HXLINE(  44)				graphics->_hx___bounds =  ::openfl::geom::Rectangle_obj::__new(null(),null(),null(),null());
            			}
HXLINE(  48)			graphics->_hx___bounds->copyFrom(bounds);
            		}
HXLINE(  52)		graphics->_hx___update();
HXLINE(  54)		HX_VARI( Int,width) = graphics->_hx___width;
HXLINE(  55)		HX_VARI( Int,height) = graphics->_hx___height;
HXLINE(  57)		HX_VAR( Bool,renderable);
HXDLIN(  57)		Bool _hx_tmp2;
HXDLIN(  57)		if (!(textEngine->border)) {
HXLINE(  57)			_hx_tmp2 = textEngine->background;
            		}
            		else {
HXLINE(  57)			_hx_tmp2 = true;
            		}
HXDLIN(  57)		if (!(_hx_tmp2)) {
HXLINE(  57)			Bool _hx_tmp3 = hx::IsNotNull( textEngine->text );
HXDLIN(  57)			if (_hx_tmp3) {
HXLINE(  57)				renderable = (textEngine->text != HX_("",00,00,00,00));
            			}
            			else {
HXLINE(  57)				renderable = false;
            			}
            		}
            		else {
HXLINE(  57)			renderable = true;
            		}
HXLINE(  59)		Bool _hx_tmp4 = hx::IsNotNull( cairo );
HXDLIN(  59)		if (_hx_tmp4) {
HXLINE(  61)			HX_VARI(  ::Dynamic,surface) = cairo->get_target();
HXLINE(  63)			Bool _hx_tmp5;
HXDLIN(  63)			Bool _hx_tmp6;
HXDLIN(  63)			if (!(!(renderable))) {
HXLINE(  63)				Int _hx_tmp7 = ::lime::graphics::cairo::_CairoImageSurface::CairoImageSurface_Impl__obj::get_width(surface);
HXDLIN(  63)				_hx_tmp6 = (width != _hx_tmp7);
            			}
            			else {
HXLINE(  63)				_hx_tmp6 = true;
            			}
HXDLIN(  63)			if (!(_hx_tmp6)) {
HXLINE(  63)				Int _hx_tmp8 = ::lime::graphics::cairo::_CairoImageSurface::CairoImageSurface_Impl__obj::get_height(surface);
HXDLIN(  63)				_hx_tmp5 = (height != _hx_tmp8);
            			}
            			else {
HXLINE(  63)				_hx_tmp5 = true;
            			}
HXDLIN(  63)			if (_hx_tmp5) {
HXLINE(  65)				graphics->_hx___cairo = null();
HXLINE(  66)				graphics->_hx___bitmap = null();
HXLINE(  67)				graphics->_hx___visible = false;
HXLINE(  68)				cairo = null();
            			}
            		}
HXLINE(  74)		Bool _hx_tmp9;
HXDLIN(  74)		Bool _hx_tmp10;
HXDLIN(  74)		Bool _hx_tmp11;
HXDLIN(  74)		if ((width > (int)0)) {
HXLINE(  74)			_hx_tmp11 = (height <= (int)0);
            		}
            		else {
HXLINE(  74)			_hx_tmp11 = true;
            		}
HXDLIN(  74)		if (!(_hx_tmp11)) {
HXLINE(  74)			if (!(textField->_hx___dirty)) {
HXLINE(  74)				_hx_tmp10 = !(graphics->_hx___dirty);
            			}
            			else {
HXLINE(  74)				_hx_tmp10 = false;
            			}
            		}
            		else {
HXLINE(  74)			_hx_tmp10 = true;
            		}
HXDLIN(  74)		if (!(_hx_tmp10)) {
HXLINE(  74)			_hx_tmp9 = !(renderable);
            		}
            		else {
HXLINE(  74)			_hx_tmp9 = true;
            		}
HXDLIN(  74)		if (_hx_tmp9) {
HXLINE(  76)			textField->_hx___dirty = false;
HXLINE(  77)			return;
            		}
HXLINE(  81)		Bool _hx_tmp12 = hx::IsNull( cairo );
HXDLIN(  81)		if (_hx_tmp12) {
HXLINE(  83)			HX_VARI(  ::openfl::display::BitmapData,bitmap) =  ::openfl::display::BitmapData_obj::__new(width,height,true,(int)0);
HXLINE(  84)			HX_VARI_NAME(  ::Dynamic,surface1,"surface") = bitmap->getSurface();
HXLINE(  85)			graphics->_hx___cairo =  ::lime::graphics::cairo::Cairo_obj::__new(surface1);
HXLINE(  86)			graphics->_hx___visible = true;
HXLINE(  88)			graphics->_hx___bitmap = bitmap;
HXLINE(  90)			cairo = graphics->_hx___cairo;
HXLINE(  92)			HX_VARI(  ::Dynamic,options) = ::lime::graphics::cairo::_CairoFontOptions::CairoFontOptions_Impl__obj::_new();
HXLINE(  94)			Bool _hx_tmp13;
HXDLIN(  94)			if (hx::IsEq( textEngine->antiAliasType,(int)0 )) {
HXLINE(  94)				_hx_tmp13 = (textEngine->sharpness == (int)400);
            			}
            			else {
HXLINE(  94)				_hx_tmp13 = false;
            			}
HXDLIN(  94)			if (_hx_tmp13) {
HXLINE(  96)				::lime::graphics::cairo::_CairoFontOptions::CairoFontOptions_Impl__obj::set_hintStyle(options,(int)1);
HXLINE(  97)				::lime::graphics::cairo::_CairoFontOptions::CairoFontOptions_Impl__obj::set_hintMetrics(options,(int)1);
HXLINE(  98)				::lime::graphics::cairo::_CairoFontOptions::CairoFontOptions_Impl__obj::set_antialias(options,(int)1);
            			}
            			else {
HXLINE( 102)				::lime::graphics::cairo::_CairoFontOptions::CairoFontOptions_Impl__obj::set_hintStyle(options,(int)0);
HXLINE( 103)				::lime::graphics::cairo::_CairoFontOptions::CairoFontOptions_Impl__obj::set_hintMetrics(options,(int)1);
HXLINE( 104)				::lime::graphics::cairo::_CairoFontOptions::CairoFontOptions_Impl__obj::set_antialias(options,(int)5);
            			}
HXLINE( 108)			cairo->set_fontOptions(options);
            		}
HXLINE( 112)		Bool _hx_tmp14 = renderSession->roundPixels;
HXDLIN( 112)		if (_hx_tmp14) {
HXLINE( 114)			HX_VARI(  ::lime::math::Matrix3,matrix) = graphics->_hx___renderTransform->_hx___toMatrix3();
HXLINE( 115)			matrix->tx = ::Math_obj::round(matrix->tx);
HXLINE( 116)			matrix->ty = ::Math_obj::round(matrix->ty);
HXLINE( 117)			cairo->set_matrix(matrix);
            		}
            		else {
HXLINE( 121)			 ::lime::math::Matrix3 _hx_tmp15 = graphics->_hx___renderTransform->_hx___toMatrix3();
HXDLIN( 121)			cairo->set_matrix(_hx_tmp15);
            		}
HXLINE( 125)		Bool _hx_tmp16 = textEngine->border;
HXDLIN( 125)		if (_hx_tmp16) {
HXLINE( 127)			Float _hx_tmp17 = (bounds->width - (int)1);
HXDLIN( 127)			Int _hx_tmp18 = ::Std_obj::_hx_int(_hx_tmp17);
HXDLIN( 127)			Float _hx_tmp19 = (bounds->height - (int)1);
HXDLIN( 127)			Int _hx_tmp20 = ::Std_obj::_hx_int(_hx_tmp19);
HXDLIN( 127)			cairo->rectangle(((Float)0.5),((Float)0.5),_hx_tmp18,_hx_tmp20);
            		}
            		else {
HXLINE( 131)			cairo->rectangle((int)0,(int)0,bounds->width,bounds->height);
            		}
HXLINE( 135)		Bool _hx_tmp21 = !(textEngine->background);
HXDLIN( 135)		if (_hx_tmp21) {
HXLINE( 137)			cairo->set_operator((int)0);
HXLINE( 138)			cairo->paint();
HXLINE( 139)			cairo->set_operator((int)2);
            		}
            		else {
HXLINE( 143)			HX_VARI( Int,color) = textEngine->backgroundColor;
HXLINE( 148)			cairo->setSourceRGB(((Float)hx::UShr(((int)color & (int)(int)16711680),(int)16) / (Float)(int)255),((Float)hx::UShr(((int)color & (int)(int)65280),(int)8) / (Float)(int)255),((Float)((int)color & (int)(int)255) / (Float)(int)255));
HXLINE( 149)			cairo->fillPreserve();
            		}
HXLINE( 153)		Bool _hx_tmp22 = textEngine->border;
HXDLIN( 153)		if (_hx_tmp22) {
HXLINE( 155)			HX_VARI_NAME( Int,color1,"color") = textEngine->borderColor;
HXLINE( 160)			cairo->setSourceRGB(((Float)hx::UShr(((int)color1 & (int)(int)16711680),(int)16) / (Float)(int)255),((Float)hx::UShr(((int)color1 & (int)(int)65280),(int)8) / (Float)(int)255),((Float)((int)color1 & (int)(int)255) / (Float)(int)255));
HXLINE( 161)			cairo->set_lineWidth((int)1);
HXLINE( 162)			cairo->stroke();
            		}
HXLINE( 166)		Bool _hx_tmp23;
HXDLIN( 166)		Bool _hx_tmp24 = hx::IsNotNull( textEngine->text );
HXDLIN( 166)		if (_hx_tmp24) {
HXLINE( 166)			_hx_tmp23 = (textEngine->text != HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 166)			_hx_tmp23 = false;
            		}
HXDLIN( 166)		if (_hx_tmp23) {
HXLINE( 168)			Int _hx_tmp25;
HXDLIN( 168)			Bool _hx_tmp26 = textField->get_border();
HXDLIN( 168)			if (_hx_tmp26) {
HXLINE( 168)				_hx_tmp25 = (int)1;
            			}
            			else {
HXLINE( 168)				_hx_tmp25 = (int)0;
            			}
HXDLIN( 168)			Float _hx_tmp27 = (bounds->width - _hx_tmp25);
HXDLIN( 168)			Int _hx_tmp28;
HXDLIN( 168)			Bool _hx_tmp29 = textField->get_border();
HXDLIN( 168)			if (_hx_tmp29) {
HXLINE( 168)				_hx_tmp28 = (int)1;
            			}
            			else {
HXLINE( 168)				_hx_tmp28 = (int)0;
            			}
HXDLIN( 168)			Float _hx_tmp30 = (bounds->height - _hx_tmp28);
HXDLIN( 168)			cairo->rectangle((int)0,(int)0,_hx_tmp27,_hx_tmp30);
HXLINE( 169)			cairo->clip();
HXLINE( 171)			HX_VARI( ::String,text) = textEngine->text;
HXLINE( 173)			HX_VARI( Int,scrollX) = -(textField->get_scrollH());
HXLINE( 174)			HX_VARI( Float,scrollY) = ((Float)0.0);
HXLINE( 176)			{
HXLINE( 176)				HX_VARI( Int,_g1) = (int)0;
HXDLIN( 176)				Int _hx_tmp31 = textField->get_scrollV();
HXDLIN( 176)				HX_VARI( Int,_g) = (_hx_tmp31 - (int)1);
HXDLIN( 176)				while((_g1 < _g)){
HXLINE( 176)					HX_VARI( Int,i) = _g1++;
HXLINE( 178)					hx::SubEq(scrollY,textEngine->lineHeights->__get(i));
            				}
            			}
HXLINE( 182)			HX_VAR_NAME(  ::Dynamic,color2,"color");
HXDLIN( 182)			HX_VAR( Float,r);
HXDLIN( 182)			HX_VAR( Float,g);
HXDLIN( 182)			HX_VAR( Float,b);
HXDLIN( 182)			HX_VAR(  ::openfl::text::Font,font);
HXDLIN( 182)			HX_VAR( Int,size);
HXDLIN( 182)			HX_VAR( Float,advance);
HXLINE( 184)			{
HXLINE( 184)				HX_VARI_NAME( Int,_g2,"_g") = (int)0;
HXDLIN( 184)				HX_VARI_NAME( ::Array< ::Dynamic>,_g11,"_g1") = textEngine->layoutGroups;
HXDLIN( 184)				while((_g2 < _g11->length)){
HXLINE( 184)					HX_VARI(  ::openfl::_internal::text::TextLayoutGroup,group) = _g11->__get(_g2).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN( 184)					++_g2;
HXLINE( 186)					Int _hx_tmp32 = group->lineIndex;
HXDLIN( 186)					Int _hx_tmp33 = textField->get_scrollV();
HXDLIN( 186)					if ((_hx_tmp32 < (_hx_tmp33 - (int)1))) {
HXLINE( 186)						continue;
            					}
HXLINE( 187)					Int _hx_tmp34 = group->lineIndex;
HXDLIN( 187)					Int _hx_tmp35 = textField->get_scrollV();
HXDLIN( 187)					if ((_hx_tmp34 > ((_hx_tmp35 + textEngine->bottomScrollV) - (int)2))) {
HXLINE( 187)						goto _hx_goto_1;
            					}
HXLINE( 189)					color2 = group->format->color;
HXLINE( 190)					r = ((Float)hx::UShr(((int)color2 & (int)(int)16711680),(int)16) / (Float)(int)255);
HXLINE( 191)					g = ((Float)hx::UShr(((int)color2 & (int)(int)65280),(int)8) / (Float)(int)255);
HXLINE( 192)					b = ((Float)((int)color2 & (int)(int)255) / (Float)(int)255);
HXLINE( 194)					cairo->setSourceRGB(r,g,b);
HXLINE( 196)					font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(group->format);
HXLINE( 198)					Bool _hx_tmp36;
HXDLIN( 198)					Bool _hx_tmp37 = hx::IsNotNull( font );
HXDLIN( 198)					if (_hx_tmp37) {
HXLINE( 198)						_hx_tmp36 = hx::IsNotNull( group->format->size );
            					}
            					else {
HXLINE( 198)						_hx_tmp36 = false;
            					}
HXDLIN( 198)					if (_hx_tmp36) {
HXLINE( 200)						Bool _hx_tmp38 = hx::IsNotNull( textEngine->_hx___cairoFont );
HXDLIN( 200)						if (_hx_tmp38) {
HXLINE( 202)							if (hx::IsNotEq( textEngine->_hx___font,font )) {
HXLINE( 204)								textEngine->_hx___cairoFont = null();
            							}
            						}
HXLINE( 210)						Bool _hx_tmp39 = hx::IsNull( textEngine->_hx___cairoFont );
HXDLIN( 210)						if (_hx_tmp39) {
HXLINE( 212)							textEngine->_hx___font = font;
HXLINE( 213)							textEngine->_hx___cairoFont = ::lime::graphics::cairo::_CairoFTFontFace::CairoFTFontFace_Impl__obj::create(font,(int)0);
            						}
HXLINE( 217)						cairo->set_fontFace(textEngine->_hx___cairoFont);
HXLINE( 219)						size = ::Std_obj::_hx_int(group->format->size);
HXLINE( 220)						cairo->setFontSize(size);
HXLINE( 222)						Float _hx_tmp40 = (group->offsetX + scrollX);
HXDLIN( 222)						Float _hx_tmp41 = ((group->offsetY + group->ascent) + scrollY);
HXDLIN( 222)						cairo->moveTo(_hx_tmp40,_hx_tmp41);
HXLINE( 243)						::String _hx_tmp42 = text.substring(group->startIndex,group->endIndex);
HXDLIN( 243)						cairo->showText(_hx_tmp42);
HXLINE( 245)						Bool _hx_tmp43;
HXDLIN( 245)						if ((textField->_hx___caretIndex > (int)-1)) {
HXLINE( 245)							_hx_tmp43 = textEngine->selectable;
            						}
            						else {
HXLINE( 245)							_hx_tmp43 = false;
            						}
HXDLIN( 245)						if (_hx_tmp43) {
HXLINE( 247)							Bool _hx_tmp44 = (textField->_hx___selectionIndex == textField->_hx___caretIndex);
HXDLIN( 247)							if (_hx_tmp44) {
HXLINE( 249)								Bool _hx_tmp45;
HXDLIN( 249)								Bool _hx_tmp46;
HXDLIN( 249)								if (textField->_hx___showCursor) {
HXLINE( 249)									_hx_tmp46 = (group->startIndex <= textField->_hx___caretIndex);
            								}
            								else {
HXLINE( 249)									_hx_tmp46 = false;
            								}
HXDLIN( 249)								if (_hx_tmp46) {
HXLINE( 249)									_hx_tmp45 = (group->endIndex >= textField->_hx___caretIndex);
            								}
            								else {
HXLINE( 249)									_hx_tmp45 = false;
            								}
HXDLIN( 249)								if (_hx_tmp45) {
HXLINE( 251)									advance = ((Float)0.0);
HXLINE( 253)									{
HXLINE( 253)										HX_VARI( Int,_g3) = (int)0;
HXDLIN( 253)										HX_VARI_NAME( Int,_g21,"_g2") = (textField->_hx___caretIndex - group->startIndex);
HXDLIN( 253)										while((_g3 < _g21)){
HXLINE( 253)											HX_VARI_NAME( Int,i1,"i") = _g3++;
HXLINE( 255)											if ((group->advances->length <= i1)) {
HXLINE( 255)												goto _hx_goto_2;
            											}
HXLINE( 256)											hx::AddEq(advance,group->advances->__get(i1));
            										}
            										_hx_goto_2:;
            									}
HXLINE( 260)									Float _hx_tmp47 = (group->offsetX + advance);
HXDLIN( 260)									Int _hx_tmp48 = ::Math_obj::floor(_hx_tmp47);
HXDLIN( 260)									Float _hx_tmp49 = (_hx_tmp48 + ((Float)0.5));
HXDLIN( 260)									Float _hx_tmp50 = (group->offsetY + ((Float)0.5));
HXDLIN( 260)									cairo->moveTo(_hx_tmp49,_hx_tmp50);
HXLINE( 261)									cairo->set_lineWidth((int)1);
HXLINE( 262)									Float _hx_tmp51 = (group->offsetX + advance);
HXDLIN( 262)									Int _hx_tmp52 = ::Math_obj::floor(_hx_tmp51);
HXDLIN( 262)									Float _hx_tmp53 = (_hx_tmp52 + ((Float)0.5));
HXDLIN( 262)									Float _hx_tmp54 = ((group->offsetY + group->height) - (int)1);
HXDLIN( 262)									cairo->lineTo(_hx_tmp53,_hx_tmp54);
HXLINE( 263)									cairo->stroke();
            								}
            							}
            							else {
HXLINE( 267)								Bool _hx_tmp55;
HXDLIN( 267)								Bool _hx_tmp56;
HXDLIN( 267)								if ((group->startIndex <= textField->_hx___caretIndex)) {
HXLINE( 267)									_hx_tmp56 = (group->endIndex >= textField->_hx___caretIndex);
            								}
            								else {
HXLINE( 267)									_hx_tmp56 = false;
            								}
HXDLIN( 267)								if (!(_hx_tmp56)) {
HXLINE( 267)									if ((group->startIndex <= textField->_hx___selectionIndex)) {
HXLINE( 267)										_hx_tmp55 = (group->endIndex >= textField->_hx___selectionIndex);
            									}
            									else {
HXLINE( 267)										_hx_tmp55 = false;
            									}
            								}
            								else {
HXLINE( 267)									_hx_tmp55 = true;
            								}
HXDLIN( 267)								if (_hx_tmp55) {
HXLINE( 269)									Float _hx_tmp57 = ::Math_obj::min(textField->_hx___selectionIndex,textField->_hx___caretIndex);
HXDLIN( 269)									HX_VARI( Int,selectionStart) = ::Std_obj::_hx_int(_hx_tmp57);
HXLINE( 270)									Float _hx_tmp58 = ::Math_obj::max(textField->_hx___selectionIndex,textField->_hx___caretIndex);
HXDLIN( 270)									HX_VARI( Int,selectionEnd) = ::Std_obj::_hx_int(_hx_tmp58);
HXLINE( 272)									Bool _hx_tmp59 = (group->startIndex > selectionStart);
HXDLIN( 272)									if (_hx_tmp59) {
HXLINE( 274)										selectionStart = group->startIndex;
            									}
HXLINE( 278)									Bool _hx_tmp60 = (group->endIndex < selectionEnd);
HXDLIN( 278)									if (_hx_tmp60) {
HXLINE( 280)										selectionEnd = group->endIndex;
            									}
HXLINE( 284)									HX_VAR(  ::openfl::geom::Rectangle,start);
HXDLIN( 284)									HX_VAR(  ::openfl::geom::Rectangle,end);
HXLINE( 286)									start = textField->getCharBoundaries(selectionStart);
HXLINE( 288)									Bool _hx_tmp61 = (selectionEnd >= textEngine->text.length);
HXDLIN( 288)									if (_hx_tmp61) {
HXLINE( 290)										Int _hx_tmp62 = (textEngine->text.length - (int)1);
HXDLIN( 290)										end = textField->getCharBoundaries(_hx_tmp62);
HXLINE( 291)										hx::AddEq(end->x,(end->width + (int)2));
            									}
            									else {
HXLINE( 295)										end = textField->getCharBoundaries(selectionEnd);
            									}
HXLINE( 299)									Bool _hx_tmp63;
HXDLIN( 299)									Bool _hx_tmp64 = hx::IsNotNull( start );
HXDLIN( 299)									if (_hx_tmp64) {
HXLINE( 299)										_hx_tmp63 = hx::IsNotNull( end );
            									}
            									else {
HXLINE( 299)										_hx_tmp63 = false;
            									}
HXDLIN( 299)									if (_hx_tmp63) {
HXLINE( 301)										cairo->setSourceRGB((int)0,(int)0,(int)0);
HXLINE( 302)										Float _hx_tmp65 = start->x;
HXDLIN( 302)										Float _hx_tmp66 = start->y;
HXDLIN( 302)										Float _hx_tmp67 = (end->x - start->x);
HXDLIN( 302)										cairo->rectangle(_hx_tmp65,_hx_tmp66,_hx_tmp67,group->height);
HXLINE( 303)										cairo->fill();
HXLINE( 304)										cairo->setSourceRGB((int)1,(int)1,(int)1);
HXLINE( 308)										Float _hx_tmp68 = (scrollX + start->x);
HXDLIN( 308)										Float _hx_tmp69 = ((group->offsetY + group->ascent) + scrollY);
HXDLIN( 308)										cairo->moveTo(_hx_tmp68,_hx_tmp69);
HXLINE( 309)										::String _hx_tmp70 = text.substring(selectionStart,selectionEnd);
HXDLIN( 309)										cairo->showText(_hx_tmp70);
            									}
            								}
            							}
            						}
            					}
            				}
            				_hx_goto_1:;
            			}
            		}
            		else {
HXLINE( 321)			Bool _hx_tmp71;
HXDLIN( 321)			Bool _hx_tmp72;
HXDLIN( 321)			if ((textField->_hx___caretIndex > (int)-1)) {
HXLINE( 321)				_hx_tmp72 = textEngine->selectable;
            			}
            			else {
HXLINE( 321)				_hx_tmp72 = false;
            			}
HXDLIN( 321)			if (_hx_tmp72) {
HXLINE( 321)				_hx_tmp71 = textField->_hx___showCursor;
            			}
            			else {
HXLINE( 321)				_hx_tmp71 = false;
            			}
HXDLIN( 321)			if (_hx_tmp71) {
HXLINE( 323)				HX_VARI_NAME( Int,scrollX1,"scrollX") = -(textField->get_scrollH());
HXLINE( 324)				HX_VARI_NAME( Float,scrollY1,"scrollY") = ((Float)0.0);
HXLINE( 326)				{
HXLINE( 326)					HX_VARI_NAME( Int,_g12,"_g1") = (int)0;
HXDLIN( 326)					Int _hx_tmp73 = textField->get_scrollV();
HXDLIN( 326)					HX_VARI_NAME( Int,_g4,"_g") = (_hx_tmp73 - (int)1);
HXDLIN( 326)					while((_g12 < _g4)){
HXLINE( 326)						HX_VARI_NAME( Int,i2,"i") = _g12++;
HXLINE( 328)						hx::SubEq(scrollY1,textEngine->lineHeights->__get(i2));
            					}
            				}
HXLINE( 332)				HX_VARI_NAME(  ::Dynamic,color3,"color") = textField->get_defaultTextFormat()->color;
HXLINE( 337)				cairo->setSourceRGB(((Float)hx::UShr(((int)color3 & (int)(int)16711680),(int)16) / (Float)(int)255),((Float)hx::UShr(((int)color3 & (int)(int)65280),(int)8) / (Float)(int)255),((Float)((int)color3 & (int)(int)255) / (Float)(int)255));
HXLINE( 339)				cairo->newPath();
HXLINE( 340)				cairo->moveTo((scrollX1 + ((Float)2.5)),(scrollY1 + ((Float)2.5)));
HXLINE( 341)				cairo->set_lineWidth((int)1);
HXLINE( 342)				Float _hx_tmp74 = (scrollX1 + ((Float)2.5));
HXDLIN( 342)				 ::openfl::text::TextFormat _hx_tmp75 = textField->get_defaultTextFormat();
HXDLIN( 342)				Float _hx_tmp76 = ::openfl::_internal::text::TextEngine_obj::getFormatHeight(_hx_tmp75);
HXDLIN( 342)				cairo->lineTo(_hx_tmp74,((scrollY1 + _hx_tmp76) - (int)1));
HXLINE( 343)				cairo->stroke();
HXLINE( 344)				cairo->closePath();
            			}
            		}
HXLINE( 348)		graphics->_hx___bitmap->image->dirty = true;
HXLINE( 349)		graphics->_hx___bitmap->image->version++;
HXLINE( 350)		textField->_hx___dirty = false;
HXLINE( 351)		graphics->set___dirty(false);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(CairoTextField_obj,render,(void))


CairoTextField_obj::CairoTextField_obj()
{
}

bool CairoTextField_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"render") ) { outValue = render_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *CairoTextField_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *CairoTextField_obj_sStaticStorageInfo = 0;
#endif

static void CairoTextField_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(CairoTextField_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void CairoTextField_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(CairoTextField_obj::__mClass,"__mClass");
};

#endif

hx::Class CairoTextField_obj::__mClass;

static ::String CairoTextField_obj_sStaticFields[] = {
	HX_HCSTRING("render","\x56","\x6b","\x29","\x05"),
	::String(null())
};

void CairoTextField_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._internal.renderer.cairo.CairoTextField","\x46","\x1d","\x84","\xa5");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &CairoTextField_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = CairoTextField_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(CairoTextField_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< CairoTextField_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = CairoTextField_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CairoTextField_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CairoTextField_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace _internal
} // end namespace renderer
} // end namespace cairo
