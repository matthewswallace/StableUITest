// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_lime_graphics_GLRenderContext
#include <lime/graphics/GLRenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GL
#include <lime/graphics/opengl/GL.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_AbstractBlendModeManager
#include <openfl/_internal/renderer/AbstractBlendModeManager.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_GLBlendModeManager
#include <openfl/_internal/renderer/opengl/GLBlendModeManager.h>
#endif

namespace openfl{
namespace _internal{
namespace renderer{
namespace opengl{

void GLBlendModeManager_obj::__construct( ::lime::graphics::GLRenderContext gl){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.GLBlendModeManager","new",0xd6095494,"openfl._internal.renderer.opengl.GLBlendModeManager.new","openfl/_internal/renderer/opengl/GLBlendModeManager.hx",16,0xe1d930ba)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(gl,"gl")
HXLINE(  18)		super::__construct();
HXLINE(  20)		this->gl = gl;
HXLINE(  22)		this->setBlendMode((int)10);
HXLINE(  23)		{
HXLINE(  23)			Int cap = gl->BLEND;
HXDLIN(  23)			::lime::graphics::opengl::GL_obj::cffi_lime_gl_enable(cap);
            		}
            	}

Dynamic GLBlendModeManager_obj::__CreateEmpty() { return new GLBlendModeManager_obj; }

hx::ObjectPtr< GLBlendModeManager_obj > GLBlendModeManager_obj::__new( ::lime::graphics::GLRenderContext gl)
{
	hx::ObjectPtr< GLBlendModeManager_obj > _hx_result = new GLBlendModeManager_obj();
	_hx_result->__construct(gl);
	return _hx_result;
}

Dynamic GLBlendModeManager_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< GLBlendModeManager_obj > _hx_result = new GLBlendModeManager_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void GLBlendModeManager_obj::setBlendMode( ::Dynamic blendMode){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.GLBlendModeManager","setBlendMode",0xf121f99e,"openfl._internal.renderer.opengl.GLBlendModeManager.setBlendMode","openfl/_internal/renderer/opengl/GLBlendModeManager.hx",28,0xe1d930ba)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(blendMode,"blendMode")
HXLINE(  30)		if (hx::IsEq( this->currentBlendMode,blendMode )) {
HXLINE(  30)			return;
            		}
HXLINE(  32)		this->currentBlendMode = blendMode;
HXLINE(  34)		 ::Dynamic _hx_switch_0 = blendMode;
            		if (  (_hx_switch_0==(int)0) ){
HXLINE(  38)			{
HXLINE(  38)				Int mode = this->gl->FUNC_ADD;
HXDLIN(  38)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_blend_equation(mode);
            			}
HXLINE(  39)			{
HXLINE(  39)				Int sfactor = this->gl->ONE;
HXDLIN(  39)				Int dfactor = this->gl->ONE;
HXDLIN(  39)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_blend_func(sfactor,dfactor);
            			}
HXLINE(  36)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==(int)2) ){
HXLINE(  59)			::lime::graphics::opengl::GL_obj::cffi_lime_gl_blend_equation((int)32775);
HXLINE(  60)			{
HXLINE(  60)				Int sfactor1 = this->gl->ONE;
HXDLIN(  60)				Int dfactor1 = this->gl->ONE;
HXDLIN(  60)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_blend_func(sfactor1,dfactor1);
            			}
HXLINE(  57)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==(int)8) ){
HXLINE(  64)			::lime::graphics::opengl::GL_obj::cffi_lime_gl_blend_equation((int)32776);
HXLINE(  65)			{
HXLINE(  65)				Int sfactor2 = this->gl->ONE;
HXDLIN(  65)				Int dfactor2 = this->gl->ONE;
HXDLIN(  65)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_blend_func(sfactor2,dfactor2);
            			}
HXLINE(  62)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==(int)9) ){
HXLINE(  43)			{
HXLINE(  43)				Int mode1 = this->gl->FUNC_ADD;
HXDLIN(  43)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_blend_equation(mode1);
            			}
HXLINE(  44)			{
HXLINE(  44)				Int sfactor3 = this->gl->DST_COLOR;
HXDLIN(  44)				Int dfactor3 = this->gl->ONE_MINUS_SRC_ALPHA;
HXDLIN(  44)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_blend_func(sfactor3,dfactor3);
            			}
HXLINE(  41)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==(int)12) ){
HXLINE(  48)			{
HXLINE(  48)				Int mode2 = this->gl->FUNC_ADD;
HXDLIN(  48)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_blend_equation(mode2);
            			}
HXLINE(  49)			{
HXLINE(  49)				Int sfactor4 = this->gl->ONE;
HXDLIN(  49)				Int dfactor4 = this->gl->ONE_MINUS_SRC_COLOR;
HXDLIN(  49)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_blend_func(sfactor4,dfactor4);
            			}
HXLINE(  46)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==(int)14) ){
HXLINE(  53)			{
HXLINE(  53)				Int mode3 = this->gl->FUNC_REVERSE_SUBTRACT;
HXDLIN(  53)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_blend_equation(mode3);
            			}
HXLINE(  54)			{
HXLINE(  54)				Int sfactor5 = this->gl->ONE;
HXDLIN(  54)				Int dfactor5 = this->gl->ONE;
HXDLIN(  54)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_blend_func(sfactor5,dfactor5);
            			}
HXLINE(  51)			goto _hx_goto_0;
            		}
            		/* default */{
HXLINE(  70)			{
HXLINE(  70)				Int mode4 = this->gl->FUNC_ADD;
HXDLIN(  70)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_blend_equation(mode4);
            			}
HXLINE(  71)			{
HXLINE(  71)				Int sfactor6 = this->gl->SRC_ALPHA;
HXDLIN(  71)				Int dfactor6 = this->gl->ONE_MINUS_SRC_ALPHA;
HXDLIN(  71)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_blend_func(sfactor6,dfactor6);
            			}
            		}
            		_hx_goto_0:;
            	}



GLBlendModeManager_obj::GLBlendModeManager_obj()
{
}

void GLBlendModeManager_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(GLBlendModeManager);
	HX_MARK_MEMBER_NAME(currentBlendMode,"currentBlendMode");
	HX_MARK_MEMBER_NAME(gl,"gl");
	HX_MARK_END_CLASS();
}

void GLBlendModeManager_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(currentBlendMode,"currentBlendMode");
	HX_VISIT_MEMBER_NAME(gl,"gl");
}

hx::Val GLBlendModeManager_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gl") ) { return hx::Val( gl); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"setBlendMode") ) { return hx::Val( setBlendMode_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"currentBlendMode") ) { return hx::Val( currentBlendMode); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val GLBlendModeManager_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gl") ) { gl=inValue.Cast<  ::lime::graphics::GLRenderContext >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"currentBlendMode") ) { currentBlendMode=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void GLBlendModeManager_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("currentBlendMode","\xdb","\x58","\x68","\xff"));
	outFields->push(HX_HCSTRING("gl","\x25","\x5a","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo GLBlendModeManager_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(GLBlendModeManager_obj,currentBlendMode),HX_HCSTRING("currentBlendMode","\xdb","\x58","\x68","\xff")},
	{hx::fsObject /*::lime::graphics::GLRenderContext*/ ,(int)offsetof(GLBlendModeManager_obj,gl),HX_HCSTRING("gl","\x25","\x5a","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *GLBlendModeManager_obj_sStaticStorageInfo = 0;
#endif

static ::String GLBlendModeManager_obj_sMemberFields[] = {
	HX_HCSTRING("currentBlendMode","\xdb","\x58","\x68","\xff"),
	HX_HCSTRING("gl","\x25","\x5a","\x00","\x00"),
	HX_HCSTRING("setBlendMode","\x52","\xa4","\x87","\x30"),
	::String(null()) };

static void GLBlendModeManager_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(GLBlendModeManager_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void GLBlendModeManager_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(GLBlendModeManager_obj::__mClass,"__mClass");
};

#endif

hx::Class GLBlendModeManager_obj::__mClass;

void GLBlendModeManager_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._internal.renderer.opengl.GLBlendModeManager","\xa2","\xba","\x7e","\x51");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = GLBlendModeManager_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(GLBlendModeManager_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< GLBlendModeManager_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = GLBlendModeManager_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GLBlendModeManager_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GLBlendModeManager_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace _internal
} // end namespace renderer
} // end namespace opengl
