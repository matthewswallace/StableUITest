// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_Timer
#include <haxe/Timer.h>
#endif
#ifndef INCLUDED_lime__backend_native_NativeWindow
#include <lime/_backend/native/NativeWindow.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app__Event_String_Void
#include <lime/app/_Event_String_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void
#include <lime/app/_Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void.h>
#endif
#ifndef INCLUDED_lime_graphics_CanvasRenderContext
#include <lime/graphics/CanvasRenderContext.h>
#endif
#ifndef INCLUDED_lime_system_Clipboard
#include <lime/system/Clipboard.h>
#endif
#ifndef INCLUDED_lime_ui_MouseCursor
#include <lime/ui/MouseCursor.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_lime_ui__KeyModifier_KeyModifier_Impl_
#include <lime/ui/_KeyModifier/KeyModifier_Impl_.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_RenderSession
#include <openfl/_internal/renderer/RenderSession.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_cairo_CairoTextField
#include <openfl/_internal/renderer/cairo/CairoTextField.h>
#endif
#ifndef INCLUDED_openfl__internal_text_TextEngine
#include <openfl/_internal/text/TextEngine.h>
#endif
#ifndef INCLUDED_openfl__internal_text_TextFormatRange
#include <openfl/_internal/text/TextFormatRange.h>
#endif
#ifndef INCLUDED_openfl__internal_text_TextLayoutGroup
#include <openfl/_internal/text/TextLayoutGroup.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_FocusEvent
#include <openfl/events/FocusEvent.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif
#ifndef INCLUDED_openfl_text_TextLineMetrics
#include <openfl/text/TextLineMetrics.h>
#endif
#ifndef INCLUDED_openfl_text__TextFormatAlign_TextFormatAlign_Impl_
#include <openfl/text/_TextFormatAlign/TextFormatAlign_Impl_.h>
#endif

namespace openfl{
namespace text{

void TextField_obj::__construct(){
            	HX_STACK_FRAME("openfl.text.TextField","new",0xbd7676bc,"openfl.text.TextField.new","openfl/text/TextField.hx",108,0xccf02094)
            	HX_STACK_THIS(this)
HXLINE( 110)		super::__construct();
HXLINE( 112)		this->_hx___caretIndex = (int)-1;
HXLINE( 113)		this->_hx___displayAsPassword = false;
HXLINE( 114)		this->_hx___graphics =  ::openfl::display::Graphics_obj::__new(hx::ObjectPtr<OBJ_>(this));
HXLINE( 115)		this->_hx___textEngine =  ::openfl::_internal::text::TextEngine_obj::__new(hx::ObjectPtr<OBJ_>(this));
HXLINE( 116)		this->_hx___layoutDirty = true;
HXLINE( 117)		this->_hx___tabEnabled = true;
HXLINE( 118)		this->_hx___mouseWheelEnabled = true;
HXLINE( 119)		this->_hx___text = HX_("",00,00,00,00);
HXLINE( 121)		Bool _hx_tmp = hx::IsNull( ::openfl::text::TextField_obj::_hx___defaultTextFormat );
HXDLIN( 121)		if (_hx_tmp) {
HXLINE( 123)			::openfl::text::TextField_obj::_hx___defaultTextFormat =  ::openfl::text::TextFormat_obj::__new(HX_("Times New Roman",03,86,44,c3),(int)12,(int)0,false,false,false,HX_("",00,00,00,00),HX_("",00,00,00,00),(int)3,(int)0,(int)0,(int)0,(int)0);
HXLINE( 124)			::openfl::text::TextField_obj::_hx___defaultTextFormat->blockIndent = (int)0;
HXLINE( 125)			::openfl::text::TextField_obj::_hx___defaultTextFormat->bullet = false;
HXLINE( 126)			::openfl::text::TextField_obj::_hx___defaultTextFormat->letterSpacing = (int)0;
HXLINE( 127)			::openfl::text::TextField_obj::_hx___defaultTextFormat->kerning = false;
            		}
HXLINE( 131)		this->_hx___textFormat = ::openfl::text::TextField_obj::_hx___defaultTextFormat->clone();
HXLINE( 132)		this->_hx___textEngine->textFormatRanges->push( ::openfl::_internal::text::TextFormatRange_obj::__new(this->_hx___textFormat,(int)0,(int)0));
HXLINE( 134)		this->addEventListener(HX_("mouseDown",27,b1,c2,ee),this->this_onMouseDown_dyn(),null(),null(),null());
            	}

Dynamic TextField_obj::__CreateEmpty() { return new TextField_obj; }

hx::ObjectPtr< TextField_obj > TextField_obj::__new()
{
	hx::ObjectPtr< TextField_obj > _hx_result = new TextField_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic TextField_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TextField_obj > _hx_result = new TextField_obj();
	_hx_result->__construct();
	return _hx_result;
}

void TextField_obj::appendText(::String text){
            	HX_STACK_FRAME("openfl.text.TextField","appendText",0xaa44eccb,"openfl.text.TextField.appendText","openfl/text/TextField.hx",139,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(text,"text")
HXLINE( 141)		hx::AddEq(this->_hx___text,text);
HXLINE( 142)		Int _hx_tmp = (this->_hx___textEngine->textFormatRanges->length - (int)1);
HXDLIN( 142)		this->_hx___textEngine->textFormatRanges->__get(_hx_tmp).StaticCast<  ::openfl::_internal::text::TextFormatRange >()->end = this->_hx___text.length;
HXLINE( 144)		this->_hx___dirty = true;
HXLINE( 145)		this->_hx___layoutDirty = true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,appendText,(void))

 ::openfl::geom::Rectangle TextField_obj::getCharBoundaries(Int charIndex){
            	HX_STACK_FRAME("openfl.text.TextField","getCharBoundaries",0xf44814d0,"openfl.text.TextField.getCharBoundaries","openfl/text/TextField.hx",150,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(charIndex,"charIndex")
HXLINE( 152)		Bool _hx_tmp;
HXDLIN( 152)		if ((charIndex >= (int)0)) {
HXLINE( 152)			_hx_tmp = (charIndex > (this->_hx___text.length - (int)1));
            		}
            		else {
HXLINE( 152)			_hx_tmp = true;
            		}
HXDLIN( 152)		if (_hx_tmp) {
HXLINE( 152)			return null();
            		}
HXLINE( 154)		this->_hx___updateLayout();
HXLINE( 156)		{
HXLINE( 156)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 156)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->_hx___textEngine->layoutGroups;
HXDLIN( 156)			while((_g < _g1->length)){
HXLINE( 156)				HX_VARI(  ::openfl::_internal::text::TextLayoutGroup,group) = _g1->__get(_g).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN( 156)				++_g;
HXLINE( 158)				Bool _hx_tmp1;
HXDLIN( 158)				if ((charIndex >= group->startIndex)) {
HXLINE( 158)					_hx_tmp1 = (charIndex <= group->endIndex);
            				}
            				else {
HXLINE( 158)					_hx_tmp1 = false;
            				}
HXDLIN( 158)				if (_hx_tmp1) {
HXLINE( 160)					HX_VARI( Float,x) = group->offsetX;
HXLINE( 162)					{
HXLINE( 162)						HX_VARI( Int,_g3) = (int)0;
HXDLIN( 162)						HX_VARI( Int,_g2) = (charIndex - group->startIndex);
HXDLIN( 162)						while((_g3 < _g2)){
HXLINE( 162)							HX_VARI( Int,i) = _g3++;
HXLINE( 164)							hx::AddEq(x,group->advances->__get(i));
            						}
            					}
HXLINE( 168)					return  ::openfl::geom::Rectangle_obj::__new(x,group->offsetY,group->advances->__get((charIndex - group->startIndex)),(group->ascent + group->descent));
            				}
            			}
            		}
HXLINE( 174)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getCharBoundaries,return )

Int TextField_obj::getCharIndexAtPoint(Float x,Float y){
            	HX_STACK_FRAME("openfl.text.TextField","getCharIndexAtPoint",0x758b0c73,"openfl.text.TextField.getCharIndexAtPoint","openfl/text/TextField.hx",179,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE( 181)		Bool _hx_tmp;
HXDLIN( 181)		Bool _hx_tmp1;
HXDLIN( 181)		Bool _hx_tmp2;
HXDLIN( 181)		if (!((x <= (int)2))) {
HXLINE( 181)			Float _hx_tmp3 = this->get_width();
HXDLIN( 181)			_hx_tmp2 = (x > (_hx_tmp3 + (int)4));
            		}
            		else {
HXLINE( 181)			_hx_tmp2 = true;
            		}
HXDLIN( 181)		if (!(_hx_tmp2)) {
HXLINE( 181)			_hx_tmp1 = (y <= (int)0);
            		}
            		else {
HXLINE( 181)			_hx_tmp1 = true;
            		}
HXDLIN( 181)		if (!(_hx_tmp1)) {
HXLINE( 181)			Float _hx_tmp4 = this->get_height();
HXDLIN( 181)			_hx_tmp = (y > (_hx_tmp4 + (int)4));
            		}
            		else {
HXLINE( 181)			_hx_tmp = true;
            		}
HXDLIN( 181)		if (_hx_tmp) {
HXLINE( 181)			return (int)-1;
            		}
HXLINE( 183)		this->_hx___updateLayout();
HXLINE( 185)		Int _hx_tmp5 = this->get_scrollH();
HXDLIN( 185)		hx::AddEq(x,_hx_tmp5);
HXLINE( 187)		{
HXLINE( 187)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 187)			Int _hx_tmp6 = this->get_scrollV();
HXDLIN( 187)			HX_VARI( Int,_g) = (_hx_tmp6 - (int)1);
HXDLIN( 187)			while((_g1 < _g)){
HXLINE( 187)				HX_VARI( Int,i) = _g1++;
HXLINE( 189)				hx::AddEq(y,this->_hx___textEngine->lineHeights->__get(i));
            			}
            		}
HXLINE( 193)		{
HXLINE( 193)			HX_VARI_NAME( Int,_g2,"_g") = (int)0;
HXDLIN( 193)			HX_VARI_NAME( ::Array< ::Dynamic>,_g11,"_g1") = this->_hx___textEngine->layoutGroups;
HXDLIN( 193)			while((_g2 < _g11->length)){
HXLINE( 193)				HX_VARI(  ::openfl::_internal::text::TextLayoutGroup,group) = _g11->__get(_g2).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN( 193)				++_g2;
HXLINE( 195)				Bool _hx_tmp7;
HXDLIN( 195)				if ((y >= group->offsetY)) {
HXLINE( 195)					_hx_tmp7 = (y <= (group->offsetY + group->height));
            				}
            				else {
HXLINE( 195)					_hx_tmp7 = false;
            				}
HXDLIN( 195)				if (_hx_tmp7) {
HXLINE( 197)					Bool _hx_tmp8;
HXDLIN( 197)					if ((x >= group->offsetX)) {
HXLINE( 197)						_hx_tmp8 = (x <= (group->offsetX + group->width));
            					}
            					else {
HXLINE( 197)						_hx_tmp8 = false;
            					}
HXDLIN( 197)					if (_hx_tmp8) {
HXLINE( 199)						HX_VARI( Float,advance) = ((Float)0.0);
HXLINE( 201)						{
HXLINE( 201)							HX_VARI( Int,_g3) = (int)0;
HXDLIN( 201)							HX_VARI_NAME( Int,_g21,"_g2") = group->advances->length;
HXDLIN( 201)							while((_g3 < _g21)){
HXLINE( 201)								HX_VARI_NAME( Int,i1,"i") = _g3++;
HXLINE( 203)								hx::AddEq(advance,group->advances->__get(i1));
HXLINE( 205)								if ((x <= (group->offsetX + advance))) {
HXLINE( 207)									return (group->startIndex + i1);
            								}
            							}
            						}
HXLINE( 213)						return group->endIndex;
            					}
            				}
            			}
            		}
HXLINE( 221)		return (int)-1;
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,getCharIndexAtPoint,return )

Int TextField_obj::getFirstCharInParagraph(Int charIndex){
            	HX_STACK_FRAME("openfl.text.TextField","getFirstCharInParagraph",0xe06fd955,"openfl.text.TextField.getFirstCharInParagraph","openfl/text/TextField.hx",226,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(charIndex,"charIndex")
HXLINE( 228)		Bool _hx_tmp;
HXDLIN( 228)		if ((charIndex >= (int)0)) {
HXLINE( 228)			_hx_tmp = (charIndex > (this->_hx___text.length - (int)1));
            		}
            		else {
HXLINE( 228)			_hx_tmp = true;
            		}
HXDLIN( 228)		if (_hx_tmp) {
HXLINE( 228)			return (int)0;
            		}
HXLINE( 230)		HX_VARI( Int,index) = this->_hx___textEngine->getLineBreakIndex(null());
HXLINE( 231)		HX_VARI( Int,startIndex) = (int)0;
HXLINE( 233)		while((index > (int)-1)){
HXLINE( 235)			if ((index <= charIndex)) {
HXLINE( 237)				startIndex = (index + (int)1);
            			}
            			else {
HXLINE( 239)				if ((index > charIndex)) {
HXLINE( 241)					goto _hx_goto_5;
            				}
            			}
HXLINE( 245)			index = this->_hx___textEngine->getLineBreakIndex((index + (int)1));
            		}
            		_hx_goto_5:;
HXLINE( 249)		return startIndex;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getFirstCharInParagraph,return )

Int TextField_obj::getLineIndexAtPoint(Float x,Float y){
            	HX_STACK_FRAME("openfl.text.TextField","getLineIndexAtPoint",0x633efa91,"openfl.text.TextField.getLineIndexAtPoint","openfl/text/TextField.hx",254,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE( 256)		this->_hx___updateLayout();
HXLINE( 258)		Bool _hx_tmp;
HXDLIN( 258)		Bool _hx_tmp1;
HXDLIN( 258)		Bool _hx_tmp2;
HXDLIN( 258)		if (!((x <= (int)2))) {
HXLINE( 258)			Float _hx_tmp3 = this->get_width();
HXDLIN( 258)			_hx_tmp2 = (x > (_hx_tmp3 + (int)4));
            		}
            		else {
HXLINE( 258)			_hx_tmp2 = true;
            		}
HXDLIN( 258)		if (!(_hx_tmp2)) {
HXLINE( 258)			_hx_tmp1 = (y <= (int)0);
            		}
            		else {
HXLINE( 258)			_hx_tmp1 = true;
            		}
HXDLIN( 258)		if (!(_hx_tmp1)) {
HXLINE( 258)			Float _hx_tmp4 = this->get_height();
HXDLIN( 258)			_hx_tmp = (y > (_hx_tmp4 + (int)4));
            		}
            		else {
HXLINE( 258)			_hx_tmp = true;
            		}
HXDLIN( 258)		if (_hx_tmp) {
HXLINE( 258)			return (int)-1;
            		}
HXLINE( 260)		{
HXLINE( 260)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 260)			Int _hx_tmp5 = this->get_scrollV();
HXDLIN( 260)			HX_VARI( Int,_g) = (_hx_tmp5 - (int)1);
HXDLIN( 260)			while((_g1 < _g)){
HXLINE( 260)				HX_VARI( Int,i) = _g1++;
HXLINE( 262)				hx::AddEq(y,this->_hx___textEngine->lineHeights->__get(i));
            			}
            		}
HXLINE( 266)		{
HXLINE( 266)			HX_VARI_NAME( Int,_g2,"_g") = (int)0;
HXDLIN( 266)			HX_VARI_NAME( ::Array< ::Dynamic>,_g11,"_g1") = this->_hx___textEngine->layoutGroups;
HXDLIN( 266)			while((_g2 < _g11->length)){
HXLINE( 266)				HX_VARI(  ::openfl::_internal::text::TextLayoutGroup,group) = _g11->__get(_g2).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN( 266)				++_g2;
HXLINE( 268)				Bool _hx_tmp6;
HXDLIN( 268)				if ((y >= group->offsetY)) {
HXLINE( 268)					_hx_tmp6 = (y <= (group->offsetY + group->height));
            				}
            				else {
HXLINE( 268)					_hx_tmp6 = false;
            				}
HXDLIN( 268)				if (_hx_tmp6) {
HXLINE( 270)					return group->lineIndex;
            				}
            			}
            		}
HXLINE( 276)		return (int)-1;
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,getLineIndexAtPoint,return )

Int TextField_obj::getLineIndexOfChar(Int charIndex){
            	HX_STACK_FRAME("openfl.text.TextField","getLineIndexOfChar",0xcab049d9,"openfl.text.TextField.getLineIndexOfChar","openfl/text/TextField.hx",281,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(charIndex,"charIndex")
HXLINE( 283)		Bool _hx_tmp;
HXDLIN( 283)		if ((charIndex >= (int)0)) {
HXLINE( 283)			_hx_tmp = (charIndex > (this->_hx___text.length - (int)1));
            		}
            		else {
HXLINE( 283)			_hx_tmp = true;
            		}
HXDLIN( 283)		if (_hx_tmp) {
HXLINE( 283)			return (int)-1;
            		}
HXLINE( 285)		this->_hx___updateLayout();
HXLINE( 287)		{
HXLINE( 287)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 287)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->_hx___textEngine->layoutGroups;
HXDLIN( 287)			while((_g < _g1->length)){
HXLINE( 287)				HX_VARI(  ::openfl::_internal::text::TextLayoutGroup,group) = _g1->__get(_g).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN( 287)				++_g;
HXLINE( 289)				Bool _hx_tmp1;
HXDLIN( 289)				if ((group->startIndex <= charIndex)) {
HXLINE( 289)					_hx_tmp1 = (group->endIndex >= charIndex);
            				}
            				else {
HXLINE( 289)					_hx_tmp1 = false;
            				}
HXDLIN( 289)				if (_hx_tmp1) {
HXLINE( 291)					return group->lineIndex;
            				}
            			}
            		}
HXLINE( 297)		return (int)-1;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getLineIndexOfChar,return )

Int TextField_obj::getLineLength(Int lineIndex){
            	HX_STACK_FRAME("openfl.text.TextField","getLineLength",0x953e9d8c,"openfl.text.TextField.getLineLength","openfl/text/TextField.hx",302,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(lineIndex,"lineIndex")
HXLINE( 304)		this->_hx___updateLayout();
HXLINE( 306)		Bool _hx_tmp;
HXDLIN( 306)		if ((lineIndex >= (int)0)) {
HXLINE( 306)			_hx_tmp = (lineIndex > (this->_hx___textEngine->numLines - (int)1));
            		}
            		else {
HXLINE( 306)			_hx_tmp = true;
            		}
HXDLIN( 306)		if (_hx_tmp) {
HXLINE( 306)			return (int)0;
            		}
HXLINE( 308)		HX_VARI( Int,startIndex) = (int)-1;
HXLINE( 309)		HX_VARI( Int,endIndex) = (int)-1;
HXLINE( 311)		{
HXLINE( 311)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 311)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->_hx___textEngine->layoutGroups;
HXDLIN( 311)			while((_g < _g1->length)){
HXLINE( 311)				HX_VARI(  ::openfl::_internal::text::TextLayoutGroup,group) = _g1->__get(_g).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN( 311)				++_g;
HXLINE( 313)				if ((group->lineIndex == lineIndex)) {
HXLINE( 315)					Bool _hx_tmp1 = (startIndex == (int)-1);
HXDLIN( 315)					if (_hx_tmp1) {
HXLINE( 315)						startIndex = group->startIndex;
            					}
            				}
            				else {
HXLINE( 317)					if ((group->lineIndex == (lineIndex + (int)1))) {
HXLINE( 319)						endIndex = group->startIndex;
HXLINE( 320)						goto _hx_goto_9;
            					}
            				}
            			}
            			_hx_goto_9:;
            		}
HXLINE( 326)		Bool _hx_tmp2 = (endIndex == (int)-1);
HXDLIN( 326)		if (_hx_tmp2) {
HXLINE( 326)			endIndex = this->_hx___text.length;
            		}
HXLINE( 327)		return (endIndex - startIndex);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getLineLength,return )

 ::openfl::text::TextLineMetrics TextField_obj::getLineMetrics(Int lineIndex){
            	HX_STACK_FRAME("openfl.text.TextField","getLineMetrics",0xa6c52add,"openfl.text.TextField.getLineMetrics","openfl/text/TextField.hx",332,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(lineIndex,"lineIndex")
HXLINE( 334)		this->_hx___updateLayout();
HXLINE( 336)		HX_VARI( Float,ascender) = this->_hx___textEngine->lineAscents->__get(lineIndex);
HXLINE( 337)		HX_VARI( Float,descender) = this->_hx___textEngine->lineDescents->__get(lineIndex);
HXLINE( 338)		HX_VARI( Float,leading) = this->_hx___textEngine->lineLeadings->__get(lineIndex);
HXLINE( 339)		HX_VARI( Float,lineHeight) = this->_hx___textEngine->lineHeights->__get(lineIndex);
HXLINE( 340)		HX_VARI( Float,lineWidth) = this->_hx___textEngine->lineWidths->__get(lineIndex);
HXLINE( 344)		HX_VAR( Float,margin);
HXDLIN( 344)		 ::Dynamic _hx_switch_0 = this->_hx___textFormat->align;
            		if (  (_hx_switch_0==(int)0) ){
HXLINE( 344)			margin = ((Float)(this->_hx___textEngine->width - lineWidth) / (Float)(int)2);
HXDLIN( 344)			goto _hx_goto_10;
            		}
            		if (  (_hx_switch_0==(int)1) ||  (_hx_switch_0==(int)4) ){
HXLINE( 344)			margin = ((this->_hx___textEngine->width - lineWidth) - (int)2);
HXDLIN( 344)			goto _hx_goto_10;
            		}
            		if (  (_hx_switch_0==(int)2) ||  (_hx_switch_0==(int)3) ||  (_hx_switch_0==(int)5) ){
HXLINE( 344)			margin = (int)2;
HXDLIN( 344)			goto _hx_goto_10;
            		}
            		_hx_goto_10:;
HXLINE( 352)		return  ::openfl::text::TextLineMetrics_obj::__new(margin,lineWidth,lineHeight,ascender,descender,leading);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getLineMetrics,return )

Int TextField_obj::getLineOffset(Int lineIndex){
            	HX_STACK_FRAME("openfl.text.TextField","getLineOffset",0x5676a039,"openfl.text.TextField.getLineOffset","openfl/text/TextField.hx",357,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(lineIndex,"lineIndex")
HXLINE( 359)		this->_hx___updateLayout();
HXLINE( 361)		Bool _hx_tmp;
HXDLIN( 361)		if ((lineIndex >= (int)0)) {
HXLINE( 361)			_hx_tmp = (lineIndex > (this->_hx___textEngine->numLines - (int)1));
            		}
            		else {
HXLINE( 361)			_hx_tmp = true;
            		}
HXDLIN( 361)		if (_hx_tmp) {
HXLINE( 361)			return (int)-1;
            		}
HXLINE( 363)		{
HXLINE( 363)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 363)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->_hx___textEngine->layoutGroups;
HXDLIN( 363)			while((_g < _g1->length)){
HXLINE( 363)				HX_VARI(  ::openfl::_internal::text::TextLayoutGroup,group) = _g1->__get(_g).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN( 363)				++_g;
HXLINE( 365)				if ((group->lineIndex == lineIndex)) {
HXLINE( 367)					return group->startIndex;
            				}
            			}
            		}
HXLINE( 373)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getLineOffset,return )

::String TextField_obj::getLineText(Int lineIndex){
            	HX_STACK_FRAME("openfl.text.TextField","getLineText",0xb8113fd3,"openfl.text.TextField.getLineText","openfl/text/TextField.hx",378,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(lineIndex,"lineIndex")
HXLINE( 380)		this->_hx___updateLayout();
HXLINE( 382)		Bool _hx_tmp;
HXDLIN( 382)		if ((lineIndex >= (int)0)) {
HXLINE( 382)			_hx_tmp = (lineIndex > (this->_hx___textEngine->numLines - (int)1));
            		}
            		else {
HXLINE( 382)			_hx_tmp = true;
            		}
HXDLIN( 382)		if (_hx_tmp) {
HXLINE( 382)			return null();
            		}
HXLINE( 384)		HX_VARI( Int,startIndex) = (int)-1;
HXLINE( 385)		HX_VARI( Int,endIndex) = (int)-1;
HXLINE( 387)		{
HXLINE( 387)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 387)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->_hx___textEngine->layoutGroups;
HXDLIN( 387)			while((_g < _g1->length)){
HXLINE( 387)				HX_VARI(  ::openfl::_internal::text::TextLayoutGroup,group) = _g1->__get(_g).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN( 387)				++_g;
HXLINE( 389)				if ((group->lineIndex == lineIndex)) {
HXLINE( 391)					Bool _hx_tmp1 = (startIndex == (int)-1);
HXDLIN( 391)					if (_hx_tmp1) {
HXLINE( 391)						startIndex = group->startIndex;
            					}
            				}
            				else {
HXLINE( 393)					if ((group->lineIndex == (lineIndex + (int)1))) {
HXLINE( 395)						endIndex = group->startIndex;
HXLINE( 396)						goto _hx_goto_12;
            					}
            				}
            			}
            			_hx_goto_12:;
            		}
HXLINE( 402)		Bool _hx_tmp2 = (endIndex == (int)-1);
HXDLIN( 402)		if (_hx_tmp2) {
HXLINE( 402)			endIndex = this->_hx___text.length;
            		}
HXLINE( 404)		return this->_hx___textEngine->text.substring(startIndex,endIndex);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getLineText,return )

Int TextField_obj::getParagraphLength(Int charIndex){
            	HX_STACK_FRAME("openfl.text.TextField","getParagraphLength",0xed64f022,"openfl.text.TextField.getParagraphLength","openfl/text/TextField.hx",409,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(charIndex,"charIndex")
HXLINE( 411)		Bool _hx_tmp;
HXDLIN( 411)		if ((charIndex >= (int)0)) {
HXLINE( 411)			_hx_tmp = (charIndex > (this->_hx___text.length - (int)1));
            		}
            		else {
HXLINE( 411)			_hx_tmp = true;
            		}
HXDLIN( 411)		if (_hx_tmp) {
HXLINE( 411)			return (int)0;
            		}
HXLINE( 413)		HX_VARI( Int,startIndex) = this->getFirstCharInParagraph(charIndex);
HXLINE( 414)		Int _hx_tmp1 = this->_hx___textEngine->getLineBreakIndex(charIndex);
HXDLIN( 414)		HX_VARI( Int,endIndex) = (_hx_tmp1 + (int)1);
HXLINE( 416)		Bool _hx_tmp2 = (endIndex == (int)0);
HXDLIN( 416)		if (_hx_tmp2) {
HXLINE( 416)			endIndex = this->_hx___text.length;
            		}
HXLINE( 417)		return (endIndex - startIndex);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getParagraphLength,return )

 ::openfl::text::TextFormat TextField_obj::getTextFormat(hx::Null< Int >  __o_beginIndex,hx::Null< Int >  __o_endIndex){
Int beginIndex = __o_beginIndex.Default(0);
Int endIndex = __o_endIndex.Default(0);
            	HX_STACK_FRAME("openfl.text.TextField","getTextFormat",0x560e1d56,"openfl.text.TextField.getTextFormat","openfl/text/TextField.hx",422,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(beginIndex,"beginIndex")
            	HX_STACK_ARG(endIndex,"endIndex")
HXLINE( 424)		HX_VARI(  ::openfl::text::TextFormat,format) = null();
HXLINE( 426)		{
HXLINE( 426)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 426)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->_hx___textEngine->textFormatRanges;
HXDLIN( 426)			while((_g < _g1->length)){
HXLINE( 426)				HX_VARI(  ::openfl::_internal::text::TextFormatRange,group) = _g1->__get(_g).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN( 426)				++_g;
HXLINE( 428)				Bool _hx_tmp;
HXDLIN( 428)				Bool _hx_tmp1;
HXDLIN( 428)				if ((group->start <= beginIndex)) {
HXLINE( 428)					_hx_tmp1 = (group->end >= beginIndex);
            				}
            				else {
HXLINE( 428)					_hx_tmp1 = false;
            				}
HXDLIN( 428)				if (!(_hx_tmp1)) {
HXLINE( 428)					if ((group->start <= endIndex)) {
HXLINE( 428)						_hx_tmp = (group->end >= endIndex);
            					}
            					else {
HXLINE( 428)						_hx_tmp = false;
            					}
            				}
            				else {
HXLINE( 428)					_hx_tmp = true;
            				}
HXDLIN( 428)				if (_hx_tmp) {
HXLINE( 430)					Bool _hx_tmp2 = hx::IsNull( format );
HXDLIN( 430)					if (_hx_tmp2) {
HXLINE( 432)						format = group->format->clone();
            					}
            					else {
HXLINE( 436)						if ((group->format->font != format->font)) {
HXLINE( 436)							format->font = null();
            						}
HXLINE( 437)						Bool _hx_tmp3 = hx::IsNotEq( group->format->size,format->size );
HXDLIN( 437)						if (_hx_tmp3) {
HXLINE( 437)							format->size = null();
            						}
HXLINE( 438)						Bool _hx_tmp4 = hx::IsNotEq( group->format->color,format->color );
HXDLIN( 438)						if (_hx_tmp4) {
HXLINE( 438)							format->color = null();
            						}
HXLINE( 439)						Bool _hx_tmp5 = hx::IsNotEq( group->format->bold,format->bold );
HXDLIN( 439)						if (_hx_tmp5) {
HXLINE( 439)							format->bold = null();
            						}
HXLINE( 440)						Bool _hx_tmp6 = hx::IsNotEq( group->format->italic,format->italic );
HXDLIN( 440)						if (_hx_tmp6) {
HXLINE( 440)							format->italic = null();
            						}
HXLINE( 441)						Bool _hx_tmp7 = hx::IsNotEq( group->format->underline,format->underline );
HXDLIN( 441)						if (_hx_tmp7) {
HXLINE( 441)							format->underline = null();
            						}
HXLINE( 442)						if ((group->format->url != format->url)) {
HXLINE( 442)							format->url = null();
            						}
HXLINE( 443)						if ((group->format->target != format->target)) {
HXLINE( 443)							format->target = null();
            						}
HXLINE( 444)						Bool _hx_tmp8 = hx::IsNotEq( group->format->align,format->align );
HXDLIN( 444)						if (_hx_tmp8) {
HXLINE( 444)							format->align = null();
            						}
HXLINE( 445)						Bool _hx_tmp9 = hx::IsNotEq( group->format->leftMargin,format->leftMargin );
HXDLIN( 445)						if (_hx_tmp9) {
HXLINE( 445)							format->leftMargin = null();
            						}
HXLINE( 446)						Bool _hx_tmp10 = hx::IsNotEq( group->format->rightMargin,format->rightMargin );
HXDLIN( 446)						if (_hx_tmp10) {
HXLINE( 446)							format->rightMargin = null();
            						}
HXLINE( 447)						Bool _hx_tmp11 = hx::IsNotEq( group->format->indent,format->indent );
HXDLIN( 447)						if (_hx_tmp11) {
HXLINE( 447)							format->indent = null();
            						}
HXLINE( 448)						Bool _hx_tmp12 = hx::IsNotEq( group->format->leading,format->leading );
HXDLIN( 448)						if (_hx_tmp12) {
HXLINE( 448)							format->leading = null();
            						}
HXLINE( 449)						Bool _hx_tmp13 = hx::IsNotEq( group->format->blockIndent,format->blockIndent );
HXDLIN( 449)						if (_hx_tmp13) {
HXLINE( 449)							format->blockIndent = null();
            						}
HXLINE( 450)						Bool _hx_tmp14 = hx::IsNotEq( group->format->bullet,format->bullet );
HXDLIN( 450)						if (_hx_tmp14) {
HXLINE( 450)							format->bullet = null();
            						}
HXLINE( 451)						Bool _hx_tmp15 = hx::IsNotEq( group->format->kerning,format->kerning );
HXDLIN( 451)						if (_hx_tmp15) {
HXLINE( 451)							format->kerning = null();
            						}
HXLINE( 452)						Bool _hx_tmp16 = hx::IsNotEq( group->format->letterSpacing,format->letterSpacing );
HXDLIN( 452)						if (_hx_tmp16) {
HXLINE( 452)							format->letterSpacing = null();
            						}
HXLINE( 453)						if (hx::IsNotEq( group->format->tabStops,format->tabStops )) {
HXLINE( 453)							format->tabStops = null();
            						}
            					}
            				}
            			}
            		}
HXLINE( 461)		return format;
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,getTextFormat,return )

void TextField_obj::replaceSelectedText(::String value){
            	HX_STACK_FRAME("openfl.text.TextField","replaceSelectedText",0x86221d58,"openfl.text.TextField.replaceSelectedText","openfl/text/TextField.hx",466,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 468)		Bool _hx_tmp;
HXDLIN( 468)		if ((value == HX_("",00,00,00,00))) {
HXLINE( 468)			_hx_tmp = (this->_hx___selectionIndex == this->_hx___caretIndex);
            		}
            		else {
HXLINE( 468)			_hx_tmp = false;
            		}
HXDLIN( 468)		if (_hx_tmp) {
HXLINE( 468)			return;
            		}
HXLINE( 470)		HX_VAR( Int,startIndex);
HXDLIN( 470)		if ((this->_hx___caretIndex < this->_hx___selectionIndex)) {
HXLINE( 470)			startIndex = this->_hx___caretIndex;
            		}
            		else {
HXLINE( 470)			startIndex = this->_hx___selectionIndex;
            		}
HXLINE( 471)		HX_VAR( Int,endIndex);
HXDLIN( 471)		if ((this->_hx___caretIndex > this->_hx___selectionIndex)) {
HXLINE( 471)			endIndex = this->_hx___caretIndex;
            		}
            		else {
HXLINE( 471)			endIndex = this->_hx___selectionIndex;
            		}
HXLINE( 473)		this->replaceText(startIndex,endIndex,value);
HXLINE( 475)		this->_hx___caretIndex = (startIndex + value.length);
HXLINE( 476)		this->_hx___selectionIndex = this->_hx___caretIndex;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,replaceSelectedText,(void))

void TextField_obj::replaceText(Int beginIndex,Int endIndex,::String newText){
            	HX_STACK_FRAME("openfl.text.TextField","replaceText",0x698fcd5d,"openfl.text.TextField.replaceText","openfl/text/TextField.hx",481,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(beginIndex,"beginIndex")
            	HX_STACK_ARG(endIndex,"endIndex")
            	HX_STACK_ARG(newText,"newText")
HXLINE( 483)		Bool _hx_tmp;
HXDLIN( 483)		Bool _hx_tmp1;
HXDLIN( 483)		Bool _hx_tmp2;
HXDLIN( 483)		if ((endIndex >= beginIndex)) {
HXLINE( 483)			_hx_tmp2 = (beginIndex < (int)0);
            		}
            		else {
HXLINE( 483)			_hx_tmp2 = true;
            		}
HXDLIN( 483)		if (!(_hx_tmp2)) {
HXLINE( 483)			_hx_tmp1 = (endIndex > this->_hx___text.length);
            		}
            		else {
HXLINE( 483)			_hx_tmp1 = true;
            		}
HXDLIN( 483)		if (!(_hx_tmp1)) {
HXLINE( 483)			_hx_tmp = hx::IsNull( newText );
            		}
            		else {
HXLINE( 483)			_hx_tmp = true;
            		}
HXDLIN( 483)		if (_hx_tmp) {
HXLINE( 483)			return;
            		}
HXLINE( 485)		::String _hx_tmp3 = this->_hx___text.substring((int)0,beginIndex);
HXDLIN( 485)		::String _hx_tmp4 = (_hx_tmp3 + newText);
HXDLIN( 485)		::String _hx_tmp5 = this->_hx___text.substring(endIndex,null());
HXDLIN( 485)		this->_hx___updateText((_hx_tmp4 + _hx_tmp5));
HXLINE( 487)		HX_VARI( Int,offset) = (newText.length - (endIndex - beginIndex));
HXLINE( 489)		HX_VARI( Int,i) = (int)0;
HXLINE( 490)		HX_VAR(  ::openfl::_internal::text::TextFormatRange,range);
HXLINE( 492)		while((i < this->_hx___textEngine->textFormatRanges->length)){
HXLINE( 494)			range = this->_hx___textEngine->textFormatRanges->__get(i).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXLINE( 496)			Bool _hx_tmp6;
HXDLIN( 496)			if ((range->start <= beginIndex)) {
HXLINE( 496)				_hx_tmp6 = (range->end >= endIndex);
            			}
            			else {
HXLINE( 496)				_hx_tmp6 = false;
            			}
HXDLIN( 496)			if (_hx_tmp6) {
HXLINE( 498)				hx::AddEq(range->end,offset);
HXLINE( 499)				++i;
            			}
            			else {
HXLINE( 501)				Bool _hx_tmp7;
HXDLIN( 501)				if ((range->start >= beginIndex)) {
HXLINE( 501)					_hx_tmp7 = (range->end <= endIndex);
            				}
            				else {
HXLINE( 501)					_hx_tmp7 = false;
            				}
HXDLIN( 501)				if (_hx_tmp7) {
HXLINE( 503)					this->_hx___textEngine->textFormatRanges->removeRange(i,(int)1);
HXLINE( 504)					hx::SubEq(offset,(range->end - range->start));
            				}
            				else {
HXLINE( 506)					Bool _hx_tmp8;
HXDLIN( 506)					if ((range->start > beginIndex)) {
HXLINE( 506)						_hx_tmp8 = (range->start <= endIndex);
            					}
            					else {
HXLINE( 506)						_hx_tmp8 = false;
            					}
HXDLIN( 506)					if (_hx_tmp8) {
HXLINE( 508)						hx::AddEq(range->start,offset);
HXLINE( 509)						++i;
            					}
            					else {
HXLINE( 513)						++i;
            					}
            				}
            			}
            		}
HXLINE( 519)		this->_hx___dirty = true;
HXLINE( 520)		this->_hx___layoutDirty = true;
            	}


HX_DEFINE_DYNAMIC_FUNC3(TextField_obj,replaceText,(void))

void TextField_obj::setSelection(Int beginIndex,Int endIndex){
            	HX_STACK_FRAME("openfl.text.TextField","setSelection",0xa586666e,"openfl.text.TextField.setSelection","openfl/text/TextField.hx",525,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(beginIndex,"beginIndex")
            	HX_STACK_ARG(endIndex,"endIndex")
HXLINE( 527)		this->_hx___selectionIndex = beginIndex;
HXLINE( 528)		this->_hx___caretIndex = endIndex;
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,setSelection,(void))

void TextField_obj::setTextFormat( ::openfl::text::TextFormat format,hx::Null< Int >  __o_beginIndex,hx::Null< Int >  __o_endIndex){
Int beginIndex = __o_beginIndex.Default(0);
Int endIndex = __o_endIndex.Default(0);
            	HX_STACK_FRAME("openfl.text.TextField","setTextFormat",0x9b13ff62,"openfl.text.TextField.setTextFormat","openfl/text/TextField.hx",533,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(format,"format")
            	HX_STACK_ARG(beginIndex,"beginIndex")
            	HX_STACK_ARG(endIndex,"endIndex")
HXLINE( 535)		Bool _hx_tmp = hx::IsNotNull( format->font );
HXDLIN( 535)		if (_hx_tmp) {
HXLINE( 535)			this->_hx___textFormat->font = format->font;
            		}
HXLINE( 536)		Bool _hx_tmp1 = hx::IsNotNull( format->size );
HXDLIN( 536)		if (_hx_tmp1) {
HXLINE( 536)			this->_hx___textFormat->size = format->size;
            		}
HXLINE( 537)		Bool _hx_tmp2 = hx::IsNotNull( format->color );
HXDLIN( 537)		if (_hx_tmp2) {
HXLINE( 537)			this->_hx___textFormat->color = format->color;
            		}
HXLINE( 538)		Bool _hx_tmp3 = hx::IsNotNull( format->bold );
HXDLIN( 538)		if (_hx_tmp3) {
HXLINE( 538)			this->_hx___textFormat->bold = format->bold;
            		}
HXLINE( 539)		Bool _hx_tmp4 = hx::IsNotNull( format->italic );
HXDLIN( 539)		if (_hx_tmp4) {
HXLINE( 539)			this->_hx___textFormat->italic = format->italic;
            		}
HXLINE( 540)		Bool _hx_tmp5 = hx::IsNotNull( format->underline );
HXDLIN( 540)		if (_hx_tmp5) {
HXLINE( 540)			this->_hx___textFormat->underline = format->underline;
            		}
HXLINE( 541)		Bool _hx_tmp6 = hx::IsNotNull( format->url );
HXDLIN( 541)		if (_hx_tmp6) {
HXLINE( 541)			this->_hx___textFormat->url = format->url;
            		}
HXLINE( 542)		Bool _hx_tmp7 = hx::IsNotNull( format->target );
HXDLIN( 542)		if (_hx_tmp7) {
HXLINE( 542)			this->_hx___textFormat->target = format->target;
            		}
HXLINE( 543)		Bool _hx_tmp8 = hx::IsNotNull( format->align );
HXDLIN( 543)		if (_hx_tmp8) {
HXLINE( 543)			this->_hx___textFormat->align = format->align;
            		}
HXLINE( 544)		Bool _hx_tmp9 = hx::IsNotNull( format->leftMargin );
HXDLIN( 544)		if (_hx_tmp9) {
HXLINE( 544)			this->_hx___textFormat->leftMargin = format->leftMargin;
            		}
HXLINE( 545)		Bool _hx_tmp10 = hx::IsNotNull( format->rightMargin );
HXDLIN( 545)		if (_hx_tmp10) {
HXLINE( 545)			this->_hx___textFormat->rightMargin = format->rightMargin;
            		}
HXLINE( 546)		Bool _hx_tmp11 = hx::IsNotNull( format->indent );
HXDLIN( 546)		if (_hx_tmp11) {
HXLINE( 546)			this->_hx___textFormat->indent = format->indent;
            		}
HXLINE( 547)		Bool _hx_tmp12 = hx::IsNotNull( format->leading );
HXDLIN( 547)		if (_hx_tmp12) {
HXLINE( 547)			this->_hx___textFormat->leading = format->leading;
            		}
HXLINE( 548)		Bool _hx_tmp13 = hx::IsNotNull( format->blockIndent );
HXDLIN( 548)		if (_hx_tmp13) {
HXLINE( 548)			this->_hx___textFormat->blockIndent = format->blockIndent;
            		}
HXLINE( 549)		Bool _hx_tmp14 = hx::IsNotNull( format->bullet );
HXDLIN( 549)		if (_hx_tmp14) {
HXLINE( 549)			this->_hx___textFormat->bullet = format->bullet;
            		}
HXLINE( 550)		Bool _hx_tmp15 = hx::IsNotNull( format->kerning );
HXDLIN( 550)		if (_hx_tmp15) {
HXLINE( 550)			this->_hx___textFormat->kerning = format->kerning;
            		}
HXLINE( 551)		Bool _hx_tmp16 = hx::IsNotNull( format->letterSpacing );
HXDLIN( 551)		if (_hx_tmp16) {
HXLINE( 551)			this->_hx___textFormat->letterSpacing = format->letterSpacing;
            		}
HXLINE( 552)		Bool _hx_tmp17 = hx::IsNotNull( format->tabStops );
HXDLIN( 552)		if (_hx_tmp17) {
HXLINE( 552)			this->_hx___textFormat->tabStops = format->tabStops;
            		}
HXLINE( 554)		this->_hx___dirty = true;
HXLINE( 555)		this->_hx___layoutDirty = true;
            	}


HX_DEFINE_DYNAMIC_FUNC3(TextField_obj,setTextFormat,(void))

::String TextField_obj::_hx___getAttributeMatch( ::EReg regex){
            	HX_STACK_FRAME("openfl.text.TextField","__getAttributeMatch",0x101a59fb,"openfl.text.TextField.__getAttributeMatch","openfl/text/TextField.hx",562,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(regex,"regex")
HXLINE( 562)		::String _hx_tmp = regex->matched((int)2);
HXDLIN( 562)		Bool _hx_tmp1 = hx::IsNotNull( _hx_tmp );
HXDLIN( 562)		if (_hx_tmp1) {
HXLINE( 562)			return regex->matched((int)2);
            		}
            		else {
HXLINE( 562)			return regex->matched((int)3);
            		}
HXDLIN( 562)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,_hx___getAttributeMatch,return )

void TextField_obj::_hx___getBounds( ::openfl::geom::Rectangle rect, ::openfl::geom::Matrix matrix){
            	HX_STACK_FRAME("openfl.text.TextField","__getBounds",0x189abae7,"openfl.text.TextField.__getBounds","openfl/text/TextField.hx",567,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(rect,"rect")
            	HX_STACK_ARG(matrix,"matrix")
HXLINE( 569)		this->_hx___updateLayout();
HXLINE( 570)		HX_VARI(  ::openfl::geom::Rectangle,bounds) = ::openfl::geom::Rectangle_obj::_hx___temp;
HXLINE( 571)		this->_hx___textEngine->bounds->_hx___transform(bounds,matrix);
HXLINE( 572)		rect->_hx___expand(bounds->x,bounds->y,bounds->width,bounds->height);
            	}


::hx::EnumBase TextField_obj::_hx___getCursor(){
            	HX_STACK_FRAME("openfl.text.TextField","__getCursor",0xf165c348,"openfl.text.TextField.__getCursor","openfl/text/TextField.hx",579,0xccf02094)
            	HX_STACK_THIS(this)
HXLINE( 579)		if (this->_hx___textEngine->selectable) {
HXLINE( 579)			return ::lime::ui::MouseCursor_obj::TEXT_dyn();
            		}
            		else {
HXLINE( 579)			return null();
            		}
HXDLIN( 579)		return null();
            	}


Int TextField_obj::_hx___getPosition(Float x,Float y){
            	HX_STACK_FRAME("openfl.text.TextField","__getPosition",0xfe83559b,"openfl.text.TextField.__getPosition","openfl/text/TextField.hx",584,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE( 586)		this->_hx___updateLayout();
HXLINE( 588)		Int _hx_tmp = this->get_scrollH();
HXDLIN( 588)		hx::AddEq(x,_hx_tmp);
HXLINE( 590)		{
HXLINE( 590)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 590)			Int _hx_tmp1 = this->get_scrollV();
HXDLIN( 590)			HX_VARI( Int,_g) = (_hx_tmp1 - (int)1);
HXDLIN( 590)			while((_g1 < _g)){
HXLINE( 590)				HX_VARI( Int,i) = _g1++;
HXLINE( 592)				hx::AddEq(y,this->_hx___textEngine->lineHeights->__get(i));
            			}
            		}
HXLINE( 596)		Bool _hx_tmp2 = (y > this->_hx___textEngine->textHeight);
HXDLIN( 596)		if (_hx_tmp2) {
HXLINE( 596)			y = this->_hx___textEngine->textHeight;
            		}
HXLINE( 598)		HX_VARI( Bool,firstGroup) = true;
HXLINE( 599)		HX_VAR(  ::openfl::_internal::text::TextLayoutGroup,group);
HXDLIN( 599)		HX_VAR(  ::openfl::_internal::text::TextLayoutGroup,nextGroup);
HXLINE( 601)		{
HXLINE( 601)			HX_VARI_NAME( Int,_g11,"_g1") = (int)0;
HXDLIN( 601)			HX_VARI_NAME( Int,_g2,"_g") = this->_hx___textEngine->layoutGroups->length;
HXDLIN( 601)			while((_g11 < _g2)){
HXLINE( 601)				HX_VARI_NAME( Int,i1,"i") = _g11++;
HXLINE( 603)				group = this->_hx___textEngine->layoutGroups->__get(i1).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXLINE( 605)				if ((i1 < (this->_hx___textEngine->layoutGroups->length - (int)1))) {
HXLINE( 607)					nextGroup = this->_hx___textEngine->layoutGroups->__get((i1 + (int)1)).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
            				}
            				else {
HXLINE( 611)					nextGroup = null();
            				}
HXLINE( 615)				Bool _hx_tmp3 = firstGroup;
HXDLIN( 615)				if (_hx_tmp3) {
HXLINE( 617)					Bool _hx_tmp4 = (y < group->offsetY);
HXDLIN( 617)					if (_hx_tmp4) {
HXLINE( 617)						y = group->offsetY;
            					}
HXLINE( 618)					Bool _hx_tmp5 = (x < group->offsetX);
HXDLIN( 618)					if (_hx_tmp5) {
HXLINE( 618)						x = group->offsetX;
            					}
HXLINE( 619)					firstGroup = false;
            				}
HXLINE( 623)				Bool _hx_tmp6;
HXDLIN( 623)				Bool _hx_tmp7;
HXDLIN( 623)				if ((y >= group->offsetY)) {
HXLINE( 623)					_hx_tmp7 = (y <= (group->offsetY + group->height));
            				}
            				else {
HXLINE( 623)					_hx_tmp7 = false;
            				}
HXDLIN( 623)				if (!(_hx_tmp7)) {
HXLINE( 623)					_hx_tmp6 = hx::IsNull( nextGroup );
            				}
            				else {
HXLINE( 623)					_hx_tmp6 = true;
            				}
HXDLIN( 623)				if (_hx_tmp6) {
HXLINE( 625)					Bool _hx_tmp8;
HXDLIN( 625)					Bool _hx_tmp9;
HXDLIN( 625)					if ((x >= group->offsetX)) {
HXLINE( 625)						_hx_tmp9 = (x <= (group->offsetX + group->width));
            					}
            					else {
HXLINE( 625)						_hx_tmp9 = false;
            					}
HXDLIN( 625)					if (!(_hx_tmp9)) {
HXLINE( 625)						Bool _hx_tmp10 = hx::IsNotNull( nextGroup );
HXDLIN( 625)						if (_hx_tmp10) {
HXLINE( 625)							_hx_tmp8 = (nextGroup->lineIndex != group->lineIndex);
            						}
            						else {
HXLINE( 625)							_hx_tmp8 = true;
            						}
            					}
            					else {
HXLINE( 625)						_hx_tmp8 = true;
            					}
HXDLIN( 625)					if (_hx_tmp8) {
HXLINE( 627)						HX_VARI( Float,advance) = ((Float)0.0);
HXLINE( 629)						{
HXLINE( 629)							HX_VARI( Int,_g3) = (int)0;
HXDLIN( 629)							HX_VARI_NAME( Int,_g21,"_g2") = group->advances->length;
HXDLIN( 629)							while((_g3 < _g21)){
HXLINE( 629)								HX_VARI_NAME( Int,i2,"i") = _g3++;
HXLINE( 631)								hx::AddEq(advance,group->advances->__get(i2));
HXLINE( 633)								if ((x <= (group->offsetX + advance))) {
HXLINE( 635)									if ((x <= ((group->offsetX + (advance - group->advances->__get(i2))) + ((Float)group->advances->__get(i2) / (Float)(int)2)))) {
HXLINE( 637)										return (group->startIndex + i2);
            									}
            									else {
HXLINE( 641)										if (((group->startIndex + i2) < group->endIndex)) {
HXLINE( 641)											return ((group->startIndex + i2) + (int)1);
            										}
            										else {
HXLINE( 641)											return group->endIndex;
            										}
            									}
            								}
            							}
            						}
HXLINE( 649)						return group->endIndex;
            					}
            				}
            			}
            		}
HXLINE( 657)		return this->_hx___text.length;
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,_hx___getPosition,return )

Bool TextField_obj::_hx___hitTest(Float x,Float y,Bool shapeFlag,::Array< ::Dynamic> stack,Bool interactiveOnly, ::openfl::display::DisplayObject hitObject){
            	HX_STACK_FRAME("openfl.text.TextField","__hitTest",0x83278481,"openfl.text.TextField.__hitTest","openfl/text/TextField.hx",662,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(shapeFlag,"shapeFlag")
            	HX_STACK_ARG(stack,"stack")
            	HX_STACK_ARG(interactiveOnly,"interactiveOnly")
            	HX_STACK_ARG(hitObject,"hitObject")
HXLINE( 664)		Bool _hx_tmp;
HXDLIN( 664)		Bool _hx_tmp1;
HXDLIN( 664)		Bool _hx_tmp2 = !(!(hitObject->get_visible()));
HXDLIN( 664)		if (_hx_tmp2) {
HXLINE( 664)			_hx_tmp1 = this->_hx___isMask;
            		}
            		else {
HXLINE( 664)			_hx_tmp1 = true;
            		}
HXDLIN( 664)		if (!(_hx_tmp1)) {
HXLINE( 664)			if (interactiveOnly) {
HXLINE( 664)				_hx_tmp = !(this->mouseEnabled);
            			}
            			else {
HXLINE( 664)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE( 664)			_hx_tmp = true;
            		}
HXDLIN( 664)		if (_hx_tmp) {
HXLINE( 664)			return false;
            		}
HXLINE( 665)		Bool _hx_tmp3;
HXDLIN( 665)		 ::openfl::display::DisplayObject _hx_tmp4 = this->get_mask();
HXDLIN( 665)		Bool _hx_tmp5 = hx::IsNotNull( _hx_tmp4 );
HXDLIN( 665)		if (_hx_tmp5) {
HXLINE( 665)			_hx_tmp3 = !(this->get_mask()->_hx___hitTestMask(x,y));
            		}
            		else {
HXLINE( 665)			_hx_tmp3 = false;
            		}
HXDLIN( 665)		if (_hx_tmp3) {
HXLINE( 665)			return false;
            		}
HXLINE( 667)		this->_hx___getRenderTransform();
HXLINE( 668)		this->_hx___updateLayout();
HXLINE( 670)		HX_VARI(  ::openfl::geom::Matrix,_this) = this->_hx___renderTransform;
HXDLIN( 670)		HX_VARI( Float,norm) = ((_this->a * _this->d) - (_this->b * _this->c));
HXDLIN( 670)		HX_VAR( Float,px);
HXDLIN( 670)		if ((norm == (int)0)) {
HXLINE( 670)			px = -(_this->tx);
            		}
            		else {
HXLINE( 670)			px = (((Float)((Float)1.0) / (Float)norm) * ((_this->c * (_this->ty - y)) + (_this->d * (x - _this->tx))));
            		}
HXLINE( 671)		HX_VARI_NAME(  ::openfl::geom::Matrix,_this1,"_this") = this->_hx___renderTransform;
HXDLIN( 671)		HX_VARI_NAME( Float,norm1,"norm") = ((_this1->a * _this1->d) - (_this1->b * _this1->c));
HXDLIN( 671)		HX_VAR( Float,py);
HXDLIN( 671)		if ((norm1 == (int)0)) {
HXLINE( 671)			py = -(_this1->ty);
            		}
            		else {
HXLINE( 671)			py = (((Float)((Float)1.0) / (Float)norm1) * ((_this1->a * (y - _this1->ty)) + (_this1->b * (_this1->tx - x))));
            		}
HXLINE( 673)		Bool _hx_tmp6 = this->_hx___textEngine->bounds->contains(px,py);
HXDLIN( 673)		if (_hx_tmp6) {
HXLINE( 675)			Bool _hx_tmp7 = hx::IsNotNull( stack );
HXDLIN( 675)			if (_hx_tmp7) {
HXLINE( 677)				stack->push(hitObject);
            			}
HXLINE( 681)			return true;
            		}
HXLINE( 685)		return false;
            	}


Bool TextField_obj::_hx___hitTestMask(Float x,Float y){
            	HX_STACK_FRAME("openfl.text.TextField","__hitTestMask",0x0119c60d,"openfl.text.TextField.__hitTestMask","openfl/text/TextField.hx",690,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE( 692)		this->_hx___getRenderTransform();
HXLINE( 693)		this->_hx___updateLayout();
HXLINE( 695)		HX_VARI(  ::openfl::geom::Matrix,_this) = this->_hx___renderTransform;
HXDLIN( 695)		HX_VARI( Float,norm) = ((_this->a * _this->d) - (_this->b * _this->c));
HXDLIN( 695)		HX_VAR( Float,px);
HXDLIN( 695)		if ((norm == (int)0)) {
HXLINE( 695)			px = -(_this->tx);
            		}
            		else {
HXLINE( 695)			px = (((Float)((Float)1.0) / (Float)norm) * ((_this->c * (_this->ty - y)) + (_this->d * (x - _this->tx))));
            		}
HXLINE( 696)		HX_VARI_NAME(  ::openfl::geom::Matrix,_this1,"_this") = this->_hx___renderTransform;
HXDLIN( 696)		HX_VARI_NAME( Float,norm1,"norm") = ((_this1->a * _this1->d) - (_this1->b * _this1->c));
HXDLIN( 696)		HX_VAR( Float,py);
HXDLIN( 696)		if ((norm1 == (int)0)) {
HXLINE( 696)			py = -(_this1->ty);
            		}
            		else {
HXLINE( 696)			py = (((Float)((Float)1.0) / (Float)norm1) * ((_this1->a * (y - _this1->ty)) + (_this1->b * (_this1->tx - x))));
            		}
HXLINE( 698)		Bool _hx_tmp = this->_hx___textEngine->bounds->contains(px,py);
HXDLIN( 698)		if (_hx_tmp) {
HXLINE( 700)			return true;
            		}
HXLINE( 704)		return false;
            	}


void TextField_obj::_hx___renderCairo( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACK_FRAME("openfl.text.TextField","__renderCairo",0x1a5f4f8e,"openfl.text.TextField.__renderCairo","openfl/text/TextField.hx",709,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(renderSession,"renderSession")
HXLINE( 711)		::openfl::_internal::renderer::cairo::CairoTextField_obj::render(hx::ObjectPtr<OBJ_>(this),renderSession,this->_hx___worldTransform);
HXLINE( 712)		this->super::_hx___renderCairo(renderSession);
            	}


void TextField_obj::_hx___renderCanvas( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACK_FRAME("openfl.text.TextField","__renderCanvas",0xfc575b12,"openfl.text.TextField.__renderCanvas","openfl/text/TextField.hx",721,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(renderSession,"renderSession")
HXLINE( 721)		Bool _hx_tmp;
HXDLIN( 721)		if (hx::IsEq( this->_hx___textEngine->antiAliasType,(int)0 )) {
HXLINE( 721)			_hx_tmp = hx::IsEq( this->_hx___textEngine->gridFitType,(int)1 );
            		}
            		else {
HXLINE( 721)			_hx_tmp = false;
            		}
HXDLIN( 721)		if (_hx_tmp) {
HXLINE( 723)			HX_VARI( Bool,smoothingEnabled) = renderSession->context->imageSmoothingEnabled;
HXLINE( 725)			if (smoothingEnabled) {
HXLINE( 727)				renderSession->context->__SetField(HX_("mozImageSmoothingEnabled",f0,68,e1,d7),false,hx::paccDynamic);
HXLINE( 729)				renderSession->context->__SetField(HX_("msImageSmoothingEnabled",a2,61,6c,a3),false,hx::paccDynamic);
HXLINE( 730)				renderSession->context->imageSmoothingEnabled = false;
            			}
HXLINE( 734)			this->super::_hx___renderCanvas(renderSession);
HXLINE( 736)			if (smoothingEnabled) {
HXLINE( 738)				renderSession->context->__SetField(HX_("mozImageSmoothingEnabled",f0,68,e1,d7),true,hx::paccDynamic);
HXLINE( 740)				renderSession->context->__SetField(HX_("msImageSmoothingEnabled",a2,61,6c,a3),true,hx::paccDynamic);
HXLINE( 741)				renderSession->context->imageSmoothingEnabled = true;
            			}
            		}
            		else {
HXLINE( 747)			this->super::_hx___renderCanvas(renderSession);
            		}
            	}


void TextField_obj::_hx___renderDOM( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACK_FRAME("openfl.text.TextField","__renderDOM",0x037e5808,"openfl.text.TextField.__renderDOM","openfl/text/TextField.hx",756,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(renderSession,"renderSession")
            	}


void TextField_obj::_hx___renderGL( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACK_FRAME("openfl.text.TextField","__renderGL",0xa5533b3f,"openfl.text.TextField.__renderGL","openfl/text/TextField.hx",761,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(renderSession,"renderSession")
HXLINE( 766)		::openfl::_internal::renderer::cairo::CairoTextField_obj::render(hx::ObjectPtr<OBJ_>(this),renderSession,this->_hx___worldTransform);
HXLINE( 769)		this->super::_hx___renderGL(renderSession);
            	}


void TextField_obj::_hx___startCursorTimer(){
            	HX_STACK_FRAME("openfl.text.TextField","__startCursorTimer",0xacba2811,"openfl.text.TextField.__startCursorTimer","openfl/text/TextField.hx",774,0xccf02094)
            	HX_STACK_THIS(this)
HXLINE( 776)		this->_hx___cursorTimer = ::haxe::Timer_obj::delay(this->_hx___startCursorTimer_dyn(),(int)600);
HXLINE( 777)		this->_hx___showCursor = !(this->_hx___showCursor);
HXLINE( 778)		this->_hx___dirty = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___startCursorTimer,(void))

void TextField_obj::_hx___startTextInput(){
            	HX_STACK_FRAME("openfl.text.TextField","__startTextInput",0x3a7d3e9f,"openfl.text.TextField.__startTextInput","openfl/text/TextField.hx",783,0xccf02094)
            	HX_STACK_THIS(this)
HXLINE( 785)		Bool _hx_tmp = (this->_hx___caretIndex < (int)0);
HXDLIN( 785)		if (_hx_tmp) {
HXLINE( 787)			this->_hx___caretIndex = this->_hx___text.length;
HXLINE( 788)			this->_hx___selectionIndex = this->_hx___caretIndex;
            		}
HXLINE( 792)		Bool _hx_tmp1 = hx::IsNotNull( this->stage );
HXDLIN( 792)		if (_hx_tmp1) {
HXLINE( 796)			this->stage->window->backend->setEnableTextEvents(true);
HXLINE( 798)			Bool _hx_tmp2 = !(this->_hx___inputEnabled);
HXDLIN( 798)			if (_hx_tmp2) {
HXLINE( 800)				this->stage->window->backend->setEnableTextEvents(true);
HXLINE( 802)				Bool _hx_tmp3 = !(this->stage->window->onTextInput->has(this->window_onTextInput_dyn()));
HXDLIN( 802)				if (_hx_tmp3) {
HXLINE( 804)					this->stage->window->onTextInput->add(this->window_onTextInput_dyn(),null(),null());
HXLINE( 805)					this->stage->window->onKeyDown->add(this->window_onKeyDown_dyn(),null(),null());
            				}
HXLINE( 809)				this->_hx___inputEnabled = true;
HXLINE( 810)				this->_hx___startCursorTimer();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___startTextInput,(void))

void TextField_obj::_hx___stopCursorTimer(){
            	HX_STACK_FRAME("openfl.text.TextField","__stopCursorTimer",0x8f135c69,"openfl.text.TextField.__stopCursorTimer","openfl/text/TextField.hx",821,0xccf02094)
            	HX_STACK_THIS(this)
HXLINE( 823)		Bool _hx_tmp = hx::IsNotNull( this->_hx___cursorTimer );
HXDLIN( 823)		if (_hx_tmp) {
HXLINE( 825)			this->_hx___cursorTimer->stop();
HXLINE( 826)			this->_hx___cursorTimer = null();
            		}
HXLINE( 830)		Bool _hx_tmp1 = this->_hx___showCursor;
HXDLIN( 830)		if (_hx_tmp1) {
HXLINE( 832)			this->_hx___showCursor = false;
HXLINE( 833)			this->_hx___dirty = true;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___stopCursorTimer,(void))

void TextField_obj::_hx___stopTextInput(){
            	HX_STACK_FRAME("openfl.text.TextField","__stopTextInput",0x6c7c2cf7,"openfl.text.TextField.__stopTextInput","openfl/text/TextField.hx",844,0xccf02094)
            	HX_STACK_THIS(this)
HXLINE( 844)		Bool _hx_tmp;
HXDLIN( 844)		if (this->_hx___inputEnabled) {
HXLINE( 844)			_hx_tmp = hx::IsNotNull( this->stage );
            		}
            		else {
HXLINE( 844)			_hx_tmp = false;
            		}
HXDLIN( 844)		if (_hx_tmp) {
HXLINE( 846)			this->stage->window->backend->setEnableTextEvents(false);
HXLINE( 847)			this->stage->window->onTextInput->remove(this->window_onTextInput_dyn());
HXLINE( 848)			this->stage->window->onKeyDown->remove(this->window_onKeyDown_dyn());
HXLINE( 850)			this->_hx___inputEnabled = false;
HXLINE( 851)			this->_hx___stopCursorTimer();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___stopTextInput,(void))

void TextField_obj::_hx___updateLayout(){
            	HX_STACK_FRAME("openfl.text.TextField","__updateLayout",0x2d3b57d7,"openfl.text.TextField.__updateLayout","openfl/text/TextField.hx",862,0xccf02094)
            	HX_STACK_THIS(this)
HXLINE( 862)		Bool _hx_tmp = this->_hx___layoutDirty;
HXDLIN( 862)		if (_hx_tmp) {
HXLINE( 864)			HX_VARI( Float,cacheWidth) = this->_hx___textEngine->width;
HXLINE( 867)			this->_hx___textEngine->update();
HXLINE( 869)			Bool _hx_tmp1 = hx::IsNotEq( this->_hx___textEngine->autoSize,(int)2 );
HXDLIN( 869)			if (_hx_tmp1) {
HXLINE( 871)				Bool _hx_tmp2 = (this->_hx___textEngine->width != cacheWidth);
HXDLIN( 871)				if (_hx_tmp2) {
HXLINE( 873)					HX_VARI(  ::Dynamic,_g) = this->_hx___textEngine->autoSize;
HXDLIN( 873)					 ::Dynamic _hx_switch_0 = _g;
            					if (  (_hx_switch_0==(int)0) ){
HXLINE( 881)						HX_VARI_NAME(  ::openfl::text::TextField,_g1,"_g") = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 881)						Float _hx_tmp3 = _g1->get_x();
HXDLIN( 881)						Float _hx_tmp4 = ((Float)(cacheWidth - this->_hx___textEngine->width) / (Float)(int)2);
HXDLIN( 881)						_g1->set_x((_hx_tmp3 + _hx_tmp4));
HXDLIN( 881)						goto _hx_goto_18;
            					}
            					if (  (_hx_switch_0==(int)3) ){
HXLINE( 877)						HX_VARI_NAME(  ::openfl::text::TextField,_g2,"_g") = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 877)						Float _hx_tmp5 = _g2->get_x();
HXDLIN( 877)						Float _hx_tmp6 = (_hx_tmp5 + (cacheWidth - this->_hx___textEngine->width));
HXDLIN( 877)						_g2->set_x(_hx_tmp6);
HXDLIN( 877)						goto _hx_goto_18;
            					}
            					/* default */{
            					}
            					_hx_goto_18:;
            				}
HXLINE( 891)				this->_hx___textEngine->getBounds();
            			}
HXLINE( 895)			this->_hx___layoutDirty = false;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___updateLayout,(void))

void TextField_obj::_hx___updateText(::String value){
            	HX_STACK_FRAME("openfl.text.TextField","__updateText",0x315de09a,"openfl.text.TextField.__updateText","openfl/text/TextField.hx",902,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 904)		this->_hx___text = value;
HXLINE( 906)		Bool _hx_tmp = (this->_hx___text.length < this->_hx___caretIndex);
HXDLIN( 906)		if (_hx_tmp) {
HXLINE( 908)			this->_hx___selectionIndex = (this->_hx___caretIndex = this->_hx___text.length);
            		}
HXLINE( 912)		Bool _hx_tmp1 = !(this->_hx___displayAsPassword);
HXDLIN( 912)		if (_hx_tmp1) {
HXLINE( 914)			this->_hx___textEngine->text = this->_hx___text;
            		}
            		else {
HXLINE( 918)			HX_VARI( Int,length) = this->get_text().length;
HXLINE( 919)			HX_VARI( ::String,mask) = HX_("",00,00,00,00);
HXLINE( 921)			{
HXLINE( 921)				HX_VARI( Int,_g1) = (int)0;
HXDLIN( 921)				while((_g1 < length)){
HXLINE( 921)					++_g1;
HXLINE( 923)					hx::AddEq(mask,HX_("*",2a,00,00,00));
            				}
            			}
HXLINE( 927)			this->_hx___textEngine->text = mask;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,_hx___updateText,(void))

 ::Dynamic TextField_obj::get_antiAliasType(){
            	HX_STACK_FRAME("openfl.text.TextField","get_antiAliasType",0x57115f1b,"openfl.text.TextField.get_antiAliasType","openfl/text/TextField.hx",943,0xccf02094)
            	HX_STACK_THIS(this)
HXLINE( 943)		return this->_hx___textEngine->antiAliasType;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_antiAliasType,return )

 ::Dynamic TextField_obj::set_antiAliasType( ::Dynamic value){
            	HX_STACK_FRAME("openfl.text.TextField","set_antiAliasType",0x7a7f3727,"openfl.text.TextField.set_antiAliasType","openfl/text/TextField.hx",956,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 956)		return (this->_hx___textEngine->antiAliasType = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_antiAliasType,return )

 ::Dynamic TextField_obj::get_autoSize(){
            	HX_STACK_FRAME("openfl.text.TextField","get_autoSize",0xd7aef1fd,"openfl.text.TextField.get_autoSize","openfl/text/TextField.hx",963,0xccf02094)
            	HX_STACK_THIS(this)
HXLINE( 963)		return this->_hx___textEngine->autoSize;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_autoSize,return )

 ::Dynamic TextField_obj::set_autoSize( ::Dynamic value){
            	HX_STACK_FRAME("openfl.text.TextField","set_autoSize",0xeca81571,"openfl.text.TextField.set_autoSize","openfl/text/TextField.hx",968,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 970)		Bool _hx_tmp = hx::IsNotEq( value,this->_hx___textEngine->autoSize );
HXDLIN( 970)		if (_hx_tmp) {
HXLINE( 972)			this->_hx___dirty = true;
HXLINE( 973)			this->_hx___layoutDirty = true;
            		}
HXLINE( 977)		return (this->_hx___textEngine->autoSize = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_autoSize,return )

Bool TextField_obj::get_background(){
            	HX_STACK_FRAME("openfl.text.TextField","get_background",0x50119b5b,"openfl.text.TextField.get_background","openfl/text/TextField.hx",984,0xccf02094)
            	HX_STACK_THIS(this)
HXLINE( 984)		return this->_hx___textEngine->background;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_background,return )

Bool TextField_obj::set_background(Bool value){
            	HX_STACK_FRAME("openfl.text.TextField","set_background",0x703183cf,"openfl.text.TextField.set_background","openfl/text/TextField.hx",989,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 991)		Bool _hx_tmp = (value != this->_hx___textEngine->background);
HXDLIN( 991)		if (_hx_tmp) {
HXLINE( 993)			this->_hx___dirty = true;
            		}
HXLINE( 997)		return (this->_hx___textEngine->background = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_background,return )

Int TextField_obj::get_backgroundColor(){
            	HX_STACK_FRAME("openfl.text.TextField","get_backgroundColor",0x63403c08,"openfl.text.TextField.get_backgroundColor","openfl/text/TextField.hx",1004,0xccf02094)
            	HX_STACK_THIS(this)
HXLINE(1004)		return this->_hx___textEngine->backgroundColor;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_backgroundColor,return )

Int TextField_obj::set_backgroundColor(Int value){
            	HX_STACK_FRAME("openfl.text.TextField","set_backgroundColor",0x9fdd2f14,"openfl.text.TextField.set_backgroundColor","openfl/text/TextField.hx",1009,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1011)		Bool _hx_tmp = (value != this->_hx___textEngine->backgroundColor);
HXDLIN(1011)		if (_hx_tmp) {
HXLINE(1013)			this->_hx___dirty = true;
            		}
HXLINE(1017)		return (this->_hx___textEngine->backgroundColor = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_backgroundColor,return )

Bool TextField_obj::get_border(){
            	HX_STACK_FRAME("openfl.text.TextField","get_border",0xa3e0d9d9,"openfl.text.TextField.get_border","openfl/text/TextField.hx",1024,0xccf02094)
            	HX_STACK_THIS(this)
HXLINE(1024)		return this->_hx___textEngine->border;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_border,return )

Bool TextField_obj::set_border(Bool value){
            	HX_STACK_FRAME("openfl.text.TextField","set_border",0xa75e784d,"openfl.text.TextField.set_border","openfl/text/TextField.hx",1029,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1031)		Bool _hx_tmp = (value != this->_hx___textEngine->border);
HXDLIN(1031)		if (_hx_tmp) {
HXLINE(1033)			this->_hx___dirty = true;
            		}
HXLINE(1037)		return (this->_hx___textEngine->border = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_border,return )

Int TextField_obj::get_borderColor(){
            	HX_STACK_FRAME("openfl.text.TextField","get_borderColor",0x6267b4ca,"openfl.text.TextField.get_borderColor","openfl/text/TextField.hx",1044,0xccf02094)
            	HX_STACK_THIS(this)
HXLINE(1044)		return this->_hx___textEngine->borderColor;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_borderColor,return )

Int TextField_obj::set_borderColor(Int value){
            	HX_STACK_FRAME("openfl.text.TextField","set_borderColor",0x5e3331d6,"openfl.text.TextField.set_borderColor","openfl/text/TextField.hx",1049,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1051)		Bool _hx_tmp = (value != this->_hx___textEngine->borderColor);
HXDLIN(1051)		if (_hx_tmp) {
HXLINE(1053)			this->_hx___dirty = true;
            		}
HXLINE(1057)		return (this->_hx___textEngine->borderColor = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_borderColor,return )

Int TextField_obj::get_bottomScrollV(){
            	HX_STACK_FRAME("openfl.text.TextField","get_bottomScrollV",0xfa9e92b1,"openfl.text.TextField.get_bottomScrollV","openfl/text/TextField.hx",1062,0xccf02094)
            	HX_STACK_THIS(this)
HXLINE(1064)		this->_hx___updateLayout();
HXLINE(1066)		return this->_hx___textEngine->bottomScrollV;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_bottomScrollV,return )

Int TextField_obj::get_caretIndex(){
            	HX_STACK_FRAME("openfl.text.TextField","get_caretIndex",0x074fbdfc,"openfl.text.TextField.get_caretIndex","openfl/text/TextField.hx",1073,0xccf02094)
            	HX_STACK_THIS(this)
HXLINE(1073)		return this->_hx___caretIndex;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_caretIndex,return )

 ::openfl::text::TextFormat TextField_obj::get_defaultTextFormat(){
            	HX_STACK_FRAME("openfl.text.TextField","get_defaultTextFormat",0x83063818,"openfl.text.TextField.get_defaultTextFormat","openfl/text/TextField.hx",1080,0xccf02094)
            	HX_STACK_THIS(this)
HXLINE(1080)		return this->_hx___textFormat->clone();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_defaultTextFormat,return )

 ::openfl::text::TextFormat TextField_obj::set_defaultTextFormat( ::openfl::text::TextFormat value){
            	HX_STACK_FRAME("openfl.text.TextField","set_defaultTextFormat",0xd70f0624,"openfl.text.TextField.set_defaultTextFormat","openfl/text/TextField.hx",1085,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1087)		this->_hx___textFormat->_hx___merge(value);
HXLINE(1089)		this->_hx___layoutDirty = true;
HXLINE(1090)		this->_hx___dirty = true;
HXLINE(1092)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_defaultTextFormat,return )

Bool TextField_obj::get_displayAsPassword(){
            	HX_STACK_FRAME("openfl.text.TextField","get_displayAsPassword",0x62bc3b42,"openfl.text.TextField.get_displayAsPassword","openfl/text/TextField.hx",1099,0xccf02094)
            	HX_STACK_THIS(this)
HXLINE(1099)		return this->_hx___displayAsPassword;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_displayAsPassword,return )

Bool TextField_obj::set_displayAsPassword(Bool value){
            	HX_STACK_FRAME("openfl.text.TextField","set_displayAsPassword",0xb6c5094e,"openfl.text.TextField.set_displayAsPassword","openfl/text/TextField.hx",1104,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1106)		Bool _hx_tmp = (value != this->_hx___displayAsPassword);
HXDLIN(1106)		if (_hx_tmp) {
HXLINE(1108)			this->_hx___dirty = true;
HXLINE(1109)			this->_hx___layoutDirty = true;
HXLINE(1111)			this->_hx___displayAsPassword = value;
HXLINE(1112)			this->_hx___updateText(this->_hx___text);
            		}
HXLINE(1116)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_displayAsPassword,return )

Bool TextField_obj::get_embedFonts(){
            	HX_STACK_FRAME("openfl.text.TextField","get_embedFonts",0xb8d5ce98,"openfl.text.TextField.get_embedFonts","openfl/text/TextField.hx",1123,0xccf02094)
            	HX_STACK_THIS(this)
HXLINE(1123)		return this->_hx___textEngine->embedFonts;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_embedFonts,return )

Bool TextField_obj::set_embedFonts(Bool value){
            	HX_STACK_FRAME("openfl.text.TextField","set_embedFonts",0xd8f5b70c,"openfl.text.TextField.set_embedFonts","openfl/text/TextField.hx",1137,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1137)		return (this->_hx___textEngine->embedFonts = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_embedFonts,return )

 ::Dynamic TextField_obj::get_gridFitType(){
            	HX_STACK_FRAME("openfl.text.TextField","get_gridFitType",0x3fa66af8,"openfl.text.TextField.get_gridFitType","openfl/text/TextField.hx",1144,0xccf02094)
            	HX_STACK_THIS(this)
HXLINE(1144)		return this->_hx___textEngine->gridFitType;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_gridFitType,return )

 ::Dynamic TextField_obj::set_gridFitType( ::Dynamic value){
            	HX_STACK_FRAME("openfl.text.TextField","set_gridFitType",0x3b71e804,"openfl.text.TextField.set_gridFitType","openfl/text/TextField.hx",1158,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1158)		return (this->_hx___textEngine->gridFitType = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_gridFitType,return )

Float TextField_obj::get_height(){
            	HX_STACK_FRAME("openfl.text.TextField","get_height",0x421294d4,"openfl.text.TextField.get_height","openfl/text/TextField.hx",1163,0xccf02094)
            	HX_STACK_THIS(this)
HXLINE(1165)		this->_hx___updateLayout();
HXLINE(1166)		return this->_hx___textEngine->height;
            	}


Float TextField_obj::set_height(Float value){
            	HX_STACK_FRAME("openfl.text.TextField","set_height",0x45903348,"openfl.text.TextField.set_height","openfl/text/TextField.hx",1171,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1173)		Bool _hx_tmp;
HXDLIN(1173)		Float _hx_tmp1 = this->get_scaleY();
HXDLIN(1173)		if ((_hx_tmp1 == (int)1)) {
HXLINE(1173)			_hx_tmp = (value != this->_hx___textEngine->height);
            		}
            		else {
HXLINE(1173)			_hx_tmp = true;
            		}
HXDLIN(1173)		if (_hx_tmp) {
HXLINE(1175)			Bool _hx_tmp2 = !(this->_hx___transformDirty);
HXDLIN(1175)			if (_hx_tmp2) {
HXLINE(1175)				this->_hx___transformDirty = true;
HXDLIN(1175)				::openfl::display::DisplayObject_obj::_hx___worldTransformDirty++;
            			}
HXLINE(1176)			this->_hx___dirty = true;
HXLINE(1177)			this->_hx___layoutDirty = true;
            		}
HXLINE(1181)		this->set_scaleY((int)1);
HXLINE(1182)		return (this->_hx___textEngine->height = value);
            	}


::String TextField_obj::get_htmlText(){
            	HX_STACK_FRAME("openfl.text.TextField","get_htmlText",0xb86d81e5,"openfl.text.TextField.get_htmlText","openfl/text/TextField.hx",1189,0xccf02094)
            	HX_STACK_THIS(this)
HXLINE(1189)		return this->_hx___text;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_htmlText,return )

::String TextField_obj::set_htmlText(::String value){
            	HX_STACK_FRAME("openfl.text.TextField","set_htmlText",0xcd66a559,"openfl.text.TextField.set_htmlText","openfl/text/TextField.hx",1194,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1196)		Bool _hx_tmp;
HXDLIN(1196)		if (!(!(this->_hx___isHTML))) {
HXLINE(1196)			_hx_tmp = (this->_hx___text != value);
            		}
            		else {
HXLINE(1196)			_hx_tmp = true;
            		}
HXDLIN(1196)		if (_hx_tmp) {
HXLINE(1198)			this->_hx___dirty = true;
HXLINE(1199)			this->_hx___layoutDirty = true;
            		}
HXLINE(1203)		this->_hx___isHTML = true;
HXLINE(1205)		{
HXLINE(1207)			value = ::openfl::text::TextField_obj::_hx___regexBreakTag->replace(value,HX_("\n",0a,00,00,00));
HXLINE(1208)			value = ::openfl::text::TextField_obj::_hx___regexEntities->__get((int)0).StaticCast<  ::EReg >()->replace(value,HX_("\"",22,00,00,00));
HXLINE(1209)			value = ::openfl::text::TextField_obj::_hx___regexEntities->__get((int)1).StaticCast<  ::EReg >()->replace(value,HX_("'",27,00,00,00));
HXLINE(1210)			value = ::openfl::text::TextField_obj::_hx___regexEntities->__get((int)2).StaticCast<  ::EReg >()->replace(value,HX_("&",26,00,00,00));
HXLINE(1214)			HX_VARI( ::Array< ::String >,segments) = value.split(HX_("<",3c,00,00,00));
HXLINE(1216)			Bool _hx_tmp1 = (segments->length == (int)1);
HXDLIN(1216)			if (_hx_tmp1) {
HXLINE(1218)				value = ::openfl::text::TextField_obj::_hx___regexHTMLTag->replace(value,HX_("",00,00,00,00));
HXLINE(1220)				Bool _hx_tmp2 = (this->_hx___textEngine->textFormatRanges->length > (int)1);
HXDLIN(1220)				if (_hx_tmp2) {
HXLINE(1222)					Int _hx_tmp3 = (this->_hx___textEngine->textFormatRanges->length - (int)1);
HXDLIN(1222)					this->_hx___textEngine->textFormatRanges->removeRange((int)1,_hx_tmp3);
            				}
HXLINE(1226)				value = ::openfl::text::TextField_obj::_hx___regexEntities->__get((int)3).StaticCast<  ::EReg >()->replace(value,HX_("<",3c,00,00,00));
HXLINE(1227)				value = ::openfl::text::TextField_obj::_hx___regexEntities->__get((int)4).StaticCast<  ::EReg >()->replace(value,HX_(">",3e,00,00,00));
HXLINE(1229)				HX_VARI(  ::openfl::_internal::text::TextFormatRange,range) = this->_hx___textEngine->textFormatRanges->__get((int)0).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXLINE(1230)				range->format = this->_hx___textFormat;
HXLINE(1231)				range->start = (int)0;
HXLINE(1232)				range->end = value.length;
HXLINE(1234)				this->_hx___updateText(value);
HXLINE(1236)				return value;
            			}
            			else {
HXLINE(1240)				this->_hx___textEngine->textFormatRanges->removeRange((int)0,this->_hx___textEngine->textFormatRanges->length);
HXLINE(1242)				value = HX_("",00,00,00,00);
HXLINE(1243)				HX_VAR( ::String,segment);
HXLINE(1245)				{
HXLINE(1245)					HX_VARI( Int,_g1) = (int)0;
HXDLIN(1245)					HX_VARI( Int,_g) = segments->length;
HXDLIN(1245)					while((_g1 < _g)){
HXLINE(1245)						HX_VARI( Int,i) = _g1++;
HXLINE(1247)						segment = segments->__get(i);
HXLINE(1248)						segment = ::openfl::text::TextField_obj::_hx___regexEntities->__get((int)3).StaticCast<  ::EReg >()->replace(segment,HX_("<",3c,00,00,00));
HXLINE(1249)						segment = ::openfl::text::TextField_obj::_hx___regexEntities->__get((int)4).StaticCast<  ::EReg >()->replace(segment,HX_(">",3e,00,00,00));
HXLINE(1250)						segments[i] = segment;
            					}
            				}
HXLINE(1254)				 ::openfl::text::TextFormat _hx_tmp4 = this->_hx___textFormat->clone();
HXDLIN(1254)				HX_VARI( ::Array< ::Dynamic>,formatStack) = ::Array_obj< ::Dynamic>::__new(1)->init(0,_hx_tmp4);
HXLINE(1255)				HX_VAR( ::String,sub);
HXLINE(1256)				HX_VARI( Bool,noLineBreak) = false;
HXLINE(1258)				{
HXLINE(1258)					HX_VARI_NAME( Int,_g2,"_g") = (int)0;
HXDLIN(1258)					while((_g2 < segments->length)){
HXLINE(1258)						HX_VARI_NAME( ::String,segment1,"segment") = segments->__get(_g2);
HXDLIN(1258)						++_g2;
HXLINE(1260)						if ((segment1 == HX_("",00,00,00,00))) {
HXLINE(1260)							continue;
            						}
HXLINE(1262)						::String _hx_tmp5 = segment1.substr((int)0,(int)1);
HXDLIN(1262)						HX_VARI( Bool,isClosingTag) = (_hx_tmp5 == HX_("/",2f,00,00,00));
HXLINE(1263)						HX_VARI( Int,tagEndIndex) = segment1.indexOf(HX_(">",3e,00,00,00),null());
HXLINE(1264)						HX_VARI( Int,start) = (tagEndIndex + (int)1);
HXLINE(1265)						HX_VARI( Int,spaceIndex) = segment1.indexOf(HX_(" ",20,00,00,00),null());
HXLINE(1266)						Int _hx_tmp6;
HXDLIN(1266)						if (isClosingTag) {
HXLINE(1266)							_hx_tmp6 = (int)1;
            						}
            						else {
HXLINE(1266)							_hx_tmp6 = (int)0;
            						}
HXDLIN(1266)						 ::Dynamic _hx_tmp7;
HXDLIN(1266)						Bool _hx_tmp8;
HXDLIN(1266)						if ((spaceIndex > (int)-1)) {
HXLINE(1266)							_hx_tmp8 = (spaceIndex < tagEndIndex);
            						}
            						else {
HXLINE(1266)							_hx_tmp8 = false;
            						}
HXDLIN(1266)						if (_hx_tmp8) {
HXLINE(1266)							_hx_tmp7 = spaceIndex;
            						}
            						else {
HXLINE(1266)							_hx_tmp7 = tagEndIndex;
            						}
HXDLIN(1266)						HX_VARI( ::String,tagName) = segment1.substring(_hx_tmp6,_hx_tmp7);
HXLINE(1267)						HX_VAR(  ::openfl::text::TextFormat,format);
HXLINE(1269)						if (isClosingTag) {
HXLINE(1271)							formatStack->pop().StaticCast<  ::openfl::text::TextFormat >();
HXLINE(1272)							Int _hx_tmp9 = (formatStack->length - (int)1);
HXDLIN(1272)							format = formatStack->__get(_hx_tmp9).StaticCast<  ::openfl::text::TextFormat >()->clone();
HXLINE(1274)							Bool _hx_tmp10;
HXDLIN(1274)							::String _hx_tmp11 = tagName.toLowerCase();
HXDLIN(1274)							if ((_hx_tmp11 == HX_("p",70,00,00,00))) {
HXLINE(1274)								_hx_tmp10 = (this->_hx___textEngine->textFormatRanges->length > (int)0);
            							}
            							else {
HXLINE(1274)								_hx_tmp10 = false;
            							}
HXDLIN(1274)							if (_hx_tmp10) {
HXLINE(1276)								hx::AddEq(value,HX_("\n",0a,00,00,00));
HXLINE(1277)								noLineBreak = true;
            							}
HXLINE(1281)							Bool _hx_tmp12 = (start < segment1.length);
HXDLIN(1281)							if (_hx_tmp12) {
HXLINE(1283)								sub = segment1.substr(start,null());
HXLINE(1284)								Int _hx_tmp13 = value.length;
HXDLIN(1284)								Int _hx_tmp14 = (value.length + sub.length);
HXDLIN(1284)								this->_hx___textEngine->textFormatRanges->push( ::openfl::_internal::text::TextFormatRange_obj::__new(format,_hx_tmp13,_hx_tmp14));
HXLINE(1285)								hx::AddEq(value,sub);
HXLINE(1286)								noLineBreak = false;
            							}
            						}
            						else {
HXLINE(1292)							Int _hx_tmp15 = (formatStack->length - (int)1);
HXDLIN(1292)							format = formatStack->__get(_hx_tmp15).StaticCast<  ::openfl::text::TextFormat >()->clone();
HXLINE(1294)							if ((tagEndIndex > (int)-1)) {
HXLINE(1296)								{
HXLINE(1296)									HX_VARI_NAME( ::String,_g11,"_g1") = tagName.toLowerCase();
HXDLIN(1296)									::String _hx_switch_0 = _g11;
            									if (  (_hx_switch_0==HX_("b",62,00,00,00)) ){
HXLINE(1334)										format->bold = true;
HXDLIN(1334)										goto _hx_goto_22;
            									}
            									if (  (_hx_switch_0==HX_("em",68,58,00,00)) ||  (_hx_switch_0==HX_("i",69,00,00,00)) ){
HXLINE(1342)										format->italic = true;
HXDLIN(1342)										goto _hx_goto_22;
            									}
            									if (  (_hx_switch_0==HX_("font",cf,5d,c0,43)) ){
HXLINE(1314)										Bool _hx_tmp16 = ::openfl::text::TextField_obj::_hx___regexFace->match(segment1);
HXDLIN(1314)										if (_hx_tmp16) {
HXLINE(1316)											format->font = this->_hx___getAttributeMatch(::openfl::text::TextField_obj::_hx___regexFace);
            										}
HXLINE(1320)										Bool _hx_tmp17 = ::openfl::text::TextField_obj::_hx___regexColor->match(segment1);
HXDLIN(1320)										if (_hx_tmp17) {
HXLINE(1322)											::String _hx_tmp18 = this->_hx___getAttributeMatch(::openfl::text::TextField_obj::_hx___regexColor);
HXDLIN(1322)											format->color = ::Std_obj::parseInt((HX_("0x",48,2a,00,00) + _hx_tmp18));
            										}
HXLINE(1326)										Bool _hx_tmp19 = ::openfl::text::TextField_obj::_hx___regexSize->match(segment1);
HXDLIN(1326)										if (_hx_tmp19) {
HXLINE(1328)											::String _hx_tmp20 = this->_hx___getAttributeMatch(::openfl::text::TextField_obj::_hx___regexSize);
HXDLIN(1328)											format->size = ::Std_obj::parseInt(_hx_tmp20);
            										}
HXLINE(1312)										goto _hx_goto_22;
            									}
            									if (  (_hx_switch_0==HX_("p",70,00,00,00)) ){
HXLINE(1300)										Bool _hx_tmp21;
HXDLIN(1300)										if ((this->_hx___textEngine->textFormatRanges->length > (int)0)) {
HXLINE(1300)											_hx_tmp21 = !(noLineBreak);
            										}
            										else {
HXLINE(1300)											_hx_tmp21 = false;
            										}
HXDLIN(1300)										if (_hx_tmp21) {
HXLINE(1302)											hx::AddEq(value,HX_("\n",0a,00,00,00));
            										}
HXLINE(1306)										Bool _hx_tmp22 = ::openfl::text::TextField_obj::_hx___regexAlign->match(segment1);
HXDLIN(1306)										if (_hx_tmp22) {
HXLINE(1308)											::String _hx_tmp23 = this->_hx___getAttributeMatch(::openfl::text::TextField_obj::_hx___regexAlign).toLowerCase();
HXDLIN(1308)											format->align = ::openfl::text::_TextFormatAlign::TextFormatAlign_Impl__obj::fromString(_hx_tmp23);
            										}
HXLINE(1298)										goto _hx_goto_22;
            									}
            									if (  (_hx_switch_0==HX_("textformat",a4,9b,ea,ff)) ){
HXLINE(1346)										Bool _hx_tmp24 = ::openfl::text::TextField_obj::_hx___regexBlockIndent->match(segment1);
HXDLIN(1346)										if (_hx_tmp24) {
HXLINE(1348)											::String _hx_tmp25 = this->_hx___getAttributeMatch(::openfl::text::TextField_obj::_hx___regexBlockIndent);
HXDLIN(1348)											format->blockIndent = ::Std_obj::parseInt(_hx_tmp25);
            										}
HXLINE(1352)										Bool _hx_tmp26 = ::openfl::text::TextField_obj::_hx___regexIndent->match(segment1);
HXDLIN(1352)										if (_hx_tmp26) {
HXLINE(1354)											::String _hx_tmp27 = this->_hx___getAttributeMatch(::openfl::text::TextField_obj::_hx___regexIndent);
HXDLIN(1354)											format->indent = ::Std_obj::parseInt(_hx_tmp27);
            										}
HXLINE(1358)										Bool _hx_tmp28 = ::openfl::text::TextField_obj::_hx___regexLeading->match(segment1);
HXDLIN(1358)										if (_hx_tmp28) {
HXLINE(1360)											::String _hx_tmp29 = this->_hx___getAttributeMatch(::openfl::text::TextField_obj::_hx___regexLeading);
HXDLIN(1360)											format->leading = ::Std_obj::parseInt(_hx_tmp29);
            										}
HXLINE(1364)										Bool _hx_tmp30 = ::openfl::text::TextField_obj::_hx___regexLeftMargin->match(segment1);
HXDLIN(1364)										if (_hx_tmp30) {
HXLINE(1366)											::String _hx_tmp31 = this->_hx___getAttributeMatch(::openfl::text::TextField_obj::_hx___regexLeftMargin);
HXDLIN(1366)											format->leftMargin = ::Std_obj::parseInt(_hx_tmp31);
            										}
HXLINE(1370)										Bool _hx_tmp32 = ::openfl::text::TextField_obj::_hx___regexRightMargin->match(segment1);
HXDLIN(1370)										if (_hx_tmp32) {
HXLINE(1372)											::String _hx_tmp33 = this->_hx___getAttributeMatch(::openfl::text::TextField_obj::_hx___regexRightMargin);
HXDLIN(1372)											format->rightMargin = ::Std_obj::parseInt(_hx_tmp33);
            										}
HXLINE(1376)										Bool _hx_tmp34 = ::openfl::text::TextField_obj::_hx___regexTabStops->match(segment1);
HXDLIN(1376)										if (_hx_tmp34) {
HXLINE(1378)											HX_VARI( ::Array< ::String >,values) = this->_hx___getAttributeMatch(::openfl::text::TextField_obj::_hx___regexTabStops).split(HX_(" ",20,00,00,00));
HXLINE(1379)											HX_VARI( ::Array< ::Dynamic>,tabStops) = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1381)											{
HXLINE(1381)												HX_VARI_NAME( Int,_g12,"_g1") = (int)0;
HXDLIN(1381)												while((_g12 < values->length)){
HXLINE(1381)													HX_VARI( ::String,stop) = values->__get(_g12);
HXDLIN(1381)													++_g12;
HXLINE(1383)													 ::Dynamic _hx_tmp35 = ::Std_obj::parseInt(stop);
HXDLIN(1383)													tabStops->push(_hx_tmp35);
            												}
            											}
HXLINE(1387)											format->tabStops = tabStops;
            										}
HXLINE(1344)										goto _hx_goto_22;
            									}
            									if (  (_hx_switch_0==HX_("u",75,00,00,00)) ){
HXLINE(1338)										format->underline = true;
HXDLIN(1338)										goto _hx_goto_22;
            									}
            									_hx_goto_22:;
            								}
HXLINE(1393)								formatStack->push(format);
HXLINE(1395)								Bool _hx_tmp36 = (start < segment1.length);
HXDLIN(1395)								if (_hx_tmp36) {
HXLINE(1397)									sub = segment1.substring(start,null());
HXLINE(1398)									Int _hx_tmp37 = value.length;
HXDLIN(1398)									Int _hx_tmp38 = (value.length + sub.length);
HXDLIN(1398)									this->_hx___textEngine->textFormatRanges->push( ::openfl::_internal::text::TextFormatRange_obj::__new(format,_hx_tmp37,_hx_tmp38));
HXLINE(1399)									hx::AddEq(value,sub);
HXLINE(1400)									noLineBreak = false;
            								}
            							}
            							else {
HXLINE(1406)								Int _hx_tmp39 = value.length;
HXDLIN(1406)								Int _hx_tmp40 = (value.length + segment1.length);
HXDLIN(1406)								this->_hx___textEngine->textFormatRanges->push( ::openfl::_internal::text::TextFormatRange_obj::__new(format,_hx_tmp39,_hx_tmp40));
HXLINE(1407)								hx::AddEq(value,segment1);
HXLINE(1408)								noLineBreak = false;
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(1420)		this->_hx___updateText(value);
HXLINE(1422)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_htmlText,return )

Int TextField_obj::get_length(){
            	HX_STACK_FRAME("openfl.text.TextField","get_length",0xdece21d3,"openfl.text.TextField.get_length","openfl/text/TextField.hx",1427,0xccf02094)
            	HX_STACK_THIS(this)
HXLINE(1429)		Bool _hx_tmp = hx::IsNotNull( this->_hx___text );
HXDLIN(1429)		if (_hx_tmp) {
HXLINE(1431)			return this->_hx___text.length;
            		}
HXLINE(1435)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_length,return )

Int TextField_obj::get_maxChars(){
            	HX_STACK_FRAME("openfl.text.TextField","get_maxChars",0x980651c6,"openfl.text.TextField.get_maxChars","openfl/text/TextField.hx",1442,0xccf02094)
            	HX_STACK_THIS(this)
HXLINE(1442)		return this->_hx___textEngine->maxChars;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_maxChars,return )

Int TextField_obj::set_maxChars(Int value){
            	HX_STACK_FRAME("openfl.text.TextField","set_maxChars",0xacff753a,"openfl.text.TextField.set_maxChars","openfl/text/TextField.hx",1447,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1449)		Bool _hx_tmp = (value != this->_hx___textEngine->maxChars);
HXDLIN(1449)		if (_hx_tmp) {
HXLINE(1451)			this->_hx___dirty = true;
HXLINE(1452)			this->_hx___layoutDirty = true;
            		}
HXLINE(1456)		return (this->_hx___textEngine->maxChars = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_maxChars,return )

Int TextField_obj::get_maxScrollH(){
            	HX_STACK_FRAME("openfl.text.TextField","get_maxScrollH",0xc4f0b4c4,"openfl.text.TextField.get_maxScrollH","openfl/text/TextField.hx",1461,0xccf02094)
            	HX_STACK_THIS(this)
HXLINE(1463)		this->_hx___updateLayout();
HXLINE(1465)		return this->_hx___textEngine->maxScrollH;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_maxScrollH,return )

Int TextField_obj::get_maxScrollV(){
            	HX_STACK_FRAME("openfl.text.TextField","get_maxScrollV",0xc4f0b4d2,"openfl.text.TextField.get_maxScrollV","openfl/text/TextField.hx",1470,0xccf02094)
            	HX_STACK_THIS(this)
HXLINE(1472)		this->_hx___updateLayout();
HXLINE(1474)		return this->_hx___textEngine->maxScrollV;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_maxScrollV,return )

Bool TextField_obj::get_mouseWheelEnabled(){
            	HX_STACK_FRAME("openfl.text.TextField","get_mouseWheelEnabled",0xdd79871e,"openfl.text.TextField.get_mouseWheelEnabled","openfl/text/TextField.hx",1481,0xccf02094)
            	HX_STACK_THIS(this)
HXLINE(1481)		return this->_hx___mouseWheelEnabled;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_mouseWheelEnabled,return )

Bool TextField_obj::set_mouseWheelEnabled(Bool value){
            	HX_STACK_FRAME("openfl.text.TextField","set_mouseWheelEnabled",0x3182552a,"openfl.text.TextField.set_mouseWheelEnabled","openfl/text/TextField.hx",1488,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1488)		return (this->_hx___mouseWheelEnabled = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_mouseWheelEnabled,return )

Bool TextField_obj::get_multiline(){
            	HX_STACK_FRAME("openfl.text.TextField","get_multiline",0x24925820,"openfl.text.TextField.get_multiline","openfl/text/TextField.hx",1495,0xccf02094)
            	HX_STACK_THIS(this)
HXLINE(1495)		return this->_hx___textEngine->multiline;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_multiline,return )

Bool TextField_obj::set_multiline(Bool value){
            	HX_STACK_FRAME("openfl.text.TextField","set_multiline",0x69983a2c,"openfl.text.TextField.set_multiline","openfl/text/TextField.hx",1500,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1502)		Bool _hx_tmp = (value != this->_hx___textEngine->multiline);
HXDLIN(1502)		if (_hx_tmp) {
HXLINE(1504)			this->_hx___dirty = true;
HXLINE(1505)			this->_hx___layoutDirty = true;
            		}
HXLINE(1509)		return (this->_hx___textEngine->multiline = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_multiline,return )

Int TextField_obj::get_numLines(){
            	HX_STACK_FRAME("openfl.text.TextField","get_numLines",0xda475406,"openfl.text.TextField.get_numLines","openfl/text/TextField.hx",1514,0xccf02094)
            	HX_STACK_THIS(this)
HXLINE(1516)		this->_hx___updateLayout();
HXLINE(1518)		return this->_hx___textEngine->numLines;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_numLines,return )

::String TextField_obj::get_restrict(){
            	HX_STACK_FRAME("openfl.text.TextField","get_restrict",0x99d42d69,"openfl.text.TextField.get_restrict","openfl/text/TextField.hx",1525,0xccf02094)
            	HX_STACK_THIS(this)
HXLINE(1525)		return this->_hx___textEngine->restrict;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_restrict,return )

::String TextField_obj::set_restrict(::String value){
            	HX_STACK_FRAME("openfl.text.TextField","set_restrict",0xaecd50dd,"openfl.text.TextField.set_restrict","openfl/text/TextField.hx",1532,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1532)		return (this->_hx___textEngine->restrict = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_restrict,return )

Int TextField_obj::get_scrollH(){
            	HX_STACK_FRAME("openfl.text.TextField","get_scrollH",0xbeccf60e,"openfl.text.TextField.get_scrollH","openfl/text/TextField.hx",1539,0xccf02094)
            	HX_STACK_THIS(this)
HXLINE(1539)		return this->_hx___textEngine->scrollH;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_scrollH,return )

Int TextField_obj::set_scrollH(Int value){
            	HX_STACK_FRAME("openfl.text.TextField","set_scrollH",0xc939fd1a,"openfl.text.TextField.set_scrollH","openfl/text/TextField.hx",1544,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1546)		this->_hx___updateLayout();
HXLINE(1548)		Bool _hx_tmp = (value > this->_hx___textEngine->maxScrollH);
HXDLIN(1548)		if (_hx_tmp) {
HXLINE(1548)			value = this->_hx___textEngine->maxScrollH;
            		}
HXLINE(1549)		Bool _hx_tmp1 = (value < (int)0);
HXDLIN(1549)		if (_hx_tmp1) {
HXLINE(1549)			value = (int)0;
            		}
HXLINE(1551)		Bool _hx_tmp2 = (value != this->_hx___textEngine->scrollH);
HXDLIN(1551)		if (_hx_tmp2) {
HXLINE(1553)			this->_hx___dirty = true;
            		}
HXLINE(1557)		return (this->_hx___textEngine->scrollH = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_scrollH,return )

Int TextField_obj::get_scrollV(){
            	HX_STACK_FRAME("openfl.text.TextField","get_scrollV",0xbeccf61c,"openfl.text.TextField.get_scrollV","openfl/text/TextField.hx",1564,0xccf02094)
            	HX_STACK_THIS(this)
HXLINE(1564)		return this->_hx___textEngine->scrollV;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_scrollV,return )

Int TextField_obj::set_scrollV(Int value){
            	HX_STACK_FRAME("openfl.text.TextField","set_scrollV",0xc939fd28,"openfl.text.TextField.set_scrollV","openfl/text/TextField.hx",1569,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1571)		this->_hx___updateLayout();
HXLINE(1573)		Bool _hx_tmp = (value > this->_hx___textEngine->maxScrollV);
HXDLIN(1573)		if (_hx_tmp) {
HXLINE(1573)			value = this->_hx___textEngine->maxScrollV;
            		}
HXLINE(1574)		Bool _hx_tmp1 = (value < (int)1);
HXDLIN(1574)		if (_hx_tmp1) {
HXLINE(1574)			value = (int)1;
            		}
HXLINE(1576)		Bool _hx_tmp2 = (value != this->_hx___textEngine->scrollV);
HXDLIN(1576)		if (_hx_tmp2) {
HXLINE(1578)			this->_hx___dirty = true;
            		}
HXLINE(1582)		return (this->_hx___textEngine->scrollV = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_scrollV,return )

Bool TextField_obj::get_selectable(){
            	HX_STACK_FRAME("openfl.text.TextField","get_selectable",0xee1ebe03,"openfl.text.TextField.get_selectable","openfl/text/TextField.hx",1589,0xccf02094)
            	HX_STACK_THIS(this)
HXLINE(1589)		return this->_hx___textEngine->selectable;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_selectable,return )

Bool TextField_obj::set_selectable(Bool value){
            	HX_STACK_FRAME("openfl.text.TextField","set_selectable",0x0e3ea677,"openfl.text.TextField.set_selectable","openfl/text/TextField.hx",1594,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1596)		Bool _hx_tmp;
HXDLIN(1596)		Bool _hx_tmp1 = (value != this->_hx___textEngine->selectable);
HXDLIN(1596)		if (_hx_tmp1) {
HXLINE(1596)			 ::Dynamic _hx_tmp2 = this->get_type();
HXDLIN(1596)			_hx_tmp = hx::IsEq( _hx_tmp2,(int)1 );
            		}
            		else {
HXLINE(1596)			_hx_tmp = false;
            		}
HXDLIN(1596)		if (_hx_tmp) {
HXLINE(1598)			Bool _hx_tmp3;
HXDLIN(1598)			Bool _hx_tmp4 = hx::IsNotNull( this->stage );
HXDLIN(1598)			if (_hx_tmp4) {
HXLINE(1598)				 ::openfl::display::InteractiveObject _hx_tmp5 = this->stage->get_focus();
HXDLIN(1598)				_hx_tmp3 = hx::IsEq( _hx_tmp5,hx::ObjectPtr<OBJ_>(this) );
            			}
            			else {
HXLINE(1598)				_hx_tmp3 = false;
            			}
HXDLIN(1598)			if (_hx_tmp3) {
HXLINE(1600)				this->_hx___startTextInput();
            			}
            			else {
HXLINE(1602)				if (!(value)) {
HXLINE(1604)					this->_hx___stopTextInput();
            				}
            			}
            		}
HXLINE(1610)		return (this->_hx___textEngine->selectable = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_selectable,return )

Int TextField_obj::get_selectionBeginIndex(){
            	HX_STACK_FRAME("openfl.text.TextField","get_selectionBeginIndex",0xb79fa288,"openfl.text.TextField.get_selectionBeginIndex","openfl/text/TextField.hx",1617,0xccf02094)
            	HX_STACK_THIS(this)
HXLINE(1617)		Float _hx_tmp = ::Math_obj::min(this->_hx___caretIndex,this->_hx___selectionIndex);
HXDLIN(1617)		return ::Std_obj::_hx_int(_hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_selectionBeginIndex,return )

Int TextField_obj::get_selectionEndIndex(){
            	HX_STACK_FRAME("openfl.text.TextField","get_selectionEndIndex",0xc3677dd6,"openfl.text.TextField.get_selectionEndIndex","openfl/text/TextField.hx",1624,0xccf02094)
            	HX_STACK_THIS(this)
HXLINE(1624)		Float _hx_tmp = ::Math_obj::max(this->_hx___caretIndex,this->_hx___selectionIndex);
HXDLIN(1624)		return ::Std_obj::_hx_int(_hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_selectionEndIndex,return )

Float TextField_obj::get_sharpness(){
            	HX_STACK_FRAME("openfl.text.TextField","get_sharpness",0xa1a5a7b4,"openfl.text.TextField.get_sharpness","openfl/text/TextField.hx",1631,0xccf02094)
            	HX_STACK_THIS(this)
HXLINE(1631)		return this->_hx___textEngine->sharpness;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_sharpness,return )

Float TextField_obj::set_sharpness(Float value){
            	HX_STACK_FRAME("openfl.text.TextField","set_sharpness",0xe6ab89c0,"openfl.text.TextField.set_sharpness","openfl/text/TextField.hx",1636,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1638)		Bool _hx_tmp = (value != this->_hx___textEngine->sharpness);
HXDLIN(1638)		if (_hx_tmp) {
HXLINE(1640)			this->_hx___dirty = true;
            		}
HXLINE(1644)		return (this->_hx___textEngine->sharpness = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_sharpness,return )

::String TextField_obj::get_text(){
            	HX_STACK_FRAME("openfl.text.TextField","get_text",0x3b0d545a,"openfl.text.TextField.get_text","openfl/text/TextField.hx",1651,0xccf02094)
            	HX_STACK_THIS(this)
HXLINE(1651)		return this->_hx___text;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_text,return )

::String TextField_obj::set_text(::String value){
            	HX_STACK_FRAME("openfl.text.TextField","set_text",0xe96aadce,"openfl.text.TextField.set_text","openfl/text/TextField.hx",1656,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1658)		Bool _hx_tmp;
HXDLIN(1658)		if (!(this->_hx___isHTML)) {
HXLINE(1658)			_hx_tmp = (this->_hx___text != value);
            		}
            		else {
HXLINE(1658)			_hx_tmp = true;
            		}
HXDLIN(1658)		if (_hx_tmp) {
HXLINE(1660)			this->_hx___dirty = true;
HXLINE(1661)			this->_hx___layoutDirty = true;
            		}
            		else {
HXLINE(1665)			return value;
            		}
HXLINE(1669)		Bool _hx_tmp1 = (this->_hx___textEngine->textFormatRanges->length > (int)1);
HXDLIN(1669)		if (_hx_tmp1) {
HXLINE(1671)			Int _hx_tmp2 = (this->_hx___textEngine->textFormatRanges->length - (int)1);
HXDLIN(1671)			this->_hx___textEngine->textFormatRanges->removeRange((int)1,_hx_tmp2);
            		}
HXLINE(1675)		HX_VARI(  ::openfl::_internal::text::TextFormatRange,range) = this->_hx___textEngine->textFormatRanges->__get((int)0).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXLINE(1676)		range->format = this->_hx___textFormat;
HXLINE(1677)		range->start = (int)0;
HXLINE(1678)		range->end = value.length;
HXLINE(1680)		this->_hx___isHTML = false;
HXLINE(1682)		this->_hx___updateText(value);
HXLINE(1684)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_text,return )

Int TextField_obj::get_textColor(){
            	HX_STACK_FRAME("openfl.text.TextField","get_textColor",0x69ca86a9,"openfl.text.TextField.get_textColor","openfl/text/TextField.hx",1691,0xccf02094)
            	HX_STACK_THIS(this)
HXLINE(1691)		return this->_hx___textFormat->color;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_textColor,return )

Int TextField_obj::set_textColor(Int value){
            	HX_STACK_FRAME("openfl.text.TextField","set_textColor",0xaed068b5,"openfl.text.TextField.set_textColor","openfl/text/TextField.hx",1696,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1698)		Bool _hx_tmp = hx::IsNotEq( value,this->_hx___textFormat->color );
HXDLIN(1698)		if (_hx_tmp) {
HXLINE(1698)			this->_hx___dirty = true;
            		}
HXLINE(1700)		{
HXLINE(1700)			HX_VARI( Int,_g) = (int)0;
HXDLIN(1700)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->_hx___textEngine->textFormatRanges;
HXDLIN(1700)			while((_g < _g1->length)){
HXLINE(1700)				HX_VARI(  ::openfl::_internal::text::TextFormatRange,range) = _g1->__get(_g).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1700)				++_g;
HXLINE(1702)				range->format->color = value;
            			}
            		}
HXLINE(1706)		return (this->_hx___textFormat->color = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_textColor,return )

Float TextField_obj::get_textWidth(){
            	HX_STACK_FRAME("openfl.text.TextField","get_textWidth",0xe9d0cb4c,"openfl.text.TextField.get_textWidth","openfl/text/TextField.hx",1710,0xccf02094)
            	HX_STACK_THIS(this)
HXLINE(1712)		this->_hx___updateLayout();
HXLINE(1713)		return this->_hx___textEngine->textWidth;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_textWidth,return )

Float TextField_obj::get_textHeight(){
            	HX_STACK_FRAME("openfl.text.TextField","get_textHeight",0x63308fe1,"openfl.text.TextField.get_textHeight","openfl/text/TextField.hx",1718,0xccf02094)
            	HX_STACK_THIS(this)
HXLINE(1720)		this->_hx___updateLayout();
HXLINE(1721)		return this->_hx___textEngine->textHeight;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_textHeight,return )

 ::Dynamic TextField_obj::get_type(){
            	HX_STACK_FRAME("openfl.text.TextField","get_type",0x3b1c7a67,"openfl.text.TextField.get_type","openfl/text/TextField.hx",1728,0xccf02094)
            	HX_STACK_THIS(this)
HXLINE(1728)		return this->_hx___textEngine->type;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_type,return )

 ::Dynamic TextField_obj::set_type( ::Dynamic value){
            	HX_STACK_FRAME("openfl.text.TextField","set_type",0xe979d3db,"openfl.text.TextField.set_type","openfl/text/TextField.hx",1733,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1735)		Bool _hx_tmp = hx::IsNotEq( value,this->_hx___textEngine->type );
HXDLIN(1735)		if (_hx_tmp) {
HXLINE(1737)			if (hx::IsEq( value,(int)1 )) {
HXLINE(1739)				this->addEventListener(HX_("focusIn",dd,45,83,41),this->this_onFocusIn_dyn(),null(),null(),null());
HXLINE(1740)				this->addEventListener(HX_("focusOut",96,6f,5e,11),this->this_onFocusOut_dyn(),null(),null(),null());
HXLINE(1741)				this->addEventListener(HX_("addedToStage",63,22,55,0c),this->this_onAddedToStage_dyn(),null(),null(),null());
HXLINE(1743)				this->this_onFocusIn(null());
            			}
            			else {
HXLINE(1747)				this->removeEventListener(HX_("focusIn",dd,45,83,41),this->this_onFocusIn_dyn(),null());
HXLINE(1748)				this->removeEventListener(HX_("focusOut",96,6f,5e,11),this->this_onFocusOut_dyn(),null());
HXLINE(1749)				this->removeEventListener(HX_("addedToStage",63,22,55,0c),this->this_onAddedToStage_dyn(),null());
HXLINE(1751)				this->_hx___stopTextInput();
            			}
HXLINE(1755)			this->_hx___dirty = true;
            		}
HXLINE(1759)		return (this->_hx___textEngine->type = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_type,return )

Float TextField_obj::get_width(){
            	HX_STACK_FRAME("openfl.text.TextField","get_width",0x2d65e5b9,"openfl.text.TextField.get_width","openfl/text/TextField.hx",1764,0xccf02094)
            	HX_STACK_THIS(this)
HXLINE(1766)		this->_hx___updateLayout();
HXLINE(1767)		return this->_hx___textEngine->width;
            	}


Float TextField_obj::set_width(Float value){
            	HX_STACK_FRAME("openfl.text.TextField","set_width",0x10b6d1c5,"openfl.text.TextField.set_width","openfl/text/TextField.hx",1772,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1774)		Bool _hx_tmp;
HXDLIN(1774)		Float _hx_tmp1 = this->get_scaleX();
HXDLIN(1774)		if ((_hx_tmp1 == (int)1)) {
HXLINE(1774)			_hx_tmp = (this->_hx___textEngine->width != value);
            		}
            		else {
HXLINE(1774)			_hx_tmp = true;
            		}
HXDLIN(1774)		if (_hx_tmp) {
HXLINE(1776)			Bool _hx_tmp2 = !(this->_hx___transformDirty);
HXDLIN(1776)			if (_hx_tmp2) {
HXLINE(1776)				this->_hx___transformDirty = true;
HXDLIN(1776)				::openfl::display::DisplayObject_obj::_hx___worldTransformDirty++;
            			}
HXLINE(1777)			this->_hx___dirty = true;
HXLINE(1778)			this->_hx___layoutDirty = true;
            		}
HXLINE(1782)		this->set_scaleX((int)1);
HXLINE(1783)		return (this->_hx___textEngine->width = value);
            	}


Bool TextField_obj::get_wordWrap(){
            	HX_STACK_FRAME("openfl.text.TextField","get_wordWrap",0xa91076e1,"openfl.text.TextField.get_wordWrap","openfl/text/TextField.hx",1790,0xccf02094)
            	HX_STACK_THIS(this)
HXLINE(1790)		return this->_hx___textEngine->wordWrap;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_wordWrap,return )

Bool TextField_obj::set_wordWrap(Bool value){
            	HX_STACK_FRAME("openfl.text.TextField","set_wordWrap",0xbe099a55,"openfl.text.TextField.set_wordWrap","openfl/text/TextField.hx",1795,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1797)		Bool _hx_tmp = (value != this->_hx___textEngine->wordWrap);
HXDLIN(1797)		if (_hx_tmp) {
HXLINE(1799)			this->_hx___dirty = true;
HXLINE(1800)			this->_hx___layoutDirty = true;
            		}
HXLINE(1804)		return (this->_hx___textEngine->wordWrap = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_wordWrap,return )

void TextField_obj::stage_onMouseMove( ::openfl::events::MouseEvent event){
            	HX_STACK_FRAME("openfl.text.TextField","stage_onMouseMove",0x47084bd2,"openfl.text.TextField.stage_onMouseMove","openfl/text/TextField.hx",1816,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(event,"event")
HXLINE(1818)		Bool _hx_tmp = hx::IsNull( this->stage );
HXDLIN(1818)		if (_hx_tmp) {
HXLINE(1818)			return;
            		}
HXLINE(1820)		Bool _hx_tmp1;
HXDLIN(1820)		if (this->_hx___textEngine->selectable) {
HXLINE(1820)			_hx_tmp1 = (this->_hx___selectionIndex >= (int)0);
            		}
            		else {
HXLINE(1820)			_hx_tmp1 = false;
            		}
HXDLIN(1820)		if (_hx_tmp1) {
HXLINE(1822)			this->_hx___updateLayout();
HXLINE(1824)			Float _hx_tmp2 = this->get_mouseX();
HXDLIN(1824)			Float _hx_tmp3 = this->get_mouseY();
HXDLIN(1824)			HX_VARI( Int,position) = this->_hx___getPosition(_hx_tmp2,_hx_tmp3);
HXLINE(1826)			Bool _hx_tmp4 = (position != this->_hx___caretIndex);
HXDLIN(1826)			if (_hx_tmp4) {
HXLINE(1828)				this->_hx___caretIndex = position;
HXLINE(1829)				this->_hx___dirty = true;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,stage_onMouseMove,(void))

void TextField_obj::stage_onMouseUp( ::openfl::events::MouseEvent event){
            	HX_STACK_FRAME("openfl.text.TextField","stage_onMouseUp",0x9bb86cdc,"openfl.text.TextField.stage_onMouseUp","openfl/text/TextField.hx",1838,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(event,"event")
HXLINE(1840)		Bool _hx_tmp = hx::IsNull( this->stage );
HXDLIN(1840)		if (_hx_tmp) {
HXLINE(1840)			return;
            		}
HXLINE(1842)		this->stage->removeEventListener(HX_("mouseMove",d6,9b,b5,f4),this->stage_onMouseMove_dyn(),null());
HXLINE(1843)		this->stage->removeEventListener(HX_("mouseUp",e0,f3,72,c0),this->stage_onMouseUp_dyn(),null());
HXLINE(1845)		 ::openfl::display::InteractiveObject _hx_tmp1 = this->stage->get_focus();
HXDLIN(1845)		if (hx::IsEq( _hx_tmp1,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE(1847)			this->_hx___getWorldTransform();
HXLINE(1848)			this->_hx___updateLayout();
HXLINE(1850)			HX_VARI(  ::openfl::geom::Matrix,_this) = this->_hx___worldTransform;
HXDLIN(1850)			HX_VARI( Float,norm) = ((_this->a * _this->d) - (_this->b * _this->c));
HXLINE(1851)			HX_VARI_NAME(  ::openfl::geom::Matrix,_this1,"_this") = this->_hx___worldTransform;
HXDLIN(1851)			HX_VARI_NAME( Float,norm1,"norm") = ((_this1->a * _this1->d) - (_this1->b * _this1->c));
HXLINE(1853)			Float _hx_tmp2 = this->get_mouseX();
HXDLIN(1853)			Float _hx_tmp3 = this->get_mouseY();
HXDLIN(1853)			HX_VARI( Int,upPos) = this->_hx___getPosition(_hx_tmp2,_hx_tmp3);
HXLINE(1854)			HX_VAR( Int,leftPos);
HXLINE(1855)			HX_VAR( Int,rightPos);
HXLINE(1857)			Float _hx_tmp4 = ::Math_obj::min(this->_hx___selectionIndex,upPos);
HXDLIN(1857)			leftPos = ::Std_obj::_hx_int(_hx_tmp4);
HXLINE(1858)			Float _hx_tmp5 = ::Math_obj::max(this->_hx___selectionIndex,upPos);
HXDLIN(1858)			rightPos = ::Std_obj::_hx_int(_hx_tmp5);
HXLINE(1860)			this->_hx___selectionIndex = leftPos;
HXLINE(1861)			this->_hx___caretIndex = rightPos;
HXLINE(1863)			Bool _hx_tmp6 = this->_hx___inputEnabled;
HXDLIN(1863)			if (_hx_tmp6) {
HXLINE(1865)				this->this_onFocusIn(null());
HXLINE(1867)				this->_hx___stopCursorTimer();
HXLINE(1868)				this->_hx___startCursorTimer();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,stage_onMouseUp,(void))

void TextField_obj::this_onAddedToStage( ::openfl::events::Event event){
            	HX_STACK_FRAME("openfl.text.TextField","this_onAddedToStage",0x3dbcbc7f,"openfl.text.TextField.this_onAddedToStage","openfl/text/TextField.hx",1879,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(event,"event")
HXLINE(1879)		this->this_onFocusIn(null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,this_onAddedToStage,(void))

void TextField_obj::this_onFocusIn( ::openfl::events::FocusEvent event){
            	HX_STACK_FRAME("openfl.text.TextField","this_onFocusIn",0x90f9e141,"openfl.text.TextField.this_onFocusIn","openfl/text/TextField.hx",1886,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(event,"event")
HXLINE(1886)		Bool _hx_tmp;
HXDLIN(1886)		Bool _hx_tmp1;
HXDLIN(1886)		Bool _hx_tmp2;
HXDLIN(1886)		Bool _hx_tmp3 = this->get_selectable();
HXDLIN(1886)		if (_hx_tmp3) {
HXLINE(1886)			 ::Dynamic _hx_tmp4 = this->get_type();
HXDLIN(1886)			_hx_tmp2 = hx::IsEq( _hx_tmp4,(int)1 );
            		}
            		else {
HXLINE(1886)			_hx_tmp2 = false;
            		}
HXDLIN(1886)		if (_hx_tmp2) {
HXLINE(1886)			_hx_tmp1 = hx::IsNotNull( this->stage );
            		}
            		else {
HXLINE(1886)			_hx_tmp1 = false;
            		}
HXDLIN(1886)		if (_hx_tmp1) {
HXLINE(1886)			 ::openfl::display::InteractiveObject _hx_tmp5 = this->stage->get_focus();
HXDLIN(1886)			_hx_tmp = hx::IsEq( _hx_tmp5,hx::ObjectPtr<OBJ_>(this) );
            		}
            		else {
HXLINE(1886)			_hx_tmp = false;
            		}
HXDLIN(1886)		if (_hx_tmp) {
HXLINE(1888)			this->_hx___startTextInput();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,this_onFocusIn,(void))

void TextField_obj::this_onFocusOut( ::openfl::events::FocusEvent event){
            	HX_STACK_FRAME("openfl.text.TextField","this_onFocusOut",0x49afcbb2,"openfl.text.TextField.this_onFocusOut","openfl/text/TextField.hx",1897,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(event,"event")
HXLINE(1897)		this->_hx___stopTextInput();
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,this_onFocusOut,(void))

void TextField_obj::this_onMouseDown( ::openfl::events::MouseEvent event){
            	HX_STACK_FRAME("openfl.text.TextField","this_onMouseDown",0xfda1ed8b,"openfl.text.TextField.this_onMouseDown","openfl/text/TextField.hx",1902,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(event,"event")
HXLINE(1904)		Bool _hx_tmp = !(this->get_selectable());
HXDLIN(1904)		if (_hx_tmp) {
HXLINE(1904)			return;
            		}
HXLINE(1906)		this->_hx___updateLayout();
HXLINE(1908)		Float _hx_tmp1 = this->get_mouseX();
HXDLIN(1908)		Float _hx_tmp2 = this->get_mouseY();
HXDLIN(1908)		this->_hx___caretIndex = this->_hx___getPosition(_hx_tmp1,_hx_tmp2);
HXLINE(1909)		this->_hx___selectionIndex = this->_hx___caretIndex;
HXLINE(1910)		this->_hx___dirty = true;
HXLINE(1912)		this->stage->addEventListener(HX_("mouseMove",d6,9b,b5,f4),this->stage_onMouseMove_dyn(),null(),null(),null());
HXLINE(1913)		this->stage->addEventListener(HX_("mouseUp",e0,f3,72,c0),this->stage_onMouseUp_dyn(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,this_onMouseDown,(void))

void TextField_obj::window_onKeyDown(Int key,Int modifier){
            	HX_STACK_FRAME("openfl.text.TextField","window_onKeyDown",0x61330e17,"openfl.text.TextField.window_onKeyDown","openfl/text/TextField.hx",1920,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(key,"key")
            	HX_STACK_ARG(modifier,"modifier")
HXLINE(1920)		switch((int)(key)){
            			case (int)8: {
HXLINE(1929)				Bool _hx_tmp;
HXDLIN(1929)				if ((this->_hx___selectionIndex == this->_hx___caretIndex)) {
HXLINE(1929)					_hx_tmp = (this->_hx___caretIndex > (int)0);
            				}
            				else {
HXLINE(1929)					_hx_tmp = false;
            				}
HXDLIN(1929)				if (_hx_tmp) {
HXLINE(1931)					this->_hx___selectionIndex = (this->_hx___caretIndex - (int)1);
            				}
HXLINE(1935)				Bool _hx_tmp1 = (this->_hx___selectionIndex != this->_hx___caretIndex);
HXDLIN(1935)				if (_hx_tmp1) {
HXLINE(1937)					this->replaceSelectedText(HX_("",00,00,00,00));
HXLINE(1938)					this->_hx___selectionIndex = this->_hx___caretIndex;
HXLINE(1940)					this->dispatchEvent( ::openfl::events::Event_obj::__new(HX_("change",70,91,72,b7),true,null()));
            				}
            			}
            			break;
            			case (int)99: {
HXLINE(2029)				Bool _hx_tmp2;
HXDLIN(2029)				if ((modifier != (int)1024)) {
HXLINE(2029)					_hx_tmp2 = (modifier == (int)2048);
            				}
            				else {
HXLINE(2029)					_hx_tmp2 = true;
            				}
HXDLIN(2029)				if (_hx_tmp2) {
HXLINE(2031)					::String _hx_tmp3 = this->_hx___text.substring(this->_hx___caretIndex,this->_hx___selectionIndex);
HXDLIN(2031)					::lime::_hx_system::Clipboard_obj::set_text(_hx_tmp3);
            				}
            			}
            			break;
            			case (int)118: {
HXLINE(2052)				Bool _hx_tmp4;
HXDLIN(2052)				if ((modifier != (int)1024)) {
HXLINE(2052)					_hx_tmp4 = (modifier == (int)2048);
            				}
            				else {
HXLINE(2052)					_hx_tmp4 = true;
            				}
HXDLIN(2052)				if (_hx_tmp4) {
HXLINE(2054)					HX_VARI( ::String,text) = ::lime::_hx_system::Clipboard_obj::get_text();
HXLINE(2056)					Bool _hx_tmp5 = hx::IsNotNull( text );
HXDLIN(2056)					if (_hx_tmp5) {
HXLINE(2058)						this->replaceSelectedText(text);
            					}
            					else {
HXLINE(2062)						this->replaceSelectedText(HX_("",00,00,00,00));
            					}
HXLINE(2066)					this->dispatchEvent( ::openfl::events::Event_obj::__new(HX_("change",70,91,72,b7),true,null()));
            				}
            				else {
HXLINE(2070)					Int _hx_tmp6 = (this->_hx___textEngine->textFormatRanges->length - (int)1);
HXDLIN(2070)					this->_hx___textEngine->textFormatRanges->__get(_hx_tmp6).StaticCast<  ::openfl::_internal::text::TextFormatRange >()->end = this->_hx___text.length;
            				}
            			}
            			break;
            			case (int)120: {
HXLINE(2037)				Bool _hx_tmp7;
HXDLIN(2037)				if ((modifier != (int)1024)) {
HXLINE(2037)					_hx_tmp7 = (modifier == (int)2048);
            				}
            				else {
HXLINE(2037)					_hx_tmp7 = true;
            				}
HXDLIN(2037)				if (_hx_tmp7) {
HXLINE(2039)					::String _hx_tmp8 = this->_hx___text.substring(this->_hx___caretIndex,this->_hx___selectionIndex);
HXDLIN(2039)					::lime::_hx_system::Clipboard_obj::set_text(_hx_tmp8);
HXLINE(2041)					Bool _hx_tmp9 = (this->_hx___caretIndex != this->_hx___selectionIndex);
HXDLIN(2041)					if (_hx_tmp9) {
HXLINE(2043)						this->replaceSelectedText(HX_("",00,00,00,00));
HXLINE(2044)						this->dispatchEvent( ::openfl::events::Event_obj::__new(HX_("change",70,91,72,b7),true,null()));
            					}
            				}
            			}
            			break;
            			case (int)127: {
HXLINE(1946)				Bool _hx_tmp10;
HXDLIN(1946)				if ((this->_hx___selectionIndex == this->_hx___caretIndex)) {
HXLINE(1946)					_hx_tmp10 = (this->_hx___caretIndex < this->_hx___text.length);
            				}
            				else {
HXLINE(1946)					_hx_tmp10 = false;
            				}
HXDLIN(1946)				if (_hx_tmp10) {
HXLINE(1948)					this->_hx___selectionIndex = (this->_hx___caretIndex + (int)1);
            				}
HXLINE(1952)				Bool _hx_tmp11 = (this->_hx___selectionIndex != this->_hx___caretIndex);
HXDLIN(1952)				if (_hx_tmp11) {
HXLINE(1954)					this->replaceSelectedText(HX_("",00,00,00,00));
HXLINE(1955)					this->_hx___selectionIndex = this->_hx___caretIndex;
HXLINE(1957)					this->dispatchEvent( ::openfl::events::Event_obj::__new(HX_("change",70,91,72,b7),true,null()));
            				}
            			}
            			break;
            			case (int)1073741903: {
HXLINE(1996)				if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier)) {
HXLINE(1998)					Bool _hx_tmp12 = (this->_hx___caretIndex < this->_hx___text.length);
HXDLIN(1998)					if (_hx_tmp12) {
HXLINE(2000)						this->_hx___caretIndex++;
            					}
            				}
            				else {
HXLINE(2006)					Bool _hx_tmp13 = (this->_hx___selectionIndex == this->_hx___caretIndex);
HXDLIN(2006)					if (_hx_tmp13) {
HXLINE(2008)						Bool _hx_tmp14 = (this->_hx___caretIndex < this->_hx___text.length);
HXDLIN(2008)						if (_hx_tmp14) {
HXLINE(2010)							this->_hx___caretIndex++;
            						}
            					}
            					else {
HXLINE(2016)						Float _hx_tmp15 = ::Math_obj::max(this->_hx___caretIndex,this->_hx___selectionIndex);
HXDLIN(2016)						this->_hx___caretIndex = ::Std_obj::_hx_int(_hx_tmp15);
            					}
HXLINE(2020)					this->_hx___selectionIndex = this->_hx___caretIndex;
            				}
HXLINE(2024)				this->_hx___stopCursorTimer();
HXLINE(2025)				this->_hx___startCursorTimer();
            			}
            			break;
            			case (int)1073741904: {
HXLINE(1963)				if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier)) {
HXLINE(1965)					Bool _hx_tmp16 = (this->_hx___caretIndex > (int)0);
HXDLIN(1965)					if (_hx_tmp16) {
HXLINE(1967)						this->_hx___caretIndex--;
            					}
            				}
            				else {
HXLINE(1973)					Bool _hx_tmp17 = (this->_hx___selectionIndex == this->_hx___caretIndex);
HXDLIN(1973)					if (_hx_tmp17) {
HXLINE(1975)						Bool _hx_tmp18 = (this->_hx___caretIndex > (int)0);
HXDLIN(1975)						if (_hx_tmp18) {
HXLINE(1977)							this->_hx___caretIndex--;
            						}
            					}
            					else {
HXLINE(1983)						Float _hx_tmp19 = ::Math_obj::min(this->_hx___caretIndex,this->_hx___selectionIndex);
HXDLIN(1983)						this->_hx___caretIndex = ::Std_obj::_hx_int(_hx_tmp19);
            					}
HXLINE(1987)					this->_hx___selectionIndex = this->_hx___caretIndex;
            				}
HXLINE(1991)				this->_hx___stopCursorTimer();
HXLINE(1992)				this->_hx___startCursorTimer();
            			}
            			break;
            			case (int)13: case (int)1073741912: {
HXLINE(1924)				this->replaceSelectedText(HX_("\n",0a,00,00,00));
HXLINE(1925)				this->dispatchEvent( ::openfl::events::Event_obj::__new(HX_("change",70,91,72,b7),true,null()));
            			}
            			break;
            			default:{
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,window_onKeyDown,(void))

void TextField_obj::window_onTextInput(::String value){
            	HX_STACK_FRAME("openfl.text.TextField","window_onTextInput",0xe9818213,"openfl.text.TextField.window_onTextInput","openfl/text/TextField.hx",2081,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(2083)		this->replaceSelectedText(value);
HXLINE(2085)		this->dispatchEvent( ::openfl::events::Event_obj::__new(HX_("change",70,91,72,b7),true,null()));
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,window_onTextInput,(void))

 ::openfl::text::TextFormat TextField_obj::_hx___defaultTextFormat;

 ::EReg TextField_obj::_hx___regexAlign;

 ::EReg TextField_obj::_hx___regexColor;

 ::EReg TextField_obj::_hx___regexBlockIndent;

 ::EReg TextField_obj::_hx___regexBreakTag;

::Array< ::Dynamic> TextField_obj::_hx___regexEntities;

 ::EReg TextField_obj::_hx___regexFace;

 ::EReg TextField_obj::_hx___regexHTMLTag;

 ::EReg TextField_obj::_hx___regexIndent;

 ::EReg TextField_obj::_hx___regexLeading;

 ::EReg TextField_obj::_hx___regexLeftMargin;

 ::EReg TextField_obj::_hx___regexRightMargin;

 ::EReg TextField_obj::_hx___regexTabStops;

 ::EReg TextField_obj::_hx___regexSize;


TextField_obj::TextField_obj()
{
}

void TextField_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TextField);
	HX_MARK_MEMBER_NAME(_hx___bounds,"__bounds");
	HX_MARK_MEMBER_NAME(_hx___caretIndex,"__caretIndex");
	HX_MARK_MEMBER_NAME(_hx___cursorTimer,"__cursorTimer");
	HX_MARK_MEMBER_NAME(_hx___dirty,"__dirty");
	HX_MARK_MEMBER_NAME(_hx___displayAsPassword,"__displayAsPassword");
	HX_MARK_MEMBER_NAME(_hx___inputEnabled,"__inputEnabled");
	HX_MARK_MEMBER_NAME(_hx___isHTML,"__isHTML");
	HX_MARK_MEMBER_NAME(_hx___layoutDirty,"__layoutDirty");
	HX_MARK_MEMBER_NAME(_hx___mouseWheelEnabled,"__mouseWheelEnabled");
	HX_MARK_MEMBER_NAME(_hx___selectionIndex,"__selectionIndex");
	HX_MARK_MEMBER_NAME(_hx___showCursor,"__showCursor");
	HX_MARK_MEMBER_NAME(_hx___text,"__text");
	HX_MARK_MEMBER_NAME(_hx___textEngine,"__textEngine");
	HX_MARK_MEMBER_NAME(_hx___textFormat,"__textFormat");
	 ::openfl::display::InteractiveObject_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void TextField_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_hx___bounds,"__bounds");
	HX_VISIT_MEMBER_NAME(_hx___caretIndex,"__caretIndex");
	HX_VISIT_MEMBER_NAME(_hx___cursorTimer,"__cursorTimer");
	HX_VISIT_MEMBER_NAME(_hx___dirty,"__dirty");
	HX_VISIT_MEMBER_NAME(_hx___displayAsPassword,"__displayAsPassword");
	HX_VISIT_MEMBER_NAME(_hx___inputEnabled,"__inputEnabled");
	HX_VISIT_MEMBER_NAME(_hx___isHTML,"__isHTML");
	HX_VISIT_MEMBER_NAME(_hx___layoutDirty,"__layoutDirty");
	HX_VISIT_MEMBER_NAME(_hx___mouseWheelEnabled,"__mouseWheelEnabled");
	HX_VISIT_MEMBER_NAME(_hx___selectionIndex,"__selectionIndex");
	HX_VISIT_MEMBER_NAME(_hx___showCursor,"__showCursor");
	HX_VISIT_MEMBER_NAME(_hx___text,"__text");
	HX_VISIT_MEMBER_NAME(_hx___textEngine,"__textEngine");
	HX_VISIT_MEMBER_NAME(_hx___textFormat,"__textFormat");
	 ::openfl::display::InteractiveObject_obj::__Visit(HX_VISIT_ARG);
}

hx::Val TextField_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_text()); }
		if (HX_FIELD_EQ(inName,"type") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_type()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"border") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_border()); }
		if (HX_FIELD_EQ(inName,"length") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_length()); }
		if (HX_FIELD_EQ(inName,"__text") ) { return hx::Val( _hx___text); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"scrollH") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_scrollH()); }
		if (HX_FIELD_EQ(inName,"scrollV") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_scrollV()); }
		if (HX_FIELD_EQ(inName,"__dirty") ) { return hx::Val( _hx___dirty); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"autoSize") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_autoSize()); }
		if (HX_FIELD_EQ(inName,"htmlText") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_htmlText()); }
		if (HX_FIELD_EQ(inName,"maxChars") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_maxChars()); }
		if (HX_FIELD_EQ(inName,"numLines") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_numLines()); }
		if (HX_FIELD_EQ(inName,"restrict") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_restrict()); }
		if (HX_FIELD_EQ(inName,"wordWrap") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_wordWrap()); }
		if (HX_FIELD_EQ(inName,"__bounds") ) { return hx::Val( _hx___bounds); }
		if (HX_FIELD_EQ(inName,"__isHTML") ) { return hx::Val( _hx___isHTML); }
		if (HX_FIELD_EQ(inName,"get_text") ) { return hx::Val( get_text_dyn()); }
		if (HX_FIELD_EQ(inName,"set_text") ) { return hx::Val( set_text_dyn()); }
		if (HX_FIELD_EQ(inName,"get_type") ) { return hx::Val( get_type_dyn()); }
		if (HX_FIELD_EQ(inName,"set_type") ) { return hx::Val( set_type_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"multiline") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_multiline()); }
		if (HX_FIELD_EQ(inName,"sharpness") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_sharpness()); }
		if (HX_FIELD_EQ(inName,"textColor") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_textColor()); }
		if (HX_FIELD_EQ(inName,"textWidth") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_textWidth()); }
		if (HX_FIELD_EQ(inName,"__hitTest") ) { return hx::Val( _hx___hitTest_dyn()); }
		if (HX_FIELD_EQ(inName,"get_width") ) { return hx::Val( get_width_dyn()); }
		if (HX_FIELD_EQ(inName,"set_width") ) { return hx::Val( set_width_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"background") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_background()); }
		if (HX_FIELD_EQ(inName,"caretIndex") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_caretIndex()); }
		if (HX_FIELD_EQ(inName,"embedFonts") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_embedFonts()); }
		if (HX_FIELD_EQ(inName,"maxScrollH") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_maxScrollH()); }
		if (HX_FIELD_EQ(inName,"maxScrollV") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_maxScrollV()); }
		if (HX_FIELD_EQ(inName,"selectable") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_selectable()); }
		if (HX_FIELD_EQ(inName,"textHeight") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_textHeight()); }
		if (HX_FIELD_EQ(inName,"appendText") ) { return hx::Val( appendText_dyn()); }
		if (HX_FIELD_EQ(inName,"__renderGL") ) { return hx::Val( _hx___renderGL_dyn()); }
		if (HX_FIELD_EQ(inName,"get_border") ) { return hx::Val( get_border_dyn()); }
		if (HX_FIELD_EQ(inName,"set_border") ) { return hx::Val( set_border_dyn()); }
		if (HX_FIELD_EQ(inName,"get_height") ) { return hx::Val( get_height_dyn()); }
		if (HX_FIELD_EQ(inName,"set_height") ) { return hx::Val( set_height_dyn()); }
		if (HX_FIELD_EQ(inName,"get_length") ) { return hx::Val( get_length_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"borderColor") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_borderColor()); }
		if (HX_FIELD_EQ(inName,"gridFitType") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_gridFitType()); }
		if (HX_FIELD_EQ(inName,"getLineText") ) { return hx::Val( getLineText_dyn()); }
		if (HX_FIELD_EQ(inName,"replaceText") ) { return hx::Val( replaceText_dyn()); }
		if (HX_FIELD_EQ(inName,"__getBounds") ) { return hx::Val( _hx___getBounds_dyn()); }
		if (HX_FIELD_EQ(inName,"__getCursor") ) { return hx::Val( _hx___getCursor_dyn()); }
		if (HX_FIELD_EQ(inName,"__renderDOM") ) { return hx::Val( _hx___renderDOM_dyn()); }
		if (HX_FIELD_EQ(inName,"get_scrollH") ) { return hx::Val( get_scrollH_dyn()); }
		if (HX_FIELD_EQ(inName,"set_scrollH") ) { return hx::Val( set_scrollH_dyn()); }
		if (HX_FIELD_EQ(inName,"get_scrollV") ) { return hx::Val( get_scrollV_dyn()); }
		if (HX_FIELD_EQ(inName,"set_scrollV") ) { return hx::Val( set_scrollV_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__caretIndex") ) { return hx::Val( _hx___caretIndex); }
		if (HX_FIELD_EQ(inName,"__showCursor") ) { return hx::Val( _hx___showCursor); }
		if (HX_FIELD_EQ(inName,"__textEngine") ) { return hx::Val( _hx___textEngine); }
		if (HX_FIELD_EQ(inName,"__textFormat") ) { return hx::Val( _hx___textFormat); }
		if (HX_FIELD_EQ(inName,"setSelection") ) { return hx::Val( setSelection_dyn()); }
		if (HX_FIELD_EQ(inName,"__updateText") ) { return hx::Val( _hx___updateText_dyn()); }
		if (HX_FIELD_EQ(inName,"get_autoSize") ) { return hx::Val( get_autoSize_dyn()); }
		if (HX_FIELD_EQ(inName,"set_autoSize") ) { return hx::Val( set_autoSize_dyn()); }
		if (HX_FIELD_EQ(inName,"get_htmlText") ) { return hx::Val( get_htmlText_dyn()); }
		if (HX_FIELD_EQ(inName,"set_htmlText") ) { return hx::Val( set_htmlText_dyn()); }
		if (HX_FIELD_EQ(inName,"get_maxChars") ) { return hx::Val( get_maxChars_dyn()); }
		if (HX_FIELD_EQ(inName,"set_maxChars") ) { return hx::Val( set_maxChars_dyn()); }
		if (HX_FIELD_EQ(inName,"get_numLines") ) { return hx::Val( get_numLines_dyn()); }
		if (HX_FIELD_EQ(inName,"get_restrict") ) { return hx::Val( get_restrict_dyn()); }
		if (HX_FIELD_EQ(inName,"set_restrict") ) { return hx::Val( set_restrict_dyn()); }
		if (HX_FIELD_EQ(inName,"get_wordWrap") ) { return hx::Val( get_wordWrap_dyn()); }
		if (HX_FIELD_EQ(inName,"set_wordWrap") ) { return hx::Val( set_wordWrap_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"antiAliasType") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_antiAliasType()); }
		if (HX_FIELD_EQ(inName,"bottomScrollV") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_bottomScrollV()); }
		if (HX_FIELD_EQ(inName,"__cursorTimer") ) { return hx::Val( _hx___cursorTimer); }
		if (HX_FIELD_EQ(inName,"__layoutDirty") ) { return hx::Val( _hx___layoutDirty); }
		if (HX_FIELD_EQ(inName,"getLineLength") ) { return hx::Val( getLineLength_dyn()); }
		if (HX_FIELD_EQ(inName,"getLineOffset") ) { return hx::Val( getLineOffset_dyn()); }
		if (HX_FIELD_EQ(inName,"getTextFormat") ) { return hx::Val( getTextFormat_dyn()); }
		if (HX_FIELD_EQ(inName,"setTextFormat") ) { return hx::Val( setTextFormat_dyn()); }
		if (HX_FIELD_EQ(inName,"__getPosition") ) { return hx::Val( _hx___getPosition_dyn()); }
		if (HX_FIELD_EQ(inName,"__hitTestMask") ) { return hx::Val( _hx___hitTestMask_dyn()); }
		if (HX_FIELD_EQ(inName,"__renderCairo") ) { return hx::Val( _hx___renderCairo_dyn()); }
		if (HX_FIELD_EQ(inName,"get_multiline") ) { return hx::Val( get_multiline_dyn()); }
		if (HX_FIELD_EQ(inName,"set_multiline") ) { return hx::Val( set_multiline_dyn()); }
		if (HX_FIELD_EQ(inName,"get_sharpness") ) { return hx::Val( get_sharpness_dyn()); }
		if (HX_FIELD_EQ(inName,"set_sharpness") ) { return hx::Val( set_sharpness_dyn()); }
		if (HX_FIELD_EQ(inName,"get_textColor") ) { return hx::Val( get_textColor_dyn()); }
		if (HX_FIELD_EQ(inName,"set_textColor") ) { return hx::Val( set_textColor_dyn()); }
		if (HX_FIELD_EQ(inName,"get_textWidth") ) { return hx::Val( get_textWidth_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__inputEnabled") ) { return hx::Val( _hx___inputEnabled); }
		if (HX_FIELD_EQ(inName,"getLineMetrics") ) { return hx::Val( getLineMetrics_dyn()); }
		if (HX_FIELD_EQ(inName,"__renderCanvas") ) { return hx::Val( _hx___renderCanvas_dyn()); }
		if (HX_FIELD_EQ(inName,"__updateLayout") ) { return hx::Val( _hx___updateLayout_dyn()); }
		if (HX_FIELD_EQ(inName,"get_background") ) { return hx::Val( get_background_dyn()); }
		if (HX_FIELD_EQ(inName,"set_background") ) { return hx::Val( set_background_dyn()); }
		if (HX_FIELD_EQ(inName,"get_caretIndex") ) { return hx::Val( get_caretIndex_dyn()); }
		if (HX_FIELD_EQ(inName,"get_embedFonts") ) { return hx::Val( get_embedFonts_dyn()); }
		if (HX_FIELD_EQ(inName,"set_embedFonts") ) { return hx::Val( set_embedFonts_dyn()); }
		if (HX_FIELD_EQ(inName,"get_maxScrollH") ) { return hx::Val( get_maxScrollH_dyn()); }
		if (HX_FIELD_EQ(inName,"get_maxScrollV") ) { return hx::Val( get_maxScrollV_dyn()); }
		if (HX_FIELD_EQ(inName,"get_selectable") ) { return hx::Val( get_selectable_dyn()); }
		if (HX_FIELD_EQ(inName,"set_selectable") ) { return hx::Val( set_selectable_dyn()); }
		if (HX_FIELD_EQ(inName,"get_textHeight") ) { return hx::Val( get_textHeight_dyn()); }
		if (HX_FIELD_EQ(inName,"this_onFocusIn") ) { return hx::Val( this_onFocusIn_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"backgroundColor") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_backgroundColor()); }
		if (HX_FIELD_EQ(inName,"__stopTextInput") ) { return hx::Val( _hx___stopTextInput_dyn()); }
		if (HX_FIELD_EQ(inName,"get_borderColor") ) { return hx::Val( get_borderColor_dyn()); }
		if (HX_FIELD_EQ(inName,"set_borderColor") ) { return hx::Val( set_borderColor_dyn()); }
		if (HX_FIELD_EQ(inName,"get_gridFitType") ) { return hx::Val( get_gridFitType_dyn()); }
		if (HX_FIELD_EQ(inName,"set_gridFitType") ) { return hx::Val( set_gridFitType_dyn()); }
		if (HX_FIELD_EQ(inName,"stage_onMouseUp") ) { return hx::Val( stage_onMouseUp_dyn()); }
		if (HX_FIELD_EQ(inName,"this_onFocusOut") ) { return hx::Val( this_onFocusOut_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__selectionIndex") ) { return hx::Val( _hx___selectionIndex); }
		if (HX_FIELD_EQ(inName,"__startTextInput") ) { return hx::Val( _hx___startTextInput_dyn()); }
		if (HX_FIELD_EQ(inName,"this_onMouseDown") ) { return hx::Val( this_onMouseDown_dyn()); }
		if (HX_FIELD_EQ(inName,"window_onKeyDown") ) { return hx::Val( window_onKeyDown_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"defaultTextFormat") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_defaultTextFormat()); }
		if (HX_FIELD_EQ(inName,"displayAsPassword") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_displayAsPassword()); }
		if (HX_FIELD_EQ(inName,"mouseWheelEnabled") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_mouseWheelEnabled()); }
		if (HX_FIELD_EQ(inName,"selectionEndIndex") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_selectionEndIndex()); }
		if (HX_FIELD_EQ(inName,"getCharBoundaries") ) { return hx::Val( getCharBoundaries_dyn()); }
		if (HX_FIELD_EQ(inName,"__stopCursorTimer") ) { return hx::Val( _hx___stopCursorTimer_dyn()); }
		if (HX_FIELD_EQ(inName,"get_antiAliasType") ) { return hx::Val( get_antiAliasType_dyn()); }
		if (HX_FIELD_EQ(inName,"set_antiAliasType") ) { return hx::Val( set_antiAliasType_dyn()); }
		if (HX_FIELD_EQ(inName,"get_bottomScrollV") ) { return hx::Val( get_bottomScrollV_dyn()); }
		if (HX_FIELD_EQ(inName,"stage_onMouseMove") ) { return hx::Val( stage_onMouseMove_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"getLineIndexOfChar") ) { return hx::Val( getLineIndexOfChar_dyn()); }
		if (HX_FIELD_EQ(inName,"getParagraphLength") ) { return hx::Val( getParagraphLength_dyn()); }
		if (HX_FIELD_EQ(inName,"__startCursorTimer") ) { return hx::Val( _hx___startCursorTimer_dyn()); }
		if (HX_FIELD_EQ(inName,"window_onTextInput") ) { return hx::Val( window_onTextInput_dyn()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"selectionBeginIndex") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_selectionBeginIndex()); }
		if (HX_FIELD_EQ(inName,"__displayAsPassword") ) { return hx::Val( _hx___displayAsPassword); }
		if (HX_FIELD_EQ(inName,"__mouseWheelEnabled") ) { return hx::Val( _hx___mouseWheelEnabled); }
		if (HX_FIELD_EQ(inName,"getCharIndexAtPoint") ) { return hx::Val( getCharIndexAtPoint_dyn()); }
		if (HX_FIELD_EQ(inName,"getLineIndexAtPoint") ) { return hx::Val( getLineIndexAtPoint_dyn()); }
		if (HX_FIELD_EQ(inName,"replaceSelectedText") ) { return hx::Val( replaceSelectedText_dyn()); }
		if (HX_FIELD_EQ(inName,"__getAttributeMatch") ) { return hx::Val( _hx___getAttributeMatch_dyn()); }
		if (HX_FIELD_EQ(inName,"get_backgroundColor") ) { return hx::Val( get_backgroundColor_dyn()); }
		if (HX_FIELD_EQ(inName,"set_backgroundColor") ) { return hx::Val( set_backgroundColor_dyn()); }
		if (HX_FIELD_EQ(inName,"this_onAddedToStage") ) { return hx::Val( this_onAddedToStage_dyn()); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"get_defaultTextFormat") ) { return hx::Val( get_defaultTextFormat_dyn()); }
		if (HX_FIELD_EQ(inName,"set_defaultTextFormat") ) { return hx::Val( set_defaultTextFormat_dyn()); }
		if (HX_FIELD_EQ(inName,"get_displayAsPassword") ) { return hx::Val( get_displayAsPassword_dyn()); }
		if (HX_FIELD_EQ(inName,"set_displayAsPassword") ) { return hx::Val( set_displayAsPassword_dyn()); }
		if (HX_FIELD_EQ(inName,"get_mouseWheelEnabled") ) { return hx::Val( get_mouseWheelEnabled_dyn()); }
		if (HX_FIELD_EQ(inName,"set_mouseWheelEnabled") ) { return hx::Val( set_mouseWheelEnabled_dyn()); }
		if (HX_FIELD_EQ(inName,"get_selectionEndIndex") ) { return hx::Val( get_selectionEndIndex_dyn()); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"getFirstCharInParagraph") ) { return hx::Val( getFirstCharInParagraph_dyn()); }
		if (HX_FIELD_EQ(inName,"get_selectionBeginIndex") ) { return hx::Val( get_selectionBeginIndex_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool TextField_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"__regexFace") ) { outValue = _hx___regexFace; return true; }
		if (HX_FIELD_EQ(inName,"__regexSize") ) { outValue = _hx___regexSize; return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__regexAlign") ) { outValue = _hx___regexAlign; return true; }
		if (HX_FIELD_EQ(inName,"__regexColor") ) { outValue = _hx___regexColor; return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__regexIndent") ) { outValue = _hx___regexIndent; return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__regexHTMLTag") ) { outValue = _hx___regexHTMLTag; return true; }
		if (HX_FIELD_EQ(inName,"__regexLeading") ) { outValue = _hx___regexLeading; return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__regexBreakTag") ) { outValue = _hx___regexBreakTag; return true; }
		if (HX_FIELD_EQ(inName,"__regexEntities") ) { outValue = _hx___regexEntities; return true; }
		if (HX_FIELD_EQ(inName,"__regexTabStops") ) { outValue = _hx___regexTabStops; return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__regexLeftMargin") ) { outValue = _hx___regexLeftMargin; return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__regexBlockIndent") ) { outValue = _hx___regexBlockIndent; return true; }
		if (HX_FIELD_EQ(inName,"__regexRightMargin") ) { outValue = _hx___regexRightMargin; return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__defaultTextFormat") ) { outValue = _hx___defaultTextFormat; return true; }
	}
	return false;
}

hx::Val TextField_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_text(inValue) ); }
		if (HX_FIELD_EQ(inName,"type") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_type(inValue) ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"border") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_border(inValue) ); }
		if (HX_FIELD_EQ(inName,"__text") ) { _hx___text=inValue.Cast< ::String >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"scrollH") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_scrollH(inValue) ); }
		if (HX_FIELD_EQ(inName,"scrollV") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_scrollV(inValue) ); }
		if (HX_FIELD_EQ(inName,"__dirty") ) { _hx___dirty=inValue.Cast< Bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"autoSize") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_autoSize(inValue) ); }
		if (HX_FIELD_EQ(inName,"htmlText") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_htmlText(inValue) ); }
		if (HX_FIELD_EQ(inName,"maxChars") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_maxChars(inValue) ); }
		if (HX_FIELD_EQ(inName,"restrict") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_restrict(inValue) ); }
		if (HX_FIELD_EQ(inName,"wordWrap") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_wordWrap(inValue) ); }
		if (HX_FIELD_EQ(inName,"__bounds") ) { _hx___bounds=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__isHTML") ) { _hx___isHTML=inValue.Cast< Bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"multiline") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_multiline(inValue) ); }
		if (HX_FIELD_EQ(inName,"sharpness") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_sharpness(inValue) ); }
		if (HX_FIELD_EQ(inName,"textColor") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_textColor(inValue) ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"background") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_background(inValue) ); }
		if (HX_FIELD_EQ(inName,"embedFonts") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_embedFonts(inValue) ); }
		if (HX_FIELD_EQ(inName,"selectable") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_selectable(inValue) ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"borderColor") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_borderColor(inValue) ); }
		if (HX_FIELD_EQ(inName,"gridFitType") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_gridFitType(inValue) ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__caretIndex") ) { _hx___caretIndex=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__showCursor") ) { _hx___showCursor=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__textEngine") ) { _hx___textEngine=inValue.Cast<  ::openfl::_internal::text::TextEngine >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__textFormat") ) { _hx___textFormat=inValue.Cast<  ::openfl::text::TextFormat >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"antiAliasType") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_antiAliasType(inValue) ); }
		if (HX_FIELD_EQ(inName,"__cursorTimer") ) { _hx___cursorTimer=inValue.Cast<  ::haxe::Timer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__layoutDirty") ) { _hx___layoutDirty=inValue.Cast< Bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__inputEnabled") ) { _hx___inputEnabled=inValue.Cast< Bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"backgroundColor") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_backgroundColor(inValue) ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__selectionIndex") ) { _hx___selectionIndex=inValue.Cast< Int >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"defaultTextFormat") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_defaultTextFormat(inValue) ); }
		if (HX_FIELD_EQ(inName,"displayAsPassword") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_displayAsPassword(inValue) ); }
		if (HX_FIELD_EQ(inName,"mouseWheelEnabled") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_mouseWheelEnabled(inValue) ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__displayAsPassword") ) { _hx___displayAsPassword=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__mouseWheelEnabled") ) { _hx___mouseWheelEnabled=inValue.Cast< Bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool TextField_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"__regexFace") ) { _hx___regexFace=ioValue.Cast<  ::EReg >(); return true; }
		if (HX_FIELD_EQ(inName,"__regexSize") ) { _hx___regexSize=ioValue.Cast<  ::EReg >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__regexAlign") ) { _hx___regexAlign=ioValue.Cast<  ::EReg >(); return true; }
		if (HX_FIELD_EQ(inName,"__regexColor") ) { _hx___regexColor=ioValue.Cast<  ::EReg >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__regexIndent") ) { _hx___regexIndent=ioValue.Cast<  ::EReg >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__regexHTMLTag") ) { _hx___regexHTMLTag=ioValue.Cast<  ::EReg >(); return true; }
		if (HX_FIELD_EQ(inName,"__regexLeading") ) { _hx___regexLeading=ioValue.Cast<  ::EReg >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__regexBreakTag") ) { _hx___regexBreakTag=ioValue.Cast<  ::EReg >(); return true; }
		if (HX_FIELD_EQ(inName,"__regexEntities") ) { _hx___regexEntities=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		if (HX_FIELD_EQ(inName,"__regexTabStops") ) { _hx___regexTabStops=ioValue.Cast<  ::EReg >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__regexLeftMargin") ) { _hx___regexLeftMargin=ioValue.Cast<  ::EReg >(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__regexBlockIndent") ) { _hx___regexBlockIndent=ioValue.Cast<  ::EReg >(); return true; }
		if (HX_FIELD_EQ(inName,"__regexRightMargin") ) { _hx___regexRightMargin=ioValue.Cast<  ::EReg >(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__defaultTextFormat") ) { _hx___defaultTextFormat=ioValue.Cast<  ::openfl::text::TextFormat >(); return true; }
	}
	return false;
}

void TextField_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("antiAliasType","\x68","\xc4","\xfa","\xe7"));
	outFields->push(HX_HCSTRING("autoSize","\xd0","\x8f","\x79","\x2f"));
	outFields->push(HX_HCSTRING("background","\xee","\x93","\x1d","\x26"));
	outFields->push(HX_HCSTRING("backgroundColor","\x95","\x4e","\x47","\x0d"));
	outFields->push(HX_HCSTRING("border","\xec","\x4c","\x1a","\x64"));
	outFields->push(HX_HCSTRING("borderColor","\xd7","\x3c","\xd5","\xd6"));
	outFields->push(HX_HCSTRING("bottomScrollV","\xfe","\xf7","\x87","\x8b"));
	outFields->push(HX_HCSTRING("caretIndex","\x8f","\xb6","\x5b","\xdd"));
	outFields->push(HX_HCSTRING("defaultTextFormat","\xe5","\xc7","\xe0","\x0a"));
	outFields->push(HX_HCSTRING("displayAsPassword","\x0f","\xcb","\x96","\xea"));
	outFields->push(HX_HCSTRING("embedFonts","\x2b","\xc7","\xe1","\x8e"));
	outFields->push(HX_HCSTRING("gridFitType","\x05","\xf3","\x13","\xb4"));
	outFields->push(HX_HCSTRING("htmlText","\xb8","\x1f","\x38","\x10"));
	outFields->push(HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"));
	outFields->push(HX_HCSTRING("maxChars","\x99","\xef","\xd0","\xef"));
	outFields->push(HX_HCSTRING("maxScrollH","\x57","\xad","\xfc","\x9a"));
	outFields->push(HX_HCSTRING("maxScrollV","\x65","\xad","\xfc","\x9a"));
	outFields->push(HX_HCSTRING("mouseWheelEnabled","\xeb","\x16","\x54","\x65"));
	outFields->push(HX_HCSTRING("multiline","\xed","\xd2","\x11","\x9e"));
	outFields->push(HX_HCSTRING("numLines","\xd9","\xf1","\x11","\x32"));
	outFields->push(HX_HCSTRING("restrict","\x3c","\xcb","\x9e","\xf1"));
	outFields->push(HX_HCSTRING("scrollH","\x9b","\x33","\xd8","\x30"));
	outFields->push(HX_HCSTRING("scrollV","\xa9","\x33","\xd8","\x30"));
	outFields->push(HX_HCSTRING("selectable","\x96","\xb6","\x2a","\xc4"));
	outFields->push(HX_HCSTRING("selectionBeginIndex","\x95","\x7f","\x17","\xd7"));
	outFields->push(HX_HCSTRING("selectionEndIndex","\xa3","\x0d","\x42","\x4b"));
	outFields->push(HX_HCSTRING("sharpness","\x81","\x22","\x25","\x1b"));
	outFields->push(HX_HCSTRING("text","\xad","\xcc","\xf9","\x4c"));
	outFields->push(HX_HCSTRING("textColor","\x76","\x01","\x4a","\xe3"));
	outFields->push(HX_HCSTRING("textHeight","\x74","\x88","\x3c","\x39"));
	outFields->push(HX_HCSTRING("textWidth","\x19","\x46","\x50","\x63"));
	outFields->push(HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"));
	outFields->push(HX_HCSTRING("wordWrap","\xb4","\x14","\xdb","\x00"));
	outFields->push(HX_HCSTRING("__bounds","\x95","\xf1","\x4c","\x0e"));
	outFields->push(HX_HCSTRING("__caretIndex","\xaf","\x31","\xef","\x15"));
	outFields->push(HX_HCSTRING("__cursorTimer","\xef","\x59","\x8f","\xe1"));
	outFields->push(HX_HCSTRING("__dirty","\xf2","\xa8","\x2e","\x44"));
	outFields->push(HX_HCSTRING("__displayAsPassword","\xef","\xf3","\x86","\x9d"));
	outFields->push(HX_HCSTRING("__inputEnabled","\xb7","\xe0","\x1d","\x37"));
	outFields->push(HX_HCSTRING("__isHTML","\x75","\x61","\x94","\x0a"));
	outFields->push(HX_HCSTRING("__layoutDirty","\xe8","\xe9","\x31","\xd3"));
	outFields->push(HX_HCSTRING("__mouseWheelEnabled","\xcb","\x3f","\x44","\x18"));
	outFields->push(HX_HCSTRING("__selectionIndex","\x46","\x0a","\xc3","\x7d"));
	outFields->push(HX_HCSTRING("__showCursor","\xd3","\xae","\xf0","\xe0"));
	outFields->push(HX_HCSTRING("__text","\xcd","\x2f","\xf2","\xfb"));
	outFields->push(HX_HCSTRING("__textEngine","\x6f","\x43","\x08","\x6c"));
	outFields->push(HX_HCSTRING("__textFormat","\xe4","\x8a","\x12","\x6d"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TextField_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(TextField_obj,_hx___bounds),HX_HCSTRING("__bounds","\x95","\xf1","\x4c","\x0e")},
	{hx::fsInt,(int)offsetof(TextField_obj,_hx___caretIndex),HX_HCSTRING("__caretIndex","\xaf","\x31","\xef","\x15")},
	{hx::fsObject /*::haxe::Timer*/ ,(int)offsetof(TextField_obj,_hx___cursorTimer),HX_HCSTRING("__cursorTimer","\xef","\x59","\x8f","\xe1")},
	{hx::fsBool,(int)offsetof(TextField_obj,_hx___dirty),HX_HCSTRING("__dirty","\xf2","\xa8","\x2e","\x44")},
	{hx::fsBool,(int)offsetof(TextField_obj,_hx___displayAsPassword),HX_HCSTRING("__displayAsPassword","\xef","\xf3","\x86","\x9d")},
	{hx::fsBool,(int)offsetof(TextField_obj,_hx___inputEnabled),HX_HCSTRING("__inputEnabled","\xb7","\xe0","\x1d","\x37")},
	{hx::fsBool,(int)offsetof(TextField_obj,_hx___isHTML),HX_HCSTRING("__isHTML","\x75","\x61","\x94","\x0a")},
	{hx::fsBool,(int)offsetof(TextField_obj,_hx___layoutDirty),HX_HCSTRING("__layoutDirty","\xe8","\xe9","\x31","\xd3")},
	{hx::fsBool,(int)offsetof(TextField_obj,_hx___mouseWheelEnabled),HX_HCSTRING("__mouseWheelEnabled","\xcb","\x3f","\x44","\x18")},
	{hx::fsInt,(int)offsetof(TextField_obj,_hx___selectionIndex),HX_HCSTRING("__selectionIndex","\x46","\x0a","\xc3","\x7d")},
	{hx::fsBool,(int)offsetof(TextField_obj,_hx___showCursor),HX_HCSTRING("__showCursor","\xd3","\xae","\xf0","\xe0")},
	{hx::fsString,(int)offsetof(TextField_obj,_hx___text),HX_HCSTRING("__text","\xcd","\x2f","\xf2","\xfb")},
	{hx::fsObject /*::openfl::_internal::text::TextEngine*/ ,(int)offsetof(TextField_obj,_hx___textEngine),HX_HCSTRING("__textEngine","\x6f","\x43","\x08","\x6c")},
	{hx::fsObject /*::openfl::text::TextFormat*/ ,(int)offsetof(TextField_obj,_hx___textFormat),HX_HCSTRING("__textFormat","\xe4","\x8a","\x12","\x6d")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo TextField_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::openfl::text::TextFormat*/ ,(void *) &TextField_obj::_hx___defaultTextFormat,HX_HCSTRING("__defaultTextFormat","\xc5","\xf0","\xd0","\xbd")},
	{hx::fsObject /*::EReg*/ ,(void *) &TextField_obj::_hx___regexAlign,HX_HCSTRING("__regexAlign","\x9e","\x21","\xd1","\x2d")},
	{hx::fsObject /*::EReg*/ ,(void *) &TextField_obj::_hx___regexColor,HX_HCSTRING("__regexColor","\x3c","\x3c","\x9c","\x56")},
	{hx::fsObject /*::EReg*/ ,(void *) &TextField_obj::_hx___regexBlockIndent,HX_HCSTRING("__regexBlockIndent","\x32","\x61","\xa3","\xa8")},
	{hx::fsObject /*::EReg*/ ,(void *) &TextField_obj::_hx___regexBreakTag,HX_HCSTRING("__regexBreakTag","\xa2","\xf1","\x6b","\xe6")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(void *) &TextField_obj::_hx___regexEntities,HX_HCSTRING("__regexEntities","\x08","\x59","\x3f","\x8c")},
	{hx::fsObject /*::EReg*/ ,(void *) &TextField_obj::_hx___regexFace,HX_HCSTRING("__regexFace","\xe4","\xc7","\x66","\x12")},
	{hx::fsObject /*::EReg*/ ,(void *) &TextField_obj::_hx___regexHTMLTag,HX_HCSTRING("__regexHTMLTag","\xe8","\x74","\xf4","\x76")},
	{hx::fsObject /*::EReg*/ ,(void *) &TextField_obj::_hx___regexIndent,HX_HCSTRING("__regexIndent","\x73","\xbf","\x84","\x3f")},
	{hx::fsObject /*::EReg*/ ,(void *) &TextField_obj::_hx___regexLeading,HX_HCSTRING("__regexLeading","\xdf","\x25","\x4c","\x7d")},
	{hx::fsObject /*::EReg*/ ,(void *) &TextField_obj::_hx___regexLeftMargin,HX_HCSTRING("__regexLeftMargin","\x1c","\x6e","\x33","\xf3")},
	{hx::fsObject /*::EReg*/ ,(void *) &TextField_obj::_hx___regexRightMargin,HX_HCSTRING("__regexRightMargin","\xc3","\x30","\xd7","\x98")},
	{hx::fsObject /*::EReg*/ ,(void *) &TextField_obj::_hx___regexTabStops,HX_HCSTRING("__regexTabStops","\x63","\x56","\x64","\xec")},
	{hx::fsObject /*::EReg*/ ,(void *) &TextField_obj::_hx___regexSize,HX_HCSTRING("__regexSize","\x08","\xb4","\x04","\x1b")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String TextField_obj_sMemberFields[] = {
	HX_HCSTRING("__bounds","\x95","\xf1","\x4c","\x0e"),
	HX_HCSTRING("__caretIndex","\xaf","\x31","\xef","\x15"),
	HX_HCSTRING("__cursorTimer","\xef","\x59","\x8f","\xe1"),
	HX_HCSTRING("__dirty","\xf2","\xa8","\x2e","\x44"),
	HX_HCSTRING("__displayAsPassword","\xef","\xf3","\x86","\x9d"),
	HX_HCSTRING("__inputEnabled","\xb7","\xe0","\x1d","\x37"),
	HX_HCSTRING("__isHTML","\x75","\x61","\x94","\x0a"),
	HX_HCSTRING("__layoutDirty","\xe8","\xe9","\x31","\xd3"),
	HX_HCSTRING("__mouseWheelEnabled","\xcb","\x3f","\x44","\x18"),
	HX_HCSTRING("__selectionIndex","\x46","\x0a","\xc3","\x7d"),
	HX_HCSTRING("__showCursor","\xd3","\xae","\xf0","\xe0"),
	HX_HCSTRING("__text","\xcd","\x2f","\xf2","\xfb"),
	HX_HCSTRING("__textEngine","\x6f","\x43","\x08","\x6c"),
	HX_HCSTRING("__textFormat","\xe4","\x8a","\x12","\x6d"),
	HX_HCSTRING("appendText","\xa7","\xcf","\x05","\x5b"),
	HX_HCSTRING("getCharBoundaries","\x74","\x85","\xa1","\x8b"),
	HX_HCSTRING("getCharIndexAtPoint","\x17","\xee","\x9c","\xaa"),
	HX_HCSTRING("getFirstCharInParagraph","\xf9","\x5c","\x3d","\x08"),
	HX_HCSTRING("getLineIndexAtPoint","\x35","\xdc","\x50","\x98"),
	HX_HCSTRING("getLineIndexOfChar","\xb5","\x68","\x99","\xa1"),
	HX_HCSTRING("getLineLength","\x30","\xec","\x21","\xd0"),
	HX_HCSTRING("getLineMetrics","\xb9","\xab","\xc6","\xf2"),
	HX_HCSTRING("getLineOffset","\xdd","\xee","\x59","\x91"),
	HX_HCSTRING("getLineText","\x77","\xdd","\x16","\xb0"),
	HX_HCSTRING("getParagraphLength","\xfe","\x0e","\x4e","\xc4"),
	HX_HCSTRING("getTextFormat","\xfa","\x6b","\xf1","\x90"),
	HX_HCSTRING("replaceSelectedText","\xfc","\xfe","\x33","\xbb"),
	HX_HCSTRING("replaceText","\x01","\x6b","\x95","\x61"),
	HX_HCSTRING("setSelection","\x4a","\xb8","\x6a","\xb2"),
	HX_HCSTRING("setTextFormat","\x06","\x4e","\xf7","\xd5"),
	HX_HCSTRING("__getAttributeMatch","\x9f","\x3b","\x2c","\x45"),
	HX_HCSTRING("__getBounds","\x8b","\x58","\xa0","\x10"),
	HX_HCSTRING("__getCursor","\xec","\x60","\x6b","\xe9"),
	HX_HCSTRING("__getPosition","\x3f","\xa4","\x66","\x39"),
	HX_HCSTRING("__hitTest","\x25","\xb1","\xcd","\x63"),
	HX_HCSTRING("__hitTestMask","\xb1","\x14","\xfd","\x3b"),
	HX_HCSTRING("__renderCairo","\x32","\x9e","\x42","\x55"),
	HX_HCSTRING("__renderCanvas","\xee","\xdb","\x58","\x48"),
	HX_HCSTRING("__renderDOM","\xac","\xf5","\x83","\xfb"),
	HX_HCSTRING("__renderGL","\x1b","\x1e","\x14","\x56"),
	HX_HCSTRING("__startCursorTimer","\xed","\x46","\xa3","\x83"),
	HX_HCSTRING("__startTextInput","\x7b","\xae","\x85","\xaa"),
	HX_HCSTRING("__stopCursorTimer","\x0d","\xcd","\x6c","\x26"),
	HX_HCSTRING("__stopTextInput","\x9b","\x6c","\xcb","\xa1"),
	HX_HCSTRING("__updateLayout","\xb3","\xd8","\x3c","\x79"),
	HX_HCSTRING("__updateText","\x76","\x32","\x42","\x3e"),
	HX_HCSTRING("get_antiAliasType","\xbf","\xcf","\x6a","\xee"),
	HX_HCSTRING("set_antiAliasType","\xcb","\xa7","\xd8","\x11"),
	HX_HCSTRING("get_autoSize","\xd9","\x43","\x93","\xe4"),
	HX_HCSTRING("set_autoSize","\x4d","\x67","\x8c","\xf9"),
	HX_HCSTRING("get_background","\x37","\x1c","\x13","\x9c"),
	HX_HCSTRING("set_background","\xab","\x04","\x33","\xbc"),
	HX_HCSTRING("get_backgroundColor","\xac","\x1d","\x52","\x98"),
	HX_HCSTRING("set_backgroundColor","\xb8","\x10","\xef","\xd4"),
	HX_HCSTRING("get_border","\xb5","\xbc","\xa1","\x54"),
	HX_HCSTRING("set_border","\x29","\x5b","\x1f","\x58"),
	HX_HCSTRING("get_borderColor","\x6e","\xf4","\xb6","\x97"),
	HX_HCSTRING("set_borderColor","\x7a","\x71","\x82","\x93"),
	HX_HCSTRING("get_bottomScrollV","\x55","\x03","\xf8","\x91"),
	HX_HCSTRING("get_caretIndex","\xd8","\x3e","\x51","\x53"),
	HX_HCSTRING("get_defaultTextFormat","\xbc","\xca","\x8e","\x89"),
	HX_HCSTRING("set_defaultTextFormat","\xc8","\x98","\x97","\xdd"),
	HX_HCSTRING("get_displayAsPassword","\xe6","\xcd","\x44","\x69"),
	HX_HCSTRING("set_displayAsPassword","\xf2","\x9b","\x4d","\xbd"),
	HX_HCSTRING("get_embedFonts","\x74","\x4f","\xd7","\x04"),
	HX_HCSTRING("set_embedFonts","\xe8","\x37","\xf7","\x24"),
	HX_HCSTRING("get_gridFitType","\x9c","\xaa","\xf5","\x74"),
	HX_HCSTRING("set_gridFitType","\xa8","\x27","\xc1","\x70"),
	HX_HCSTRING("get_height","\xb0","\x77","\xd3","\xf2"),
	HX_HCSTRING("set_height","\x24","\x16","\x51","\xf6"),
	HX_HCSTRING("get_htmlText","\xc1","\xd3","\x51","\xc5"),
	HX_HCSTRING("set_htmlText","\x35","\xf7","\x4a","\xda"),
	HX_HCSTRING("get_length","\xaf","\x04","\x8f","\x8f"),
	HX_HCSTRING("get_maxChars","\xa2","\xa3","\xea","\xa4"),
	HX_HCSTRING("set_maxChars","\x16","\xc7","\xe3","\xb9"),
	HX_HCSTRING("get_maxScrollH","\xa0","\x35","\xf2","\x10"),
	HX_HCSTRING("get_maxScrollV","\xae","\x35","\xf2","\x10"),
	HX_HCSTRING("get_mouseWheelEnabled","\xc2","\x19","\x02","\xe4"),
	HX_HCSTRING("set_mouseWheelEnabled","\xce","\xe7","\x0a","\x38"),
	HX_HCSTRING("get_multiline","\xc4","\xa6","\x75","\x5f"),
	HX_HCSTRING("set_multiline","\xd0","\x88","\x7b","\xa4"),
	HX_HCSTRING("get_numLines","\xe2","\xa5","\x2b","\xe7"),
	HX_HCSTRING("get_restrict","\x45","\x7f","\xb8","\xa6"),
	HX_HCSTRING("set_restrict","\xb9","\xa2","\xb1","\xbb"),
	HX_HCSTRING("get_scrollH","\xb2","\x93","\xd2","\xb6"),
	HX_HCSTRING("set_scrollH","\xbe","\x9a","\x3f","\xc1"),
	HX_HCSTRING("get_scrollV","\xc0","\x93","\xd2","\xb6"),
	HX_HCSTRING("set_scrollV","\xcc","\x9a","\x3f","\xc1"),
	HX_HCSTRING("get_selectable","\xdf","\x3e","\x20","\x3a"),
	HX_HCSTRING("set_selectable","\x53","\x27","\x40","\x5a"),
	HX_HCSTRING("get_selectionBeginIndex","\x2c","\x26","\x6d","\xdf"),
	HX_HCSTRING("get_selectionEndIndex","\x7a","\x10","\xf0","\xc9"),
	HX_HCSTRING("get_sharpness","\x58","\xf6","\x88","\xdc"),
	HX_HCSTRING("set_sharpness","\x64","\xd8","\x8e","\x21"),
	HX_HCSTRING("get_text","\x36","\x88","\xb4","\xcc"),
	HX_HCSTRING("set_text","\xaa","\xe1","\x11","\x7b"),
	HX_HCSTRING("get_textColor","\x4d","\xd5","\xad","\xa4"),
	HX_HCSTRING("set_textColor","\x59","\xb7","\xb3","\xe9"),
	HX_HCSTRING("get_textWidth","\xf0","\x19","\xb4","\x24"),
	HX_HCSTRING("get_textHeight","\xbd","\x10","\x32","\xaf"),
	HX_HCSTRING("get_type","\x43","\xae","\xc3","\xcc"),
	HX_HCSTRING("set_type","\xb7","\x07","\x21","\x7b"),
	HX_HCSTRING("get_width","\x5d","\x12","\x0c","\x0e"),
	HX_HCSTRING("set_width","\x69","\xfe","\x5c","\xf1"),
	HX_HCSTRING("get_wordWrap","\xbd","\xc8","\xf4","\xb5"),
	HX_HCSTRING("set_wordWrap","\x31","\xec","\xed","\xca"),
	HX_HCSTRING("stage_onMouseMove","\x76","\xbc","\x61","\xde"),
	HX_HCSTRING("stage_onMouseUp","\x80","\xac","\x07","\xd1"),
	HX_HCSTRING("this_onAddedToStage","\x23","\x9e","\xce","\x72"),
	HX_HCSTRING("this_onFocusIn","\x1d","\x62","\xfb","\xdc"),
	HX_HCSTRING("this_onFocusOut","\x56","\x0b","\xff","\x7e"),
	HX_HCSTRING("this_onMouseDown","\x67","\x5d","\xaa","\x6d"),
	HX_HCSTRING("window_onKeyDown","\xf3","\x7d","\x3b","\xd1"),
	HX_HCSTRING("window_onTextInput","\xef","\xa0","\x6a","\xc0"),
	::String(null()) };

static void TextField_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TextField_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(TextField_obj::_hx___defaultTextFormat,"__defaultTextFormat");
	HX_MARK_MEMBER_NAME(TextField_obj::_hx___regexAlign,"__regexAlign");
	HX_MARK_MEMBER_NAME(TextField_obj::_hx___regexColor,"__regexColor");
	HX_MARK_MEMBER_NAME(TextField_obj::_hx___regexBlockIndent,"__regexBlockIndent");
	HX_MARK_MEMBER_NAME(TextField_obj::_hx___regexBreakTag,"__regexBreakTag");
	HX_MARK_MEMBER_NAME(TextField_obj::_hx___regexEntities,"__regexEntities");
	HX_MARK_MEMBER_NAME(TextField_obj::_hx___regexFace,"__regexFace");
	HX_MARK_MEMBER_NAME(TextField_obj::_hx___regexHTMLTag,"__regexHTMLTag");
	HX_MARK_MEMBER_NAME(TextField_obj::_hx___regexIndent,"__regexIndent");
	HX_MARK_MEMBER_NAME(TextField_obj::_hx___regexLeading,"__regexLeading");
	HX_MARK_MEMBER_NAME(TextField_obj::_hx___regexLeftMargin,"__regexLeftMargin");
	HX_MARK_MEMBER_NAME(TextField_obj::_hx___regexRightMargin,"__regexRightMargin");
	HX_MARK_MEMBER_NAME(TextField_obj::_hx___regexTabStops,"__regexTabStops");
	HX_MARK_MEMBER_NAME(TextField_obj::_hx___regexSize,"__regexSize");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TextField_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TextField_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(TextField_obj::_hx___defaultTextFormat,"__defaultTextFormat");
	HX_VISIT_MEMBER_NAME(TextField_obj::_hx___regexAlign,"__regexAlign");
	HX_VISIT_MEMBER_NAME(TextField_obj::_hx___regexColor,"__regexColor");
	HX_VISIT_MEMBER_NAME(TextField_obj::_hx___regexBlockIndent,"__regexBlockIndent");
	HX_VISIT_MEMBER_NAME(TextField_obj::_hx___regexBreakTag,"__regexBreakTag");
	HX_VISIT_MEMBER_NAME(TextField_obj::_hx___regexEntities,"__regexEntities");
	HX_VISIT_MEMBER_NAME(TextField_obj::_hx___regexFace,"__regexFace");
	HX_VISIT_MEMBER_NAME(TextField_obj::_hx___regexHTMLTag,"__regexHTMLTag");
	HX_VISIT_MEMBER_NAME(TextField_obj::_hx___regexIndent,"__regexIndent");
	HX_VISIT_MEMBER_NAME(TextField_obj::_hx___regexLeading,"__regexLeading");
	HX_VISIT_MEMBER_NAME(TextField_obj::_hx___regexLeftMargin,"__regexLeftMargin");
	HX_VISIT_MEMBER_NAME(TextField_obj::_hx___regexRightMargin,"__regexRightMargin");
	HX_VISIT_MEMBER_NAME(TextField_obj::_hx___regexTabStops,"__regexTabStops");
	HX_VISIT_MEMBER_NAME(TextField_obj::_hx___regexSize,"__regexSize");
};

#endif

hx::Class TextField_obj::__mClass;

static ::String TextField_obj_sStaticFields[] = {
	HX_HCSTRING("__defaultTextFormat","\xc5","\xf0","\xd0","\xbd"),
	HX_HCSTRING("__regexAlign","\x9e","\x21","\xd1","\x2d"),
	HX_HCSTRING("__regexColor","\x3c","\x3c","\x9c","\x56"),
	HX_HCSTRING("__regexBlockIndent","\x32","\x61","\xa3","\xa8"),
	HX_HCSTRING("__regexBreakTag","\xa2","\xf1","\x6b","\xe6"),
	HX_HCSTRING("__regexEntities","\x08","\x59","\x3f","\x8c"),
	HX_HCSTRING("__regexFace","\xe4","\xc7","\x66","\x12"),
	HX_HCSTRING("__regexHTMLTag","\xe8","\x74","\xf4","\x76"),
	HX_HCSTRING("__regexIndent","\x73","\xbf","\x84","\x3f"),
	HX_HCSTRING("__regexLeading","\xdf","\x25","\x4c","\x7d"),
	HX_HCSTRING("__regexLeftMargin","\x1c","\x6e","\x33","\xf3"),
	HX_HCSTRING("__regexRightMargin","\xc3","\x30","\xd7","\x98"),
	HX_HCSTRING("__regexTabStops","\x63","\x56","\x64","\xec"),
	HX_HCSTRING("__regexSize","\x08","\xb4","\x04","\x1b"),
	::String(null())
};

void TextField_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.text.TextField","\xca","\xa8","\xd5","\xef");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &TextField_obj::__GetStatic;
	__mClass->mSetStaticField = &TextField_obj::__SetStatic;
	__mClass->mMarkFunc = TextField_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(TextField_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TextField_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TextField_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TextField_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TextField_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TextField_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void TextField_obj::__boot()
{
{
            	HX_STACK_FRAME("openfl.text.TextField","boot",0x024a6e56,"openfl.text.TextField.boot","openfl/text/TextField.hx",40,0xccf02094)
HXLINE(  40)		_hx___regexAlign =  ::EReg_obj::__new(HX_("align=(\"([^\"]+)\"|'([^']+)')",46,80,3f,0e),HX_("i",69,00,00,00));
            	}
{
            	HX_STACK_FRAME("openfl.text.TextField","boot",0x024a6e56,"openfl.text.TextField.boot","openfl/text/TextField.hx",41,0xccf02094)
HXLINE(  41)		_hx___regexColor =  ::EReg_obj::__new(HX_("color=(\"#([^\"]+)\"|'#([^']+)')",36,15,0f,76),HX_("i",69,00,00,00));
            	}
{
            	HX_STACK_FRAME("openfl.text.TextField","boot",0x024a6e56,"openfl.text.TextField.boot","openfl/text/TextField.hx",42,0xccf02094)
HXLINE(  42)		_hx___regexBlockIndent =  ::EReg_obj::__new(HX_("blockindent=(\"([^\"]+)\"|'([^']+)')",fa,c9,96,24),HX_("i",69,00,00,00));
            	}
{
            	HX_STACK_FRAME("openfl.text.TextField","boot",0x024a6e56,"openfl.text.TextField.boot","openfl/text/TextField.hx",43,0xccf02094)
HXLINE(  43)		_hx___regexBreakTag =  ::EReg_obj::__new(HX_("<br\\s*/?>",47,ed,43,f6),HX_("gi",22,5a,00,00));
            	}
{
            	HX_STACK_FRAME("openfl.text.TextField","boot",0x024a6e56,"openfl.text.TextField.boot","openfl/text/TextField.hx",44,0xccf02094)
HXLINE(  44)		 ::EReg _hx_tmp =  ::EReg_obj::__new(HX_("&quot;",2c,d9,81,8f),HX_("g",67,00,00,00));
HXDLIN(  44)		 ::EReg _hx_tmp1 =  ::EReg_obj::__new(HX_("&apos;",22,7f,ca,55),HX_("g",67,00,00,00));
HXDLIN(  44)		 ::EReg _hx_tmp2 =  ::EReg_obj::__new(HX_("&amp;",dd,d4,aa,21),HX_("g",67,00,00,00));
HXDLIN(  44)		 ::EReg _hx_tmp3 =  ::EReg_obj::__new(HX_("&lt;",4d,74,70,19),HX_("g",67,00,00,00));
HXDLIN(  44)		_hx___regexEntities = ::Array_obj< ::Dynamic>::__new(5)->init(0,_hx_tmp)->init(1,_hx_tmp1)->init(2,_hx_tmp2)->init(3,_hx_tmp3)->init(4, ::EReg_obj::__new(HX_("&gt;",08,a9,6c,19),HX_("g",67,00,00,00)));
            	}
{
            	HX_STACK_FRAME("openfl.text.TextField","boot",0x024a6e56,"openfl.text.TextField.boot","openfl/text/TextField.hx",45,0xccf02094)
HXLINE(  45)		_hx___regexFace =  ::EReg_obj::__new(HX_("face=(\"([^\"]+)\"|'([^']+)')",1e,00,2b,89),HX_("i",69,00,00,00));
            	}
{
            	HX_STACK_FRAME("openfl.text.TextField","boot",0x024a6e56,"openfl.text.TextField.boot","openfl/text/TextField.hx",46,0xccf02094)
HXLINE(  46)		_hx___regexHTMLTag =  ::EReg_obj::__new(HX_("<.*?>",97,b4,92,aa),HX_("g",67,00,00,00));
            	}
{
            	HX_STACK_FRAME("openfl.text.TextField","boot",0x024a6e56,"openfl.text.TextField.boot","openfl/text/TextField.hx",47,0xccf02094)
HXLINE(  47)		_hx___regexIndent =  ::EReg_obj::__new(HX_(" indent=(\"([^\"]+)\"|'([^']+)')",4d,db,5b,9f),HX_("i",69,00,00,00));
            	}
{
            	HX_STACK_FRAME("openfl.text.TextField","boot",0x024a6e56,"openfl.text.TextField.boot","openfl/text/TextField.hx",48,0xccf02094)
HXLINE(  48)		_hx___regexLeading =  ::EReg_obj::__new(HX_("leading=(\"([^\"]+)\"|'([^']+)')",07,25,07,ae),HX_("i",69,00,00,00));
            	}
{
            	HX_STACK_FRAME("openfl.text.TextField","boot",0x024a6e56,"openfl.text.TextField.boot","openfl/text/TextField.hx",49,0xccf02094)
HXLINE(  49)		_hx___regexLeftMargin =  ::EReg_obj::__new(HX_("leftmargin=(\"([^\"]+)\"|'([^']+)')",f6,e4,c9,11),HX_("i",69,00,00,00));
            	}
{
            	HX_STACK_FRAME("openfl.text.TextField","boot",0x024a6e56,"openfl.text.TextField.boot","openfl/text/TextField.hx",50,0xccf02094)
HXLINE(  50)		_hx___regexRightMargin =  ::EReg_obj::__new(HX_("rightmargin=(\"([^\"]+)\"|'([^']+)')",4b,8e,21,c0),HX_("i",69,00,00,00));
            	}
{
            	HX_STACK_FRAME("openfl.text.TextField","boot",0x024a6e56,"openfl.text.TextField.boot","openfl/text/TextField.hx",51,0xccf02094)
HXLINE(  51)		_hx___regexTabStops =  ::EReg_obj::__new(HX_("tabstops=(\"([^\"]+)\"|'([^']+)')",7d,fe,73,09),HX_("i",69,00,00,00));
            	}
{
            	HX_STACK_FRAME("openfl.text.TextField","boot",0x024a6e56,"openfl.text.TextField.boot","openfl/text/TextField.hx",52,0xccf02094)
HXLINE(  52)		_hx___regexSize =  ::EReg_obj::__new(HX_("size=(\"([^\"]+)\"|'([^']+)')",42,27,be,87),HX_("i",69,00,00,00));
            	}
}

} // end namespace openfl
} // end namespace text
