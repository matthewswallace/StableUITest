// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_format_JsonParser
#include <haxe/format/JsonParser.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime_AssetCache
#include <lime/AssetCache.h>
#endif
#ifndef INCLUDED_lime_AssetLibrary
#include <lime/AssetLibrary.h>
#endif
#ifndef INCLUDED_lime_Assets
#include <lime/Assets.h>
#endif
#ifndef INCLUDED_lime_app_Future
#include <lime/app/Future.h>
#endif
#ifndef INCLUDED_lime_app_Promise_String
#include <lime/app/Promise_String.h>
#endif
#ifndef INCLUDED_lime_app_Promise_lime_AssetLibrary
#include <lime/app/Promise_lime_AssetLibrary.h>
#endif
#ifndef INCLUDED_lime_app_Promise_lime_audio_AudioBuffer
#include <lime/app/Promise_lime_audio_AudioBuffer.h>
#endif
#ifndef INCLUDED_lime_app_Promise_lime_graphics_Image
#include <lime/app/Promise_lime_graphics_Image.h>
#endif
#ifndef INCLUDED_lime_app_Promise_lime_text_Font
#include <lime/app/Promise_lime_text_Font.h>
#endif
#ifndef INCLUDED_lime_app_Promise_lime_utils_Bytes
#include <lime/app/Promise_lime_utils_Bytes.h>
#endif
#ifndef INCLUDED_lime_app__Event_Void_Void
#include <lime/app/_Event_Void_Void.h>
#endif
#ifndef INCLUDED_lime_audio_AudioBuffer
#include <lime/audio/AudioBuffer.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_text_Font
#include <lime/text/Font.h>
#endif
#ifndef INCLUDED_lime_utils_Bytes
#include <lime/utils/Bytes.h>
#endif
#ifndef INCLUDED_lime_utils_Log
#include <lime/utils/Log.h>
#endif

namespace lime{

void Assets_obj::__construct() { }

Dynamic Assets_obj::__CreateEmpty() { return new Assets_obj; }

hx::ObjectPtr< Assets_obj > Assets_obj::__new()
{
	hx::ObjectPtr< Assets_obj > _hx_result = new Assets_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Assets_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Assets_obj > _hx_result = new Assets_obj();
	_hx_result->__construct();
	return _hx_result;
}

 ::lime::AssetCache Assets_obj::cache;

 ::haxe::ds::StringMap Assets_obj::libraries;

 ::lime::app::_Event_Void_Void Assets_obj::onChange;

Bool Assets_obj::initialized;

Bool Assets_obj::exists(::String id,::String type){
            	HX_STACK_FRAME("lime.Assets","exists",0x8a084f2e,"lime.Assets.exists","lime/Assets.hx",50,0x48c77341)
            	HX_STACK_ARG(id,"id")
            	HX_STACK_ARG(type,"type")
HXLINE(  52)		::lime::Assets_obj::initialize();
HXLINE(  56)		Bool _hx_tmp = hx::IsNull( type );
HXDLIN(  56)		if (_hx_tmp) {
HXLINE(  58)			type = HX_("BINARY",01,68,8e,9f);
            		}
HXLINE(  62)		Int _hx_tmp1 = id.indexOf(HX_(":",3a,00,00,00),null());
HXDLIN(  62)		HX_VARI( ::String,libraryName) = id.substring((int)0,_hx_tmp1);
HXLINE(  63)		Int _hx_tmp2 = id.indexOf(HX_(":",3a,00,00,00),null());
HXDLIN(  63)		HX_VARI( ::String,symbolName) = id.substr((_hx_tmp2 + (int)1),null());
HXLINE(  64)		HX_VARI(  ::lime::AssetLibrary,library) = ::lime::Assets_obj::getLibrary(libraryName);
HXLINE(  66)		Bool _hx_tmp3 = hx::IsNotNull( library );
HXDLIN(  66)		if (_hx_tmp3) {
HXLINE(  68)			return library->exists(symbolName,type);
            		}
HXLINE(  74)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,exists,return )

 ::lime::audio::AudioBuffer Assets_obj::getAudioBuffer(::String id,hx::Null< Bool >  __o_useCache){
Bool useCache = __o_useCache.Default(true);
            	HX_STACK_FRAME("lime.Assets","getAudioBuffer",0x1f7814d2,"lime.Assets.getAudioBuffer","lime/Assets.hx",85,0x48c77341)
            	HX_STACK_ARG(id,"id")
            	HX_STACK_ARG(useCache,"useCache")
HXLINE(  87)		::lime::Assets_obj::initialize();
HXLINE(  91)		Bool _hx_tmp;
HXDLIN(  91)		Bool _hx_tmp1;
HXDLIN(  91)		if (useCache) {
HXLINE(  91)			_hx_tmp1 = ::lime::Assets_obj::cache->enabled;
            		}
            		else {
HXLINE(  91)			_hx_tmp1 = false;
            		}
HXDLIN(  91)		if (_hx_tmp1) {
HXLINE(  91)			_hx_tmp = ::lime::Assets_obj::cache->audio->exists(id);
            		}
            		else {
HXLINE(  91)			_hx_tmp = false;
            		}
HXDLIN(  91)		if (_hx_tmp) {
HXLINE(  93)			HX_VARI(  ::lime::audio::AudioBuffer,audio) = ::lime::Assets_obj::cache->audio->get(id).StaticCast<  ::lime::audio::AudioBuffer >();
HXLINE(  95)			if (::lime::Assets_obj::isValidAudio(audio)) {
HXLINE(  97)				return audio;
            			}
            		}
HXLINE( 103)		Int _hx_tmp2 = id.indexOf(HX_(":",3a,00,00,00),null());
HXDLIN( 103)		HX_VARI( ::String,libraryName) = id.substring((int)0,_hx_tmp2);
HXLINE( 104)		Int _hx_tmp3 = id.indexOf(HX_(":",3a,00,00,00),null());
HXDLIN( 104)		HX_VARI( ::String,symbolName) = id.substr((_hx_tmp3 + (int)1),null());
HXLINE( 105)		HX_VARI(  ::lime::AssetLibrary,library) = ::lime::Assets_obj::getLibrary(libraryName);
HXLINE( 107)		Bool _hx_tmp4 = hx::IsNotNull( library );
HXDLIN( 107)		if (_hx_tmp4) {
HXLINE( 109)			Bool _hx_tmp5 = library->exists(symbolName,HX_("SOUND",af,c4,ba,fe));
HXDLIN( 109)			if (_hx_tmp5) {
HXLINE( 111)				Bool _hx_tmp6 = library->isLocal(symbolName,HX_("SOUND",af,c4,ba,fe));
HXDLIN( 111)				if (_hx_tmp6) {
HXLINE( 113)					HX_VARI_NAME(  ::lime::audio::AudioBuffer,audio1,"audio") = library->getAudioBuffer(symbolName);
HXLINE( 115)					Bool _hx_tmp7;
HXDLIN( 115)					if (useCache) {
HXLINE( 115)						_hx_tmp7 = ::lime::Assets_obj::cache->enabled;
            					}
            					else {
HXLINE( 115)						_hx_tmp7 = false;
            					}
HXDLIN( 115)					if (_hx_tmp7) {
HXLINE( 117)						::lime::Assets_obj::cache->audio->set(id,audio1);
            					}
HXLINE( 121)					return audio1;
            				}
            				else {
HXLINE( 125)					::lime::utils::Log_obj::info(((HX_("Audio asset \"",88,b4,a0,cb) + id) + HX_("\" exists, but only asynchronously",dc,ca,f2,dd)),hx::SourceInfo(HX_("Assets.hx",fb,cd,c6,67),125,HX_("lime.Assets",dc,38,84,97),HX_("getAudioBuffer",80,41,e3,26)));
            				}
            			}
            			else {
HXLINE( 131)				::lime::utils::Log_obj::info(((HX_("There is no audio asset with an ID of \"",26,d6,a7,d5) + id) + HX_("\"",22,00,00,00)),hx::SourceInfo(HX_("Assets.hx",fb,cd,c6,67),131,HX_("lime.Assets",dc,38,84,97),HX_("getAudioBuffer",80,41,e3,26)));
            			}
            		}
            		else {
HXLINE( 137)			::lime::utils::Log_obj::info(((HX_("There is no asset library named \"",a1,83,5f,51) + libraryName) + HX_("\"",22,00,00,00)),hx::SourceInfo(HX_("Assets.hx",fb,cd,c6,67),137,HX_("lime.Assets",dc,38,84,97),HX_("getAudioBuffer",80,41,e3,26)));
            		}
HXLINE( 143)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,getAudioBuffer,return )

 ::lime::utils::Bytes Assets_obj::getBytes(::String id){
            	HX_STACK_FRAME("lime.Assets","getBytes",0xe703c1c7,"lime.Assets.getBytes","lime/Assets.hx",154,0x48c77341)
            	HX_STACK_ARG(id,"id")
HXLINE( 156)		::lime::Assets_obj::initialize();
HXLINE( 160)		Int _hx_tmp = id.indexOf(HX_(":",3a,00,00,00),null());
HXDLIN( 160)		HX_VARI( ::String,libraryName) = id.substring((int)0,_hx_tmp);
HXLINE( 161)		Int _hx_tmp1 = id.indexOf(HX_(":",3a,00,00,00),null());
HXDLIN( 161)		HX_VARI( ::String,symbolName) = id.substr((_hx_tmp1 + (int)1),null());
HXLINE( 162)		HX_VARI(  ::lime::AssetLibrary,library) = ::lime::Assets_obj::getLibrary(libraryName);
HXLINE( 164)		Bool _hx_tmp2 = hx::IsNotNull( library );
HXDLIN( 164)		if (_hx_tmp2) {
HXLINE( 166)			Bool _hx_tmp3 = library->exists(symbolName,HX_("BINARY",01,68,8e,9f));
HXDLIN( 166)			if (_hx_tmp3) {
HXLINE( 168)				Bool _hx_tmp4 = library->isLocal(symbolName,HX_("BINARY",01,68,8e,9f));
HXDLIN( 168)				if (_hx_tmp4) {
HXLINE( 170)					return library->getBytes(symbolName);
            				}
            				else {
HXLINE( 174)					::lime::utils::Log_obj::info(((HX_("String or Bytes asset \"",6f,c9,54,0e) + id) + HX_("\" exists, but only asynchronously",dc,ca,f2,dd)),hx::SourceInfo(HX_("Assets.hx",fb,cd,c6,67),174,HX_("lime.Assets",dc,38,84,97),HX_("getBytes",f5,17,6f,1d)));
            				}
            			}
            			else {
HXLINE( 180)				::lime::utils::Log_obj::info(((HX_("There is no String or Bytes asset with an ID of \"",ed,a0,93,32) + id) + HX_("\"",22,00,00,00)),hx::SourceInfo(HX_("Assets.hx",fb,cd,c6,67),180,HX_("lime.Assets",dc,38,84,97),HX_("getBytes",f5,17,6f,1d)));
            			}
            		}
            		else {
HXLINE( 186)			::lime::utils::Log_obj::info(((HX_("There is no asset library named \"",a1,83,5f,51) + libraryName) + HX_("\"",22,00,00,00)),hx::SourceInfo(HX_("Assets.hx",fb,cd,c6,67),186,HX_("lime.Assets",dc,38,84,97),HX_("getBytes",f5,17,6f,1d)));
            		}
HXLINE( 192)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,getBytes,return )

 ::lime::text::Font Assets_obj::getFont(::String id,hx::Null< Bool >  __o_useCache){
Bool useCache = __o_useCache.Default(true);
            	HX_STACK_FRAME("lime.Assets","getFont",0x2f4603f3,"lime.Assets.getFont","lime/Assets.hx",203,0x48c77341)
            	HX_STACK_ARG(id,"id")
            	HX_STACK_ARG(useCache,"useCache")
HXLINE( 205)		::lime::Assets_obj::initialize();
HXLINE( 209)		Bool _hx_tmp;
HXDLIN( 209)		Bool _hx_tmp1;
HXDLIN( 209)		if (useCache) {
HXLINE( 209)			_hx_tmp1 = ::lime::Assets_obj::cache->enabled;
            		}
            		else {
HXLINE( 209)			_hx_tmp1 = false;
            		}
HXDLIN( 209)		if (_hx_tmp1) {
HXLINE( 209)			_hx_tmp = ::lime::Assets_obj::cache->font->exists(id);
            		}
            		else {
HXLINE( 209)			_hx_tmp = false;
            		}
HXDLIN( 209)		if (_hx_tmp) {
HXLINE( 211)			return ::lime::Assets_obj::cache->font->get(id);
            		}
HXLINE( 215)		Int _hx_tmp2 = id.indexOf(HX_(":",3a,00,00,00),null());
HXDLIN( 215)		HX_VARI( ::String,libraryName) = id.substring((int)0,_hx_tmp2);
HXLINE( 216)		Int _hx_tmp3 = id.indexOf(HX_(":",3a,00,00,00),null());
HXDLIN( 216)		HX_VARI( ::String,symbolName) = id.substr((_hx_tmp3 + (int)1),null());
HXLINE( 217)		HX_VARI(  ::lime::AssetLibrary,library) = ::lime::Assets_obj::getLibrary(libraryName);
HXLINE( 219)		Bool _hx_tmp4 = hx::IsNotNull( library );
HXDLIN( 219)		if (_hx_tmp4) {
HXLINE( 221)			Bool _hx_tmp5 = library->exists(symbolName,HX_("FONT",cf,25,81,2e));
HXDLIN( 221)			if (_hx_tmp5) {
HXLINE( 223)				Bool _hx_tmp6 = library->isLocal(symbolName,HX_("FONT",cf,25,81,2e));
HXDLIN( 223)				if (_hx_tmp6) {
HXLINE( 225)					HX_VARI(  ::lime::text::Font,font) = library->getFont(symbolName);
HXLINE( 227)					Bool _hx_tmp7;
HXDLIN( 227)					if (useCache) {
HXLINE( 227)						_hx_tmp7 = ::lime::Assets_obj::cache->enabled;
            					}
            					else {
HXLINE( 227)						_hx_tmp7 = false;
            					}
HXDLIN( 227)					if (_hx_tmp7) {
HXLINE( 229)						::lime::Assets_obj::cache->font->set(id,font);
            					}
HXLINE( 233)					return font;
            				}
            				else {
HXLINE( 237)					::lime::utils::Log_obj::info(((HX_("Font asset \"",c1,b6,55,6d) + id) + HX_("\" exists, but only asynchronously",dc,ca,f2,dd)),hx::SourceInfo(HX_("Assets.hx",fb,cd,c6,67),237,HX_("lime.Assets",dc,38,84,97),HX_("getFont",85,0d,43,16)));
            				}
            			}
            			else {
HXLINE( 243)				::lime::utils::Log_obj::info(((HX_("There is no Font asset with an ID of \"",e9,6d,fb,87) + id) + HX_("\"",22,00,00,00)),hx::SourceInfo(HX_("Assets.hx",fb,cd,c6,67),243,HX_("lime.Assets",dc,38,84,97),HX_("getFont",85,0d,43,16)));
            			}
            		}
            		else {
HXLINE( 249)			::lime::utils::Log_obj::info(((HX_("There is no asset library named \"",a1,83,5f,51) + libraryName) + HX_("\"",22,00,00,00)),hx::SourceInfo(HX_("Assets.hx",fb,cd,c6,67),249,HX_("lime.Assets",dc,38,84,97),HX_("getFont",85,0d,43,16)));
            		}
HXLINE( 255)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,getFont,return )

 ::lime::graphics::Image Assets_obj::getImage(::String id,hx::Null< Bool >  __o_useCache){
Bool useCache = __o_useCache.Default(true);
            	HX_STACK_FRAME("lime.Assets","getImage",0xe6d4d8b7,"lime.Assets.getImage","lime/Assets.hx",267,0x48c77341)
            	HX_STACK_ARG(id,"id")
            	HX_STACK_ARG(useCache,"useCache")
HXLINE( 269)		::lime::Assets_obj::initialize();
HXLINE( 273)		Bool _hx_tmp;
HXDLIN( 273)		Bool _hx_tmp1;
HXDLIN( 273)		if (useCache) {
HXLINE( 273)			_hx_tmp1 = ::lime::Assets_obj::cache->enabled;
            		}
            		else {
HXLINE( 273)			_hx_tmp1 = false;
            		}
HXDLIN( 273)		if (_hx_tmp1) {
HXLINE( 273)			_hx_tmp = ::lime::Assets_obj::cache->image->exists(id);
            		}
            		else {
HXLINE( 273)			_hx_tmp = false;
            		}
HXDLIN( 273)		if (_hx_tmp) {
HXLINE( 275)			HX_VARI(  ::lime::graphics::Image,image) = ::lime::Assets_obj::cache->image->get(id).StaticCast<  ::lime::graphics::Image >();
HXLINE( 277)			if (::lime::Assets_obj::isValidImage(image)) {
HXLINE( 279)				return image;
            			}
            		}
HXLINE( 285)		Int _hx_tmp2 = id.indexOf(HX_(":",3a,00,00,00),null());
HXDLIN( 285)		HX_VARI( ::String,libraryName) = id.substring((int)0,_hx_tmp2);
HXLINE( 286)		Int _hx_tmp3 = id.indexOf(HX_(":",3a,00,00,00),null());
HXDLIN( 286)		HX_VARI( ::String,symbolName) = id.substr((_hx_tmp3 + (int)1),null());
HXLINE( 287)		HX_VARI(  ::lime::AssetLibrary,library) = ::lime::Assets_obj::getLibrary(libraryName);
HXLINE( 289)		Bool _hx_tmp4 = hx::IsNotNull( library );
HXDLIN( 289)		if (_hx_tmp4) {
HXLINE( 291)			Bool _hx_tmp5 = library->exists(symbolName,HX_("IMAGE",3b,57,57,3b));
HXDLIN( 291)			if (_hx_tmp5) {
HXLINE( 293)				Bool _hx_tmp6 = library->isLocal(symbolName,HX_("IMAGE",3b,57,57,3b));
HXDLIN( 293)				if (_hx_tmp6) {
HXLINE( 295)					HX_VARI_NAME(  ::lime::graphics::Image,image1,"image") = library->getImage(symbolName);
HXLINE( 297)					Bool _hx_tmp7;
HXDLIN( 297)					if (useCache) {
HXLINE( 297)						_hx_tmp7 = ::lime::Assets_obj::cache->enabled;
            					}
            					else {
HXLINE( 297)						_hx_tmp7 = false;
            					}
HXDLIN( 297)					if (_hx_tmp7) {
HXLINE( 299)						::lime::Assets_obj::cache->image->set(id,image1);
            					}
HXLINE( 303)					return image1;
            				}
            				else {
HXLINE( 307)					::lime::utils::Log_obj::info(((HX_("Image asset \"",0d,e8,0a,ab) + id) + HX_("\" exists, but only asynchronously",dc,ca,f2,dd)),hx::SourceInfo(HX_("Assets.hx",fb,cd,c6,67),307,HX_("lime.Assets",dc,38,84,97),HX_("getImage",e5,2e,40,1d)));
            				}
            			}
            			else {
HXLINE( 313)				::lime::utils::Log_obj::info(((HX_("There is no Image asset with an ID of \"",4b,a0,87,f0) + id) + HX_("\"",22,00,00,00)),hx::SourceInfo(HX_("Assets.hx",fb,cd,c6,67),313,HX_("lime.Assets",dc,38,84,97),HX_("getImage",e5,2e,40,1d)));
            			}
            		}
            		else {
HXLINE( 319)			::lime::utils::Log_obj::info(((HX_("There is no asset library named \"",a1,83,5f,51) + libraryName) + HX_("\"",22,00,00,00)),hx::SourceInfo(HX_("Assets.hx",fb,cd,c6,67),319,HX_("lime.Assets",dc,38,84,97),HX_("getImage",e5,2e,40,1d)));
            		}
HXLINE( 325)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,getImage,return )

 ::lime::AssetLibrary Assets_obj::getLibrary(::String name){
            	HX_STACK_FRAME("lime.Assets","getLibrary",0x6641ef57,"lime.Assets.getLibrary","lime/Assets.hx",330,0x48c77341)
            	HX_STACK_ARG(name,"name")
HXLINE( 332)		Bool _hx_tmp;
HXDLIN( 332)		Bool _hx_tmp1 = hx::IsNotNull( name );
HXDLIN( 332)		if (_hx_tmp1) {
HXLINE( 332)			_hx_tmp = (name == HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 332)			_hx_tmp = true;
            		}
HXDLIN( 332)		if (_hx_tmp) {
HXLINE( 334)			name = HX_("default",c1,d8,c3,9b);
            		}
HXLINE( 338)		return ::lime::Assets_obj::libraries->get(name).StaticCast<  ::lime::AssetLibrary >();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,getLibrary,return )

::String Assets_obj::getPath(::String id){
            	HX_STACK_FRAME("lime.Assets","getPath",0x35d78bc9,"lime.Assets.getPath","lime/Assets.hx",349,0x48c77341)
            	HX_STACK_ARG(id,"id")
HXLINE( 351)		::lime::Assets_obj::initialize();
HXLINE( 355)		Int _hx_tmp = id.indexOf(HX_(":",3a,00,00,00),null());
HXDLIN( 355)		HX_VARI( ::String,libraryName) = id.substring((int)0,_hx_tmp);
HXLINE( 356)		Int _hx_tmp1 = id.indexOf(HX_(":",3a,00,00,00),null());
HXDLIN( 356)		HX_VARI( ::String,symbolName) = id.substr((_hx_tmp1 + (int)1),null());
HXLINE( 357)		HX_VARI(  ::lime::AssetLibrary,library) = ::lime::Assets_obj::getLibrary(libraryName);
HXLINE( 359)		Bool _hx_tmp2 = hx::IsNotNull( library );
HXDLIN( 359)		if (_hx_tmp2) {
HXLINE( 361)			Bool _hx_tmp3 = library->exists(symbolName,null());
HXDLIN( 361)			if (_hx_tmp3) {
HXLINE( 363)				return library->getPath(symbolName);
            			}
            			else {
HXLINE( 367)				::lime::utils::Log_obj::info(((HX_("There is no asset with an ID of \"",b0,92,42,96) + id) + HX_("\"",22,00,00,00)),hx::SourceInfo(HX_("Assets.hx",fb,cd,c6,67),367,HX_("lime.Assets",dc,38,84,97),HX_("getPath",5b,95,d4,1c)));
            			}
            		}
            		else {
HXLINE( 373)			::lime::utils::Log_obj::info(((HX_("There is no asset library named \"",a1,83,5f,51) + libraryName) + HX_("\"",22,00,00,00)),hx::SourceInfo(HX_("Assets.hx",fb,cd,c6,67),373,HX_("lime.Assets",dc,38,84,97),HX_("getPath",5b,95,d4,1c)));
            		}
HXLINE( 379)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,getPath,return )

::String Assets_obj::getText(::String id){
            	HX_STACK_FRAME("lime.Assets","getText",0x387f72d1,"lime.Assets.getText","lime/Assets.hx",390,0x48c77341)
            	HX_STACK_ARG(id,"id")
HXLINE( 392)		::lime::Assets_obj::initialize();
HXLINE( 396)		Int _hx_tmp = id.indexOf(HX_(":",3a,00,00,00),null());
HXDLIN( 396)		HX_VARI( ::String,libraryName) = id.substring((int)0,_hx_tmp);
HXLINE( 397)		Int _hx_tmp1 = id.indexOf(HX_(":",3a,00,00,00),null());
HXDLIN( 397)		HX_VARI( ::String,symbolName) = id.substr((_hx_tmp1 + (int)1),null());
HXLINE( 398)		HX_VARI(  ::lime::AssetLibrary,library) = ::lime::Assets_obj::getLibrary(libraryName);
HXLINE( 400)		Bool _hx_tmp2 = hx::IsNotNull( library );
HXDLIN( 400)		if (_hx_tmp2) {
HXLINE( 402)			Bool _hx_tmp3 = library->exists(symbolName,HX_("TEXT",ad,94,ba,37));
HXDLIN( 402)			if (_hx_tmp3) {
HXLINE( 404)				Bool _hx_tmp4 = library->isLocal(symbolName,HX_("TEXT",ad,94,ba,37));
HXDLIN( 404)				if (_hx_tmp4) {
HXLINE( 406)					return library->getText(symbolName);
            				}
            				else {
HXLINE( 410)					::lime::utils::Log_obj::info(((HX_("String asset \"",c3,9b,2e,b8) + id) + HX_("\" exists, but only asynchronously",dc,ca,f2,dd)),hx::SourceInfo(HX_("Assets.hx",fb,cd,c6,67),410,HX_("lime.Assets",dc,38,84,97),HX_("getText",63,7c,7c,1f)));
            				}
            			}
            			else {
HXLINE( 416)				::lime::utils::Log_obj::info(((HX_("There is no String asset with an ID of \"",ab,e5,8b,b2) + id) + HX_("\"",22,00,00,00)),hx::SourceInfo(HX_("Assets.hx",fb,cd,c6,67),416,HX_("lime.Assets",dc,38,84,97),HX_("getText",63,7c,7c,1f)));
            			}
            		}
            		else {
HXLINE( 422)			::lime::utils::Log_obj::info(((HX_("There is no asset library named \"",a1,83,5f,51) + libraryName) + HX_("\"",22,00,00,00)),hx::SourceInfo(HX_("Assets.hx",fb,cd,c6,67),422,HX_("lime.Assets",dc,38,84,97),HX_("getText",63,7c,7c,1f)));
            		}
HXLINE( 428)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,getText,return )

void Assets_obj::initialize(){
            	HX_STACK_FRAME("lime.Assets","initialize",0xc42b73a2,"lime.Assets.initialize","lime/Assets.hx",435,0x48c77341)
HXLINE( 435)		Bool _hx_tmp = !(::lime::Assets_obj::initialized);
HXDLIN( 435)		if (_hx_tmp) {
HXLINE( 443)			::lime::Assets_obj::initialized = true;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Assets_obj,initialize,(void))

Bool Assets_obj::isLocal(::String id,::String type,hx::Null< Bool >  __o_useCache){
Bool useCache = __o_useCache.Default(true);
            	HX_STACK_FRAME("lime.Assets","isLocal",0x2e79638f,"lime.Assets.isLocal","lime/Assets.hx",450,0x48c77341)
            	HX_STACK_ARG(id,"id")
            	HX_STACK_ARG(type,"type")
            	HX_STACK_ARG(useCache,"useCache")
HXLINE( 452)		::lime::Assets_obj::initialize();
HXLINE( 456)		Bool _hx_tmp;
HXDLIN( 456)		if (useCache) {
HXLINE( 456)			_hx_tmp = ::lime::Assets_obj::cache->enabled;
            		}
            		else {
HXLINE( 456)			_hx_tmp = false;
            		}
HXDLIN( 456)		if (_hx_tmp) {
HXLINE( 458)			Bool _hx_tmp1;
HXDLIN( 458)			if ((type != HX_("IMAGE",3b,57,57,3b))) {
HXLINE( 458)				_hx_tmp1 = hx::IsNull( type );
            			}
            			else {
HXLINE( 458)				_hx_tmp1 = true;
            			}
HXDLIN( 458)			if (_hx_tmp1) {
HXLINE( 460)				Bool _hx_tmp2 = ::lime::Assets_obj::cache->image->exists(id);
HXDLIN( 460)				if (_hx_tmp2) {
HXLINE( 460)					return true;
            				}
            			}
HXLINE( 464)			Bool _hx_tmp3;
HXDLIN( 464)			if ((type != HX_("FONT",cf,25,81,2e))) {
HXLINE( 464)				_hx_tmp3 = hx::IsNull( type );
            			}
            			else {
HXLINE( 464)				_hx_tmp3 = true;
            			}
HXDLIN( 464)			if (_hx_tmp3) {
HXLINE( 466)				Bool _hx_tmp4 = ::lime::Assets_obj::cache->font->exists(id);
HXDLIN( 466)				if (_hx_tmp4) {
HXLINE( 466)					return true;
            				}
            			}
HXLINE( 470)			Bool _hx_tmp5;
HXDLIN( 470)			Bool _hx_tmp6;
HXDLIN( 470)			if ((type != HX_("SOUND",af,c4,ba,fe))) {
HXLINE( 470)				_hx_tmp6 = (type == HX_("MUSIC",85,08,49,8e));
            			}
            			else {
HXLINE( 470)				_hx_tmp6 = true;
            			}
HXDLIN( 470)			if (!(_hx_tmp6)) {
HXLINE( 470)				_hx_tmp5 = hx::IsNull( type );
            			}
            			else {
HXLINE( 470)				_hx_tmp5 = true;
            			}
HXDLIN( 470)			if (_hx_tmp5) {
HXLINE( 472)				Bool _hx_tmp7 = ::lime::Assets_obj::cache->audio->exists(id);
HXDLIN( 472)				if (_hx_tmp7) {
HXLINE( 472)					return true;
            				}
            			}
            		}
HXLINE( 478)		Int _hx_tmp8 = id.indexOf(HX_(":",3a,00,00,00),null());
HXDLIN( 478)		HX_VARI( ::String,libraryName) = id.substring((int)0,_hx_tmp8);
HXLINE( 479)		Int _hx_tmp9 = id.indexOf(HX_(":",3a,00,00,00),null());
HXDLIN( 479)		HX_VARI( ::String,symbolName) = id.substr((_hx_tmp9 + (int)1),null());
HXLINE( 480)		HX_VARI(  ::lime::AssetLibrary,library) = ::lime::Assets_obj::getLibrary(libraryName);
HXLINE( 482)		Bool _hx_tmp10 = hx::IsNotNull( library );
HXDLIN( 482)		if (_hx_tmp10) {
HXLINE( 484)			return library->isLocal(symbolName,type);
            		}
HXLINE( 490)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Assets_obj,isLocal,return )

Bool Assets_obj::isValidAudio( ::lime::audio::AudioBuffer buffer){
            	HX_STACK_FRAME("lime.Assets","isValidAudio",0x0da20596,"lime.Assets.isValidAudio","lime/Assets.hx",499,0x48c77341)
            	HX_STACK_ARG(buffer,"buffer")
HXLINE( 499)		return hx::IsNotNull( buffer );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,isValidAudio,return )

Bool Assets_obj::isValidImage( ::lime::graphics::Image buffer){
            	HX_STACK_FRAME("lime.Assets","isValidImage",0xa38aac1b,"lime.Assets.isValidImage","lime/Assets.hx",516,0x48c77341)
            	HX_STACK_ARG(buffer,"buffer")
HXLINE( 516)		return hx::IsNotNull( buffer );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,isValidImage,return )

::Array< ::String > Assets_obj::list(::String type){
            	HX_STACK_FRAME("lime.Assets","list",0x60d5f530,"lime.Assets.list","lime/Assets.hx",540,0x48c77341)
            	HX_STACK_ARG(type,"type")
HXLINE( 542)		::lime::Assets_obj::initialize();
HXLINE( 544)		HX_VARI( ::Array< ::String >,items) = ::Array_obj< ::String >::__new(0);
HXLINE( 546)		{
HXLINE( 546)			HX_VARI(  ::Dynamic,tmp) = ::lime::Assets_obj::libraries->iterator();
HXDLIN( 546)			while(true){
HXLINE( 546)				Bool _hx_tmp = !(( (Bool)( ::Dynamic(tmp->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN( 546)				if (_hx_tmp) {
HXLINE( 546)					goto _hx_goto_0;
            				}
HXDLIN( 546)				HX_VARI(  ::lime::AssetLibrary,library) = ( ( ::lime::AssetLibrary)( ::Dynamic(tmp->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))()) );
HXLINE( 548)				HX_VARI( ::Array< ::String >,libraryItems) = library->list(type);
HXLINE( 550)				Bool _hx_tmp1 = hx::IsNotNull( libraryItems );
HXDLIN( 550)				if (_hx_tmp1) {
HXLINE( 552)					items = items->concat(libraryItems);
            				}
            			}
            			_hx_goto_0:;
            		}
HXLINE( 558)		return items;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,list,return )

 ::lime::app::Future Assets_obj::loadAudioBuffer(::String id,hx::Null< Bool >  __o_useCache){
Bool useCache = __o_useCache.Default(true);
            	HX_STACK_FRAME("lime.Assets","loadAudioBuffer",0x6d20865e,"lime.Assets.loadAudioBuffer","lime/Assets.hx",563,0x48c77341)
            	HX_STACK_ARG(id,"id")
            	HX_STACK_ARG(useCache,"useCache")
HXLINE( 565)		::lime::Assets_obj::initialize();
HXLINE( 567)		HX_VARI(  ::lime::app::Promise_lime_audio_AudioBuffer,promise) =  ::lime::app::Promise_lime_audio_AudioBuffer_obj::__new();
HXLINE( 571)		Bool _hx_tmp;
HXDLIN( 571)		Bool _hx_tmp1;
HXDLIN( 571)		if (useCache) {
HXLINE( 571)			_hx_tmp1 = ::lime::Assets_obj::cache->enabled;
            		}
            		else {
HXLINE( 571)			_hx_tmp1 = false;
            		}
HXDLIN( 571)		if (_hx_tmp1) {
HXLINE( 571)			_hx_tmp = ::lime::Assets_obj::cache->audio->exists(id);
            		}
            		else {
HXLINE( 571)			_hx_tmp = false;
            		}
HXDLIN( 571)		if (_hx_tmp) {
HXLINE( 573)			HX_VARI(  ::lime::audio::AudioBuffer,audio) = ::lime::Assets_obj::cache->audio->get(id).StaticCast<  ::lime::audio::AudioBuffer >();
HXLINE( 575)			if (::lime::Assets_obj::isValidAudio(audio)) {
HXLINE( 577)				promise->complete(audio);
HXLINE( 578)				return promise->future;
            			}
            		}
HXLINE( 584)		Int _hx_tmp2 = id.indexOf(HX_(":",3a,00,00,00),null());
HXDLIN( 584)		HX_VARI( ::String,libraryName) = id.substring((int)0,_hx_tmp2);
HXLINE( 585)		Int _hx_tmp3 = id.indexOf(HX_(":",3a,00,00,00),null());
HXDLIN( 585)		HX_VARI( ::String,symbolName) = id.substr((_hx_tmp3 + (int)1),null());
HXLINE( 586)		HX_VARI(  ::lime::AssetLibrary,library) = ::lime::Assets_obj::getLibrary(libraryName);
HXLINE( 588)		Bool _hx_tmp4 = hx::IsNotNull( library );
HXDLIN( 588)		if (_hx_tmp4) {
HXLINE( 590)			Bool _hx_tmp5 = library->exists(symbolName,HX_("SOUND",af,c4,ba,fe));
HXDLIN( 590)			if (_hx_tmp5) {
HXLINE( 592)				HX_VARI(  ::lime::app::Future,future) = library->loadAudioBuffer(symbolName);
HXLINE( 594)				Bool _hx_tmp6;
HXDLIN( 594)				if (useCache) {
HXLINE( 594)					_hx_tmp6 = ::lime::Assets_obj::cache->enabled;
            				}
            				else {
HXLINE( 594)					_hx_tmp6 = false;
            				}
HXDLIN( 594)				if (_hx_tmp6) {
            					HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::String,id) HXARGC(1)
            					void _hx_run( ::lime::audio::AudioBuffer audio1){
            						HX_STACK_FRAME("lime.Assets","loadAudioBuffer",0x6d20865e,"lime.Assets.loadAudioBuffer","lime/Assets.hx",596,0x48c77341)
            						HX_STACK_ARG(audio1,"audio1")
HXLINE( 596)						::lime::Assets_obj::cache->audio->set(id,audio1);
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE( 596)					future->onComplete( ::Dynamic(new _hx_Closure_0(id)));
            				}
HXLINE( 600)				promise->completeWith(future);
            			}
            			else {
HXLINE( 604)				promise->error(((HX_("[Assets] There is no audio asset with an ID of \"",65,50,b8,55) + id) + HX_("\"",22,00,00,00)));
            			}
            		}
            		else {
HXLINE( 610)			promise->error(((HX_("[Assets] There is no asset library named \"",a0,b4,0a,cd) + libraryName) + HX_("\"",22,00,00,00)));
            		}
HXLINE( 616)		return promise->future;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,loadAudioBuffer,return )

 ::lime::app::Future Assets_obj::loadBytes(::String id){
            	HX_STACK_FRAME("lime.Assets","loadBytes",0x714f4253,"lime.Assets.loadBytes","lime/Assets.hx",621,0x48c77341)
            	HX_STACK_ARG(id,"id")
HXLINE( 623)		::lime::Assets_obj::initialize();
HXLINE( 625)		HX_VARI(  ::lime::app::Promise_lime_utils_Bytes,promise) =  ::lime::app::Promise_lime_utils_Bytes_obj::__new();
HXLINE( 629)		Int _hx_tmp = id.indexOf(HX_(":",3a,00,00,00),null());
HXDLIN( 629)		HX_VARI( ::String,libraryName) = id.substring((int)0,_hx_tmp);
HXLINE( 630)		Int _hx_tmp1 = id.indexOf(HX_(":",3a,00,00,00),null());
HXDLIN( 630)		HX_VARI( ::String,symbolName) = id.substr((_hx_tmp1 + (int)1),null());
HXLINE( 631)		HX_VARI(  ::lime::AssetLibrary,library) = ::lime::Assets_obj::getLibrary(libraryName);
HXLINE( 633)		Bool _hx_tmp2 = hx::IsNotNull( library );
HXDLIN( 633)		if (_hx_tmp2) {
HXLINE( 635)			Bool _hx_tmp3 = library->exists(symbolName,HX_("BINARY",01,68,8e,9f));
HXDLIN( 635)			if (_hx_tmp3) {
HXLINE( 637)				 ::lime::app::Future _hx_tmp4 = library->loadBytes(symbolName);
HXDLIN( 637)				promise->completeWith(_hx_tmp4);
            			}
            			else {
HXLINE( 641)				promise->error(((HX_("[Assets] There is no String or Bytes asset with an ID of \"",ec,ff,7c,1c) + id) + HX_("\"",22,00,00,00)));
            			}
            		}
            		else {
HXLINE( 647)			promise->error(((HX_("[Assets] There is no asset library named \"",a0,b4,0a,cd) + libraryName) + HX_("\"",22,00,00,00)));
            		}
HXLINE( 653)		return promise->future;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,loadBytes,return )

 ::lime::app::Future Assets_obj::loadFont(::String id){
            	HX_STACK_FRAME("lime.Assets","loadFont",0x7df4d8e7,"lime.Assets.loadFont","lime/Assets.hx",658,0x48c77341)
            	HX_STACK_ARG(id,"id")
HXLINE( 660)		::lime::Assets_obj::initialize();
HXLINE( 662)		HX_VARI(  ::lime::app::Promise_lime_text_Font,promise) =  ::lime::app::Promise_lime_text_Font_obj::__new();
HXLINE( 666)		Int _hx_tmp = id.indexOf(HX_(":",3a,00,00,00),null());
HXDLIN( 666)		HX_VARI( ::String,libraryName) = id.substring((int)0,_hx_tmp);
HXLINE( 667)		Int _hx_tmp1 = id.indexOf(HX_(":",3a,00,00,00),null());
HXDLIN( 667)		HX_VARI( ::String,symbolName) = id.substr((_hx_tmp1 + (int)1),null());
HXLINE( 668)		HX_VARI(  ::lime::AssetLibrary,library) = ::lime::Assets_obj::getLibrary(libraryName);
HXLINE( 670)		Bool _hx_tmp2 = hx::IsNotNull( library );
HXDLIN( 670)		if (_hx_tmp2) {
HXLINE( 672)			Bool _hx_tmp3 = library->exists(symbolName,HX_("FONT",cf,25,81,2e));
HXDLIN( 672)			if (_hx_tmp3) {
HXLINE( 674)				 ::lime::app::Future _hx_tmp4 = library->loadFont(symbolName);
HXDLIN( 674)				promise->completeWith(_hx_tmp4);
            			}
            			else {
HXLINE( 678)				promise->error(((HX_("[Assets] There is no Font asset with an ID of \"",8a,40,c3,f6) + id) + HX_("\"",22,00,00,00)));
            			}
            		}
            		else {
HXLINE( 684)			promise->error(((HX_("[Assets] There is no asset library named \"",a0,b4,0a,cd) + libraryName) + HX_("\"",22,00,00,00)));
            		}
HXLINE( 690)		return promise->future;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,loadFont,return )

 ::lime::app::Future Assets_obj::loadImage(::String id,hx::Null< Bool >  __o_useCache){
Bool useCache = __o_useCache.Default(true);
            	HX_STACK_FRAME("lime.Assets","loadImage",0x71205943,"lime.Assets.loadImage","lime/Assets.hx",695,0x48c77341)
            	HX_STACK_ARG(id,"id")
            	HX_STACK_ARG(useCache,"useCache")
HXLINE( 697)		::lime::Assets_obj::initialize();
HXLINE( 699)		HX_VARI(  ::lime::app::Promise_lime_graphics_Image,promise) =  ::lime::app::Promise_lime_graphics_Image_obj::__new();
HXLINE( 703)		Bool _hx_tmp;
HXDLIN( 703)		Bool _hx_tmp1;
HXDLIN( 703)		if (useCache) {
HXLINE( 703)			_hx_tmp1 = ::lime::Assets_obj::cache->enabled;
            		}
            		else {
HXLINE( 703)			_hx_tmp1 = false;
            		}
HXDLIN( 703)		if (_hx_tmp1) {
HXLINE( 703)			_hx_tmp = ::lime::Assets_obj::cache->image->exists(id);
            		}
            		else {
HXLINE( 703)			_hx_tmp = false;
            		}
HXDLIN( 703)		if (_hx_tmp) {
HXLINE( 705)			HX_VARI(  ::lime::graphics::Image,image) = ::lime::Assets_obj::cache->image->get(id).StaticCast<  ::lime::graphics::Image >();
HXLINE( 707)			if (::lime::Assets_obj::isValidImage(image)) {
HXLINE( 709)				promise->complete(image);
HXLINE( 710)				return promise->future;
            			}
            		}
HXLINE( 716)		Int _hx_tmp2 = id.indexOf(HX_(":",3a,00,00,00),null());
HXDLIN( 716)		HX_VARI( ::String,libraryName) = id.substring((int)0,_hx_tmp2);
HXLINE( 717)		Int _hx_tmp3 = id.indexOf(HX_(":",3a,00,00,00),null());
HXDLIN( 717)		HX_VARI( ::String,symbolName) = id.substr((_hx_tmp3 + (int)1),null());
HXLINE( 718)		HX_VARI(  ::lime::AssetLibrary,library) = ::lime::Assets_obj::getLibrary(libraryName);
HXLINE( 720)		Bool _hx_tmp4 = hx::IsNotNull( library );
HXDLIN( 720)		if (_hx_tmp4) {
HXLINE( 722)			Bool _hx_tmp5 = library->exists(symbolName,HX_("IMAGE",3b,57,57,3b));
HXDLIN( 722)			if (_hx_tmp5) {
HXLINE( 724)				HX_VARI(  ::lime::app::Future,future) = library->loadImage(symbolName);
HXLINE( 726)				Bool _hx_tmp6;
HXDLIN( 726)				if (useCache) {
HXLINE( 726)					_hx_tmp6 = ::lime::Assets_obj::cache->enabled;
            				}
            				else {
HXLINE( 726)					_hx_tmp6 = false;
            				}
HXDLIN( 726)				if (_hx_tmp6) {
            					HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::String,id) HXARGC(1)
            					void _hx_run( ::lime::graphics::Image image1){
            						HX_STACK_FRAME("lime.Assets","loadImage",0x71205943,"lime.Assets.loadImage","lime/Assets.hx",728,0x48c77341)
            						HX_STACK_ARG(image1,"image1")
HXLINE( 728)						::lime::Assets_obj::cache->image->set(id,image1);
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE( 728)					future->onComplete( ::Dynamic(new _hx_Closure_0(id)));
            				}
HXLINE( 732)				promise->completeWith(future);
            			}
            			else {
HXLINE( 736)				promise->error(((HX_("[Assets] There is no Image asset with an ID of \"",8a,1a,98,70) + id) + HX_("\"",22,00,00,00)));
            			}
            		}
            		else {
HXLINE( 742)			promise->error(((HX_("[Assets] There is no asset library named \"",a0,b4,0a,cd) + libraryName) + HX_("\"",22,00,00,00)));
            		}
HXLINE( 748)		return promise->future;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,loadImage,return )

 ::lime::app::Future Assets_obj::loadLibrary(::String name){
            	HX_STACK_FRAME("lime.Assets","loadLibrary",0xbad7aae3,"lime.Assets.loadLibrary","lime/Assets.hx",753,0x48c77341)
            	HX_STACK_ARG(name,"name")
HXLINE( 755)		::lime::Assets_obj::initialize();
HXLINE( 757)		HX_VARI(  ::lime::app::Promise_lime_AssetLibrary,promise) =  ::lime::app::Promise_lime_AssetLibrary_obj::__new();
HXLINE( 761)		HX_VARI( ::String,data) = ::lime::Assets_obj::getText(((HX_("libraries/",f6,c5,4d,c0) + name) + HX_(".json",56,f1,d6,c2)));
HXLINE( 763)		Bool _hx_tmp;
HXDLIN( 763)		Bool _hx_tmp1 = hx::IsNotNull( data );
HXDLIN( 763)		if (_hx_tmp1) {
HXLINE( 763)			_hx_tmp = (data != HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 763)			_hx_tmp = false;
            		}
HXDLIN( 763)		if (_hx_tmp) {
HXLINE( 765)			HX_VARI(  ::Dynamic,info) =  ::haxe::format::JsonParser_obj::__new(data)->parseRec();
HXLINE( 766)			hx::Class _hx_tmp2 = ::Type_obj::resolveClass( ::Dynamic(info->__Field(HX_("type",ba,f2,08,4d),hx::paccDynamic)));
HXDLIN( 766)			HX_VARI(  ::lime::AssetLibrary,library) = ( ( ::lime::AssetLibrary)(::Type_obj::createInstance(_hx_tmp2, ::Dynamic(info->__Field(HX_("args",5d,8d,74,40),hx::paccDynamic)))) );
HXLINE( 767)			::lime::Assets_obj::libraries->set(name,library);
HXLINE( 768)			library->onChange->add(::lime::Assets_obj::onChange->dispatch_dyn(),null(),null());
HXLINE( 769)			 ::lime::app::Future _hx_tmp3 = library->load();
HXDLIN( 769)			promise->completeWith(_hx_tmp3);
            		}
            		else {
HXLINE( 773)			promise->error(((HX_("[Assets] There is no asset library named \"",a0,b4,0a,cd) + name) + HX_("\"",22,00,00,00)));
            		}
HXLINE( 779)		return promise->future;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,loadLibrary,return )

 ::lime::app::Future Assets_obj::loadText(::String id){
            	HX_STACK_FRAME("lime.Assets","loadText",0x872e47c5,"lime.Assets.loadText","lime/Assets.hx",784,0x48c77341)
            	HX_STACK_ARG(id,"id")
HXLINE( 786)		::lime::Assets_obj::initialize();
HXLINE( 788)		HX_VARI(  ::lime::app::Promise_String,promise) =  ::lime::app::Promise_String_obj::__new();
HXLINE( 792)		Int _hx_tmp = id.indexOf(HX_(":",3a,00,00,00),null());
HXDLIN( 792)		HX_VARI( ::String,libraryName) = id.substring((int)0,_hx_tmp);
HXLINE( 793)		Int _hx_tmp1 = id.indexOf(HX_(":",3a,00,00,00),null());
HXDLIN( 793)		HX_VARI( ::String,symbolName) = id.substr((_hx_tmp1 + (int)1),null());
HXLINE( 794)		HX_VARI(  ::lime::AssetLibrary,library) = ::lime::Assets_obj::getLibrary(libraryName);
HXLINE( 796)		Bool _hx_tmp2 = hx::IsNotNull( library );
HXDLIN( 796)		if (_hx_tmp2) {
HXLINE( 798)			Bool _hx_tmp3 = library->exists(symbolName,HX_("TEXT",ad,94,ba,37));
HXDLIN( 798)			if (_hx_tmp3) {
HXLINE( 800)				 ::lime::app::Future _hx_tmp4 = library->loadText(symbolName);
HXDLIN( 800)				promise->completeWith(_hx_tmp4);
            			}
            			else {
HXLINE( 804)				promise->error(((HX_("[Assets] There is no String asset with an ID of \"",8c,62,e6,40) + id) + HX_("\"",22,00,00,00)));
            			}
            		}
            		else {
HXLINE( 810)			promise->error(((HX_("[Assets] There is no asset library named \"",a0,b4,0a,cd) + libraryName) + HX_("\"",22,00,00,00)));
            		}
HXLINE( 816)		return promise->future;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,loadText,return )

void Assets_obj::registerLibrary(::String name, ::lime::AssetLibrary library){
            	HX_STACK_FRAME("lime.Assets","registerLibrary",0x7c289f46,"lime.Assets.registerLibrary","lime/Assets.hx",821,0x48c77341)
            	HX_STACK_ARG(name,"name")
            	HX_STACK_ARG(library,"library")
HXLINE( 823)		Bool _hx_tmp = ::lime::Assets_obj::libraries->exists(name);
HXDLIN( 823)		if (_hx_tmp) {
HXLINE( 825)			Bool _hx_tmp1 = hx::IsEq( ::lime::Assets_obj::libraries->get(name).StaticCast<  ::lime::AssetLibrary >(),library );
HXDLIN( 825)			if (_hx_tmp1) {
HXLINE( 827)				return;
            			}
            			else {
HXLINE( 831)				::lime::Assets_obj::unloadLibrary(name);
            			}
            		}
HXLINE( 837)		Bool _hx_tmp2 = hx::IsNotNull( library );
HXDLIN( 837)		if (_hx_tmp2) {
HXLINE( 839)			library->onChange->add(::lime::Assets_obj::library_onChange_dyn(),null(),null());
            		}
HXLINE( 843)		::lime::Assets_obj::libraries->set(name,library);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,registerLibrary,(void))

void Assets_obj::unloadLibrary(::String name){
            	HX_STACK_FRAME("lime.Assets","unloadLibrary",0x7620d8aa,"lime.Assets.unloadLibrary","lime/Assets.hx",848,0x48c77341)
            	HX_STACK_ARG(name,"name")
HXLINE( 850)		::lime::Assets_obj::initialize();
HXLINE( 854)		HX_VARI(  ::lime::AssetLibrary,library) = ::lime::Assets_obj::libraries->get(name).StaticCast<  ::lime::AssetLibrary >();
HXLINE( 856)		Bool _hx_tmp = hx::IsNotNull( library );
HXDLIN( 856)		if (_hx_tmp) {
HXLINE( 858)			::lime::Assets_obj::cache->clear((name + HX_(":",3a,00,00,00)));
HXLINE( 859)			library->onChange->remove(::lime::Assets_obj::library_onChange_dyn());
HXLINE( 860)			library->unload();
            		}
HXLINE( 864)		::lime::Assets_obj::libraries->remove(name);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,unloadLibrary,(void))

void Assets_obj::library_onChange(){
            	HX_STACK_FRAME("lime.Assets","library_onChange",0xae01ecc5,"lime.Assets.library_onChange","lime/Assets.hx",878,0x48c77341)
HXLINE( 880)		::lime::Assets_obj::cache->clear(null());
HXLINE( 881)		::lime::Assets_obj::onChange->dispatch();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Assets_obj,library_onChange,(void))


Assets_obj::Assets_obj()
{
}

bool Assets_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"list") ) { outValue = list_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"cache") ) { outValue = cache; return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"exists") ) { outValue = exists_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"getFont") ) { outValue = getFont_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getPath") ) { outValue = getPath_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getText") ) { outValue = getText_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isLocal") ) { outValue = isLocal_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"onChange") ) { outValue = onChange; return true; }
		if (HX_FIELD_EQ(inName,"getBytes") ) { outValue = getBytes_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getImage") ) { outValue = getImage_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"loadFont") ) { outValue = loadFont_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"loadText") ) { outValue = loadText_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"libraries") ) { outValue = libraries; return true; }
		if (HX_FIELD_EQ(inName,"loadBytes") ) { outValue = loadBytes_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"loadImage") ) { outValue = loadImage_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"getLibrary") ) { outValue = getLibrary_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"initialize") ) { outValue = initialize_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"initialized") ) { outValue = initialized; return true; }
		if (HX_FIELD_EQ(inName,"loadLibrary") ) { outValue = loadLibrary_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"isValidAudio") ) { outValue = isValidAudio_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isValidImage") ) { outValue = isValidImage_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"unloadLibrary") ) { outValue = unloadLibrary_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"getAudioBuffer") ) { outValue = getAudioBuffer_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"loadAudioBuffer") ) { outValue = loadAudioBuffer_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"registerLibrary") ) { outValue = registerLibrary_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"library_onChange") ) { outValue = library_onChange_dyn(); return true; }
	}
	return false;
}

bool Assets_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"cache") ) { cache=ioValue.Cast<  ::lime::AssetCache >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"onChange") ) { onChange=ioValue.Cast<  ::lime::app::_Event_Void_Void >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"libraries") ) { libraries=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"initialized") ) { initialized=ioValue.Cast< Bool >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Assets_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Assets_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::lime::AssetCache*/ ,(void *) &Assets_obj::cache,HX_HCSTRING("cache","\x42","\x9a","\x14","\x41")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Assets_obj::libraries,HX_HCSTRING("libraries","\x19","\x50","\xf8","\x18")},
	{hx::fsObject /*::lime::app::_Event_Void_Void*/ ,(void *) &Assets_obj::onChange,HX_HCSTRING("onChange","\xef","\x87","\x1f","\x97")},
	{hx::fsBool,(void *) &Assets_obj::initialized,HX_HCSTRING("initialized","\x14","\xf5","\x0f","\x37")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Assets_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Assets_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Assets_obj::cache,"cache");
	HX_MARK_MEMBER_NAME(Assets_obj::libraries,"libraries");
	HX_MARK_MEMBER_NAME(Assets_obj::onChange,"onChange");
	HX_MARK_MEMBER_NAME(Assets_obj::initialized,"initialized");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Assets_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Assets_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Assets_obj::cache,"cache");
	HX_VISIT_MEMBER_NAME(Assets_obj::libraries,"libraries");
	HX_VISIT_MEMBER_NAME(Assets_obj::onChange,"onChange");
	HX_VISIT_MEMBER_NAME(Assets_obj::initialized,"initialized");
};

#endif

hx::Class Assets_obj::__mClass;

static ::String Assets_obj_sStaticFields[] = {
	HX_HCSTRING("cache","\x42","\x9a","\x14","\x41"),
	HX_HCSTRING("libraries","\x19","\x50","\xf8","\x18"),
	HX_HCSTRING("onChange","\xef","\x87","\x1f","\x97"),
	HX_HCSTRING("initialized","\x14","\xf5","\x0f","\x37"),
	HX_HCSTRING("exists","\xdc","\x1d","\xe0","\xbf"),
	HX_HCSTRING("getAudioBuffer","\x80","\x41","\xe3","\x26"),
	HX_HCSTRING("getBytes","\xf5","\x17","\x6f","\x1d"),
	HX_HCSTRING("getFont","\x85","\x0d","\x43","\x16"),
	HX_HCSTRING("getImage","\xe5","\x2e","\x40","\x1d"),
	HX_HCSTRING("getLibrary","\x05","\xad","\xd1","\x8e"),
	HX_HCSTRING("getPath","\x5b","\x95","\xd4","\x1c"),
	HX_HCSTRING("getText","\x63","\x7c","\x7c","\x1f"),
	HX_HCSTRING("initialize","\x50","\x31","\xbb","\xec"),
	HX_HCSTRING("isLocal","\x21","\x6d","\x76","\x15"),
	HX_HCSTRING("isValidAudio","\xc4","\x0a","\xdf","\x47"),
	HX_HCSTRING("isValidImage","\x49","\xb1","\xc7","\xdd"),
	HX_HCSTRING("list","\x5e","\x1c","\xb3","\x47"),
	HX_HCSTRING("loadAudioBuffer","\xf0","\x71","\x7c","\xe3"),
	HX_HCSTRING("loadBytes","\x65","\x54","\xcf","\xd8"),
	HX_HCSTRING("loadFont","\x15","\x2f","\x60","\xb4"),
	HX_HCSTRING("loadImage","\x55","\x6b","\xa0","\xd8"),
	HX_HCSTRING("loadLibrary","\x75","\xe5","\x0d","\x10"),
	HX_HCSTRING("loadText","\xf3","\x9d","\x99","\xbd"),
	HX_HCSTRING("registerLibrary","\xd8","\x8a","\x84","\xf2"),
	HX_HCSTRING("unloadLibrary","\xbc","\x5b","\x48","\x31"),
	HX_HCSTRING("library_onChange","\xf3","\x20","\x14","\xc8"),
	::String(null())
};

void Assets_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime.Assets","\xdc","\x38","\x84","\x97");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Assets_obj::__GetStatic;
	__mClass->mSetStaticField = &Assets_obj::__SetStatic;
	__mClass->mMarkFunc = Assets_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Assets_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Assets_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Assets_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Assets_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Assets_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Assets_obj::__boot()
{
{
            	HX_STACK_FRAME("lime.Assets","boot",0x5a3e5d04,"lime.Assets.boot","lime/Assets.hx",43,0x48c77341)
HXLINE(  43)		cache =  ::lime::AssetCache_obj::__new();
            	}
{
            	HX_STACK_FRAME("lime.Assets","boot",0x5a3e5d04,"lime.Assets.boot","lime/Assets.hx",44,0x48c77341)
HXLINE(  44)		libraries =  ::haxe::ds::StringMap_obj::__new();
            	}
{
            	HX_STACK_FRAME("lime.Assets","boot",0x5a3e5d04,"lime.Assets.boot","lime/Assets.hx",45,0x48c77341)
HXLINE(  45)		onChange =  ::lime::app::_Event_Void_Void_obj::__new();
            	}
{
            	HX_STACK_FRAME("lime.Assets","boot",0x5a3e5d04,"lime.Assets.boot","lime/Assets.hx",47,0x48c77341)
HXLINE(  47)		initialized = false;
            	}
}

} // end namespace lime
