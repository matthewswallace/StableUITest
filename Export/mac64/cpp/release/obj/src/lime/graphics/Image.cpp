// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_cpp_Prime
#include <cpp/Prime.h>
#endif
#ifndef INCLUDED_haxe_crypto_BaseCode
#include <haxe/crypto/BaseCode.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime_app_Application
#include <lime/app/Application.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app_Module
#include <lime/app/Module.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageBuffer
#include <lime/graphics/ImageBuffer.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageChannel
#include <lime/graphics/ImageChannel.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageType
#include <lime/graphics/ImageType.h>
#endif
#ifndef INCLUDED_lime_graphics_RenderContext
#include <lime/graphics/RenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics_Renderer
#include <lime/graphics/Renderer.h>
#endif
#ifndef INCLUDED_lime_graphics_format_BMP
#include <lime/graphics/format/BMP.h>
#endif
#ifndef INCLUDED_lime_graphics_format_BMPType
#include <lime/graphics/format/BMPType.h>
#endif
#ifndef INCLUDED_lime_graphics_format_JPEG
#include <lime/graphics/format/JPEG.h>
#endif
#ifndef INCLUDED_lime_graphics_format_PNG
#include <lime/graphics/format/PNG.h>
#endif
#ifndef INCLUDED_lime_graphics_utils_ImageCanvasUtil
#include <lime/graphics/utils/ImageCanvasUtil.h>
#endif
#ifndef INCLUDED_lime_graphics_utils_ImageDataUtil
#include <lime/graphics/utils/ImageDataUtil.h>
#endif
#ifndef INCLUDED_lime_math_Rectangle
#include <lime/math/Rectangle.h>
#endif
#ifndef INCLUDED_lime_math_Vector2
#include <lime/math/Vector2.h>
#endif
#ifndef INCLUDED_lime_math__ColorMatrix_ColorMatrix_Impl_
#include <lime/math/_ColorMatrix/ColorMatrix_Impl_.h>
#endif
#ifndef INCLUDED_lime_system_CFFI
#include <lime/system/CFFI.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils_TAError
#include <lime/utils/TAError.h>
#endif

namespace lime{
namespace graphics{

void Image_obj::__construct( ::lime::graphics::ImageBuffer buffer,hx::Null< Int >  __o_offsetX,hx::Null< Int >  __o_offsetY,hx::Null< Int >  __o_width,hx::Null< Int >  __o_height, ::Dynamic color,::hx::EnumBase type){
Int offsetX = __o_offsetX.Default(0);
Int offsetY = __o_offsetY.Default(0);
Int width = __o_width.Default(-1);
Int height = __o_height.Default(-1);
            	HX_STACK_FRAME("lime.graphics.Image","new",0x344ae603,"lime.graphics.Image.new","lime/graphics/Image.hx",89,0xc7b862ad)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(buffer,"buffer")
            	HX_STACK_ARG(offsetX,"offsetX")
            	HX_STACK_ARG(offsetY,"offsetY")
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
            	HX_STACK_ARG(color,"color")
            	HX_STACK_ARG(type,"type")
HXLINE(  91)		this->offsetX = offsetX;
HXLINE(  92)		this->offsetY = offsetY;
HXLINE(  93)		this->width = width;
HXLINE(  94)		this->height = height;
HXLINE(  96)		this->version = (int)0;
HXLINE(  98)		Bool _hx_tmp = hx::IsNull( type );
HXDLIN(  98)		if (_hx_tmp) {
HXLINE( 100)			Bool _hx_tmp1;
HXDLIN( 100)			Bool _hx_tmp2 = hx::IsNotNull( ::lime::app::Application_obj::current );
HXDLIN( 100)			if (_hx_tmp2) {
HXLINE( 100)				_hx_tmp1 = hx::IsNotNull( ::lime::app::Application_obj::current->_hx___renderers->__get((int)0).StaticCast<  ::lime::graphics::Renderer >() );
            			}
            			else {
HXLINE( 100)				_hx_tmp1 = false;
            			}
HXDLIN( 100)			if (_hx_tmp1) {
HXLINE( 102)				HX_VARI( ::hx::EnumBase,_g) = ::lime::app::Application_obj::current->_hx___renderers->__get((int)0).StaticCast<  ::lime::graphics::Renderer >()->context;
HXDLIN( 102)				::hx::EnumBase _hx_tmp3;
HXDLIN( 102)				Int _hx_tmp4 = ( ( ::hx::EnumBase)(_g) )->_hx_getIndex();
HXDLIN( 102)				switch((int)(_hx_tmp4)){
            					case (int)1: case (int)2: {
HXLINE( 102)						_hx_tmp3 = ::lime::graphics::ImageType_obj::CANVAS_dyn();
            					}
            					break;
            					case (int)3: {
HXLINE( 102)						_hx_tmp3 = ::lime::graphics::ImageType_obj::FLASH_dyn();
            					}
            					break;
            					default:{
HXLINE( 102)						_hx_tmp3 = ::lime::graphics::ImageType_obj::DATA_dyn();
            					}
            				}
HXDLIN( 102)				this->type = _hx_tmp3;
            			}
            			else {
HXLINE( 112)				this->type = ::lime::graphics::ImageType_obj::DATA_dyn();
            			}
            		}
            		else {
HXLINE( 118)			this->type = type;
            		}
HXLINE( 122)		Bool _hx_tmp5 = hx::IsNull( buffer );
HXDLIN( 122)		if (_hx_tmp5) {
HXLINE( 124)			Bool _hx_tmp6;
HXDLIN( 124)			if ((width > (int)0)) {
HXLINE( 124)				_hx_tmp6 = (height > (int)0);
            			}
            			else {
HXLINE( 124)				_hx_tmp6 = false;
            			}
HXDLIN( 124)			if (_hx_tmp6) {
HXLINE( 126)				Int _hx_tmp7 = ( ( ::hx::EnumBase)(this->type) )->_hx_getIndex();
HXDLIN( 126)				switch((int)(_hx_tmp7)){
            					case (int)0: {
HXLINE( 130)						this->buffer =  ::lime::graphics::ImageBuffer_obj::__new(null(),width,height,null(),null());
HXLINE( 131)						::lime::graphics::utils::ImageCanvasUtil_obj::createCanvas(hx::ObjectPtr<OBJ_>(this),width,height);
HXLINE( 133)						Bool _hx_tmp8 = hx::IsNotNull( color );
HXDLIN( 133)						if (_hx_tmp8) {
HXLINE( 135)							this->fillRect( ::lime::math::Rectangle_obj::__new((int)0,(int)0,width,height),color,null());
            						}
            					}
            					break;
            					case (int)1: {
HXLINE( 141)						HX_VARI(  ::Dynamic,elements) = ((width * height) * (int)4);
HXDLIN( 141)						HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this1,"this");
HXDLIN( 141)						Bool _hx_tmp9 = hx::IsNotNull( elements );
HXDLIN( 141)						if (_hx_tmp9) {
HXLINE( 141)							this1 =  ::lime::utils::ArrayBufferView_obj::__new(elements,(int)4);
            						}
            						else {
HXLINE( 141)							HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8Array",6b,44,d5,85));
            						}
HXDLIN( 141)						this->buffer =  ::lime::graphics::ImageBuffer_obj::__new(this1,width,height,null(),null());
HXLINE( 143)						Bool _hx_tmp10 = hx::IsNotNull( color );
HXDLIN( 143)						if (_hx_tmp10) {
HXLINE( 145)							this->fillRect( ::lime::math::Rectangle_obj::__new((int)0,(int)0,width,height),color,null());
            						}
            					}
            					break;
            					case (int)2: {
            					}
            					break;
            					default:{
            					}
            				}
            			}
            		}
            		else {
HXLINE( 164)			this->_hx___fromImageBuffer(buffer);
            		}
            	}

Dynamic Image_obj::__CreateEmpty() { return new Image_obj; }

hx::ObjectPtr< Image_obj > Image_obj::__new( ::lime::graphics::ImageBuffer buffer,hx::Null< Int >  __o_offsetX,hx::Null< Int >  __o_offsetY,hx::Null< Int >  __o_width,hx::Null< Int >  __o_height, ::Dynamic color,::hx::EnumBase type)
{
	hx::ObjectPtr< Image_obj > _hx_result = new Image_obj();
	_hx_result->__construct(buffer,__o_offsetX,__o_offsetY,__o_width,__o_height,color,type);
	return _hx_result;
}

Dynamic Image_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Image_obj > _hx_result = new Image_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6]);
	return _hx_result;
}

 ::lime::graphics::Image Image_obj::clone(){
            	HX_STACK_FRAME("lime.graphics.Image","clone",0xb88517c0,"lime.graphics.Image.clone","lime/graphics/Image.hx",173,0xc7b862ad)
            	HX_STACK_THIS(this)
HXLINE( 173)		Bool _hx_tmp = hx::IsNotNull( this->buffer );
HXDLIN( 173)		if (_hx_tmp) {
HXLINE( 187)			 ::lime::graphics::ImageBuffer _hx_tmp1 = this->buffer->clone();
HXDLIN( 187)			HX_VARI(  ::lime::graphics::Image,image) =  ::lime::graphics::Image_obj::__new(_hx_tmp1,this->offsetX,this->offsetY,this->width,this->height,null(),this->type);
HXLINE( 188)			image->version = this->version;
HXLINE( 189)			return image;
            		}
            		else {
HXLINE( 193)			return  ::lime::graphics::Image_obj::__new(null(),this->offsetX,this->offsetY,this->width,this->height,null(),this->type);
            		}
HXLINE( 173)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Image_obj,clone,return )

void Image_obj::colorTransform( ::lime::math::Rectangle rect, ::lime::utils::ArrayBufferView colorMatrix){
            	HX_STACK_FRAME("lime.graphics.Image","colorTransform",0xaf89aec6,"lime.graphics.Image.colorTransform","lime/graphics/Image.hx",200,0xc7b862ad)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(rect,"rect")
            	HX_STACK_ARG(colorMatrix,"colorMatrix")
HXLINE( 202)		rect = this->_hx___clipRect(rect);
HXLINE( 203)		Bool _hx_tmp;
HXDLIN( 203)		Bool _hx_tmp1 = hx::IsNotNull( this->buffer );
HXDLIN( 203)		if (_hx_tmp1) {
HXLINE( 203)			_hx_tmp = hx::IsNull( rect );
            		}
            		else {
HXLINE( 203)			_hx_tmp = true;
            		}
HXDLIN( 203)		if (_hx_tmp) {
HXLINE( 203)			return;
            		}
HXLINE( 205)		{
HXLINE( 205)			Int _hx_tmp2 = ( ( ::hx::EnumBase)(this->type) )->_hx_getIndex();
HXDLIN( 205)			switch((int)(_hx_tmp2)){
            				case (int)0: {
HXLINE( 209)					::lime::graphics::utils::ImageCanvasUtil_obj::colorTransform(hx::ObjectPtr<OBJ_>(this),rect,colorMatrix);
            				}
            				break;
            				case (int)1: {
HXLINE( 217)					::lime::graphics::utils::ImageDataUtil_obj::colorTransform(hx::ObjectPtr<OBJ_>(this),rect,colorMatrix);
            				}
            				break;
            				case (int)2: {
HXLINE( 221)					rect->offset(this->offsetX,this->offsetY);
HXLINE( 222)					 ::Dynamic _hx_tmp3 =  ::Dynamic(this->buffer->_hx___srcBitmapData->__Field(HX_("colorTransform",89,d7,3f,ad),hx::paccDynamic));
HXDLIN( 222)					 ::Dynamic _hx_tmp4 = rect->_hx___toFlashRectangle();
HXDLIN( 222)					_hx_tmp3(_hx_tmp4,::lime::math::_ColorMatrix::ColorMatrix_Impl__obj::_hx___toFlashColorTransform(colorMatrix));
            				}
            				break;
            				default:{
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Image_obj,colorTransform,(void))

void Image_obj::copyChannel( ::lime::graphics::Image sourceImage, ::lime::math::Rectangle sourceRect, ::lime::math::Vector2 destPoint,::hx::EnumBase sourceChannel,::hx::EnumBase destChannel){
            	HX_STACK_FRAME("lime.graphics.Image","copyChannel",0xc3306e31,"lime.graphics.Image.copyChannel","lime/graphics/Image.hx",231,0xc7b862ad)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(sourceImage,"sourceImage")
            	HX_STACK_ARG(sourceRect,"sourceRect")
            	HX_STACK_ARG(destPoint,"destPoint")
            	HX_STACK_ARG(sourceChannel,"sourceChannel")
            	HX_STACK_ARG(destChannel,"destChannel")
HXLINE( 233)		sourceRect = this->_hx___clipRect(sourceRect);
HXLINE( 234)		Bool _hx_tmp;
HXDLIN( 234)		Bool _hx_tmp1 = hx::IsNotNull( this->buffer );
HXDLIN( 234)		if (_hx_tmp1) {
HXLINE( 234)			_hx_tmp = hx::IsNull( sourceRect );
            		}
            		else {
HXLINE( 234)			_hx_tmp = true;
            		}
HXDLIN( 234)		if (_hx_tmp) {
HXLINE( 234)			return;
            		}
HXLINE( 236)		Bool _hx_tmp2;
HXDLIN( 236)		if (hx::IsEq( destChannel,::lime::graphics::ImageChannel_obj::ALPHA_dyn() )) {
HXLINE( 236)			_hx_tmp2 = !(this->get_transparent());
            		}
            		else {
HXLINE( 236)			_hx_tmp2 = false;
            		}
HXDLIN( 236)		if (_hx_tmp2) {
HXLINE( 236)			return;
            		}
HXLINE( 237)		Bool _hx_tmp3;
HXDLIN( 237)		if (!((sourceRect->width <= (int)0))) {
HXLINE( 237)			_hx_tmp3 = (sourceRect->height <= (int)0);
            		}
            		else {
HXLINE( 237)			_hx_tmp3 = true;
            		}
HXDLIN( 237)		if (_hx_tmp3) {
HXLINE( 237)			return;
            		}
HXLINE( 238)		Bool _hx_tmp4 = ((sourceRect->x + sourceRect->width) > sourceImage->width);
HXDLIN( 238)		if (_hx_tmp4) {
HXLINE( 238)			sourceRect->width = (sourceImage->width - sourceRect->x);
            		}
HXLINE( 239)		Bool _hx_tmp5 = ((sourceRect->y + sourceRect->height) > sourceImage->height);
HXDLIN( 239)		if (_hx_tmp5) {
HXLINE( 239)			sourceRect->height = (sourceImage->height - sourceRect->y);
            		}
HXLINE( 241)		{
HXLINE( 241)			Int _hx_tmp6 = ( ( ::hx::EnumBase)(this->type) )->_hx_getIndex();
HXDLIN( 241)			switch((int)(_hx_tmp6)){
            				case (int)0: {
HXLINE( 245)					::lime::graphics::utils::ImageCanvasUtil_obj::copyChannel(hx::ObjectPtr<OBJ_>(this),sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
            				}
            				break;
            				case (int)1: {
HXLINE( 253)					::lime::graphics::utils::ImageDataUtil_obj::copyChannel(hx::ObjectPtr<OBJ_>(this),sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
            				}
            				break;
            				case (int)2: {
HXLINE( 257)					HX_VAR( Int,srcChannel);
HXDLIN( 257)					Int _hx_tmp7 = ( ( ::hx::EnumBase)(sourceChannel) )->_hx_getIndex();
HXDLIN( 257)					switch((int)(_hx_tmp7)){
            						case (int)0: {
HXLINE( 257)							srcChannel = (int)1;
            						}
            						break;
            						case (int)1: {
HXLINE( 257)							srcChannel = (int)2;
            						}
            						break;
            						case (int)2: {
HXLINE( 257)							srcChannel = (int)4;
            						}
            						break;
            						case (int)3: {
HXLINE( 257)							srcChannel = (int)8;
            						}
            						break;
            					}
HXLINE( 264)					HX_VAR( Int,dstChannel);
HXDLIN( 264)					Int _hx_tmp8 = ( ( ::hx::EnumBase)(destChannel) )->_hx_getIndex();
HXDLIN( 264)					switch((int)(_hx_tmp8)){
            						case (int)0: {
HXLINE( 264)							dstChannel = (int)1;
            						}
            						break;
            						case (int)1: {
HXLINE( 264)							dstChannel = (int)2;
            						}
            						break;
            						case (int)2: {
HXLINE( 264)							dstChannel = (int)4;
            						}
            						break;
            						case (int)3: {
HXLINE( 264)							dstChannel = (int)8;
            						}
            						break;
            					}
HXLINE( 271)					sourceRect->offset(sourceImage->offsetX,sourceImage->offsetY);
HXLINE( 272)					destPoint->offset(this->offsetX,this->offsetY);
HXLINE( 274)					 ::Dynamic _hx_tmp9 =  ::Dynamic(this->buffer->_hx___srcBitmapData->__Field(HX_("copyChannel",8e,7d,e6,22),hx::paccDynamic));
HXDLIN( 274)					 ::Dynamic _hx_tmp10 = sourceImage->buffer->get_src();
HXDLIN( 274)					 ::Dynamic _hx_tmp11 = sourceRect->_hx___toFlashRectangle();
HXDLIN( 274)					 ::Dynamic _hx_tmp12 = destPoint->_hx___toFlashPoint();
HXDLIN( 274)					_hx_tmp9(_hx_tmp10,_hx_tmp11,_hx_tmp12,srcChannel,dstChannel);
            				}
            				break;
            				default:{
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC5(Image_obj,copyChannel,(void))

void Image_obj::copyPixels( ::lime::graphics::Image sourceImage, ::lime::math::Rectangle sourceRect, ::lime::math::Vector2 destPoint, ::lime::graphics::Image alphaImage, ::lime::math::Vector2 alphaPoint,hx::Null< Bool >  __o_mergeAlpha){
Bool mergeAlpha = __o_mergeAlpha.Default(false);
            	HX_STACK_FRAME("lime.graphics.Image","copyPixels",0x19d2897f,"lime.graphics.Image.copyPixels","lime/graphics/Image.hx",283,0xc7b862ad)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(sourceImage,"sourceImage")
            	HX_STACK_ARG(sourceRect,"sourceRect")
            	HX_STACK_ARG(destPoint,"destPoint")
            	HX_STACK_ARG(alphaImage,"alphaImage")
            	HX_STACK_ARG(alphaPoint,"alphaPoint")
            	HX_STACK_ARG(mergeAlpha,"mergeAlpha")
HXLINE( 286)		Bool _hx_tmp;
HXDLIN( 286)		Bool _hx_tmp1 = hx::IsNotNull( this->buffer );
HXDLIN( 286)		if (_hx_tmp1) {
HXLINE( 286)			_hx_tmp = hx::IsNull( sourceImage );
            		}
            		else {
HXLINE( 286)			_hx_tmp = true;
            		}
HXDLIN( 286)		if (_hx_tmp) {
HXLINE( 286)			return;
            		}
HXLINE( 287)		Bool _hx_tmp2;
HXDLIN( 287)		if (!((sourceRect->width <= (int)0))) {
HXLINE( 287)			_hx_tmp2 = (sourceRect->height <= (int)0);
            		}
            		else {
HXLINE( 287)			_hx_tmp2 = true;
            		}
HXDLIN( 287)		if (_hx_tmp2) {
HXLINE( 287)			return;
            		}
HXLINE( 288)		Bool _hx_tmp3;
HXDLIN( 288)		if ((this->width > (int)0)) {
HXLINE( 288)			_hx_tmp3 = (this->height <= (int)0);
            		}
            		else {
HXLINE( 288)			_hx_tmp3 = true;
            		}
HXDLIN( 288)		if (_hx_tmp3) {
HXLINE( 288)			return;
            		}
HXLINE( 291)		Bool _hx_tmp4 = ((sourceRect->x + sourceRect->width) > sourceImage->width);
HXDLIN( 291)		if (_hx_tmp4) {
HXLINE( 291)			sourceRect->width = (sourceImage->width - sourceRect->x);
            		}
HXLINE( 292)		Bool _hx_tmp5 = ((sourceRect->y + sourceRect->height) > sourceImage->height);
HXDLIN( 292)		if (_hx_tmp5) {
HXLINE( 292)			sourceRect->height = (sourceImage->height - sourceRect->y);
            		}
HXLINE( 295)		Bool _hx_tmp6 = (sourceRect->x < (int)0);
HXDLIN( 295)		if (_hx_tmp6) {
HXLINE( 296)			hx::AddEq(sourceRect->width,sourceRect->x);
HXLINE( 297)			sourceRect->x = (int)0;
            		}
HXLINE( 299)		Bool _hx_tmp7 = (sourceRect->y < (int)0);
HXDLIN( 299)		if (_hx_tmp7) {
HXLINE( 300)			hx::AddEq(sourceRect->height,sourceRect->y);
HXLINE( 301)			sourceRect->y = (int)0;
            		}
HXLINE( 305)		Bool _hx_tmp8 = ((destPoint->x + sourceRect->width) > this->width);
HXDLIN( 305)		if (_hx_tmp8) {
HXLINE( 305)			sourceRect->width = (this->width - destPoint->x);
            		}
HXLINE( 306)		Bool _hx_tmp9 = ((destPoint->y + sourceRect->height) > this->height);
HXDLIN( 306)		if (_hx_tmp9) {
HXLINE( 306)			sourceRect->height = (this->height - destPoint->y);
            		}
HXLINE( 309)		Bool _hx_tmp10 = (destPoint->x < (int)0);
HXDLIN( 309)		if (_hx_tmp10) {
HXLINE( 310)			hx::AddEq(sourceRect->width,destPoint->x);
HXLINE( 311)			hx::SubEq(sourceRect->x,destPoint->x);
HXLINE( 312)			destPoint->x = (int)0;
            		}
HXLINE( 314)		Bool _hx_tmp11 = (destPoint->y < (int)0);
HXDLIN( 314)		if (_hx_tmp11) {
HXLINE( 315)			hx::AddEq(sourceRect->height,destPoint->y);
HXLINE( 316)			hx::SubEq(sourceRect->y,destPoint->y);
HXLINE( 317)			destPoint->y = (int)0;
            		}
HXLINE( 320)		{
HXLINE( 320)			Int _hx_tmp12 = ( ( ::hx::EnumBase)(this->type) )->_hx_getIndex();
HXDLIN( 320)			switch((int)(_hx_tmp12)){
            				case (int)0: {
HXLINE( 324)					::lime::graphics::utils::ImageCanvasUtil_obj::convertToCanvas(hx::ObjectPtr<OBJ_>(this),null());
HXLINE( 325)					::lime::graphics::utils::ImageCanvasUtil_obj::copyPixels(hx::ObjectPtr<OBJ_>(this),sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
            				}
            				break;
            				case (int)1: {
HXLINE( 334)					::lime::graphics::utils::ImageDataUtil_obj::copyPixels(hx::ObjectPtr<OBJ_>(this),sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
            				}
            				break;
            				case (int)2: {
HXLINE( 338)					sourceRect->offset(sourceImage->offsetX,sourceImage->offsetY);
HXLINE( 339)					destPoint->offset(this->offsetX,this->offsetY);
HXLINE( 341)					Bool _hx_tmp13;
HXDLIN( 341)					Bool _hx_tmp14 = hx::IsNotNull( alphaImage );
HXDLIN( 341)					if (_hx_tmp14) {
HXLINE( 341)						_hx_tmp13 = hx::IsNotNull( alphaPoint );
            					}
            					else {
HXLINE( 341)						_hx_tmp13 = false;
            					}
HXDLIN( 341)					if (_hx_tmp13) {
HXLINE( 343)						alphaPoint->offset(alphaImage->offsetX,alphaImage->offsetY);
            					}
HXLINE( 347)					 ::Dynamic _hx_tmp15 =  ::Dynamic(this->buffer->_hx___srcBitmapData->__Field(HX_("copyPixels",c2,54,6e,42),hx::paccDynamic));
HXDLIN( 347)					 ::Dynamic _hx_tmp16 = sourceImage->buffer->_hx___srcBitmapData;
HXDLIN( 347)					 ::Dynamic _hx_tmp17 = sourceRect->_hx___toFlashRectangle();
HXDLIN( 347)					 ::Dynamic _hx_tmp18 = destPoint->_hx___toFlashPoint();
HXDLIN( 347)					 ::Dynamic _hx_tmp19;
HXDLIN( 347)					Bool _hx_tmp20 = hx::IsNotNull( alphaImage );
HXDLIN( 347)					if (_hx_tmp20) {
HXLINE( 347)						_hx_tmp19 = alphaImage->buffer->get_src();
            					}
            					else {
HXLINE( 347)						_hx_tmp19 = null();
            					}
HXDLIN( 347)					 ::Dynamic _hx_tmp21;
HXDLIN( 347)					Bool _hx_tmp22 = hx::IsNotNull( alphaPoint );
HXDLIN( 347)					if (_hx_tmp22) {
HXLINE( 347)						_hx_tmp21 = alphaPoint->_hx___toFlashPoint();
            					}
            					else {
HXLINE( 347)						_hx_tmp21 = null();
            					}
HXDLIN( 347)					_hx_tmp15(_hx_tmp16,_hx_tmp17,_hx_tmp18,_hx_tmp19,_hx_tmp21,mergeAlpha);
            				}
            				break;
            				default:{
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC6(Image_obj,copyPixels,(void))

 ::haxe::io::Bytes Image_obj::encode(::String __o_format,hx::Null< Int >  __o_quality){
::String format = __o_format.Default(HX_HCSTRING("png","\xa9","\x5c","\x55","\x00"));
Int quality = __o_quality.Default(90);
            	HX_STACK_FRAME("lime.graphics.Image","encode",0xa785c453,"lime.graphics.Image.encode","lime/graphics/Image.hx",356,0xc7b862ad)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(format,"format")
            	HX_STACK_ARG(quality,"quality")
HXLINE( 358)		::String _hx_switch_0 = format;
            		if (  (_hx_switch_0==HX_("bmp",45,bc,4a,00)) ){
HXLINE( 370)			return ::lime::graphics::format::BMP_obj::encode(hx::ObjectPtr<OBJ_>(this),null());
HXDLIN( 370)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("jpeg",a8,f2,65,46)) ||  (_hx_switch_0==HX_("jpg",e1,d0,50,00)) ){
HXLINE( 366)			return ::lime::graphics::format::JPEG_obj::encode(hx::ObjectPtr<OBJ_>(this),quality);
HXDLIN( 366)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("png",a9,5c,55,00)) ){
HXLINE( 362)			return ::lime::graphics::format::PNG_obj::encode(hx::ObjectPtr<OBJ_>(this));
HXDLIN( 362)			goto _hx_goto_0;
            		}
            		/* default */{
            		}
            		_hx_goto_0:;
HXLINE( 376)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(Image_obj,encode,return )

void Image_obj::fillRect( ::lime::math::Rectangle rect,Int color, ::Dynamic format){
            	HX_STACK_FRAME("lime.graphics.Image","fillRect",0x2421e0c4,"lime.graphics.Image.fillRect","lime/graphics/Image.hx",381,0xc7b862ad)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(rect,"rect")
            	HX_STACK_ARG(color,"color")
            	HX_STACK_ARG(format,"format")
HXLINE( 383)		rect = this->_hx___clipRect(rect);
HXLINE( 384)		Bool _hx_tmp;
HXDLIN( 384)		Bool _hx_tmp1 = hx::IsNotNull( this->buffer );
HXDLIN( 384)		if (_hx_tmp1) {
HXLINE( 384)			_hx_tmp = hx::IsNull( rect );
            		}
            		else {
HXLINE( 384)			_hx_tmp = true;
            		}
HXDLIN( 384)		if (_hx_tmp) {
HXLINE( 384)			return;
            		}
HXLINE( 386)		{
HXLINE( 386)			Int _hx_tmp2 = ( ( ::hx::EnumBase)(this->type) )->_hx_getIndex();
HXDLIN( 386)			switch((int)(_hx_tmp2)){
            				case (int)0: {
HXLINE( 390)					::lime::graphics::utils::ImageCanvasUtil_obj::fillRect(hx::ObjectPtr<OBJ_>(this),rect,color,format);
            				}
            				break;
            				case (int)1: {
HXLINE( 398)					if ((this->buffer->data->length == (int)0)) {
HXLINE( 398)						return;
            					}
HXLINE( 400)					::lime::graphics::utils::ImageDataUtil_obj::fillRect(hx::ObjectPtr<OBJ_>(this),rect,color,format);
            				}
            				break;
            				case (int)2: {
HXLINE( 404)					rect->offset(this->offsetX,this->offsetY);
HXLINE( 406)					HX_VAR( Int,argb);
HXDLIN( 406)					Bool _hx_tmp3 = hx::IsNull( format );
HXDLIN( 406)					if (_hx_tmp3) {
HXLINE( 410)						HX_VARI( Int,rgba) = color;
HXDLIN( 410)						HX_VARI_NAME( Int,this1,"this") = (int)0;
HXDLIN( 410)						HX_VARI_NAME( Int,argb1,"argb") = this1;
HXDLIN( 410)						argb1 = ((int)((int)((int)((int)((int)((int)rgba & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(rgba,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(rgba,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(rgba,(int)8) & (int)(int)255) & (int)(int)255));
HXLINE( 406)						argb = argb1;
            					}
            					else {
HXLINE( 406)						 ::Dynamic _hx_switch_0 = format;
            						if (  (_hx_switch_0==(int)1) ){
HXLINE( 406)							argb = color;
HXDLIN( 406)							goto _hx_goto_1;
            						}
            						if (  (_hx_switch_0==(int)2) ){
HXLINE( 409)							HX_VARI( Int,bgra) = color;
HXDLIN( 409)							HX_VARI_NAME( Int,this2,"this") = (int)0;
HXDLIN( 409)							HX_VARI_NAME( Int,argb2,"argb") = this2;
HXDLIN( 409)							argb2 = ((int)((int)((int)((int)((int)((int)bgra & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(bgra,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(bgra,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(bgra,(int)24) & (int)(int)255) & (int)(int)255));
HXLINE( 406)							argb = argb2;
HXLINE( 409)							goto _hx_goto_1;
            						}
            						/* default */{
HXLINE( 410)							HX_VARI_NAME( Int,rgba1,"rgba") = color;
HXDLIN( 410)							HX_VARI_NAME( Int,this3,"this") = (int)0;
HXDLIN( 410)							HX_VARI_NAME( Int,argb3,"argb") = this3;
HXDLIN( 410)							argb3 = ((int)((int)((int)((int)((int)((int)rgba1 & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(rgba1,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(rgba1,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(rgba1,(int)8) & (int)(int)255) & (int)(int)255));
HXLINE( 406)							argb = argb3;
            						}
            						_hx_goto_1:;
            					}
HXLINE( 414)					 ::Dynamic _hx_tmp4 =  ::Dynamic(this->buffer->_hx___srcBitmapData->__Field(HX_("fillRect",47,45,b9,6c),hx::paccDynamic));
HXDLIN( 414)					 ::Dynamic _hx_tmp5 = rect->_hx___toFlashRectangle();
HXDLIN( 414)					_hx_tmp4(_hx_tmp5,argb);
            				}
            				break;
            				default:{
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Image_obj,fillRect,(void))

void Image_obj::floodFill(Int x,Int y,Int color, ::Dynamic format){
            	HX_STACK_FRAME("lime.graphics.Image","floodFill",0x1da9f544,"lime.graphics.Image.floodFill","lime/graphics/Image.hx",423,0xc7b862ad)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(color,"color")
            	HX_STACK_ARG(format,"format")
HXLINE( 425)		Bool _hx_tmp = hx::IsNull( this->buffer );
HXDLIN( 425)		if (_hx_tmp) {
HXLINE( 425)			return;
            		}
HXLINE( 427)		{
HXLINE( 427)			Int _hx_tmp1 = ( ( ::hx::EnumBase)(this->type) )->_hx_getIndex();
HXDLIN( 427)			switch((int)(_hx_tmp1)){
            				case (int)0: {
HXLINE( 431)					::lime::graphics::utils::ImageCanvasUtil_obj::floodFill(hx::ObjectPtr<OBJ_>(this),x,y,color,format);
            				}
            				break;
            				case (int)1: {
HXLINE( 439)					::lime::graphics::utils::ImageDataUtil_obj::floodFill(hx::ObjectPtr<OBJ_>(this),x,y,color,format);
            				}
            				break;
            				case (int)2: {
HXLINE( 443)					HX_VAR( Int,argb);
HXDLIN( 443)					Bool _hx_tmp2 = hx::IsNull( format );
HXDLIN( 443)					if (_hx_tmp2) {
HXLINE( 447)						HX_VARI( Int,rgba) = color;
HXDLIN( 447)						HX_VARI_NAME( Int,this1,"this") = (int)0;
HXDLIN( 447)						HX_VARI_NAME( Int,argb1,"argb") = this1;
HXDLIN( 447)						argb1 = ((int)((int)((int)((int)((int)((int)rgba & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(rgba,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(rgba,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(rgba,(int)8) & (int)(int)255) & (int)(int)255));
HXLINE( 443)						argb = argb1;
            					}
            					else {
HXLINE( 443)						 ::Dynamic _hx_switch_0 = format;
            						if (  (_hx_switch_0==(int)1) ){
HXLINE( 443)							argb = color;
HXDLIN( 443)							goto _hx_goto_2;
            						}
            						if (  (_hx_switch_0==(int)2) ){
HXLINE( 446)							HX_VARI( Int,bgra) = color;
HXDLIN( 446)							HX_VARI_NAME( Int,this2,"this") = (int)0;
HXDLIN( 446)							HX_VARI_NAME( Int,argb2,"argb") = this2;
HXDLIN( 446)							argb2 = ((int)((int)((int)((int)((int)((int)bgra & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(bgra,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(bgra,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(bgra,(int)24) & (int)(int)255) & (int)(int)255));
HXLINE( 443)							argb = argb2;
HXLINE( 446)							goto _hx_goto_2;
            						}
            						/* default */{
HXLINE( 447)							HX_VARI_NAME( Int,rgba1,"rgba") = color;
HXDLIN( 447)							HX_VARI_NAME( Int,this3,"this") = (int)0;
HXDLIN( 447)							HX_VARI_NAME( Int,argb3,"argb") = this3;
HXDLIN( 447)							argb3 = ((int)((int)((int)((int)((int)((int)rgba1 & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(rgba1,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(rgba1,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(rgba1,(int)8) & (int)(int)255) & (int)(int)255));
HXLINE( 443)							argb = argb3;
            						}
            						_hx_goto_2:;
            					}
HXLINE( 451)					 ::Dynamic _hx_tmp3 =  ::Dynamic(this->buffer->_hx___srcBitmapData->__Field(HX_("floodFill",61,83,8a,59),hx::paccDynamic));
HXDLIN( 451)					Int _hx_tmp4 = (x + this->offsetX);
HXDLIN( 451)					Int _hx_tmp5 = (y + this->offsetY);
HXDLIN( 451)					_hx_tmp3(_hx_tmp4,_hx_tmp5,argb);
            				}
            				break;
            				default:{
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(Image_obj,floodFill,(void))

 ::lime::math::Rectangle Image_obj::getColorBoundsRect(Int mask,Int color,hx::Null< Bool >  __o_findColor, ::Dynamic format){
Bool findColor = __o_findColor.Default(true);
            	HX_STACK_FRAME("lime.graphics.Image","getColorBoundsRect",0x21db6743,"lime.graphics.Image.getColorBoundsRect","lime/graphics/Image.hx",540,0xc7b862ad)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(mask,"mask")
            	HX_STACK_ARG(color,"color")
            	HX_STACK_ARG(findColor,"findColor")
            	HX_STACK_ARG(format,"format")
HXLINE( 542)		Bool _hx_tmp = hx::IsNull( this->buffer );
HXDLIN( 542)		if (_hx_tmp) {
HXLINE( 542)			return null();
            		}
HXLINE( 544)		Int _hx_tmp1 = ( ( ::hx::EnumBase)(this->type) )->_hx_getIndex();
HXDLIN( 544)		switch((int)(_hx_tmp1)){
            			case (int)0: {
HXLINE( 552)				return ::lime::graphics::utils::ImageDataUtil_obj::getColorBoundsRect(hx::ObjectPtr<OBJ_>(this),mask,color,findColor,format);
            			}
            			break;
            			case (int)1: {
HXLINE( 556)				return ::lime::graphics::utils::ImageDataUtil_obj::getColorBoundsRect(hx::ObjectPtr<OBJ_>(this),mask,color,findColor,format);
            			}
            			break;
            			case (int)2: {
HXLINE( 560)				HX_VARI(  ::Dynamic,rect) =  ::Dynamic(this->buffer->_hx___srcBitmapData->__Field(HX_("getColorBoundsRect",86,ad,e8,80),hx::paccDynamic))(mask,color,findColor);
HXLINE( 561)				return  ::lime::math::Rectangle_obj::__new( ::Dynamic(rect->__Field(HX_("x",78,00,00,00),hx::paccDynamic)), ::Dynamic(rect->__Field(HX_("y",79,00,00,00),hx::paccDynamic)), ::Dynamic(rect->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic)), ::Dynamic(rect->__Field(HX_("height",e7,07,4c,02),hx::paccDynamic)));
            			}
            			break;
            			default:{
HXLINE( 565)				return null();
            			}
            		}
HXLINE( 544)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC4(Image_obj,getColorBoundsRect,return )

Int Image_obj::getPixel(Int x,Int y, ::Dynamic format){
            	HX_STACK_FRAME("lime.graphics.Image","getPixel",0xd9e3718d,"lime.graphics.Image.getPixel","lime/graphics/Image.hx",570,0xc7b862ad)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(format,"format")
HXLINE( 572)		Bool _hx_tmp;
HXDLIN( 572)		Bool _hx_tmp1;
HXDLIN( 572)		Bool _hx_tmp2;
HXDLIN( 572)		Bool _hx_tmp3;
HXDLIN( 572)		Bool _hx_tmp4 = hx::IsNotNull( this->buffer );
HXDLIN( 572)		if (_hx_tmp4) {
HXLINE( 572)			_hx_tmp3 = (x < (int)0);
            		}
            		else {
HXLINE( 572)			_hx_tmp3 = true;
            		}
HXDLIN( 572)		if (!(_hx_tmp3)) {
HXLINE( 572)			_hx_tmp2 = (y < (int)0);
            		}
            		else {
HXLINE( 572)			_hx_tmp2 = true;
            		}
HXDLIN( 572)		if (!(_hx_tmp2)) {
HXLINE( 572)			_hx_tmp1 = (x >= this->width);
            		}
            		else {
HXLINE( 572)			_hx_tmp1 = true;
            		}
HXDLIN( 572)		if (!(_hx_tmp1)) {
HXLINE( 572)			_hx_tmp = (y >= this->height);
            		}
            		else {
HXLINE( 572)			_hx_tmp = true;
            		}
HXDLIN( 572)		if (_hx_tmp) {
HXLINE( 572)			return (int)0;
            		}
HXLINE( 574)		Int _hx_tmp5 = ( ( ::hx::EnumBase)(this->type) )->_hx_getIndex();
HXDLIN( 574)		switch((int)(_hx_tmp5)){
            			case (int)0: {
HXLINE( 578)				return ::lime::graphics::utils::ImageCanvasUtil_obj::getPixel(hx::ObjectPtr<OBJ_>(this),x,y,format);
            			}
            			break;
            			case (int)1: {
HXLINE( 586)				return ::lime::graphics::utils::ImageDataUtil_obj::getPixel(hx::ObjectPtr<OBJ_>(this),x,y,format);
            			}
            			break;
            			case (int)2: {
HXLINE( 590)				 ::Dynamic _hx_tmp6 =  ::Dynamic(this->buffer->_hx___srcBitmapData->__Field(HX_("getPixel",10,d6,7a,22),hx::paccDynamic));
HXDLIN( 590)				Int _hx_tmp7 = (x + this->offsetX);
HXDLIN( 590)				Int _hx_tmp8 = (y + this->offsetY);
HXDLIN( 590)				HX_VARI( Int,color) = ( (Int)(_hx_tmp6(_hx_tmp7,_hx_tmp8)) );
HXLINE( 592)				Bool _hx_tmp9 = hx::IsNull( format );
HXDLIN( 592)				if (_hx_tmp9) {
HXLINE( 596)					HX_VARI_NAME( Int,this1,"this") = (int)0;
HXDLIN( 596)					HX_VARI( Int,rgba) = this1;
HXDLIN( 596)					rgba = ((int)((int)((int)((int)((int)((int)hx::UShr(color,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(color,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)color & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(color,(int)24) & (int)(int)255) & (int)(int)255));
HXDLIN( 596)					return rgba;
            				}
            				else {
HXLINE( 592)					 ::Dynamic _hx_switch_0 = format;
            					if (  (_hx_switch_0==(int)1) ){
HXLINE( 594)						return color;
HXDLIN( 594)						goto _hx_goto_3;
            					}
            					if (  (_hx_switch_0==(int)2) ){
HXLINE( 595)						HX_VARI_NAME( Int,this2,"this") = (int)0;
HXDLIN( 595)						HX_VARI( Int,bgra) = this2;
HXDLIN( 595)						bgra = ((int)((int)((int)((int)((int)((int)color & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(color,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(color,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(color,(int)24) & (int)(int)255) & (int)(int)255));
HXDLIN( 595)						return bgra;
HXDLIN( 595)						goto _hx_goto_3;
            					}
            					/* default */{
HXLINE( 596)						HX_VARI_NAME( Int,this3,"this") = (int)0;
HXDLIN( 596)						HX_VARI_NAME( Int,rgba1,"rgba") = this3;
HXDLIN( 596)						rgba1 = ((int)((int)((int)((int)((int)((int)hx::UShr(color,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(color,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)color & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(color,(int)24) & (int)(int)255) & (int)(int)255));
HXDLIN( 596)						return rgba1;
            					}
            					_hx_goto_3:;
            				}
            			}
            			break;
            			default:{
HXLINE( 602)				return (int)0;
            			}
            		}
HXLINE( 574)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Image_obj,getPixel,return )

Int Image_obj::getPixel32(Int x,Int y, ::Dynamic format){
            	HX_STACK_FRAME("lime.graphics.Image","getPixel32",0xaeccdb6c,"lime.graphics.Image.getPixel32","lime/graphics/Image.hx",609,0xc7b862ad)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(format,"format")
HXLINE( 611)		Bool _hx_tmp;
HXDLIN( 611)		Bool _hx_tmp1;
HXDLIN( 611)		Bool _hx_tmp2;
HXDLIN( 611)		Bool _hx_tmp3;
HXDLIN( 611)		Bool _hx_tmp4 = hx::IsNotNull( this->buffer );
HXDLIN( 611)		if (_hx_tmp4) {
HXLINE( 611)			_hx_tmp3 = (x < (int)0);
            		}
            		else {
HXLINE( 611)			_hx_tmp3 = true;
            		}
HXDLIN( 611)		if (!(_hx_tmp3)) {
HXLINE( 611)			_hx_tmp2 = (y < (int)0);
            		}
            		else {
HXLINE( 611)			_hx_tmp2 = true;
            		}
HXDLIN( 611)		if (!(_hx_tmp2)) {
HXLINE( 611)			_hx_tmp1 = (x >= this->width);
            		}
            		else {
HXLINE( 611)			_hx_tmp1 = true;
            		}
HXDLIN( 611)		if (!(_hx_tmp1)) {
HXLINE( 611)			_hx_tmp = (y >= this->height);
            		}
            		else {
HXLINE( 611)			_hx_tmp = true;
            		}
HXDLIN( 611)		if (_hx_tmp) {
HXLINE( 611)			return (int)0;
            		}
HXLINE( 613)		Int _hx_tmp5 = ( ( ::hx::EnumBase)(this->type) )->_hx_getIndex();
HXDLIN( 613)		switch((int)(_hx_tmp5)){
            			case (int)0: {
HXLINE( 617)				return ::lime::graphics::utils::ImageCanvasUtil_obj::getPixel32(hx::ObjectPtr<OBJ_>(this),x,y,format);
            			}
            			break;
            			case (int)1: {
HXLINE( 625)				return ::lime::graphics::utils::ImageDataUtil_obj::getPixel32(hx::ObjectPtr<OBJ_>(this),x,y,format);
            			}
            			break;
            			case (int)2: {
HXLINE( 629)				 ::Dynamic _hx_tmp6 =  ::Dynamic(this->buffer->_hx___srcBitmapData->__Field(HX_("getPixel32",af,a6,68,d7),hx::paccDynamic));
HXDLIN( 629)				Int _hx_tmp7 = (x + this->offsetX);
HXDLIN( 629)				Int _hx_tmp8 = (y + this->offsetY);
HXDLIN( 629)				HX_VARI( Int,color) = ( (Int)(_hx_tmp6(_hx_tmp7,_hx_tmp8)) );
HXLINE( 631)				Bool _hx_tmp9 = hx::IsNull( format );
HXDLIN( 631)				if (_hx_tmp9) {
HXLINE( 635)					HX_VARI_NAME( Int,this1,"this") = (int)0;
HXDLIN( 635)					HX_VARI( Int,rgba) = this1;
HXDLIN( 635)					rgba = ((int)((int)((int)((int)((int)((int)hx::UShr(color,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(color,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)color & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(color,(int)24) & (int)(int)255) & (int)(int)255));
HXDLIN( 635)					return rgba;
            				}
            				else {
HXLINE( 631)					 ::Dynamic _hx_switch_0 = format;
            					if (  (_hx_switch_0==(int)1) ){
HXLINE( 633)						return color;
HXDLIN( 633)						goto _hx_goto_4;
            					}
            					if (  (_hx_switch_0==(int)2) ){
HXLINE( 634)						HX_VARI_NAME( Int,this2,"this") = (int)0;
HXDLIN( 634)						HX_VARI( Int,bgra) = this2;
HXDLIN( 634)						bgra = ((int)((int)((int)((int)((int)((int)color & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(color,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(color,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(color,(int)24) & (int)(int)255) & (int)(int)255));
HXDLIN( 634)						return bgra;
HXDLIN( 634)						goto _hx_goto_4;
            					}
            					/* default */{
HXLINE( 635)						HX_VARI_NAME( Int,this3,"this") = (int)0;
HXDLIN( 635)						HX_VARI_NAME( Int,rgba1,"rgba") = this3;
HXDLIN( 635)						rgba1 = ((int)((int)((int)((int)((int)((int)hx::UShr(color,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(color,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)color & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(color,(int)24) & (int)(int)255) & (int)(int)255));
HXDLIN( 635)						return rgba1;
            					}
            					_hx_goto_4:;
            				}
            			}
            			break;
            			default:{
HXLINE( 641)				return (int)0;
            			}
            		}
HXLINE( 613)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Image_obj,getPixel32,return )

 ::haxe::io::Bytes Image_obj::getPixels( ::lime::math::Rectangle rect, ::Dynamic format){
            	HX_STACK_FRAME("lime.graphics.Image","getPixels",0xcd1fea46,"lime.graphics.Image.getPixels","lime/graphics/Image.hx",648,0xc7b862ad)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(rect,"rect")
            	HX_STACK_ARG(format,"format")
HXLINE( 650)		Bool _hx_tmp = hx::IsNull( this->buffer );
HXDLIN( 650)		if (_hx_tmp) {
HXLINE( 650)			return null();
            		}
HXLINE( 652)		Int _hx_tmp1 = ( ( ::hx::EnumBase)(this->type) )->_hx_getIndex();
HXDLIN( 652)		switch((int)(_hx_tmp1)){
            			case (int)0: {
HXLINE( 656)				return ::lime::graphics::utils::ImageCanvasUtil_obj::getPixels(hx::ObjectPtr<OBJ_>(this),rect,format);
            			}
            			break;
            			case (int)1: {
HXLINE( 664)				return ::lime::graphics::utils::ImageDataUtil_obj::getPixels(hx::ObjectPtr<OBJ_>(this),rect,format);
            			}
            			break;
            			case (int)2: {
HXLINE( 709)				return null();
            			}
            			break;
            			default:{
HXLINE( 714)				return null();
            			}
            		}
HXLINE( 652)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(Image_obj,getPixels,return )

void Image_obj::merge( ::lime::graphics::Image sourceImage, ::lime::math::Rectangle sourceRect, ::lime::math::Vector2 destPoint,Int redMultiplier,Int greenMultiplier,Int blueMultiplier,Int alphaMultiplier){
            	HX_STACK_FRAME("lime.graphics.Image","merge",0x75e8a71b,"lime.graphics.Image.merge","lime/graphics/Image.hx",721,0xc7b862ad)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(sourceImage,"sourceImage")
            	HX_STACK_ARG(sourceRect,"sourceRect")
            	HX_STACK_ARG(destPoint,"destPoint")
            	HX_STACK_ARG(redMultiplier,"redMultiplier")
            	HX_STACK_ARG(greenMultiplier,"greenMultiplier")
            	HX_STACK_ARG(blueMultiplier,"blueMultiplier")
            	HX_STACK_ARG(alphaMultiplier,"alphaMultiplier")
HXLINE( 723)		Bool _hx_tmp;
HXDLIN( 723)		Bool _hx_tmp1 = hx::IsNotNull( this->buffer );
HXDLIN( 723)		if (_hx_tmp1) {
HXLINE( 723)			_hx_tmp = hx::IsNull( sourceImage );
            		}
            		else {
HXLINE( 723)			_hx_tmp = true;
            		}
HXDLIN( 723)		if (_hx_tmp) {
HXLINE( 723)			return;
            		}
HXLINE( 725)		{
HXLINE( 725)			Int _hx_tmp2 = ( ( ::hx::EnumBase)(this->type) )->_hx_getIndex();
HXDLIN( 725)			switch((int)(_hx_tmp2)){
            				case (int)0: {
HXLINE( 729)					::lime::graphics::utils::ImageCanvasUtil_obj::convertToCanvas(hx::ObjectPtr<OBJ_>(this),null());
HXLINE( 730)					::lime::graphics::utils::ImageCanvasUtil_obj::merge(hx::ObjectPtr<OBJ_>(this),sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
            				}
            				break;
            				case (int)1: {
HXLINE( 739)					::lime::graphics::utils::ImageDataUtil_obj::merge(hx::ObjectPtr<OBJ_>(this),sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
            				}
            				break;
            				case (int)2: {
HXLINE( 743)					sourceRect->offset(this->offsetX,this->offsetY);
HXLINE( 744)					 ::Dynamic _hx_tmp3 =  ::Dynamic(this->buffer->_hx___srcBitmapData->__Field(HX_("merge",b8,a2,c6,05),hx::paccDynamic));
HXDLIN( 744)					 ::Dynamic _hx_tmp4 = sourceImage->buffer->_hx___srcBitmapData;
HXDLIN( 744)					 ::Dynamic _hx_tmp5 = sourceRect->_hx___toFlashRectangle();
HXDLIN( 744)					 ::Dynamic _hx_tmp6 = destPoint->_hx___toFlashPoint();
HXDLIN( 744)					_hx_tmp3(_hx_tmp4,_hx_tmp5,_hx_tmp6,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
            				}
            				break;
            				default:{
HXLINE( 748)					return;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC7(Image_obj,merge,(void))

void Image_obj::resize(Int newWidth,Int newHeight){
            	HX_STACK_FRAME("lime.graphics.Image","resize",0xb61d2c31,"lime.graphics.Image.resize","lime/graphics/Image.hx",755,0xc7b862ad)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(newWidth,"newWidth")
            	HX_STACK_ARG(newHeight,"newHeight")
HXLINE( 757)		{
HXLINE( 757)			Int _hx_tmp = ( ( ::hx::EnumBase)(this->type) )->_hx_getIndex();
HXDLIN( 757)			switch((int)(_hx_tmp)){
            				case (int)0: {
HXLINE( 761)					::lime::graphics::utils::ImageCanvasUtil_obj::resize(hx::ObjectPtr<OBJ_>(this),newWidth,newHeight);
            				}
            				break;
            				case (int)1: {
HXLINE( 765)					::lime::graphics::utils::ImageDataUtil_obj::resize(hx::ObjectPtr<OBJ_>(this),newWidth,newHeight);
            				}
            				break;
            				case (int)2: {
            				}
            				break;
            				default:{
            				}
            			}
            		}
HXLINE( 781)		this->buffer->width = newWidth;
HXLINE( 782)		this->buffer->height = newHeight;
HXLINE( 784)		this->offsetX = (int)0;
HXLINE( 785)		this->offsetY = (int)0;
HXLINE( 786)		this->width = newWidth;
HXLINE( 787)		this->height = newHeight;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Image_obj,resize,(void))

void Image_obj::scroll(Int x,Int y){
            	HX_STACK_FRAME("lime.graphics.Image","scroll",0xf506aa4a,"lime.graphics.Image.scroll","lime/graphics/Image.hx",792,0xc7b862ad)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE( 794)		Bool _hx_tmp = hx::IsNull( this->buffer );
HXDLIN( 794)		if (_hx_tmp) {
HXLINE( 794)			return;
            		}
HXLINE( 796)		{
HXLINE( 796)			Int _hx_tmp1 = ( ( ::hx::EnumBase)(this->type) )->_hx_getIndex();
HXDLIN( 796)			switch((int)(_hx_tmp1)){
            				case (int)0: {
HXLINE( 800)					::lime::graphics::utils::ImageCanvasUtil_obj::scroll(hx::ObjectPtr<OBJ_>(this),x,y);
            				}
            				break;
            				case (int)1: {
HXLINE( 810)					 ::lime::math::Rectangle _hx_tmp2 = this->get_rect();
HXDLIN( 810)					this->copyPixels(hx::ObjectPtr<OBJ_>(this),_hx_tmp2, ::lime::math::Vector2_obj::__new(x,y),null(),null(),null());
            				}
            				break;
            				case (int)2: {
HXLINE( 814)					 ::Dynamic _hx_tmp3 =  ::Dynamic(this->buffer->_hx___srcBitmapData->__Field(HX_("scroll",0d,d8,64,47),hx::paccDynamic));
HXDLIN( 814)					Int _hx_tmp4 = (x + this->offsetX);
HXDLIN( 814)					Int _hx_tmp5 = (y + this->offsetX);
HXDLIN( 814)					_hx_tmp3(_hx_tmp4,_hx_tmp5);
            				}
            				break;
            				default:{
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Image_obj,scroll,(void))

void Image_obj::setPixel(Int x,Int y,Int color, ::Dynamic format){
            	HX_STACK_FRAME("lime.graphics.Image","setPixel",0x8840cb01,"lime.graphics.Image.setPixel","lime/graphics/Image.hx",823,0xc7b862ad)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(color,"color")
            	HX_STACK_ARG(format,"format")
HXLINE( 825)		Bool _hx_tmp;
HXDLIN( 825)		Bool _hx_tmp1;
HXDLIN( 825)		Bool _hx_tmp2;
HXDLIN( 825)		Bool _hx_tmp3;
HXDLIN( 825)		Bool _hx_tmp4 = hx::IsNotNull( this->buffer );
HXDLIN( 825)		if (_hx_tmp4) {
HXLINE( 825)			_hx_tmp3 = (x < (int)0);
            		}
            		else {
HXLINE( 825)			_hx_tmp3 = true;
            		}
HXDLIN( 825)		if (!(_hx_tmp3)) {
HXLINE( 825)			_hx_tmp2 = (y < (int)0);
            		}
            		else {
HXLINE( 825)			_hx_tmp2 = true;
            		}
HXDLIN( 825)		if (!(_hx_tmp2)) {
HXLINE( 825)			_hx_tmp1 = (x >= this->width);
            		}
            		else {
HXLINE( 825)			_hx_tmp1 = true;
            		}
HXDLIN( 825)		if (!(_hx_tmp1)) {
HXLINE( 825)			_hx_tmp = (y >= this->height);
            		}
            		else {
HXLINE( 825)			_hx_tmp = true;
            		}
HXDLIN( 825)		if (_hx_tmp) {
HXLINE( 825)			return;
            		}
HXLINE( 827)		{
HXLINE( 827)			Int _hx_tmp5 = ( ( ::hx::EnumBase)(this->type) )->_hx_getIndex();
HXDLIN( 827)			switch((int)(_hx_tmp5)){
            				case (int)0: {
HXLINE( 831)					::lime::graphics::utils::ImageCanvasUtil_obj::setPixel(hx::ObjectPtr<OBJ_>(this),x,y,color,format);
            				}
            				break;
            				case (int)1: {
HXLINE( 839)					::lime::graphics::utils::ImageDataUtil_obj::setPixel(hx::ObjectPtr<OBJ_>(this),x,y,color,format);
            				}
            				break;
            				case (int)2: {
HXLINE( 843)					HX_VAR( Int,argb);
HXDLIN( 843)					Bool _hx_tmp6 = hx::IsNull( format );
HXDLIN( 843)					if (_hx_tmp6) {
HXLINE( 847)						HX_VARI( Int,rgba) = color;
HXDLIN( 847)						HX_VARI_NAME( Int,this1,"this") = (int)0;
HXDLIN( 847)						HX_VARI_NAME( Int,argb1,"argb") = this1;
HXDLIN( 847)						argb1 = ((int)((int)((int)((int)((int)((int)rgba & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(rgba,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(rgba,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(rgba,(int)8) & (int)(int)255) & (int)(int)255));
HXLINE( 843)						argb = argb1;
            					}
            					else {
HXLINE( 843)						 ::Dynamic _hx_switch_0 = format;
            						if (  (_hx_switch_0==(int)1) ){
HXLINE( 843)							argb = color;
HXDLIN( 843)							goto _hx_goto_5;
            						}
            						if (  (_hx_switch_0==(int)2) ){
HXLINE( 846)							HX_VARI( Int,bgra) = color;
HXDLIN( 846)							HX_VARI_NAME( Int,this2,"this") = (int)0;
HXDLIN( 846)							HX_VARI_NAME( Int,argb2,"argb") = this2;
HXDLIN( 846)							argb2 = ((int)((int)((int)((int)((int)((int)bgra & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(bgra,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(bgra,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(bgra,(int)24) & (int)(int)255) & (int)(int)255));
HXLINE( 843)							argb = argb2;
HXLINE( 846)							goto _hx_goto_5;
            						}
            						/* default */{
HXLINE( 847)							HX_VARI_NAME( Int,rgba1,"rgba") = color;
HXDLIN( 847)							HX_VARI_NAME( Int,this3,"this") = (int)0;
HXDLIN( 847)							HX_VARI_NAME( Int,argb3,"argb") = this3;
HXDLIN( 847)							argb3 = ((int)((int)((int)((int)((int)((int)rgba1 & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(rgba1,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(rgba1,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(rgba1,(int)8) & (int)(int)255) & (int)(int)255));
HXLINE( 843)							argb = argb3;
            						}
            						_hx_goto_5:;
            					}
HXLINE( 851)					 ::Dynamic _hx_tmp7 =  ::Dynamic(this->buffer->_hx___srcBitmapData->__Field(HX_("setPixel",84,2f,d8,d0),hx::paccDynamic));
HXDLIN( 851)					Int _hx_tmp8 = (x + this->offsetX);
HXDLIN( 851)					Int _hx_tmp9 = (y + this->offsetX);
HXDLIN( 851)					_hx_tmp7(_hx_tmp8,_hx_tmp9,argb);
            				}
            				break;
            				default:{
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(Image_obj,setPixel,(void))

void Image_obj::setPixel32(Int x,Int y,Int color, ::Dynamic format){
            	HX_STACK_FRAME("lime.graphics.Image","setPixel32",0xb24a79e0,"lime.graphics.Image.setPixel32","lime/graphics/Image.hx",860,0xc7b862ad)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(color,"color")
            	HX_STACK_ARG(format,"format")
HXLINE( 862)		Bool _hx_tmp;
HXDLIN( 862)		Bool _hx_tmp1;
HXDLIN( 862)		Bool _hx_tmp2;
HXDLIN( 862)		Bool _hx_tmp3;
HXDLIN( 862)		Bool _hx_tmp4 = hx::IsNotNull( this->buffer );
HXDLIN( 862)		if (_hx_tmp4) {
HXLINE( 862)			_hx_tmp3 = (x < (int)0);
            		}
            		else {
HXLINE( 862)			_hx_tmp3 = true;
            		}
HXDLIN( 862)		if (!(_hx_tmp3)) {
HXLINE( 862)			_hx_tmp2 = (y < (int)0);
            		}
            		else {
HXLINE( 862)			_hx_tmp2 = true;
            		}
HXDLIN( 862)		if (!(_hx_tmp2)) {
HXLINE( 862)			_hx_tmp1 = (x >= this->width);
            		}
            		else {
HXLINE( 862)			_hx_tmp1 = true;
            		}
HXDLIN( 862)		if (!(_hx_tmp1)) {
HXLINE( 862)			_hx_tmp = (y >= this->height);
            		}
            		else {
HXLINE( 862)			_hx_tmp = true;
            		}
HXDLIN( 862)		if (_hx_tmp) {
HXLINE( 862)			return;
            		}
HXLINE( 864)		{
HXLINE( 864)			Int _hx_tmp5 = ( ( ::hx::EnumBase)(this->type) )->_hx_getIndex();
HXDLIN( 864)			switch((int)(_hx_tmp5)){
            				case (int)0: {
HXLINE( 868)					::lime::graphics::utils::ImageCanvasUtil_obj::setPixel32(hx::ObjectPtr<OBJ_>(this),x,y,color,format);
            				}
            				break;
            				case (int)1: {
HXLINE( 876)					::lime::graphics::utils::ImageDataUtil_obj::setPixel32(hx::ObjectPtr<OBJ_>(this),x,y,color,format);
            				}
            				break;
            				case (int)2: {
HXLINE( 880)					HX_VAR( Int,argb);
HXDLIN( 880)					Bool _hx_tmp6 = hx::IsNull( format );
HXDLIN( 880)					if (_hx_tmp6) {
HXLINE( 884)						HX_VARI( Int,rgba) = color;
HXDLIN( 884)						HX_VARI_NAME( Int,this1,"this") = (int)0;
HXDLIN( 884)						HX_VARI_NAME( Int,argb1,"argb") = this1;
HXDLIN( 884)						argb1 = ((int)((int)((int)((int)((int)((int)rgba & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(rgba,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(rgba,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(rgba,(int)8) & (int)(int)255) & (int)(int)255));
HXLINE( 880)						argb = argb1;
            					}
            					else {
HXLINE( 880)						 ::Dynamic _hx_switch_0 = format;
            						if (  (_hx_switch_0==(int)1) ){
HXLINE( 880)							argb = color;
HXDLIN( 880)							goto _hx_goto_6;
            						}
            						if (  (_hx_switch_0==(int)2) ){
HXLINE( 883)							HX_VARI( Int,bgra) = color;
HXDLIN( 883)							HX_VARI_NAME( Int,this2,"this") = (int)0;
HXDLIN( 883)							HX_VARI_NAME( Int,argb2,"argb") = this2;
HXDLIN( 883)							argb2 = ((int)((int)((int)((int)((int)((int)bgra & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(bgra,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(bgra,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(bgra,(int)24) & (int)(int)255) & (int)(int)255));
HXLINE( 880)							argb = argb2;
HXLINE( 883)							goto _hx_goto_6;
            						}
            						/* default */{
HXLINE( 884)							HX_VARI_NAME( Int,rgba1,"rgba") = color;
HXDLIN( 884)							HX_VARI_NAME( Int,this3,"this") = (int)0;
HXDLIN( 884)							HX_VARI_NAME( Int,argb3,"argb") = this3;
HXDLIN( 884)							argb3 = ((int)((int)((int)((int)((int)((int)rgba1 & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(rgba1,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(rgba1,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(rgba1,(int)8) & (int)(int)255) & (int)(int)255));
HXLINE( 880)							argb = argb3;
            						}
            						_hx_goto_6:;
            					}
HXLINE( 888)					 ::Dynamic _hx_tmp7 =  ::Dynamic(this->buffer->_hx___srcBitmapData->__Field(HX_("setPixel32",23,45,e6,da),hx::paccDynamic));
HXDLIN( 888)					Int _hx_tmp8 = (x + this->offsetX);
HXDLIN( 888)					Int _hx_tmp9 = (y + this->offsetY);
HXDLIN( 888)					_hx_tmp7(_hx_tmp8,_hx_tmp9,argb);
            				}
            				break;
            				default:{
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(Image_obj,setPixel32,(void))

void Image_obj::setPixels( ::lime::math::Rectangle rect, ::haxe::io::Bytes bytes, ::Dynamic format){
            	HX_STACK_FRAME("lime.graphics.Image","setPixels",0xb070d652,"lime.graphics.Image.setPixels","lime/graphics/Image.hx",897,0xc7b862ad)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(rect,"rect")
            	HX_STACK_ARG(bytes,"bytes")
            	HX_STACK_ARG(format,"format")
HXLINE( 899)		rect = this->_hx___clipRect(rect);
HXLINE( 900)		Bool _hx_tmp;
HXDLIN( 900)		Bool _hx_tmp1 = hx::IsNotNull( this->buffer );
HXDLIN( 900)		if (_hx_tmp1) {
HXLINE( 900)			_hx_tmp = hx::IsNull( rect );
            		}
            		else {
HXLINE( 900)			_hx_tmp = true;
            		}
HXDLIN( 900)		if (_hx_tmp) {
HXLINE( 900)			return;
            		}
HXLINE( 902)		{
HXLINE( 902)			Int _hx_tmp2 = ( ( ::hx::EnumBase)(this->type) )->_hx_getIndex();
HXDLIN( 902)			switch((int)(_hx_tmp2)){
            				case (int)0: {
HXLINE( 906)					::lime::graphics::utils::ImageCanvasUtil_obj::setPixels(hx::ObjectPtr<OBJ_>(this),rect,bytes,format);
            				}
            				break;
            				case (int)1: {
HXLINE( 914)					::lime::graphics::utils::ImageDataUtil_obj::setPixels(hx::ObjectPtr<OBJ_>(this),rect,bytes,format);
            				}
            				break;
            				case (int)2: {
            				}
            				break;
            				default:{
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Image_obj,setPixels,(void))

Int Image_obj::threshold( ::lime::graphics::Image sourceImage, ::lime::math::Rectangle sourceRect, ::lime::math::Vector2 destPoint,::String operation,Int threshold,hx::Null< Int >  __o_color,hx::Null< Int >  __o_mask,hx::Null< Bool >  __o_copySource, ::Dynamic format){
Int color = __o_color.Default(0);
Int mask = __o_mask.Default(-1);
Bool copySource = __o_copySource.Default(false);
            	HX_STACK_FRAME("lime.graphics.Image","threshold",0xf8c3358e,"lime.graphics.Image.threshold","lime/graphics/Image.hx",979,0xc7b862ad)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(sourceImage,"sourceImage")
            	HX_STACK_ARG(sourceRect,"sourceRect")
            	HX_STACK_ARG(destPoint,"destPoint")
            	HX_STACK_ARG(operation,"operation")
            	HX_STACK_ARG(threshold,"threshold")
            	HX_STACK_ARG(color,"color")
            	HX_STACK_ARG(mask,"mask")
            	HX_STACK_ARG(copySource,"copySource")
            	HX_STACK_ARG(format,"format")
HXLINE( 981)		Bool _hx_tmp;
HXDLIN( 981)		Bool _hx_tmp1;
HXDLIN( 981)		Bool _hx_tmp2 = hx::IsNotNull( this->buffer );
HXDLIN( 981)		if (_hx_tmp2) {
HXLINE( 981)			_hx_tmp1 = hx::IsNull( sourceImage );
            		}
            		else {
HXLINE( 981)			_hx_tmp1 = true;
            		}
HXDLIN( 981)		if (!(_hx_tmp1)) {
HXLINE( 981)			_hx_tmp = hx::IsNull( sourceRect );
            		}
            		else {
HXLINE( 981)			_hx_tmp = true;
            		}
HXDLIN( 981)		if (_hx_tmp) {
HXLINE( 981)			return (int)0;
            		}
HXLINE( 983)		{
HXLINE( 983)			Int _hx_tmp3 = ( ( ::hx::EnumBase)(this->type) )->_hx_getIndex();
HXDLIN( 983)			switch((int)(_hx_tmp3)){
            				case (int)0: case (int)1: {
HXLINE( 991)					return ::lime::graphics::utils::ImageDataUtil_obj::threshold(hx::ObjectPtr<OBJ_>(this),sourceImage,sourceRect,destPoint,operation,threshold,color,mask,copySource,format);
            				}
            				break;
            				case (int)2: {
HXLINE( 995)					HX_VAR( Int,_color);
HXDLIN( 995)					Bool _hx_tmp4 = hx::IsNull( format );
HXDLIN( 995)					if (_hx_tmp4) {
HXLINE( 999)						HX_VARI( Int,rgba) = color;
HXDLIN( 999)						HX_VARI_NAME( Int,this1,"this") = (int)0;
HXDLIN( 999)						HX_VARI( Int,argb) = this1;
HXDLIN( 999)						argb = ((int)((int)((int)((int)((int)((int)rgba & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(rgba,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(rgba,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(rgba,(int)8) & (int)(int)255) & (int)(int)255));
HXLINE( 995)						_color = argb;
            					}
            					else {
HXLINE( 995)						 ::Dynamic _hx_switch_0 = format;
            						if (  (_hx_switch_0==(int)1) ){
HXLINE( 995)							_color = color;
HXDLIN( 995)							goto _hx_goto_7;
            						}
            						if (  (_hx_switch_0==(int)2) ){
HXLINE( 998)							HX_VARI( Int,bgra) = color;
HXDLIN( 998)							HX_VARI_NAME( Int,this2,"this") = (int)0;
HXDLIN( 998)							HX_VARI_NAME( Int,argb1,"argb") = this2;
HXDLIN( 998)							argb1 = ((int)((int)((int)((int)((int)((int)bgra & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(bgra,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(bgra,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(bgra,(int)24) & (int)(int)255) & (int)(int)255));
HXLINE( 995)							_color = argb1;
HXLINE( 998)							goto _hx_goto_7;
            						}
            						/* default */{
HXLINE( 999)							HX_VARI_NAME( Int,rgba1,"rgba") = color;
HXDLIN( 999)							HX_VARI_NAME( Int,this3,"this") = (int)0;
HXDLIN( 999)							HX_VARI_NAME( Int,argb2,"argb") = this3;
HXDLIN( 999)							argb2 = ((int)((int)((int)((int)((int)((int)rgba1 & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(rgba1,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(rgba1,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(rgba1,(int)8) & (int)(int)255) & (int)(int)255));
HXLINE( 995)							_color = argb2;
            						}
            						_hx_goto_7:;
            					}
HXLINE(1003)					HX_VAR( Int,_mask);
HXDLIN(1003)					Bool _hx_tmp5 = hx::IsNull( format );
HXDLIN(1003)					if (_hx_tmp5) {
HXLINE(1007)						HX_VARI_NAME( Int,rgba2,"rgba") = mask;
HXDLIN(1007)						HX_VARI_NAME( Int,this4,"this") = (int)0;
HXDLIN(1007)						HX_VARI_NAME( Int,argb3,"argb") = this4;
HXDLIN(1007)						argb3 = ((int)((int)((int)((int)((int)((int)rgba2 & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(rgba2,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(rgba2,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(rgba2,(int)8) & (int)(int)255) & (int)(int)255));
HXLINE(1003)						_mask = argb3;
            					}
            					else {
HXLINE(1003)						 ::Dynamic _hx_switch_1 = format;
            						if (  (_hx_switch_1==(int)1) ){
HXLINE(1003)							_mask = mask;
HXDLIN(1003)							goto _hx_goto_8;
            						}
            						if (  (_hx_switch_1==(int)2) ){
HXLINE(1006)							HX_VARI_NAME( Int,bgra1,"bgra") = mask;
HXDLIN(1006)							HX_VARI_NAME( Int,this5,"this") = (int)0;
HXDLIN(1006)							HX_VARI_NAME( Int,argb4,"argb") = this5;
HXDLIN(1006)							argb4 = ((int)((int)((int)((int)((int)((int)bgra1 & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(bgra1,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(bgra1,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(bgra1,(int)24) & (int)(int)255) & (int)(int)255));
HXLINE(1003)							_mask = argb4;
HXLINE(1006)							goto _hx_goto_8;
            						}
            						/* default */{
HXLINE(1007)							HX_VARI_NAME( Int,rgba3,"rgba") = mask;
HXDLIN(1007)							HX_VARI_NAME( Int,this6,"this") = (int)0;
HXDLIN(1007)							HX_VARI_NAME( Int,argb5,"argb") = this6;
HXDLIN(1007)							argb5 = ((int)((int)((int)((int)((int)((int)rgba3 & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(rgba3,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(rgba3,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(rgba3,(int)8) & (int)(int)255) & (int)(int)255));
HXLINE(1003)							_mask = argb5;
            						}
            						_hx_goto_8:;
            					}
HXLINE(1011)					sourceRect->offset(sourceImage->offsetX,sourceImage->offsetY);
HXLINE(1012)					destPoint->offset(this->offsetX,this->offsetY);
HXLINE(1014)					 ::Dynamic _hx_tmp6 =  ::Dynamic(this->buffer->_hx___srcBitmapData->__Field(HX_("threshold",ab,c3,a3,34),hx::paccDynamic));
HXDLIN(1014)					 ::Dynamic _hx_tmp7 = sourceImage->buffer->get_src();
HXDLIN(1014)					 ::Dynamic _hx_tmp8 = sourceRect->_hx___toFlashRectangle();
HXDLIN(1014)					 ::Dynamic _hx_tmp9 = destPoint->_hx___toFlashPoint();
HXDLIN(1014)					return _hx_tmp6(_hx_tmp7,_hx_tmp8,_hx_tmp9,operation,threshold,_color,_mask,copySource);
            				}
            				break;
            				default:{
            				}
            			}
            		}
HXLINE(1020)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC9(Image_obj,threshold,return )

 ::lime::math::Rectangle Image_obj::_hx___clipRect( ::lime::math::Rectangle r){
            	HX_STACK_FRAME("lime.graphics.Image","__clipRect",0xd30737f1,"lime.graphics.Image.__clipRect","lime/graphics/Image.hx",1054,0xc7b862ad)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(r,"r")
HXLINE(1056)		Bool _hx_tmp = hx::IsNull( r );
HXDLIN(1056)		if (_hx_tmp) {
HXLINE(1056)			return null();
            		}
HXLINE(1058)		Bool _hx_tmp1 = (r->x < (int)0);
HXDLIN(1058)		if (_hx_tmp1) {
HXLINE(1060)			hx::SubEq(r->width,-(r->x));
HXLINE(1061)			r->x = (int)0;
HXLINE(1063)			if (((r->x + r->width) <= (int)0)) {
HXLINE(1063)				return null();
            			}
            		}
HXLINE(1067)		Bool _hx_tmp2 = (r->y < (int)0);
HXDLIN(1067)		if (_hx_tmp2) {
HXLINE(1069)			hx::SubEq(r->height,-(r->y));
HXLINE(1070)			r->y = (int)0;
HXLINE(1072)			if (((r->y + r->height) <= (int)0)) {
HXLINE(1072)				return null();
            			}
            		}
HXLINE(1076)		Bool _hx_tmp3 = ((r->x + r->width) >= this->width);
HXDLIN(1076)		if (_hx_tmp3) {
HXLINE(1078)			Float _hx_tmp4 = (r->x + r->width);
HXDLIN(1078)			hx::SubEq(r->width,(_hx_tmp4 - this->width));
HXLINE(1080)			if ((r->width <= (int)0)) {
HXLINE(1080)				return null();
            			}
            		}
HXLINE(1084)		Bool _hx_tmp5 = ((r->y + r->height) >= this->height);
HXDLIN(1084)		if (_hx_tmp5) {
HXLINE(1086)			Float _hx_tmp6 = (r->y + r->height);
HXDLIN(1086)			hx::SubEq(r->height,(_hx_tmp6 - this->height));
HXLINE(1088)			if ((r->height <= (int)0)) {
HXLINE(1088)				return null();
            			}
            		}
HXLINE(1092)		return r;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Image_obj,_hx___clipRect,return )

void Image_obj::_hx___fromBase64(::String base64,::String type, ::Dynamic onload){
            	HX_STACK_FRAME("lime.graphics.Image","__fromBase64",0x71681bb6,"lime.graphics.Image.__fromBase64","lime/graphics/Image.hx",1097,0xc7b862ad)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(base64,"base64")
            	HX_STACK_ARG(type,"type")
            	HX_STACK_ARG(onload,"onload")
            	}


HX_DEFINE_DYNAMIC_FUNC3(Image_obj,_hx___fromBase64,(void))

void Image_obj::_hx___fromBytes( ::haxe::io::Bytes bytes, ::Dynamic onload){
            	HX_STACK_FRAME("lime.graphics.Image","__fromBytes",0x40972c24,"lime.graphics.Image.__fromBytes","lime/graphics/Image.hx",1127,0xc7b862ad)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(bytes,"bytes")
            	HX_STACK_ARG(onload,"onload")
HXLINE(1159)		HX_VARI(  ::lime::graphics::ImageBuffer,imageBuffer) = null();
HXLINE(1162)		HX_VARI(  ::haxe::io::Bytes,buffer) = ::haxe::io::Bytes_obj::alloc((int)0);
HXDLIN(1162)		HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this1,"this");
HXDLIN(1162)		Bool _hx_tmp = hx::IsNotNull( buffer );
HXDLIN(1162)		if (_hx_tmp) {
HXLINE(1162)			HX_VARI(  ::lime::utils::ArrayBufferView,_this) =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)4);
HXDLIN(1162)			if ((hx::Mod((int)0,_this->bytesPerElement) != (int)0)) {
HXLINE(1162)				HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            			}
HXDLIN(1162)			HX_VARI( Int,bufferByteLength) = buffer->length;
HXDLIN(1162)			{
HXLINE(1162)				if ((hx::Mod(bufferByteLength,_this->bytesPerElement) != (int)0)) {
HXLINE(1162)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
HXDLIN(1162)				if ((bufferByteLength < (int)0)) {
HXLINE(1162)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
            			}
HXDLIN(1162)			_this->buffer = buffer;
HXDLIN(1162)			_this->byteOffset = (int)0;
HXDLIN(1162)			_this->byteLength = bufferByteLength;
HXDLIN(1162)			Float _hx_tmp1 = ((Float)bufferByteLength / (Float)_this->bytesPerElement);
HXDLIN(1162)			_this->length = ::Std_obj::_hx_int(_hx_tmp1);
HXDLIN(1162)			this1 = _this;
            		}
            		else {
HXLINE(1162)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8Array",6b,44,d5,85));
            		}
HXDLIN(1162)		 ::Dynamic buffer1 =  ::lime::graphics::ImageBuffer_obj::__new(this1,null(),null(),null(),null());
HXDLIN(1162)		 ::hx::Object * _hx_tmp2 = hx::DynamicPtr(bytes);
HXDLIN(1162)		 ::hx::Object * inVal = ( ( ::hx::Object *)(::lime::graphics::Image_obj::cffi_lime_image_load(_hx_tmp2,hx::DynamicPtr(buffer1))) );
HXDLIN(1162)		imageBuffer = Dynamic(hx::DynamicPtr(inVal));
HXLINE(1170)		Bool _hx_tmp3 = hx::IsNotNull( imageBuffer );
HXDLIN(1170)		if (_hx_tmp3) {
HXLINE(1172)			this->_hx___fromImageBuffer(imageBuffer);
HXLINE(1174)			Bool _hx_tmp4 = hx::IsNotNull( onload );
HXDLIN(1174)			if (_hx_tmp4) {
HXLINE(1176)				onload(hx::ObjectPtr<OBJ_>(this));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Image_obj,_hx___fromBytes,(void))

void Image_obj::_hx___fromFile(::String path, ::Dynamic onload, ::Dynamic onerror){
            	HX_STACK_FRAME("lime.graphics.Image","__fromFile",0x1c2444e3,"lime.graphics.Image.__fromFile","lime/graphics/Image.hx",1191,0xc7b862ad)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(path,"path")
            	HX_STACK_ARG(onload,"onload")
            	HX_STACK_ARG(onerror,"onerror")
HXLINE(1232)		HX_VARI(  ::lime::graphics::ImageBuffer,buffer) = null();
HXLINE(1286)		Bool _hx_tmp = ::lime::_hx_system::CFFI_obj::enabled;
HXDLIN(1286)		if (_hx_tmp) {
HXLINE(1289)			HX_VARI_NAME(  ::haxe::io::Bytes,buffer1,"buffer") = ::haxe::io::Bytes_obj::alloc((int)0);
HXDLIN(1289)			HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this1,"this");
HXDLIN(1289)			Bool _hx_tmp1 = hx::IsNotNull( buffer1 );
HXDLIN(1289)			if (_hx_tmp1) {
HXLINE(1289)				HX_VARI(  ::lime::utils::ArrayBufferView,_this) =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)4);
HXDLIN(1289)				if ((hx::Mod((int)0,_this->bytesPerElement) != (int)0)) {
HXLINE(1289)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
HXDLIN(1289)				HX_VARI( Int,bufferByteLength) = buffer1->length;
HXDLIN(1289)				{
HXLINE(1289)					if ((hx::Mod(bufferByteLength,_this->bytesPerElement) != (int)0)) {
HXLINE(1289)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN(1289)					if ((bufferByteLength < (int)0)) {
HXLINE(1289)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
            				}
HXDLIN(1289)				_this->buffer = buffer1;
HXDLIN(1289)				_this->byteOffset = (int)0;
HXDLIN(1289)				_this->byteLength = bufferByteLength;
HXDLIN(1289)				Float _hx_tmp2 = ((Float)bufferByteLength / (Float)_this->bytesPerElement);
HXDLIN(1289)				_this->length = ::Std_obj::_hx_int(_hx_tmp2);
HXDLIN(1289)				this1 = _this;
            			}
            			else {
HXLINE(1289)				HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8Array",6b,44,d5,85));
            			}
HXDLIN(1289)			 ::Dynamic buffer2 =  ::lime::graphics::ImageBuffer_obj::__new(this1,null(),null(),null(),null());
HXDLIN(1289)			 ::hx::Object * _hx_tmp3 = hx::DynamicPtr(path);
HXDLIN(1289)			 ::hx::Object * inVal = ( ( ::hx::Object *)(::lime::graphics::Image_obj::cffi_lime_image_load(_hx_tmp3,hx::DynamicPtr(buffer2))) );
HXDLIN(1289)			buffer = Dynamic(hx::DynamicPtr(inVal));
            		}
HXLINE(1340)		Bool _hx_tmp4 = hx::IsNotNull( buffer );
HXDLIN(1340)		if (_hx_tmp4) {
HXLINE(1342)			this->_hx___fromImageBuffer(buffer);
HXLINE(1344)			Bool _hx_tmp5 = hx::IsNotNull( onload );
HXDLIN(1344)			if (_hx_tmp5) {
HXLINE(1346)				onload(hx::ObjectPtr<OBJ_>(this));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Image_obj,_hx___fromFile,(void))

void Image_obj::_hx___fromImageBuffer( ::lime::graphics::ImageBuffer buffer){
            	HX_STACK_FRAME("lime.graphics.Image","__fromImageBuffer",0xe152fb34,"lime.graphics.Image.__fromImageBuffer","lime/graphics/Image.hx",1361,0xc7b862ad)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(buffer,"buffer")
HXLINE(1363)		this->buffer = buffer;
HXLINE(1365)		Bool _hx_tmp = hx::IsNotNull( buffer );
HXDLIN(1365)		if (_hx_tmp) {
HXLINE(1367)			Bool _hx_tmp1 = (this->width == (int)-1);
HXDLIN(1367)			if (_hx_tmp1) {
HXLINE(1369)				this->width = buffer->width;
            			}
HXLINE(1373)			Bool _hx_tmp2 = (this->height == (int)-1);
HXDLIN(1373)			if (_hx_tmp2) {
HXLINE(1375)				this->height = buffer->height;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Image_obj,_hx___fromImageBuffer,(void))

 ::lime::utils::ArrayBufferView Image_obj::get_data(){
            	HX_STACK_FRAME("lime.graphics.Image","get_data",0x7986ad30,"lime.graphics.Image.get_data","lime/graphics/Image.hx",1418,0xc7b862ad)
            	HX_STACK_THIS(this)
HXLINE(1420)		Bool _hx_tmp;
HXDLIN(1420)		Bool _hx_tmp1;
HXDLIN(1420)		Bool _hx_tmp2 = hx::IsNull( this->buffer->data );
HXDLIN(1420)		if (_hx_tmp2) {
HXLINE(1420)			_hx_tmp1 = (this->buffer->width > (int)0);
            		}
            		else {
HXLINE(1420)			_hx_tmp1 = false;
            		}
HXDLIN(1420)		if (_hx_tmp1) {
HXLINE(1420)			_hx_tmp = (this->buffer->height > (int)0);
            		}
            		else {
HXLINE(1420)			_hx_tmp = false;
            		}
HXLINE(1435)		return this->buffer->data;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Image_obj,get_data,return )

 ::lime::utils::ArrayBufferView Image_obj::set_data( ::lime::utils::ArrayBufferView value){
            	HX_STACK_FRAME("lime.graphics.Image","set_data",0x27e406a4,"lime.graphics.Image.set_data","lime/graphics/Image.hx",1442,0xc7b862ad)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1442)		return (this->buffer->data = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Image_obj,set_data,return )

Int Image_obj::get_format(){
            	HX_STACK_FRAME("lime.graphics.Image","get_format",0xc57a33bd,"lime.graphics.Image.get_format","lime/graphics/Image.hx",1449,0xc7b862ad)
            	HX_STACK_THIS(this)
HXLINE(1449)		return this->buffer->format;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Image_obj,get_format,return )

Int Image_obj::set_format(Int value){
            	HX_STACK_FRAME("lime.graphics.Image","set_format",0xc8f7d231,"lime.graphics.Image.set_format","lime/graphics/Image.hx",1454,0xc7b862ad)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1456)		Bool _hx_tmp = (this->buffer->format != value);
HXDLIN(1456)		if (_hx_tmp) {
HXLINE(1458)			Int _hx_tmp1 = ( ( ::hx::EnumBase)(this->type) )->_hx_getIndex();
HXDLIN(1458)			if ((_hx_tmp1 == (int)1)) {
HXLINE(1462)				::lime::graphics::utils::ImageDataUtil_obj::setFormat(hx::ObjectPtr<OBJ_>(this),value);
            			}
            		}
HXLINE(1470)		return (this->buffer->format = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Image_obj,set_format,return )

Bool Image_obj::get_powerOfTwo(){
            	HX_STACK_FRAME("lime.graphics.Image","get_powerOfTwo",0x62ee1df6,"lime.graphics.Image.get_powerOfTwo","lime/graphics/Image.hx",1477,0xc7b862ad)
            	HX_STACK_THIS(this)
HXLINE(1477)		Bool _hx_tmp;
HXDLIN(1477)		if ((this->buffer->width != (int)0)) {
HXLINE(1477)			_hx_tmp = (((int)this->buffer->width & (int)(~(this->buffer->width) + (int)1)) == this->buffer->width);
            		}
            		else {
HXLINE(1477)			_hx_tmp = false;
            		}
HXDLIN(1477)		if (_hx_tmp) {
HXLINE(1477)			if ((this->buffer->height != (int)0)) {
HXLINE(1477)				return (((int)this->buffer->height & (int)(~(this->buffer->height) + (int)1)) == this->buffer->height);
            			}
            			else {
HXLINE(1477)				return false;
            			}
            		}
            		else {
HXLINE(1477)			return false;
            		}
HXDLIN(1477)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Image_obj,get_powerOfTwo,return )

Bool Image_obj::set_powerOfTwo(Bool value){
            	HX_STACK_FRAME("lime.graphics.Image","set_powerOfTwo",0x830e066a,"lime.graphics.Image.set_powerOfTwo","lime/graphics/Image.hx",1482,0xc7b862ad)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1484)		Bool _hx_tmp = this->get_powerOfTwo();
HXDLIN(1484)		if ((value != _hx_tmp)) {
HXLINE(1486)			HX_VARI( Int,newWidth) = (int)1;
HXLINE(1487)			HX_VARI( Int,newHeight) = (int)1;
HXLINE(1489)			while((newWidth < this->buffer->width)){
HXLINE(1491)				hx::ShlEq(newWidth,(int)1);
            			}
HXLINE(1495)			while((newHeight < this->buffer->height)){
HXLINE(1497)				hx::ShlEq(newHeight,(int)1);
            			}
HXLINE(1501)			{
HXLINE(1501)				Int _hx_tmp1 = ( ( ::hx::EnumBase)(this->type) )->_hx_getIndex();
HXDLIN(1501)				switch((int)(_hx_tmp1)){
            					case (int)0: {
            					}
            					break;
            					case (int)1: {
HXLINE(1509)						::lime::graphics::utils::ImageDataUtil_obj::resizeBuffer(hx::ObjectPtr<OBJ_>(this),newWidth,newHeight);
            					}
            					break;
            					case (int)2: {
            					}
            					break;
            					default:{
            					}
            				}
            			}
            		}
HXLINE(1527)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Image_obj,set_powerOfTwo,return )

Bool Image_obj::get_premultiplied(){
            	HX_STACK_FRAME("lime.graphics.Image","get_premultiplied",0xc1478990,"lime.graphics.Image.get_premultiplied","lime/graphics/Image.hx",1534,0xc7b862ad)
            	HX_STACK_THIS(this)
HXLINE(1534)		return this->buffer->premultiplied;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Image_obj,get_premultiplied,return )

Bool Image_obj::set_premultiplied(Bool value){
            	HX_STACK_FRAME("lime.graphics.Image","set_premultiplied",0xe4b5619c,"lime.graphics.Image.set_premultiplied","lime/graphics/Image.hx",1539,0xc7b862ad)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1541)		Bool _hx_tmp;
HXDLIN(1541)		if (value) {
HXLINE(1541)			_hx_tmp = !(this->buffer->premultiplied);
            		}
            		else {
HXLINE(1541)			_hx_tmp = false;
            		}
HXDLIN(1541)		if (_hx_tmp) {
HXLINE(1543)			Int _hx_tmp1 = ( ( ::hx::EnumBase)(this->type) )->_hx_getIndex();
HXDLIN(1543)			switch((int)(_hx_tmp1)){
            				case (int)0: case (int)1: {
HXLINE(1551)					::lime::graphics::utils::ImageDataUtil_obj::multiplyAlpha(hx::ObjectPtr<OBJ_>(this));
            				}
            				break;
            				default:{
            				}
            			}
            		}
            		else {
HXLINE(1559)			Bool _hx_tmp2;
HXDLIN(1559)			if (!(value)) {
HXLINE(1559)				_hx_tmp2 = this->buffer->premultiplied;
            			}
            			else {
HXLINE(1559)				_hx_tmp2 = false;
            			}
HXDLIN(1559)			if (_hx_tmp2) {
HXLINE(1561)				Int _hx_tmp3 = ( ( ::hx::EnumBase)(this->type) )->_hx_getIndex();
HXDLIN(1561)				if ((_hx_tmp3 == (int)1)) {
HXLINE(1569)					::lime::graphics::utils::ImageDataUtil_obj::unmultiplyAlpha(hx::ObjectPtr<OBJ_>(this));
            				}
            			}
            		}
HXLINE(1579)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Image_obj,set_premultiplied,return )

 ::lime::math::Rectangle Image_obj::get_rect(){
            	HX_STACK_FRAME("lime.graphics.Image","get_rect",0x82caa42a,"lime.graphics.Image.get_rect","lime/graphics/Image.hx",1586,0xc7b862ad)
            	HX_STACK_THIS(this)
HXLINE(1586)		return  ::lime::math::Rectangle_obj::__new((int)0,(int)0,this->width,this->height);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Image_obj,get_rect,return )

 ::Dynamic Image_obj::get_src(){
            	HX_STACK_FRAME("lime.graphics.Image","get_src",0x66c2929e,"lime.graphics.Image.get_src","lime/graphics/Image.hx",1601,0xc7b862ad)
            	HX_STACK_THIS(this)
HXLINE(1601)		return this->buffer->get_src();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Image_obj,get_src,return )

 ::Dynamic Image_obj::set_src( ::Dynamic value){
            	HX_STACK_FRAME("lime.graphics.Image","set_src",0x59c423aa,"lime.graphics.Image.set_src","lime/graphics/Image.hx",1608,0xc7b862ad)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1608)		return this->buffer->set_src(value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Image_obj,set_src,return )

Bool Image_obj::get_transparent(){
            	HX_STACK_FRAME("lime.graphics.Image","get_transparent",0xe1ee610c,"lime.graphics.Image.get_transparent","lime/graphics/Image.hx",1613,0xc7b862ad)
            	HX_STACK_THIS(this)
HXLINE(1615)		Bool _hx_tmp = hx::IsNull( this->buffer );
HXDLIN(1615)		if (_hx_tmp) {
HXLINE(1615)			return false;
            		}
HXLINE(1616)		return this->buffer->transparent;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Image_obj,get_transparent,return )

Bool Image_obj::set_transparent(Bool value){
            	HX_STACK_FRAME("lime.graphics.Image","set_transparent",0xddb9de18,"lime.graphics.Image.set_transparent","lime/graphics/Image.hx",1621,0xc7b862ad)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1624)		Bool _hx_tmp = hx::IsNull( this->buffer );
HXDLIN(1624)		if (_hx_tmp) {
HXLINE(1624)			return false;
            		}
HXLINE(1625)		return (this->buffer->transparent = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Image_obj,set_transparent,return )

::String Image_obj::_hx___base64Chars;

 ::haxe::crypto::BaseCode Image_obj::_hx___base64Encoder;

 ::lime::graphics::Image Image_obj::fromBase64(::String base64,::String type, ::Dynamic onload){
            	HX_STACK_FRAME("lime.graphics.Image","fromBase64",0x6fd03756,"lime.graphics.Image.fromBase64","lime/graphics/Image.hx",460,0xc7b862ad)
            	HX_STACK_ARG(base64,"base64")
            	HX_STACK_ARG(type,"type")
            	HX_STACK_ARG(onload,"onload")
HXLINE( 462)		Bool _hx_tmp = hx::IsNull( base64 );
HXDLIN( 462)		if (_hx_tmp) {
HXLINE( 462)			return null();
            		}
HXLINE( 463)		HX_VARI(  ::lime::graphics::Image,image) =  ::lime::graphics::Image_obj::__new(null(),null(),null(),null(),null(),null(),null());
HXLINE( 464)		image->_hx___fromBase64(base64,type,onload);
HXLINE( 465)		return image;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Image_obj,fromBase64,return )

 ::lime::graphics::Image Image_obj::fromBitmapData( ::Dynamic bitmapData){
            	HX_STACK_FRAME("lime.graphics.Image","fromBitmapData",0x2e36df00,"lime.graphics.Image.fromBitmapData","lime/graphics/Image.hx",473,0xc7b862ad)
            	HX_STACK_ARG(bitmapData,"bitmapData")
HXLINE( 476)		Bool _hx_tmp = hx::IsNull( bitmapData );
HXDLIN( 476)		if (_hx_tmp) {
HXLINE( 476)			return null();
            		}
HXLINE( 482)		return  ::Dynamic(bitmapData->__Field(HX_("image",5b,1f,69,bd),hx::paccDynamic));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Image_obj,fromBitmapData,return )

 ::lime::graphics::Image Image_obj::fromBytes( ::haxe::io::Bytes bytes, ::Dynamic onload){
            	HX_STACK_FRAME("lime.graphics.Image","fromBytes",0x36406484,"lime.graphics.Image.fromBytes","lime/graphics/Image.hx",488,0xc7b862ad)
            	HX_STACK_ARG(bytes,"bytes")
            	HX_STACK_ARG(onload,"onload")
HXLINE( 490)		Bool _hx_tmp = hx::IsNull( bytes );
HXDLIN( 490)		if (_hx_tmp) {
HXLINE( 490)			return null();
            		}
HXLINE( 491)		HX_VARI(  ::lime::graphics::Image,image) =  ::lime::graphics::Image_obj::__new(null(),null(),null(),null(),null(),null(),null());
HXLINE( 492)		image->_hx___fromBytes(bytes,onload);
HXLINE( 493)		return image;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Image_obj,fromBytes,return )

 ::lime::graphics::Image Image_obj::fromCanvas( ::Dynamic canvas){
            	HX_STACK_FRAME("lime.graphics.Image","fromCanvas",0xd2ea8e9f,"lime.graphics.Image.fromCanvas","lime/graphics/Image.hx",501,0xc7b862ad)
            	HX_STACK_ARG(canvas,"canvas")
HXLINE( 504)		Bool _hx_tmp = hx::IsNull( canvas );
HXDLIN( 504)		if (_hx_tmp) {
HXLINE( 504)			return null();
            		}
HXLINE( 505)		HX_VARI(  ::lime::graphics::ImageBuffer,buffer) =  ::lime::graphics::ImageBuffer_obj::__new(null(), ::Dynamic(canvas->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic)), ::Dynamic(canvas->__Field(HX_("height",e7,07,4c,02),hx::paccDynamic)),null(),null());
HXLINE( 506)		buffer->set_src(canvas);
HXLINE( 507)		HX_VARI(  ::lime::graphics::Image,image) =  ::lime::graphics::Image_obj::__new(buffer,null(),null(),null(),null(),null(),null());
HXLINE( 508)		image->type = ::lime::graphics::ImageType_obj::CANVAS_dyn();
HXLINE( 509)		return image;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Image_obj,fromCanvas,return )

 ::lime::graphics::Image Image_obj::fromFile(::String path, ::Dynamic onload, ::Dynamic onerror){
            	HX_STACK_FRAME("lime.graphics.Image","fromFile",0x58f03883,"lime.graphics.Image.fromFile","lime/graphics/Image.hx",514,0xc7b862ad)
            	HX_STACK_ARG(path,"path")
            	HX_STACK_ARG(onload,"onload")
            	HX_STACK_ARG(onerror,"onerror")
HXLINE( 516)		Bool _hx_tmp = hx::IsNull( path );
HXDLIN( 516)		if (_hx_tmp) {
HXLINE( 516)			return null();
            		}
HXLINE( 517)		HX_VARI(  ::lime::graphics::Image,image) =  ::lime::graphics::Image_obj::__new(null(),null(),null(),null(),null(),null(),null());
HXLINE( 518)		image->_hx___fromFile(path,onload,onerror);
HXLINE( 519)		return image;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Image_obj,fromFile,return )

 ::lime::graphics::Image Image_obj::fromImageElement( ::Dynamic image){
            	HX_STACK_FRAME("lime.graphics.Image","fromImageElement",0x196571a8,"lime.graphics.Image.fromImageElement","lime/graphics/Image.hx",527,0xc7b862ad)
            	HX_STACK_ARG(image,"image")
HXLINE( 530)		Bool _hx_tmp = hx::IsNull( image );
HXDLIN( 530)		if (_hx_tmp) {
HXLINE( 530)			return null();
            		}
HXLINE( 531)		HX_VARI(  ::lime::graphics::ImageBuffer,buffer) =  ::lime::graphics::ImageBuffer_obj::__new(null(), ::Dynamic(image->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic)), ::Dynamic(image->__Field(HX_("height",e7,07,4c,02),hx::paccDynamic)),null(),null());
HXLINE( 532)		buffer->set_src(image);
HXLINE( 533)		HX_VARI(  ::lime::graphics::Image,_image) =  ::lime::graphics::Image_obj::__new(buffer,null(),null(),null(),null(),null(),null());
HXLINE( 534)		_image->type = ::lime::graphics::ImageType_obj::CANVAS_dyn();
HXLINE( 535)		return _image;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Image_obj,fromImageElement,return )

::String Image_obj::_hx___base64Encode( ::haxe::io::Bytes bytes){
            	HX_STACK_FRAME("lime.graphics.Image","__base64Encode",0x6ec3d362,"lime.graphics.Image.__base64Encode","lime/graphics/Image.hx",1047,0xc7b862ad)
            	HX_STACK_ARG(bytes,"bytes")
HXLINE(1047)		return HX_("",00,00,00,00);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Image_obj,_hx___base64Encode,return )

Bool Image_obj::_hx___isJPG( ::haxe::io::Bytes bytes){
            	HX_STACK_FRAME("lime.graphics.Image","__isJPG",0x6ba35b1a,"lime.graphics.Image.__isJPG","lime/graphics/Image.hx",1386,0xc7b862ad)
            	HX_STACK_ARG(bytes,"bytes")
HXLINE(1386)		if ((bytes->b->__get((int)0) == (int)255)) {
HXLINE(1386)			return (bytes->b->__get((int)1) == (int)216);
            		}
            		else {
HXLINE(1386)			return false;
            		}
HXDLIN(1386)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Image_obj,_hx___isJPG,return )

Bool Image_obj::_hx___isPNG( ::haxe::io::Bytes bytes){
            	HX_STACK_FRAME("lime.graphics.Image","__isPNG",0x6ba7e6e2,"lime.graphics.Image.__isPNG","lime/graphics/Image.hx",1393,0xc7b862ad)
            	HX_STACK_ARG(bytes,"bytes")
HXLINE(1393)		Bool _hx_tmp;
HXDLIN(1393)		Bool _hx_tmp1;
HXDLIN(1393)		Bool _hx_tmp2;
HXDLIN(1393)		Bool _hx_tmp3;
HXDLIN(1393)		Bool _hx_tmp4;
HXDLIN(1393)		Bool _hx_tmp5;
HXDLIN(1393)		if ((bytes->b->__get((int)0) == (int)137)) {
HXLINE(1393)			_hx_tmp5 = (bytes->b->__get((int)1) == (int)80);
            		}
            		else {
HXLINE(1393)			_hx_tmp5 = false;
            		}
HXDLIN(1393)		if (_hx_tmp5) {
HXLINE(1393)			_hx_tmp4 = (bytes->b->__get((int)2) == (int)78);
            		}
            		else {
HXLINE(1393)			_hx_tmp4 = false;
            		}
HXDLIN(1393)		if (_hx_tmp4) {
HXLINE(1393)			_hx_tmp3 = (bytes->b->__get((int)3) == (int)71);
            		}
            		else {
HXLINE(1393)			_hx_tmp3 = false;
            		}
HXDLIN(1393)		if (_hx_tmp3) {
HXLINE(1393)			_hx_tmp2 = (bytes->b->__get((int)4) == (int)13);
            		}
            		else {
HXLINE(1393)			_hx_tmp2 = false;
            		}
HXDLIN(1393)		if (_hx_tmp2) {
HXLINE(1393)			_hx_tmp1 = (bytes->b->__get((int)5) == (int)10);
            		}
            		else {
HXLINE(1393)			_hx_tmp1 = false;
            		}
HXDLIN(1393)		if (_hx_tmp1) {
HXLINE(1393)			_hx_tmp = (bytes->b->__get((int)6) == (int)26);
            		}
            		else {
HXLINE(1393)			_hx_tmp = false;
            		}
HXDLIN(1393)		if (_hx_tmp) {
HXLINE(1393)			return (bytes->b->__get((int)7) == (int)10);
            		}
            		else {
HXLINE(1393)			return false;
            		}
HXDLIN(1393)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Image_obj,_hx___isPNG,return )

Bool Image_obj::_hx___isGIF( ::haxe::io::Bytes bytes){
            	HX_STACK_FRAME("lime.graphics.Image","__isGIF",0x6ba10e3d,"lime.graphics.Image.__isGIF","lime/graphics/Image.hx",1397,0xc7b862ad)
            	HX_STACK_ARG(bytes,"bytes")
HXLINE(1399)		Bool _hx_tmp;
HXDLIN(1399)		Bool _hx_tmp1;
HXDLIN(1399)		Bool _hx_tmp2;
HXDLIN(1399)		if ((bytes->b->__get((int)0) == (int)71)) {
HXLINE(1399)			_hx_tmp2 = (bytes->b->__get((int)1) == (int)73);
            		}
            		else {
HXLINE(1399)			_hx_tmp2 = false;
            		}
HXDLIN(1399)		if (_hx_tmp2) {
HXLINE(1399)			_hx_tmp1 = (bytes->b->__get((int)2) == (int)70);
            		}
            		else {
HXLINE(1399)			_hx_tmp1 = false;
            		}
HXDLIN(1399)		if (_hx_tmp1) {
HXLINE(1399)			_hx_tmp = (bytes->b->__get((int)3) == (int)56);
            		}
            		else {
HXLINE(1399)			_hx_tmp = false;
            		}
HXDLIN(1399)		if (_hx_tmp) {
HXLINE(1401)			HX_VARI( Int,b) = bytes->b->__get((int)4);
HXLINE(1402)			Bool _hx_tmp3;
HXDLIN(1402)			if ((b != (int)55)) {
HXLINE(1402)				_hx_tmp3 = (b == (int)57);
            			}
            			else {
HXLINE(1402)				_hx_tmp3 = true;
            			}
HXDLIN(1402)			if (_hx_tmp3) {
HXLINE(1402)				return (bytes->b->__get((int)5) == (int)97);
            			}
            			else {
HXLINE(1402)				return false;
            			}
            		}
HXLINE(1406)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Image_obj,_hx___isGIF,return )

 ::Dynamic Image_obj::lime_image_load( ::Dynamic data, ::Dynamic buffer){
            	HX_STACK_FRAME("lime.graphics.Image","lime_image_load",0x9aff9f17,"lime.graphics.Image.lime_image_load","lime/graphics/Image.hx",1638,0xc7b862ad)
            	HX_STACK_ARG(data,"data")
            	HX_STACK_ARG(buffer,"buffer")
HXLINE(1638)		 ::hx::Object * _hx_tmp = hx::DynamicPtr(data);
HXDLIN(1638)		 ::hx::Object * inVal = ( ( ::hx::Object *)(::lime::graphics::Image_obj::cffi_lime_image_load(_hx_tmp,hx::DynamicPtr(buffer))) );
HXDLIN(1638)		return Dynamic(hx::DynamicPtr(inVal));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Image_obj,lime_image_load,return )

::cpp::Function<   ::hx::Object *( ::hx::Object *, ::hx::Object *) > Image_obj::cffi_lime_image_load;


Image_obj::Image_obj()
{
}

void Image_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Image);
	HX_MARK_MEMBER_NAME(buffer,"buffer");
	HX_MARK_MEMBER_NAME(dirty,"dirty");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(offsetX,"offsetX");
	HX_MARK_MEMBER_NAME(offsetY,"offsetY");
	HX_MARK_MEMBER_NAME(rect,"rect");
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(version,"version");
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(x,"x");
	HX_MARK_MEMBER_NAME(y,"y");
	HX_MARK_END_CLASS();
}

void Image_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(buffer,"buffer");
	HX_VISIT_MEMBER_NAME(dirty,"dirty");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(offsetX,"offsetX");
	HX_VISIT_MEMBER_NAME(offsetY,"offsetY");
	HX_VISIT_MEMBER_NAME(rect,"rect");
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(version,"version");
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(x,"x");
	HX_VISIT_MEMBER_NAME(y,"y");
}

hx::Val Image_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x); }
		if (HX_FIELD_EQ(inName,"y") ) { return hx::Val( y); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"src") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_src()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_data()); }
		if (HX_FIELD_EQ(inName,"rect") ) { return hx::Val( inCallProp == hx::paccAlways ? get_rect() : rect); }
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"dirty") ) { return hx::Val( dirty); }
		if (HX_FIELD_EQ(inName,"width") ) { return hx::Val( width); }
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn()); }
		if (HX_FIELD_EQ(inName,"merge") ) { return hx::Val( merge_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"buffer") ) { return hx::Val( buffer); }
		if (HX_FIELD_EQ(inName,"format") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_format()); }
		if (HX_FIELD_EQ(inName,"height") ) { return hx::Val( height); }
		if (HX_FIELD_EQ(inName,"encode") ) { return hx::Val( encode_dyn()); }
		if (HX_FIELD_EQ(inName,"resize") ) { return hx::Val( resize_dyn()); }
		if (HX_FIELD_EQ(inName,"scroll") ) { return hx::Val( scroll_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"offsetX") ) { return hx::Val( offsetX); }
		if (HX_FIELD_EQ(inName,"offsetY") ) { return hx::Val( offsetY); }
		if (HX_FIELD_EQ(inName,"version") ) { return hx::Val( version); }
		if (HX_FIELD_EQ(inName,"get_src") ) { return hx::Val( get_src_dyn()); }
		if (HX_FIELD_EQ(inName,"set_src") ) { return hx::Val( set_src_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"fillRect") ) { return hx::Val( fillRect_dyn()); }
		if (HX_FIELD_EQ(inName,"getPixel") ) { return hx::Val( getPixel_dyn()); }
		if (HX_FIELD_EQ(inName,"setPixel") ) { return hx::Val( setPixel_dyn()); }
		if (HX_FIELD_EQ(inName,"get_data") ) { return hx::Val( get_data_dyn()); }
		if (HX_FIELD_EQ(inName,"set_data") ) { return hx::Val( set_data_dyn()); }
		if (HX_FIELD_EQ(inName,"get_rect") ) { return hx::Val( get_rect_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"floodFill") ) { return hx::Val( floodFill_dyn()); }
		if (HX_FIELD_EQ(inName,"getPixels") ) { return hx::Val( getPixels_dyn()); }
		if (HX_FIELD_EQ(inName,"setPixels") ) { return hx::Val( setPixels_dyn()); }
		if (HX_FIELD_EQ(inName,"threshold") ) { return hx::Val( threshold_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"powerOfTwo") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_powerOfTwo()); }
		if (HX_FIELD_EQ(inName,"copyPixels") ) { return hx::Val( copyPixels_dyn()); }
		if (HX_FIELD_EQ(inName,"getPixel32") ) { return hx::Val( getPixel32_dyn()); }
		if (HX_FIELD_EQ(inName,"setPixel32") ) { return hx::Val( setPixel32_dyn()); }
		if (HX_FIELD_EQ(inName,"__clipRect") ) { return hx::Val( _hx___clipRect_dyn()); }
		if (HX_FIELD_EQ(inName,"__fromFile") ) { return hx::Val( _hx___fromFile_dyn()); }
		if (HX_FIELD_EQ(inName,"get_format") ) { return hx::Val( get_format_dyn()); }
		if (HX_FIELD_EQ(inName,"set_format") ) { return hx::Val( set_format_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"transparent") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_transparent()); }
		if (HX_FIELD_EQ(inName,"copyChannel") ) { return hx::Val( copyChannel_dyn()); }
		if (HX_FIELD_EQ(inName,"__fromBytes") ) { return hx::Val( _hx___fromBytes_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__fromBase64") ) { return hx::Val( _hx___fromBase64_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"premultiplied") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_premultiplied()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"colorTransform") ) { return hx::Val( colorTransform_dyn()); }
		if (HX_FIELD_EQ(inName,"get_powerOfTwo") ) { return hx::Val( get_powerOfTwo_dyn()); }
		if (HX_FIELD_EQ(inName,"set_powerOfTwo") ) { return hx::Val( set_powerOfTwo_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"get_transparent") ) { return hx::Val( get_transparent_dyn()); }
		if (HX_FIELD_EQ(inName,"set_transparent") ) { return hx::Val( set_transparent_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__fromImageBuffer") ) { return hx::Val( _hx___fromImageBuffer_dyn()); }
		if (HX_FIELD_EQ(inName,"get_premultiplied") ) { return hx::Val( get_premultiplied_dyn()); }
		if (HX_FIELD_EQ(inName,"set_premultiplied") ) { return hx::Val( set_premultiplied_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"getColorBoundsRect") ) { return hx::Val( getColorBoundsRect_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool Image_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"__isJPG") ) { outValue = _hx___isJPG_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"__isPNG") ) { outValue = _hx___isPNG_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"__isGIF") ) { outValue = _hx___isGIF_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"fromFile") ) { outValue = fromFile_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"fromBytes") ) { outValue = fromBytes_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"fromBase64") ) { outValue = fromBase64_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fromCanvas") ) { outValue = fromCanvas_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__base64Chars") ) { outValue = _hx___base64Chars; return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"fromBitmapData") ) { outValue = fromBitmapData_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"__base64Encode") ) { outValue = _hx___base64Encode_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__base64Encoder") ) { outValue = _hx___base64Encoder; return true; }
		if (HX_FIELD_EQ(inName,"lime_image_load") ) { outValue = lime_image_load_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"fromImageElement") ) { outValue = fromImageElement_dyn(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"cffi_lime_image_load") ) { outValue = cffi_lime_image_load; return true; }
	}
	return false;
}

hx::Val Image_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< Float >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"src") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_src(inValue) ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_data(inValue) ); }
		if (HX_FIELD_EQ(inName,"rect") ) { rect=inValue.Cast<  ::lime::math::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast< ::hx::EnumBase >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"dirty") ) { dirty=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< Int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"buffer") ) { buffer=inValue.Cast<  ::lime::graphics::ImageBuffer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"format") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_format(inValue) ); }
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< Int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"offsetX") ) { offsetX=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"offsetY") ) { offsetY=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"version") ) { version=inValue.Cast< Int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"powerOfTwo") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_powerOfTwo(inValue) ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"transparent") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_transparent(inValue) ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"premultiplied") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_premultiplied(inValue) ); }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Image_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"__base64Chars") ) { _hx___base64Chars=ioValue.Cast< ::String >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__base64Encoder") ) { _hx___base64Encoder=ioValue.Cast<  ::haxe::crypto::BaseCode >(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"cffi_lime_image_load") ) { cffi_lime_image_load=ioValue.Cast< ::cpp::Function<   ::hx::Object *( ::hx::Object *, ::hx::Object *) > >(); return true; }
	}
	return false;
}

void Image_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("buffer","\x00","\xbd","\x94","\xd0"));
	outFields->push(HX_HCSTRING("data","\x2a","\x56","\x63","\x42"));
	outFields->push(HX_HCSTRING("dirty","\x12","\x50","\xd0","\xd9"));
	outFields->push(HX_HCSTRING("format","\x37","\x8f","\x8e","\xfd"));
	outFields->push(HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"));
	outFields->push(HX_HCSTRING("offsetX","\x65","\x09","\x65","\xd7"));
	outFields->push(HX_HCSTRING("offsetY","\x66","\x09","\x65","\xd7"));
	outFields->push(HX_HCSTRING("powerOfTwo","\x70","\xbe","\xae","\xea"));
	outFields->push(HX_HCSTRING("premultiplied","\x56","\xf1","\x4e","\xa4"));
	outFields->push(HX_HCSTRING("rect","\x24","\x4d","\xa7","\x4b"));
	outFields->push(HX_HCSTRING("src","\xe4","\xa6","\x57","\x00"));
	outFields->push(HX_HCSTRING("transparent","\x52","\x2b","\xba","\x22"));
	outFields->push(HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"));
	outFields->push(HX_HCSTRING("version","\x18","\xe7","\xf1","\x7c"));
	outFields->push(HX_HCSTRING("width","\x06","\xb6","\x62","\xca"));
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("y","\x79","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Image_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::lime::graphics::ImageBuffer*/ ,(int)offsetof(Image_obj,buffer),HX_HCSTRING("buffer","\x00","\xbd","\x94","\xd0")},
	{hx::fsBool,(int)offsetof(Image_obj,dirty),HX_HCSTRING("dirty","\x12","\x50","\xd0","\xd9")},
	{hx::fsInt,(int)offsetof(Image_obj,height),HX_HCSTRING("height","\xe7","\x07","\x4c","\x02")},
	{hx::fsInt,(int)offsetof(Image_obj,offsetX),HX_HCSTRING("offsetX","\x65","\x09","\x65","\xd7")},
	{hx::fsInt,(int)offsetof(Image_obj,offsetY),HX_HCSTRING("offsetY","\x66","\x09","\x65","\xd7")},
	{hx::fsObject /*::lime::math::Rectangle*/ ,(int)offsetof(Image_obj,rect),HX_HCSTRING("rect","\x24","\x4d","\xa7","\x4b")},
	{hx::fsObject /*::lime::graphics::ImageType*/ ,(int)offsetof(Image_obj,type),HX_HCSTRING("type","\xba","\xf2","\x08","\x4d")},
	{hx::fsInt,(int)offsetof(Image_obj,version),HX_HCSTRING("version","\x18","\xe7","\xf1","\x7c")},
	{hx::fsInt,(int)offsetof(Image_obj,width),HX_HCSTRING("width","\x06","\xb6","\x62","\xca")},
	{hx::fsFloat,(int)offsetof(Image_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(Image_obj,y),HX_HCSTRING("y","\x79","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Image_obj_sStaticStorageInfo[] = {
	{hx::fsString,(void *) &Image_obj::_hx___base64Chars,HX_HCSTRING("__base64Chars","\xae","\xc9","\x24","\x36")},
	{hx::fsObject /*::haxe::crypto::BaseCode*/ ,(void *) &Image_obj::_hx___base64Encoder,HX_HCSTRING("__base64Encoder","\xad","\xa4","\x42","\x7e")},
	{hx::fsObject /*Dynamic*/ ,(void *) &Image_obj::cffi_lime_image_load,HX_HCSTRING("cffi_lime_image_load","\x1b","\x6e","\x80","\x2d")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Image_obj_sMemberFields[] = {
	HX_HCSTRING("buffer","\x00","\xbd","\x94","\xd0"),
	HX_HCSTRING("dirty","\x12","\x50","\xd0","\xd9"),
	HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"),
	HX_HCSTRING("offsetX","\x65","\x09","\x65","\xd7"),
	HX_HCSTRING("offsetY","\x66","\x09","\x65","\xd7"),
	HX_HCSTRING("rect","\x24","\x4d","\xa7","\x4b"),
	HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"),
	HX_HCSTRING("version","\x18","\xe7","\xf1","\x7c"),
	HX_HCSTRING("width","\x06","\xb6","\x62","\xca"),
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("y","\x79","\x00","\x00","\x00"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("colorTransform","\x89","\xd7","\x3f","\xad"),
	HX_HCSTRING("copyChannel","\x8e","\x7d","\xe6","\x22"),
	HX_HCSTRING("copyPixels","\xc2","\x54","\x6e","\x42"),
	HX_HCSTRING("encode","\x16","\xf2","\xe3","\xf9"),
	HX_HCSTRING("fillRect","\x47","\x45","\xb9","\x6c"),
	HX_HCSTRING("floodFill","\x61","\x83","\x8a","\x59"),
	HX_HCSTRING("getColorBoundsRect","\x86","\xad","\xe8","\x80"),
	HX_HCSTRING("getPixel","\x10","\xd6","\x7a","\x22"),
	HX_HCSTRING("getPixel32","\xaf","\xa6","\x68","\xd7"),
	HX_HCSTRING("getPixels","\x63","\x78","\x00","\x09"),
	HX_HCSTRING("merge","\xb8","\xa2","\xc6","\x05"),
	HX_HCSTRING("resize","\xf4","\x59","\x7b","\x08"),
	HX_HCSTRING("scroll","\x0d","\xd8","\x64","\x47"),
	HX_HCSTRING("setPixel","\x84","\x2f","\xd8","\xd0"),
	HX_HCSTRING("setPixel32","\x23","\x45","\xe6","\xda"),
	HX_HCSTRING("setPixels","\x6f","\x64","\x51","\xec"),
	HX_HCSTRING("threshold","\xab","\xc3","\xa3","\x34"),
	HX_HCSTRING("__clipRect","\x34","\x03","\xa3","\xfb"),
	HX_HCSTRING("__fromBase64","\xb9","\x7d","\xff","\xd0"),
	HX_HCSTRING("__fromBytes","\x81","\x3b","\x4d","\xa0"),
	HX_HCSTRING("__fromFile","\x26","\x10","\xc0","\x44"),
	HX_HCSTRING("__fromImageBuffer","\x51","\x6e","\xca","\xca"),
	HX_HCSTRING("get_data","\xb3","\x11","\x1e","\xc2"),
	HX_HCSTRING("set_data","\x27","\x6b","\x7b","\x70"),
	HX_HCSTRING("get_format","\x00","\xff","\x15","\xee"),
	HX_HCSTRING("set_format","\x74","\x9d","\x93","\xf1"),
	HX_HCSTRING("get_powerOfTwo","\xb9","\x46","\xa4","\x60"),
	HX_HCSTRING("set_powerOfTwo","\x2d","\x2f","\xc4","\x80"),
	HX_HCSTRING("get_premultiplied","\xad","\xfc","\xbe","\xaa"),
	HX_HCSTRING("set_premultiplied","\xb9","\xd4","\x2c","\xce"),
	HX_HCSTRING("get_rect","\xad","\x08","\x62","\xcb"),
	HX_HCSTRING("get_src","\x7b","\x6f","\xcc","\x26"),
	HX_HCSTRING("set_src","\x87","\x00","\xce","\x19"),
	HX_HCSTRING("get_transparent","\xe9","\xe2","\x9b","\xe3"),
	HX_HCSTRING("set_transparent","\xf5","\x5f","\x67","\xdf"),
	::String(null()) };

static void Image_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Image_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Image_obj::_hx___base64Chars,"__base64Chars");
	HX_MARK_MEMBER_NAME(Image_obj::_hx___base64Encoder,"__base64Encoder");
	HX_MARK_MEMBER_NAME(Image_obj::cffi_lime_image_load,"cffi_lime_image_load");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Image_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Image_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Image_obj::_hx___base64Chars,"__base64Chars");
	HX_VISIT_MEMBER_NAME(Image_obj::_hx___base64Encoder,"__base64Encoder");
	HX_VISIT_MEMBER_NAME(Image_obj::cffi_lime_image_load,"cffi_lime_image_load");
};

#endif

hx::Class Image_obj::__mClass;

static ::String Image_obj_sStaticFields[] = {
	HX_HCSTRING("__base64Chars","\xae","\xc9","\x24","\x36"),
	HX_HCSTRING("__base64Encoder","\xad","\xa4","\x42","\x7e"),
	HX_HCSTRING("fromBase64","\x99","\x02","\x6c","\x98"),
	HX_HCSTRING("fromBitmapData","\xc3","\x07","\xed","\x2b"),
	HX_HCSTRING("fromBytes","\xa1","\xf2","\x20","\x72"),
	HX_HCSTRING("fromCanvas","\xe2","\x59","\x86","\xfb"),
	HX_HCSTRING("fromFile","\x06","\x9d","\x87","\xa1"),
	HX_HCSTRING("fromImageElement","\x2b","\x91","\x89","\x8f"),
	HX_HCSTRING("__base64Encode","\x25","\xfc","\x79","\x6c"),
	HX_HCSTRING("__isJPG","\xf7","\x37","\xad","\x2b"),
	HX_HCSTRING("__isPNG","\xbf","\xc3","\xb1","\x2b"),
	HX_HCSTRING("__isGIF","\x1a","\xeb","\xaa","\x2b"),
	HX_HCSTRING("lime_image_load","\xf4","\x20","\xad","\x9c"),
	HX_HCSTRING("cffi_lime_image_load","\x1b","\x6e","\x80","\x2d"),
	::String(null())
};

void Image_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime.graphics.Image","\x91","\x28","\xc1","\x9c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Image_obj::__GetStatic;
	__mClass->mSetStaticField = &Image_obj::__SetStatic;
	__mClass->mMarkFunc = Image_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Image_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Image_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Image_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Image_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Image_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Image_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Image_obj::__boot()
{
{
            	HX_STACK_FRAME("lime.graphics.Image","boot",0x85575d2f,"lime.graphics.Image.boot","lime/graphics/Image.hx",67,0xc7b862ad)
HXLINE(  67)		_hx___base64Chars = HX_("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",03,41,03,7f);
            	}
{
            	HX_STACK_FRAME("lime.graphics.Image","boot",0x85575d2f,"lime.graphics.Image.boot","lime/graphics/Image.hx",1638,0xc7b862ad)
HXLINE(1638)		 ::Dynamic inValue = ::cpp::Prime_obj::_loadPrime(HX_("lime",15,17,b3,47),HX_("lime_image_load",f4,20,ad,9c),HX_("ooo",4f,9b,54,00),false);
HXDLIN(1638)		cffi_lime_image_load = inValue;
            	}
}

} // end namespace lime
} // end namespace graphics
