// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime_app_Future
#include <lime/app/Future.h>
#endif
#ifndef INCLUDED_lime_app_Promise_lime_utils_Bytes
#include <lime/app/Promise_lime_utils_Bytes.h>
#endif
#ifndef INCLUDED_lime_app__Event_Dynamic_Void
#include <lime/app/_Event_Dynamic_Void.h>
#endif
#ifndef INCLUDED_lime_net_HTTPRequest
#include <lime/net/HTTPRequest.h>
#endif
#ifndef INCLUDED_lime_net_curl_CURLEasy
#include <lime/net/curl/CURLEasy.h>
#endif
#ifndef INCLUDED_lime_system_BackgroundWorker
#include <lime/system/BackgroundWorker.h>
#endif
#ifndef INCLUDED_lime_utils_Bytes
#include <lime/utils/Bytes.h>
#endif

namespace lime{
namespace net{

void HTTPRequest_obj::__construct(){
            	HX_STACK_FRAME("lime.net.HTTPRequest","new",0xc8d2372f,"lime.net.HTTPRequest.new","lime/net/HTTPRequest.hx",29,0x339db723)
            	HX_STACK_THIS(this)
HXLINE(  29)		this->promise =  ::lime::app::Promise_lime_utils_Bytes_obj::__new();
            	}

Dynamic HTTPRequest_obj::__CreateEmpty() { return new HTTPRequest_obj; }

hx::ObjectPtr< HTTPRequest_obj > HTTPRequest_obj::__new()
{
	hx::ObjectPtr< HTTPRequest_obj > _hx_result = new HTTPRequest_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic HTTPRequest_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< HTTPRequest_obj > _hx_result = new HTTPRequest_obj();
	_hx_result->__construct();
	return _hx_result;
}

 ::lime::app::Future HTTPRequest_obj::load(::String url){
            	HX_STACK_FRAME("lime.net.HTTPRequest","load",0xedd32877,"lime.net.HTTPRequest.load","lime/net/HTTPRequest.hx",34,0x339db723)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(url,"url")
HXLINE(  34)		HX_VARI(  ::lime::net::HTTPRequest,_gthis) = hx::ObjectPtr<OBJ_>(this);
HXLINE(  36)		this->bytesLoaded = (int)0;
HXLINE(  37)		this->bytesTotal = (int)0;
HXLINE(  70)		Bool _hx_tmp;
HXDLIN(  70)		Int _hx_tmp1 = url.indexOf(HX_("http://",52,75,cd,5a),null());
HXDLIN(  70)		if ((_hx_tmp1 == (int)-1)) {
HXLINE(  70)			Int _hx_tmp2 = url.indexOf(HX_("https://",cf,b4,ae,3e),null());
HXDLIN(  70)			_hx_tmp = (_hx_tmp2 == (int)-1);
            		}
            		else {
HXLINE(  70)			_hx_tmp = false;
            		}
HXDLIN(  70)		if (_hx_tmp) {
            			HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::lime::net::HTTPRequest,_gthis,::String,url) HXARGC(1)
            			void _hx_run( ::Dynamic _){
            				HX_STACK_FRAME("lime.net.HTTPRequest","load",0xedd32877,"lime.net.HTTPRequest.load","lime/net/HTTPRequest.hx",73,0x339db723)
            				HX_STACK_ARG(_,"_")
HXLINE(  75)				HX_VARI( ::String,path) = url;
HXLINE(  76)				HX_VARI( Int,index) = path.indexOf(HX_("?",3f,00,00,00),null());
HXLINE(  78)				if ((index > (int)-1)) {
HXLINE(  80)					path = path.substring((int)0,index);
            				}
HXLINE(  84)				HX_VARI(  ::lime::utils::Bytes,bytes) = ::lime::utils::Bytes_obj::readFile(path);
HXLINE(  85)				_gthis->promise->complete(bytes);
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(  72)			HX_VARI(  ::lime::_hx_system::BackgroundWorker,worker) =  ::lime::_hx_system::BackgroundWorker_obj::__new();
HXLINE(  73)			worker->doWork->add( ::Dynamic(new _hx_Closure_0(_gthis,url)),null(),null());
HXLINE(  88)			worker->run(null());
            		}
            		else {
            			HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_1, ::lime::_hx_system::BackgroundWorker,worker1,Float,curl) HXARGC(1)
            			void _hx_run( ::Dynamic _1){
            				HX_STACK_FRAME("lime.net.HTTPRequest","load",0xedd32877,"lime.net.HTTPRequest.load","lime/net/HTTPRequest.hx",116,0x339db723)
            				HX_STACK_ARG(_1,"_1")
HXLINE( 118)				HX_VARI( Int,result) = ::lime::net::curl::CURLEasy_obj::perform(curl);
HXLINE( 119)				worker1->sendComplete(result);
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_2, ::lime::net::HTTPRequest,_gthis,Float,curl) HXARGC(1)
            			void _hx_run(Int result1){
            				HX_STACK_FRAME("lime.net.HTTPRequest","load",0xedd32877,"lime.net.HTTPRequest.load","lime/net/HTTPRequest.hx",122,0x339db723)
            				HX_STACK_ARG(result1,"result1")
HXLINE( 124)				::lime::net::curl::CURLEasy_obj::getinfo(curl,(int)2097154);
HXLINE( 126)				if ((result1 == (int)0)) {
HXLINE( 128)					_gthis->promise->complete(_gthis->bytes);
            				}
            				else {
HXLINE( 132)					_gthis->promise->error(result1);
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(  92)			this->bytes = ::lime::utils::Bytes_obj::alloc((int)0);
HXLINE(  94)			this->bytesLoaded = (int)0;
HXLINE(  95)			this->bytesTotal = (int)0;
HXLINE(  97)			HX_VARI( Float,curl) = ::lime::net::curl::CURLEasy_obj::init();
HXLINE(  99)			::lime::net::curl::CURLEasy_obj::setopt(curl,(int)10002,url);
HXLINE( 100)			::lime::net::curl::CURLEasy_obj::setopt(curl,(int)80,true);
HXLINE( 102)			::lime::net::curl::CURLEasy_obj::setopt(curl,(int)52,true);
HXLINE( 103)			::lime::net::curl::CURLEasy_obj::setopt(curl,(int)58,true);
HXLINE( 104)			::lime::net::curl::CURLEasy_obj::setopt(curl,(int)10023,::cpp::VirtualArray_obj::__new(1)->init(0,HX_("Expect: ",df,c4,e1,19)));
HXLINE( 106)			::lime::net::curl::CURLEasy_obj::setopt(curl,(int)20056,this->curl_onProgress_dyn());
HXLINE( 107)			::lime::net::curl::CURLEasy_obj::setopt(curl,(int)20011,this->curl_onWrite_dyn());
HXLINE( 109)			::lime::net::curl::CURLEasy_obj::setopt(curl,(int)64,false);
HXLINE( 110)			::lime::net::curl::CURLEasy_obj::setopt(curl,(int)81,(int)0);
HXLINE( 111)			::lime::net::curl::CURLEasy_obj::setopt(curl,(int)10018,HX_("libcurl-agent/1.0",4d,41,cc,d3));
HXLINE( 112)			::lime::net::curl::CURLEasy_obj::setopt(curl,(int)78,(int)30);
HXLINE( 113)			::lime::net::curl::CURLEasy_obj::setopt(curl,(int)53,(int)0);
HXLINE( 115)			HX_VARI_NAME(  ::lime::_hx_system::BackgroundWorker,worker1,"worker") =  ::lime::_hx_system::BackgroundWorker_obj::__new();
HXLINE( 116)			worker1->doWork->add( ::Dynamic(new _hx_Closure_1(worker1,curl)),null(),null());
HXLINE( 122)			worker1->onComplete->add( ::Dynamic(new _hx_Closure_2(_gthis,curl)),null(),null());
HXLINE( 137)			worker1->run(null());
            		}
HXLINE( 143)		return this->promise->future;
            	}


HX_DEFINE_DYNAMIC_FUNC1(HTTPRequest_obj,load,return )

Int HTTPRequest_obj::curl_onProgress(Float dltotal,Float dlnow,Float uptotal,Float upnow){
            	HX_STACK_FRAME("lime.net.HTTPRequest","curl_onProgress",0x3f907eee,"lime.net.HTTPRequest.curl_onProgress","lime/net/HTTPRequest.hx",155,0x339db723)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(dltotal,"dltotal")
            	HX_STACK_ARG(dlnow,"dlnow")
            	HX_STACK_ARG(uptotal,"uptotal")
            	HX_STACK_ARG(upnow,"upnow")
HXLINE( 157)		Bool _hx_tmp;
HXDLIN( 157)		Bool _hx_tmp1;
HXDLIN( 157)		Bool _hx_tmp2;
HXDLIN( 157)		if (!((upnow > this->bytesLoaded))) {
HXLINE( 157)			_hx_tmp2 = (dlnow > this->bytesLoaded);
            		}
            		else {
HXLINE( 157)			_hx_tmp2 = true;
            		}
HXDLIN( 157)		if (!(_hx_tmp2)) {
HXLINE( 157)			_hx_tmp1 = (uptotal > this->bytesTotal);
            		}
            		else {
HXLINE( 157)			_hx_tmp1 = true;
            		}
HXDLIN( 157)		if (!(_hx_tmp1)) {
HXLINE( 157)			_hx_tmp = (dltotal > this->bytesTotal);
            		}
            		else {
HXLINE( 157)			_hx_tmp = true;
            		}
HXDLIN( 157)		if (_hx_tmp) {
HXLINE( 159)			Bool _hx_tmp3 = (upnow > this->bytesLoaded);
HXDLIN( 159)			if (_hx_tmp3) {
HXLINE( 159)				this->bytesLoaded = ::Std_obj::_hx_int(upnow);
            			}
HXLINE( 160)			Bool _hx_tmp4 = (dlnow > this->bytesLoaded);
HXDLIN( 160)			if (_hx_tmp4) {
HXLINE( 160)				this->bytesLoaded = ::Std_obj::_hx_int(dlnow);
            			}
HXLINE( 161)			Bool _hx_tmp5 = (uptotal > this->bytesTotal);
HXDLIN( 161)			if (_hx_tmp5) {
HXLINE( 161)				this->bytesTotal = ::Std_obj::_hx_int(uptotal);
            			}
HXLINE( 162)			Bool _hx_tmp6 = (dltotal > this->bytesTotal);
HXDLIN( 162)			if (_hx_tmp6) {
HXLINE( 162)				this->bytesTotal = ::Std_obj::_hx_int(dltotal);
            			}
HXLINE( 164)			Float _hx_tmp7 = ((Float)this->bytesLoaded / (Float)this->bytesTotal);
HXDLIN( 164)			this->promise->progress(_hx_tmp7);
            		}
HXLINE( 168)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC4(HTTPRequest_obj,curl_onProgress,return )

Int HTTPRequest_obj::curl_onWrite( ::lime::utils::Bytes output,Int size,Int nmemb){
            	HX_STACK_FRAME("lime.net.HTTPRequest","curl_onWrite",0xf1bb42fe,"lime.net.HTTPRequest.curl_onWrite","lime/net/HTTPRequest.hx",173,0x339db723)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(output,"output")
            	HX_STACK_ARG(size,"size")
            	HX_STACK_ARG(nmemb,"nmemb")
HXLINE( 175)		HX_VARI(  ::lime::utils::Bytes,cacheBytes) = this->bytes;
HXLINE( 176)		Int _hx_tmp = (this->bytes->length + output->length);
HXDLIN( 176)		this->bytes = ::lime::utils::Bytes_obj::alloc(_hx_tmp);
HXLINE( 177)		this->bytes->blit((int)0,cacheBytes,(int)0,cacheBytes->length);
HXLINE( 178)		this->bytes->blit(cacheBytes->length,output,(int)0,output->length);
HXLINE( 180)		return (size * nmemb);
            	}


HX_DEFINE_DYNAMIC_FUNC3(HTTPRequest_obj,curl_onWrite,return )

void HTTPRequest_obj::request_onProgress( ::Dynamic event){
            	HX_STACK_FRAME("lime.net.HTTPRequest","request_onProgress",0xb88d882d,"lime.net.HTTPRequest.request_onProgress","lime/net/HTTPRequest.hx",187,0x339db723)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(event,"event")
HXLINE( 187)		Float _hx_tmp = ((Float) ::Dynamic(event->__Field(HX_("loaded",05,48,6f,58),hx::paccDynamic)) / (Float) ::Dynamic(event->__Field(HX_("total",c4,53,32,14),hx::paccDynamic)));
HXDLIN( 187)		this->promise->progress(_hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC1(HTTPRequest_obj,request_onProgress,(void))


HTTPRequest_obj::HTTPRequest_obj()
{
}

void HTTPRequest_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(HTTPRequest);
	HX_MARK_MEMBER_NAME(bytes,"bytes");
	HX_MARK_MEMBER_NAME(bytesLoaded,"bytesLoaded");
	HX_MARK_MEMBER_NAME(bytesTotal,"bytesTotal");
	HX_MARK_MEMBER_NAME(promise,"promise");
	HX_MARK_END_CLASS();
}

void HTTPRequest_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(bytes,"bytes");
	HX_VISIT_MEMBER_NAME(bytesLoaded,"bytesLoaded");
	HX_VISIT_MEMBER_NAME(bytesTotal,"bytesTotal");
	HX_VISIT_MEMBER_NAME(promise,"promise");
}

hx::Val HTTPRequest_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"load") ) { return hx::Val( load_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"bytes") ) { return hx::Val( bytes); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"promise") ) { return hx::Val( promise); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"bytesTotal") ) { return hx::Val( bytesTotal); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bytesLoaded") ) { return hx::Val( bytesLoaded); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"curl_onWrite") ) { return hx::Val( curl_onWrite_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"curl_onProgress") ) { return hx::Val( curl_onProgress_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"request_onProgress") ) { return hx::Val( request_onProgress_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val HTTPRequest_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"bytes") ) { bytes=inValue.Cast<  ::lime::utils::Bytes >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"promise") ) { promise=inValue.Cast<  ::lime::app::Promise_lime_utils_Bytes >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"bytesTotal") ) { bytesTotal=inValue.Cast< Int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bytesLoaded") ) { bytesLoaded=inValue.Cast< Int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void HTTPRequest_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("bytes","\x6b","\x08","\x98","\xbd"));
	outFields->push(HX_HCSTRING("bytesLoaded","\xd0","\x66","\xca","\x99"));
	outFields->push(HX_HCSTRING("bytesTotal","\x59","\x57","\xda","\x45"));
	outFields->push(HX_HCSTRING("promise","\x9b","\xcd","\xe9","\xf7"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo HTTPRequest_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::lime::utils::Bytes*/ ,(int)offsetof(HTTPRequest_obj,bytes),HX_HCSTRING("bytes","\x6b","\x08","\x98","\xbd")},
	{hx::fsInt,(int)offsetof(HTTPRequest_obj,bytesLoaded),HX_HCSTRING("bytesLoaded","\xd0","\x66","\xca","\x99")},
	{hx::fsInt,(int)offsetof(HTTPRequest_obj,bytesTotal),HX_HCSTRING("bytesTotal","\x59","\x57","\xda","\x45")},
	{hx::fsObject /*::lime::app::Promise_lime_utils_Bytes*/ ,(int)offsetof(HTTPRequest_obj,promise),HX_HCSTRING("promise","\x9b","\xcd","\xe9","\xf7")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *HTTPRequest_obj_sStaticStorageInfo = 0;
#endif

static ::String HTTPRequest_obj_sMemberFields[] = {
	HX_HCSTRING("bytes","\x6b","\x08","\x98","\xbd"),
	HX_HCSTRING("bytesLoaded","\xd0","\x66","\xca","\x99"),
	HX_HCSTRING("bytesTotal","\x59","\x57","\xda","\x45"),
	HX_HCSTRING("promise","\x9b","\xcd","\xe9","\xf7"),
	HX_HCSTRING("load","\x26","\x9a","\xb7","\x47"),
	HX_HCSTRING("curl_onProgress","\x9f","\x9d","\x6b","\x99"),
	HX_HCSTRING("curl_onWrite","\xad","\x7b","\xff","\x91"),
	HX_HCSTRING("request_onProgress","\x1c","\xee","\xf7","\x02"),
	::String(null()) };

static void HTTPRequest_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(HTTPRequest_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void HTTPRequest_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(HTTPRequest_obj::__mClass,"__mClass");
};

#endif

hx::Class HTTPRequest_obj::__mClass;

void HTTPRequest_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime.net.HTTPRequest","\xbd","\x73","\x25","\x4c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = HTTPRequest_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(HTTPRequest_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< HTTPRequest_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = HTTPRequest_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = HTTPRequest_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = HTTPRequest_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace lime
} // end namespace net
