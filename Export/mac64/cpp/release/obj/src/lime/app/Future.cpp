// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_lime_app_Future
#include <lime/app/Future.h>
#endif
#ifndef INCLUDED_lime_app_Promise
#include <lime/app/Promise.h>
#endif
#ifndef INCLUDED_lime_app__Future_FutureWork
#include <lime/app/_Future/FutureWork.h>
#endif
#ifndef INCLUDED_lime_system_System
#include <lime/system/System.h>
#endif

namespace lime{
namespace app{

void Future_obj::__construct( ::Dynamic work){
            	HX_STACK_FRAME("lime.app.Future","new",0xc0e3b2bb,"lime.app.Future.new","lime/app/Future.hx",26,0x058e0853)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(work,"work")
HXLINE(  26)		Bool _hx_tmp = hx::IsNotNull( work );
HXDLIN(  26)		if (_hx_tmp) {
HXLINE(  28)			HX_VARI(  ::lime::app::Promise,promise) =  ::lime::app::Promise_obj::__new();
HXLINE(  29)			promise->future = hx::ObjectPtr<OBJ_>(this);
HXLINE(  31)			::lime::app::_Future::FutureWork_obj::queue( ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("promise",9b,cd,e9,f7),promise)
            				->setFixed(1,HX_("work",d1,01,fd,4e),work)));
            		}
            	}

Dynamic Future_obj::__CreateEmpty() { return new Future_obj; }

hx::ObjectPtr< Future_obj > Future_obj::__new( ::Dynamic work)
{
	hx::ObjectPtr< Future_obj > _hx_result = new Future_obj();
	_hx_result->__construct(work);
	return _hx_result;
}

Dynamic Future_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Future_obj > _hx_result = new Future_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

 ::lime::app::Future Future_obj::onComplete( ::Dynamic listener){
            	HX_STACK_FRAME("lime.app.Future","onComplete",0x3a7dc3fd,"lime.app.Future.onComplete","lime/app/Future.hx",38,0x058e0853)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(listener,"listener")
HXLINE(  40)		Bool _hx_tmp = hx::IsNotNull( listener );
HXDLIN(  40)		if (_hx_tmp) {
HXLINE(  42)			Bool _hx_tmp1 = this->isComplete;
HXDLIN(  42)			if (_hx_tmp1) {
HXLINE(  44)				listener(this->value);
            			}
            			else {
HXLINE(  46)				Bool _hx_tmp2 = !(this->isError);
HXDLIN(  46)				if (_hx_tmp2) {
HXLINE(  48)					Bool _hx_tmp3 = hx::IsNull( this->_hx___completeListeners );
HXDLIN(  48)					if (_hx_tmp3) {
HXLINE(  50)						this->_hx___completeListeners = ::Array_obj< ::Dynamic>::__new();
            					}
HXLINE(  54)					this->_hx___completeListeners->push(listener);
            				}
            			}
            		}
HXLINE(  60)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Future_obj,onComplete,return )

 ::lime::app::Future Future_obj::onError( ::Dynamic listener){
            	HX_STACK_FRAME("lime.app.Future","onError",0xb2071604,"lime.app.Future.onError","lime/app/Future.hx",65,0x058e0853)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(listener,"listener")
HXLINE(  67)		Bool _hx_tmp = hx::IsNotNull( listener );
HXDLIN(  67)		if (_hx_tmp) {
HXLINE(  69)			Bool _hx_tmp1 = this->isError;
HXDLIN(  69)			if (_hx_tmp1) {
HXLINE(  71)				listener(this->error);
            			}
            			else {
HXLINE(  73)				Bool _hx_tmp2 = !(this->isComplete);
HXDLIN(  73)				if (_hx_tmp2) {
HXLINE(  75)					Bool _hx_tmp3 = hx::IsNull( this->_hx___errorListeners );
HXDLIN(  75)					if (_hx_tmp3) {
HXLINE(  77)						this->_hx___errorListeners = ::Array_obj< ::Dynamic>::__new();
            					}
HXLINE(  81)					this->_hx___errorListeners->push(listener);
            				}
            			}
            		}
HXLINE(  87)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Future_obj,onError,return )

 ::lime::app::Future Future_obj::onProgress( ::Dynamic listener){
            	HX_STACK_FRAME("lime.app.Future","onProgress",0x40e0baf1,"lime.app.Future.onProgress","lime/app/Future.hx",92,0x058e0853)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(listener,"listener")
HXLINE(  94)		Bool _hx_tmp = hx::IsNotNull( listener );
HXDLIN(  94)		if (_hx_tmp) {
HXLINE(  96)			Bool _hx_tmp1 = hx::IsNull( this->_hx___progressListeners );
HXDLIN(  96)			if (_hx_tmp1) {
HXLINE(  98)				this->_hx___progressListeners = ::Array_obj< ::Dynamic>::__new();
            			}
HXLINE( 102)			this->_hx___progressListeners->push(listener);
            		}
HXLINE( 106)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Future_obj,onProgress,return )

 ::lime::app::Future Future_obj::ready(hx::Null< Int >  __o_waitTime){
Int waitTime = __o_waitTime.Default(-1);
            	HX_STACK_FRAME("lime.app.Future","ready",0xd4cc0f7e,"lime.app.Future.ready","lime/app/Future.hx",128,0x058e0853)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(waitTime,"waitTime")
HXLINE( 128)		Bool _hx_tmp;
HXDLIN( 128)		if (!(this->isComplete)) {
HXLINE( 128)			_hx_tmp = this->isError;
            		}
            		else {
HXLINE( 128)			_hx_tmp = true;
            		}
HXDLIN( 128)		if (_hx_tmp) {
HXLINE( 130)			return hx::ObjectPtr<OBJ_>(this);
            		}
            		else {
HXLINE( 134)			HX_VARI( Int,time) = ::lime::_hx_system::System_obj::getTimer();
HXLINE( 135)			HX_VAR( Int,end);
HXDLIN( 135)			if ((waitTime > (int)-1)) {
HXLINE( 135)				end = (time + waitTime);
            			}
            			else {
HXLINE( 135)				end = time;
            			}
HXLINE( 137)			while(true){
HXLINE( 137)				Bool _hx_tmp1;
HXDLIN( 137)				Bool _hx_tmp2;
HXDLIN( 137)				if (!(this->isComplete)) {
HXLINE( 137)					_hx_tmp2 = !(this->isError);
            				}
            				else {
HXLINE( 137)					_hx_tmp2 = false;
            				}
HXDLIN( 137)				if (_hx_tmp2) {
HXLINE( 137)					_hx_tmp1 = (time <= end);
            				}
            				else {
HXLINE( 137)					_hx_tmp1 = false;
            				}
HXDLIN( 137)				if (!(_hx_tmp1)) {
HXLINE( 137)					goto _hx_goto_0;
            				}
HXLINE( 140)				::Sys_obj::sleep(((Float)0.01));
HXLINE( 143)				time = ::lime::_hx_system::System_obj::getTimer();
            			}
            			_hx_goto_0:;
HXLINE( 147)			return hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE( 128)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Future_obj,ready,return )

 ::Dynamic Future_obj::result(hx::Null< Int >  __o_waitTime){
Int waitTime = __o_waitTime.Default(-1);
            	HX_STACK_FRAME("lime.app.Future","result",0x69b43162,"lime.app.Future.result","lime/app/Future.hx",156,0x058e0853)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(waitTime,"waitTime")
HXLINE( 158)		this->ready(waitTime);
HXLINE( 160)		if (this->isComplete) {
HXLINE( 162)			return this->value;
            		}
            		else {
HXLINE( 166)			return null();
            		}
HXLINE( 160)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Future_obj,result,return )

 ::lime::app::Future Future_obj::then( ::Dynamic next){
            	HX_STACK_FRAME("lime.app.Future","then",0x0a523022,"lime.app.Future.then","lime/app/Future.hx",175,0x058e0853)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(next,"next")
HXLINE( 175)		Bool _hx_tmp = this->isComplete;
HXDLIN( 175)		if (_hx_tmp) {
HXLINE( 177)			return ( ( ::lime::app::Future)(next(this->value)) );
            		}
            		else {
HXLINE( 179)			Bool _hx_tmp1 = this->isError;
HXDLIN( 179)			if (_hx_tmp1) {
HXLINE( 181)				HX_VARI(  ::lime::app::Future,future) =  ::lime::app::Future_obj::__new(null());
HXLINE( 182)				future->onError(this->error);
HXLINE( 183)				return future;
            			}
            			else {
            				HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::Dynamic,next, ::lime::app::Promise,promise) HXARGC(1)
            				void _hx_run( ::Dynamic val){
            					HX_STACK_FRAME("lime.app.Future","then",0x0a523022,"lime.app.Future.then","lime/app/Future.hx",192,0x058e0853)
            					HX_STACK_ARG(val,"val")
HXLINE( 194)					HX_VARI_NAME(  ::lime::app::Future,future1,"future") = ( ( ::lime::app::Future)(next(val)) );
HXLINE( 195)					future1->onError(promise->error_dyn());
HXLINE( 196)					future1->onComplete(promise->complete_dyn());
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 187)				HX_VARI(  ::lime::app::Promise,promise) =  ::lime::app::Promise_obj::__new();
HXLINE( 189)				this->onError(promise->error_dyn());
HXLINE( 190)				this->onProgress(promise->progress_dyn());
HXLINE( 192)				this->onComplete( ::Dynamic(new _hx_Closure_0(next,promise)));
HXLINE( 200)				return promise->future;
            			}
            		}
HXLINE( 175)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Future_obj,then,return )


Future_obj::Future_obj()
{
}

void Future_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Future);
	HX_MARK_MEMBER_NAME(error,"error");
	HX_MARK_MEMBER_NAME(isComplete,"isComplete");
	HX_MARK_MEMBER_NAME(isError,"isError");
	HX_MARK_MEMBER_NAME(value,"value");
	HX_MARK_MEMBER_NAME(_hx___completeListeners,"__completeListeners");
	HX_MARK_MEMBER_NAME(_hx___errorListeners,"__errorListeners");
	HX_MARK_MEMBER_NAME(_hx___progressListeners,"__progressListeners");
	HX_MARK_END_CLASS();
}

void Future_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(error,"error");
	HX_VISIT_MEMBER_NAME(isComplete,"isComplete");
	HX_VISIT_MEMBER_NAME(isError,"isError");
	HX_VISIT_MEMBER_NAME(value,"value");
	HX_VISIT_MEMBER_NAME(_hx___completeListeners,"__completeListeners");
	HX_VISIT_MEMBER_NAME(_hx___errorListeners,"__errorListeners");
	HX_VISIT_MEMBER_NAME(_hx___progressListeners,"__progressListeners");
}

hx::Val Future_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"then") ) { return hx::Val( then_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"error") ) { return hx::Val( error); }
		if (HX_FIELD_EQ(inName,"value") ) { return hx::Val( value); }
		if (HX_FIELD_EQ(inName,"ready") ) { return hx::Val( ready_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"result") ) { return hx::Val( result_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"isError") ) { return hx::Val( isError); }
		if (HX_FIELD_EQ(inName,"onError") ) { return hx::Val( onError_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"isComplete") ) { return hx::Val( isComplete); }
		if (HX_FIELD_EQ(inName,"onComplete") ) { return hx::Val( onComplete_dyn()); }
		if (HX_FIELD_EQ(inName,"onProgress") ) { return hx::Val( onProgress_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__errorListeners") ) { return hx::Val( _hx___errorListeners); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__completeListeners") ) { return hx::Val( _hx___completeListeners); }
		if (HX_FIELD_EQ(inName,"__progressListeners") ) { return hx::Val( _hx___progressListeners); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Future_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"error") ) { error=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"value") ) { value=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"isError") ) { isError=inValue.Cast< Bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"isComplete") ) { isComplete=inValue.Cast< Bool >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__errorListeners") ) { _hx___errorListeners=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__completeListeners") ) { _hx___completeListeners=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__progressListeners") ) { _hx___progressListeners=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Future_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("error","\xc8","\xcb","\x29","\x73"));
	outFields->push(HX_HCSTRING("isComplete","\xc3","\x12","\x77","\xfa"));
	outFields->push(HX_HCSTRING("isError","\x7e","\x6f","\xaf","\x0f"));
	outFields->push(HX_HCSTRING("value","\x71","\x7f","\xb8","\x31"));
	outFields->push(HX_HCSTRING("__completeListeners","\x66","\x0e","\x5a","\x85"));
	outFields->push(HX_HCSTRING("__errorListeners","\xb7","\x4b","\x93","\x70"));
	outFields->push(HX_HCSTRING("__progressListeners","\xf2","\x98","\xe2","\x78"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Future_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Future_obj,error),HX_HCSTRING("error","\xc8","\xcb","\x29","\x73")},
	{hx::fsBool,(int)offsetof(Future_obj,isComplete),HX_HCSTRING("isComplete","\xc3","\x12","\x77","\xfa")},
	{hx::fsBool,(int)offsetof(Future_obj,isError),HX_HCSTRING("isError","\x7e","\x6f","\xaf","\x0f")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Future_obj,value),HX_HCSTRING("value","\x71","\x7f","\xb8","\x31")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(Future_obj,_hx___completeListeners),HX_HCSTRING("__completeListeners","\x66","\x0e","\x5a","\x85")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(Future_obj,_hx___errorListeners),HX_HCSTRING("__errorListeners","\xb7","\x4b","\x93","\x70")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(Future_obj,_hx___progressListeners),HX_HCSTRING("__progressListeners","\xf2","\x98","\xe2","\x78")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Future_obj_sStaticStorageInfo = 0;
#endif

static ::String Future_obj_sMemberFields[] = {
	HX_HCSTRING("error","\xc8","\xcb","\x29","\x73"),
	HX_HCSTRING("isComplete","\xc3","\x12","\x77","\xfa"),
	HX_HCSTRING("isError","\x7e","\x6f","\xaf","\x0f"),
	HX_HCSTRING("value","\x71","\x7f","\xb8","\x31"),
	HX_HCSTRING("__completeListeners","\x66","\x0e","\x5a","\x85"),
	HX_HCSTRING("__errorListeners","\xb7","\x4b","\x93","\x70"),
	HX_HCSTRING("__progressListeners","\xf2","\x98","\xe2","\x78"),
	HX_HCSTRING("onComplete","\xf8","\xd4","\x7e","\x5d"),
	HX_HCSTRING("onError","\x29","\x6a","\x67","\x09"),
	HX_HCSTRING("onProgress","\xec","\xcb","\xe1","\x63"),
	HX_HCSTRING("ready","\x63","\xa0","\xba","\xe6"),
	HX_HCSTRING("result","\xdd","\x68","\x84","\x08"),
	HX_HCSTRING("then","\xdd","\x02","\xfc","\x4c"),
	::String(null()) };

static void Future_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Future_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Future_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Future_obj::__mClass,"__mClass");
};

#endif

hx::Class Future_obj::__mClass;

void Future_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime.app.Future","\x49","\x39","\x57","\xcb");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Future_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Future_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Future_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Future_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Future_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Future_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace lime
} // end namespace app
