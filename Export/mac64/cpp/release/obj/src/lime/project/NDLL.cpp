// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_lime_project_Haxelib
#include <lime/project/Haxelib.h>
#endif
#ifndef INCLUDED_lime_project_NDLL
#include <lime/project/NDLL.h>
#endif
#ifndef INCLUDED_lime_project_NDLLType
#include <lime/project/NDLLType.h>
#endif

namespace lime{
namespace project{

void NDLL_obj::__construct(::String name, ::lime::project::Haxelib haxelib,::hx::EnumBase type,hx::Null< Bool >  __o_registerStatics){
Bool registerStatics = __o_registerStatics.Default(true);
            	HX_STACK_FRAME("lime.project.NDLL","new",0x3869f9d6,"lime.project.NDLL.new","lime/project/NDLL.hx",19,0xc73d2d98)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(name,"name")
            	HX_STACK_ARG(haxelib,"haxelib")
            	HX_STACK_ARG(type,"type")
            	HX_STACK_ARG(registerStatics,"registerStatics")
HXLINE(  21)		this->name = name;
HXLINE(  22)		this->haxelib = haxelib;
HXLINE(  23)		::hx::EnumBase _hx_tmp;
HXDLIN(  23)		Bool _hx_tmp1 = hx::IsNull( type );
HXDLIN(  23)		if (_hx_tmp1) {
HXLINE(  23)			_hx_tmp = ::lime::project::NDLLType_obj::AUTO_dyn();
            		}
            		else {
HXLINE(  23)			_hx_tmp = type;
            		}
HXDLIN(  23)		this->type = _hx_tmp;
HXLINE(  24)		this->registerStatics = registerStatics;
            	}

Dynamic NDLL_obj::__CreateEmpty() { return new NDLL_obj; }

hx::ObjectPtr< NDLL_obj > NDLL_obj::__new(::String name, ::lime::project::Haxelib haxelib,::hx::EnumBase type,hx::Null< Bool >  __o_registerStatics)
{
	hx::ObjectPtr< NDLL_obj > _hx_result = new NDLL_obj();
	_hx_result->__construct(name,haxelib,type,__o_registerStatics);
	return _hx_result;
}

Dynamic NDLL_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< NDLL_obj > _hx_result = new NDLL_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

 ::lime::project::NDLL NDLL_obj::clone(){
            	HX_STACK_FRAME("lime.project.NDLL","clone",0x516f0653,"lime.project.NDLL.clone","lime/project/NDLL.hx",29,0xc73d2d98)
            	HX_STACK_THIS(this)
HXLINE(  31)		HX_VARI(  ::lime::project::NDLL,ndll) =  ::lime::project::NDLL_obj::__new(this->name,this->haxelib,this->type,this->registerStatics);
HXLINE(  32)		ndll->path = this->path;
HXLINE(  33)		ndll->extensionPath = this->extensionPath;
HXLINE(  34)		ndll->subdirectory = this->subdirectory;
HXLINE(  35)		return ndll;
            	}


HX_DEFINE_DYNAMIC_FUNC0(NDLL_obj,clone,return )


NDLL_obj::NDLL_obj()
{
}

void NDLL_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(NDLL);
	HX_MARK_MEMBER_NAME(extensionPath,"extensionPath");
	HX_MARK_MEMBER_NAME(haxelib,"haxelib");
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(path,"path");
	HX_MARK_MEMBER_NAME(registerStatics,"registerStatics");
	HX_MARK_MEMBER_NAME(subdirectory,"subdirectory");
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_END_CLASS();
}

void NDLL_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(extensionPath,"extensionPath");
	HX_VISIT_MEMBER_NAME(haxelib,"haxelib");
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(path,"path");
	HX_VISIT_MEMBER_NAME(registerStatics,"registerStatics");
	HX_VISIT_MEMBER_NAME(subdirectory,"subdirectory");
	HX_VISIT_MEMBER_NAME(type,"type");
}

hx::Val NDLL_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( name); }
		if (HX_FIELD_EQ(inName,"path") ) { return hx::Val( path); }
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"haxelib") ) { return hx::Val( haxelib); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"subdirectory") ) { return hx::Val( subdirectory); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"extensionPath") ) { return hx::Val( extensionPath); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"registerStatics") ) { return hx::Val( registerStatics); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val NDLL_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"path") ) { path=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast< ::hx::EnumBase >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"haxelib") ) { haxelib=inValue.Cast<  ::lime::project::Haxelib >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"subdirectory") ) { subdirectory=inValue.Cast< ::String >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"extensionPath") ) { extensionPath=inValue.Cast< ::String >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"registerStatics") ) { registerStatics=inValue.Cast< Bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void NDLL_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("extensionPath","\xc4","\xd0","\x64","\xe9"));
	outFields->push(HX_HCSTRING("haxelib","\xdf","\xb6","\x80","\x08"));
	outFields->push(HX_HCSTRING("name","\x4b","\x72","\xff","\x48"));
	outFields->push(HX_HCSTRING("path","\xa5","\xe5","\x51","\x4a"));
	outFields->push(HX_HCSTRING("registerStatics","\xe2","\x9f","\x79","\xe9"));
	outFields->push(HX_HCSTRING("subdirectory","\xed","\x18","\x6c","\x1b"));
	outFields->push(HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo NDLL_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(NDLL_obj,extensionPath),HX_HCSTRING("extensionPath","\xc4","\xd0","\x64","\xe9")},
	{hx::fsObject /*::lime::project::Haxelib*/ ,(int)offsetof(NDLL_obj,haxelib),HX_HCSTRING("haxelib","\xdf","\xb6","\x80","\x08")},
	{hx::fsString,(int)offsetof(NDLL_obj,name),HX_HCSTRING("name","\x4b","\x72","\xff","\x48")},
	{hx::fsString,(int)offsetof(NDLL_obj,path),HX_HCSTRING("path","\xa5","\xe5","\x51","\x4a")},
	{hx::fsBool,(int)offsetof(NDLL_obj,registerStatics),HX_HCSTRING("registerStatics","\xe2","\x9f","\x79","\xe9")},
	{hx::fsString,(int)offsetof(NDLL_obj,subdirectory),HX_HCSTRING("subdirectory","\xed","\x18","\x6c","\x1b")},
	{hx::fsObject /*::lime::project::NDLLType*/ ,(int)offsetof(NDLL_obj,type),HX_HCSTRING("type","\xba","\xf2","\x08","\x4d")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *NDLL_obj_sStaticStorageInfo = 0;
#endif

static ::String NDLL_obj_sMemberFields[] = {
	HX_HCSTRING("extensionPath","\xc4","\xd0","\x64","\xe9"),
	HX_HCSTRING("haxelib","\xdf","\xb6","\x80","\x08"),
	HX_HCSTRING("name","\x4b","\x72","\xff","\x48"),
	HX_HCSTRING("path","\xa5","\xe5","\x51","\x4a"),
	HX_HCSTRING("registerStatics","\xe2","\x9f","\x79","\xe9"),
	HX_HCSTRING("subdirectory","\xed","\x18","\x6c","\x1b"),
	HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	::String(null()) };

static void NDLL_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(NDLL_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void NDLL_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(NDLL_obj::__mClass,"__mClass");
};

#endif

hx::Class NDLL_obj::__mClass;

void NDLL_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime.project.NDLL","\xe4","\x16","\x0f","\x4e");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = NDLL_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(NDLL_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< NDLL_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = NDLL_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = NDLL_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = NDLL_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace lime
} // end namespace project
