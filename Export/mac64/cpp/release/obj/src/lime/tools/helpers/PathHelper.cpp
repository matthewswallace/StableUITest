// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_io_Path
#include <haxe/io/Path.h>
#endif
#ifndef INCLUDED_lime_project_Architecture
#include <lime/project/Architecture.h>
#endif
#ifndef INCLUDED_lime_project_Haxelib
#include <lime/project/Haxelib.h>
#endif
#ifndef INCLUDED_lime_project_NDLL
#include <lime/project/NDLL.h>
#endif
#ifndef INCLUDED_lime_tools_helpers_LogHelper
#include <lime/tools/helpers/LogHelper.h>
#endif
#ifndef INCLUDED_lime_tools_helpers_PathHelper
#include <lime/tools/helpers/PathHelper.h>
#endif
#ifndef INCLUDED_lime_tools_helpers_PlatformHelper
#include <lime/tools/helpers/PlatformHelper.h>
#endif
#ifndef INCLUDED_lime_tools_helpers_ProcessHelper
#include <lime/tools/helpers/ProcessHelper.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif

namespace lime{
namespace tools{
namespace helpers{

void PathHelper_obj::__construct() { }

Dynamic PathHelper_obj::__CreateEmpty() { return new PathHelper_obj; }

hx::ObjectPtr< PathHelper_obj > PathHelper_obj::__new()
{
	hx::ObjectPtr< PathHelper_obj > _hx_result = new PathHelper_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic PathHelper_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< PathHelper_obj > _hx_result = new PathHelper_obj();
	_hx_result->__construct();
	return _hx_result;
}

 ::haxe::ds::StringMap PathHelper_obj::haxelibOverrides;

 ::haxe::ds::StringMap PathHelper_obj::haxelibPaths;

::String PathHelper_obj::combine(::String firstPath,::String secondPath){
            	HX_STACK_FRAME("lime.tools.helpers.PathHelper","combine",0x5345b499,"lime.tools.helpers.PathHelper.combine","lime/tools/helpers/PathHelper.hx",25,0xca1d8093)
            	HX_STACK_ARG(firstPath,"firstPath")
            	HX_STACK_ARG(secondPath,"secondPath")
HXLINE(  25)		Bool _hx_tmp;
HXDLIN(  25)		Bool _hx_tmp1 = hx::IsNotNull( firstPath );
HXDLIN(  25)		if (_hx_tmp1) {
HXLINE(  25)			_hx_tmp = (firstPath == HX_("",00,00,00,00));
            		}
            		else {
HXLINE(  25)			_hx_tmp = true;
            		}
HXDLIN(  25)		if (_hx_tmp) {
HXLINE(  27)			return secondPath;
            		}
            		else {
HXLINE(  29)			Bool _hx_tmp2;
HXDLIN(  29)			Bool _hx_tmp3 = hx::IsNotNull( secondPath );
HXDLIN(  29)			if (_hx_tmp3) {
HXLINE(  29)				_hx_tmp2 = (secondPath != HX_("",00,00,00,00));
            			}
            			else {
HXLINE(  29)				_hx_tmp2 = false;
            			}
HXDLIN(  29)			if (_hx_tmp2) {
HXLINE(  31)				::String _hx_tmp4 = ::lime::tools::helpers::PlatformHelper_obj::get_hostPlatform();
HXDLIN(  31)				if ((_hx_tmp4 == HX_("windows",83,de,74,e8))) {
HXLINE(  33)					Int _hx_tmp5 = secondPath.indexOf(HX_(":",3a,00,00,00),null());
HXDLIN(  33)					if ((_hx_tmp5 == (int)1)) {
HXLINE(  35)						return secondPath;
            					}
            				}
            				else {
HXLINE(  41)					::String _hx_tmp6 = secondPath.substr((int)0,(int)1);
HXDLIN(  41)					if ((_hx_tmp6 == HX_("/",2f,00,00,00))) {
HXLINE(  43)						return secondPath;
            					}
            				}
HXLINE(  49)				HX_VAR( Bool,firstSlash);
HXDLIN(  49)				::String _hx_tmp7 = firstPath.substr((int)-1,null());
HXDLIN(  49)				if ((_hx_tmp7 != HX_("/",2f,00,00,00))) {
HXLINE(  49)					::String _hx_tmp8 = firstPath.substr((int)-1,null());
HXDLIN(  49)					firstSlash = (_hx_tmp8 == HX_("\\",5c,00,00,00));
            				}
            				else {
HXLINE(  49)					firstSlash = true;
            				}
HXLINE(  50)				HX_VAR( Bool,secondSlash);
HXDLIN(  50)				::String _hx_tmp9 = secondPath.substr((int)0,(int)1);
HXDLIN(  50)				if ((_hx_tmp9 != HX_("/",2f,00,00,00))) {
HXLINE(  50)					::String _hx_tmp10 = secondPath.substr((int)0,(int)1);
HXDLIN(  50)					secondSlash = (_hx_tmp10 == HX_("\\",5c,00,00,00));
            				}
            				else {
HXLINE(  50)					secondSlash = true;
            				}
HXLINE(  52)				Bool _hx_tmp11;
HXDLIN(  52)				if (firstSlash) {
HXLINE(  52)					_hx_tmp11 = secondSlash;
            				}
            				else {
HXLINE(  52)					_hx_tmp11 = false;
            				}
HXDLIN(  52)				if (_hx_tmp11) {
HXLINE(  54)					::String _hx_tmp12 = secondPath.substr((int)1,null());
HXDLIN(  54)					return (firstPath + _hx_tmp12);
            				}
            				else {
HXLINE(  56)					Bool _hx_tmp13;
HXDLIN(  56)					if (!(firstSlash)) {
HXLINE(  56)						_hx_tmp13 = !(secondSlash);
            					}
            					else {
HXLINE(  56)						_hx_tmp13 = false;
            					}
HXDLIN(  56)					if (_hx_tmp13) {
HXLINE(  58)						return ((firstPath + HX_("/",2f,00,00,00)) + secondPath);
            					}
            					else {
HXLINE(  62)						return (firstPath + secondPath);
            					}
            				}
            			}
            			else {
HXLINE(  68)				return firstPath;
            			}
            		}
HXLINE(  25)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(PathHelper_obj,combine,return )

::String PathHelper_obj::escape(::String path){
            	HX_STACK_FRAME("lime.tools.helpers.PathHelper","escape",0xb962faa7,"lime.tools.helpers.PathHelper.escape","lime/tools/helpers/PathHelper.hx",75,0xca1d8093)
            	HX_STACK_ARG(path,"path")
HXLINE(  77)		::String _hx_tmp = ::lime::tools::helpers::PlatformHelper_obj::get_hostPlatform();
HXDLIN(  77)		if ((_hx_tmp != HX_("windows",83,de,74,e8))) {
HXLINE(  79)			path = ::StringTools_obj::replace(path,HX_("\\ ",44,50,00,00),HX_(" ",20,00,00,00));
HXLINE(  80)			path = ::StringTools_obj::replace(path,HX_(" ",20,00,00,00),HX_("\\ ",44,50,00,00));
HXLINE(  81)			path = ::StringTools_obj::replace(path,HX_("\\'",4b,50,00,00),HX_("'",27,00,00,00));
HXLINE(  82)			path = ::StringTools_obj::replace(path,HX_("'",27,00,00,00),HX_("\\'",4b,50,00,00));
            		}
            		else {
HXLINE(  86)			path = ::StringTools_obj::replace(path,HX_("^,",0e,52,00,00),HX_(",",2c,00,00,00));
HXLINE(  87)			path = ::StringTools_obj::replace(path,HX_(",",2c,00,00,00),HX_("^,",0e,52,00,00));
            		}
HXLINE(  91)		return ::lime::tools::helpers::PathHelper_obj::expand(path);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(PathHelper_obj,escape,return )

::String PathHelper_obj::expand(::String path){
            	HX_STACK_FRAME("lime.tools.helpers.PathHelper","expand",0xa2fba580,"lime.tools.helpers.PathHelper.expand","lime/tools/helpers/PathHelper.hx",96,0xca1d8093)
            	HX_STACK_ARG(path,"path")
HXLINE(  98)		Bool _hx_tmp = hx::IsNull( path );
HXDLIN(  98)		if (_hx_tmp) {
HXLINE( 100)			path = HX_("",00,00,00,00);
            		}
HXLINE( 104)		::String _hx_tmp1 = ::lime::tools::helpers::PlatformHelper_obj::get_hostPlatform();
HXDLIN( 104)		if ((_hx_tmp1 != HX_("windows",83,de,74,e8))) {
HXLINE( 106)			Bool _hx_tmp2 = ::StringTools_obj::startsWith(path,HX_("~/",f1,6d,00,00));
HXDLIN( 106)			if (_hx_tmp2) {
HXLINE( 108)				::String _hx_tmp3 = ::Sys_obj::getEnv(HX_("HOME",1f,92,d3,2f));
HXDLIN( 108)				::String _hx_tmp4 = (_hx_tmp3 + HX_("/",2f,00,00,00));
HXDLIN( 108)				::String _hx_tmp5 = path.substr((int)2,null());
HXDLIN( 108)				path = (_hx_tmp4 + _hx_tmp5);
            			}
            		}
HXLINE( 114)		return path;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(PathHelper_obj,expand,return )

::String PathHelper_obj::findTemplate(::Array< ::String > templatePaths,::String path,hx::Null< Bool >  __o_warnIfNotFound){
Bool warnIfNotFound = __o_warnIfNotFound.Default(true);
            	HX_STACK_FRAME("lime.tools.helpers.PathHelper","findTemplate",0x12616d39,"lime.tools.helpers.PathHelper.findTemplate","lime/tools/helpers/PathHelper.hx",119,0xca1d8093)
            	HX_STACK_ARG(templatePaths,"templatePaths")
            	HX_STACK_ARG(path,"path")
            	HX_STACK_ARG(warnIfNotFound,"warnIfNotFound")
HXLINE( 121)		HX_VARI( ::Array< ::String >,matches) = ::lime::tools::helpers::PathHelper_obj::findTemplates(templatePaths,path,warnIfNotFound);
HXLINE( 123)		if ((matches->length > (int)0)) {
HXLINE( 125)			return matches->__get((matches->length - (int)1));
            		}
HXLINE( 129)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(PathHelper_obj,findTemplate,return )

::Array< ::String > PathHelper_obj::findTemplates(::Array< ::String > templatePaths,::String path,hx::Null< Bool >  __o_warnIfNotFound){
Bool warnIfNotFound = __o_warnIfNotFound.Default(true);
            	HX_STACK_FRAME("lime.tools.helpers.PathHelper","findTemplates",0x02de251a,"lime.tools.helpers.PathHelper.findTemplates","lime/tools/helpers/PathHelper.hx",134,0xca1d8093)
            	HX_STACK_ARG(templatePaths,"templatePaths")
            	HX_STACK_ARG(path,"path")
            	HX_STACK_ARG(warnIfNotFound,"warnIfNotFound")
HXLINE( 136)		HX_VARI( ::Array< ::String >,matches) = ::Array_obj< ::String >::__new(0);
HXLINE( 138)		{
HXLINE( 138)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 138)			while((_g < templatePaths->length)){
HXLINE( 138)				HX_VARI( ::String,templatePath) = templatePaths->__get(_g);
HXDLIN( 138)				++_g;
HXLINE( 140)				HX_VARI( ::String,targetPath) = ::lime::tools::helpers::PathHelper_obj::combine(templatePath,path);
HXLINE( 142)				Bool _hx_tmp = ::sys::FileSystem_obj::exists(targetPath);
HXDLIN( 142)				if (_hx_tmp) {
HXLINE( 144)					matches->push(targetPath);
            				}
            			}
            		}
HXLINE( 150)		Bool _hx_tmp1;
HXDLIN( 150)		if ((matches->length == (int)0)) {
HXLINE( 150)			_hx_tmp1 = warnIfNotFound;
            		}
            		else {
HXLINE( 150)			_hx_tmp1 = false;
            		}
HXDLIN( 150)		if (_hx_tmp1) {
HXLINE( 152)			::lime::tools::helpers::LogHelper_obj::warn((HX_("Could not find template file: ",ad,ec,5b,03) + path),null(),null());
            		}
HXLINE( 156)		return matches;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(PathHelper_obj,findTemplates,return )

::String PathHelper_obj::getHaxelib( ::lime::project::Haxelib haxelib,hx::Null< Bool >  __o_validate,hx::Null< Bool >  __o_clearCache){
Bool validate = __o_validate.Default(false);
Bool clearCache = __o_clearCache.Default(false);
            	HX_STACK_FRAME("lime.tools.helpers.PathHelper","getHaxelib",0x4fcc7f0f,"lime.tools.helpers.PathHelper.getHaxelib","lime/tools/helpers/PathHelper.hx",161,0xca1d8093)
            	HX_STACK_ARG(haxelib,"haxelib")
            	HX_STACK_ARG(validate,"validate")
            	HX_STACK_ARG(clearCache,"clearCache")
HXLINE( 163)		HX_VARI( ::String,name) = haxelib->name;
HXLINE( 165)		Bool _hx_tmp = ::lime::tools::helpers::PathHelper_obj::haxelibOverrides->exists(name);
HXDLIN( 165)		if (_hx_tmp) {
HXLINE( 167)			return ( (::String)(::lime::tools::helpers::PathHelper_obj::haxelibOverrides->get(name)) );
            		}
HXLINE( 171)		if ((haxelib->version != HX_("",00,00,00,00))) {
HXLINE( 173)			hx::AddEq(name,(HX_(":",3a,00,00,00) + haxelib->version));
            		}
HXLINE( 177)		if (clearCache) {
HXLINE( 179)			::lime::tools::helpers::PathHelper_obj::haxelibPaths->remove(name);
            		}
HXLINE( 183)		Bool _hx_tmp1 = !(::lime::tools::helpers::PathHelper_obj::haxelibPaths->exists(name));
HXDLIN( 183)		if (_hx_tmp1) {
HXLINE( 185)			HX_VARI( Bool,cache) = ::lime::tools::helpers::LogHelper_obj::verbose;
HXLINE( 186)			::lime::tools::helpers::LogHelper_obj::verbose = false;
HXLINE( 187)			HX_VARI( ::String,output) = HX_("",00,00,00,00);
HXLINE( 189)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 191)				HX_VARI( Bool,cacheDryRun) = ::lime::tools::helpers::ProcessHelper_obj::dryRun;
HXLINE( 192)				::lime::tools::helpers::ProcessHelper_obj::dryRun = false;
HXLINE( 194)				::String _hx_tmp2 = ::Sys_obj::getEnv(HX_("HAXEPATH",cb,b4,43,c4));
HXDLIN( 194)				output = ::lime::tools::helpers::ProcessHelper_obj::runProcess(_hx_tmp2,HX_("haxelib",df,b6,80,08),::Array_obj< ::String >::__new(2)->init(0,HX_("path",a5,e5,51,4a))->init(1,name),true,true,true,null());
HXLINE( 195)				Bool _hx_tmp3 = hx::IsNull( output );
HXDLIN( 195)				if (_hx_tmp3) {
HXLINE( 195)					output = HX_("",00,00,00,00);
            				}
HXLINE( 197)				::lime::tools::helpers::ProcessHelper_obj::dryRun = cacheDryRun;
            			}
            			catch( ::Dynamic _hx_e){
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic e = _hx_e;
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
HXLINE( 201)			::lime::tools::helpers::LogHelper_obj::verbose = cache;
HXLINE( 203)			HX_VARI( ::Array< ::String >,lines) = output.split(HX_("\n",0a,00,00,00));
HXLINE( 204)			HX_VARI( ::String,result) = HX_("",00,00,00,00);
HXLINE( 206)			{
HXLINE( 206)				HX_VARI( Int,_g1) = (int)1;
HXDLIN( 206)				HX_VARI( Int,_g) = lines->length;
HXDLIN( 206)				while((_g1 < _g)){
HXLINE( 206)					HX_VARI( Int,i) = _g1++;
HXLINE( 208)					::String _hx_tmp4 = lines->__get(i);
HXDLIN( 208)					HX_VARI( ::String,trim) = ::StringTools_obj::trim(_hx_tmp4);
HXLINE( 210)					Bool _hx_tmp5;
HXDLIN( 210)					if ((trim != (HX_("-D ",c9,60,22,00) + haxelib->name))) {
HXLINE( 210)						_hx_tmp5 = ::StringTools_obj::startsWith(trim,((HX_("-D ",c9,60,22,00) + haxelib->name) + HX_("=",3d,00,00,00)));
            					}
            					else {
HXLINE( 210)						_hx_tmp5 = true;
            					}
HXDLIN( 210)					if (_hx_tmp5) {
HXLINE( 212)						::String _hx_tmp6 = lines->__get((i - (int)1));
HXDLIN( 212)						result = ::StringTools_obj::trim(_hx_tmp6);
            					}
            				}
            			}
HXLINE( 218)			if ((result == HX_("",00,00,00,00))) {
HXLINE( 220)				try {
            					HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 222)					HX_VARI_NAME( Int,_g2,"_g") = (int)0;
HXDLIN( 222)					while((_g2 < lines->length)){
HXLINE( 222)						HX_VARI( ::String,line) = lines->__get(_g2);
HXDLIN( 222)						++_g2;
HXLINE( 224)						Bool _hx_tmp7;
HXDLIN( 224)						if ((line != HX_("",00,00,00,00))) {
HXLINE( 224)							::String _hx_tmp8 = line.substr((int)0,(int)1);
HXDLIN( 224)							_hx_tmp7 = (_hx_tmp8 != HX_("-",2d,00,00,00));
            						}
            						else {
HXLINE( 224)							_hx_tmp7 = false;
            						}
HXDLIN( 224)						if (_hx_tmp7) {
HXLINE( 226)							Bool _hx_tmp9 = ::sys::FileSystem_obj::exists(line);
HXDLIN( 226)							if (_hx_tmp9) {
HXLINE( 228)								result = line;
HXLINE( 229)								goto _hx_goto_2;
            							}
            						}
            					}
            					_hx_goto_2:;
            				}
            				catch( ::Dynamic _hx_e){
            					if (_hx_e.IsClass<  ::Dynamic >() ){
            						HX_STACK_BEGIN_CATCH
            						 ::Dynamic e1 = _hx_e;
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
            			}
HXLINE( 241)			if (validate) {
HXLINE( 243)				if ((result == HX_("",00,00,00,00))) {
HXLINE( 245)					Int _hx_tmp10 = output.indexOf(HX_("does not have",dc,fc,4e,07),null());
HXDLIN( 245)					if ((_hx_tmp10 > (int)-1)) {
HXLINE( 247)						HX_VARI( ::String,directoryName) = HX_("",00,00,00,00);
HXLINE( 249)						::String _hx_tmp11 = ::lime::tools::helpers::PlatformHelper_obj::get_hostPlatform();
HXDLIN( 249)						if ((_hx_tmp11 == HX_("windows",83,de,74,e8))) {
HXLINE( 251)							directoryName = HX_("Windows",63,06,c6,b5);
            						}
            						else {
HXLINE( 253)							::String _hx_tmp12 = ::lime::tools::helpers::PlatformHelper_obj::get_hostPlatform();
HXDLIN( 253)							if ((_hx_tmp12 == HX_("mac",8f,0a,53,00))) {
HXLINE( 255)								::hx::EnumBase _hx_tmp13 = ::lime::tools::helpers::PlatformHelper_obj::get_hostArchitecture();
HXDLIN( 255)								if (hx::IsEq( _hx_tmp13,::lime::project::Architecture_obj::X64_dyn() )) {
HXLINE( 255)									directoryName = HX_("Mac64",6d,ab,43,96);
            								}
            								else {
HXLINE( 255)									directoryName = HX_("Mac",6f,c2,3a,00);
            								}
            							}
            							else {
HXLINE( 259)								::hx::EnumBase _hx_tmp14 = ::lime::tools::helpers::PlatformHelper_obj::get_hostArchitecture();
HXDLIN( 259)								if (hx::IsEq( _hx_tmp14,::lime::project::Architecture_obj::X64_dyn() )) {
HXLINE( 259)									directoryName = HX_("Linux64",12,28,9d,f7);
            								}
            								else {
HXLINE( 259)									directoryName = HX_("Linux",d4,5b,2f,08);
            								}
            							}
            						}
HXLINE( 263)						::lime::tools::helpers::LogHelper_obj::error(((((HX_("haxelib \"",a1,88,43,b3) + haxelib->name) + HX_("\" does not have an \"ndll/",68,64,dd,cd)) + directoryName) + HX_("\" directory",ef,2c,1e,37)),null(),null());
            					}
            					else {
HXLINE( 265)						Bool _hx_tmp15;
HXDLIN( 265)						Int _hx_tmp16 = output.indexOf(HX_("haxelib install ",06,b8,a3,11),null());
HXDLIN( 265)						if ((_hx_tmp16 > (int)-1)) {
HXLINE( 265)							Int _hx_tmp17 = output.indexOf((HX_("haxelib install ",06,b8,a3,11) + haxelib->name),null());
HXDLIN( 265)							_hx_tmp15 = (_hx_tmp17 == (int)-1);
            						}
            						else {
HXLINE( 265)							_hx_tmp15 = false;
            						}
HXDLIN( 265)						if (_hx_tmp15) {
HXLINE( 267)							Int _hx_tmp18 = output.indexOf(HX_("haxelib install ",06,b8,a3,11),null());
HXDLIN( 267)							HX_VARI( Int,start) = (_hx_tmp18 + (int)16);
HXLINE( 268)							HX_VARI( Int,end) = output.lastIndexOf(HX_("'",27,00,00,00),null());
HXLINE( 269)							HX_VARI( ::String,dependencyName) = output.substring(start,end);
HXLINE( 271)							::lime::tools::helpers::LogHelper_obj::error(((((HX_("Could not find haxelib \"",46,48,a5,87) + dependencyName) + HX_("\" (dependency of \"",e4,90,be,da)) + haxelib->name) + HX_("\"), does it need to be installed?",1e,95,ec,6a)),null(),null());
            						}
            						else {
HXLINE( 275)							if ((haxelib->version != HX_("",00,00,00,00))) {
HXLINE( 277)								::lime::tools::helpers::LogHelper_obj::error(((((HX_("Could not find haxelib \"",46,48,a5,87) + haxelib->name) + HX_("\" version \"",9c,33,65,31)) + haxelib->version) + HX_("\", does it need to be installed?",23,ab,b4,7d)),null(),null());
            							}
            							else {
HXLINE( 281)								::lime::tools::helpers::LogHelper_obj::error(((HX_("Could not find haxelib \"",46,48,a5,87) + haxelib->name) + HX_("\", does it need to be installed?",23,ab,b4,7d)),null(),null());
            							}
            						}
            					}
            				}
            			}
HXLINE( 291)			::lime::tools::helpers::PathHelper_obj::haxelibPaths->set(name,result);
            		}
HXLINE( 295)		return ( (::String)(::lime::tools::helpers::PathHelper_obj::haxelibPaths->get(name)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(PathHelper_obj,getHaxelib,return )

::String PathHelper_obj::getLibraryPath( ::lime::project::NDLL ndll,::String directoryName,::String __o_namePrefix,::String __o_nameSuffix,hx::Null< Bool >  __o_allowDebug){
::String namePrefix = __o_namePrefix.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
::String nameSuffix = __o_nameSuffix.Default(HX_HCSTRING(".ndll","\x64","\x67","\x70","\xc5"));
Bool allowDebug = __o_allowDebug.Default(false);
            	HX_STACK_FRAME("lime.tools.helpers.PathHelper","getLibraryPath",0xbc457270,"lime.tools.helpers.PathHelper.getLibraryPath","lime/tools/helpers/PathHelper.hx",300,0xca1d8093)
            	HX_STACK_ARG(ndll,"ndll")
            	HX_STACK_ARG(directoryName,"directoryName")
            	HX_STACK_ARG(namePrefix,"namePrefix")
            	HX_STACK_ARG(nameSuffix,"nameSuffix")
            	HX_STACK_ARG(allowDebug,"allowDebug")
HXLINE( 302)		HX_VARI( Bool,usingDebug) = false;
HXLINE( 303)		HX_VARI( ::String,path) = HX_("",00,00,00,00);
HXLINE( 305)		if (allowDebug) {
HXLINE( 307)			path = ::lime::tools::helpers::PathHelper_obj::searchForLibrary(ndll,directoryName,(((namePrefix + ndll->name) + HX_("-debug",06,8f,2e,d5)) + nameSuffix));
HXLINE( 308)			usingDebug = ::sys::FileSystem_obj::exists(path);
            		}
HXLINE( 312)		if (!(usingDebug)) {
HXLINE( 314)			path = ::lime::tools::helpers::PathHelper_obj::searchForLibrary(ndll,directoryName,((namePrefix + ndll->name) + nameSuffix));
            		}
HXLINE( 318)		return path;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(PathHelper_obj,getLibraryPath,return )

::String PathHelper_obj::getTemporaryFile(::String __o_extension){
::String extension = __o_extension.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
            	HX_STACK_FRAME("lime.tools.helpers.PathHelper","getTemporaryFile",0x8ce4ecdd,"lime.tools.helpers.PathHelper.getTemporaryFile","lime/tools/helpers/PathHelper.hx",323,0xca1d8093)
            	HX_STACK_ARG(extension,"extension")
HXLINE( 325)		HX_VARI( ::String,path) = HX_("",00,00,00,00);
HXLINE( 327)		::String _hx_tmp = ::lime::tools::helpers::PlatformHelper_obj::get_hostPlatform();
HXDLIN( 327)		if ((_hx_tmp == HX_("windows",83,de,74,e8))) {
HXLINE( 329)			path = ::Sys_obj::getEnv(HX_("TEMP",14,8b,ba,37));
            		}
            		else {
HXLINE( 333)			path = ::Sys_obj::getEnv(HX_("TMPDIR",d6,e4,e9,20));
HXLINE( 335)			Bool _hx_tmp1 = hx::IsNull( path );
HXDLIN( 335)			if (_hx_tmp1) {
HXLINE( 337)				path = HX_("/tmp",08,6c,69,1f);
            			}
            		}
HXLINE( 343)		Float _hx_tmp2 = ::Math_obj::random();
HXDLIN( 343)		Int _hx_tmp3 = ::Math_obj::round(((int)16777215 * _hx_tmp2));
HXDLIN( 343)		hx::AddEq(path,((HX_("/temp_",3c,e4,56,d8) + _hx_tmp3) + extension));
HXLINE( 345)		Bool _hx_tmp4 = ::sys::FileSystem_obj::exists(path);
HXDLIN( 345)		if (_hx_tmp4) {
HXLINE( 347)			return ::lime::tools::helpers::PathHelper_obj::getTemporaryFile(extension);
            		}
HXLINE( 351)		return path;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(PathHelper_obj,getTemporaryFile,return )

::String PathHelper_obj::getTemporaryDirectory(){
            	HX_STACK_FRAME("lime.tools.helpers.PathHelper","getTemporaryDirectory",0x6fed146c,"lime.tools.helpers.PathHelper.getTemporaryDirectory","lime/tools/helpers/PathHelper.hx",356,0xca1d8093)
HXLINE( 358)		HX_VARI( ::String,path) = ::lime::tools::helpers::PathHelper_obj::getTemporaryFile(null());
HXLINE( 359)		::lime::tools::helpers::PathHelper_obj::mkdir(path);
HXLINE( 360)		return path;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(PathHelper_obj,getTemporaryDirectory,return )

Bool PathHelper_obj::isAbsolute(::String path){
            	HX_STACK_FRAME("lime.tools.helpers.PathHelper","isAbsolute",0x362f22a7,"lime.tools.helpers.PathHelper.isAbsolute","lime/tools/helpers/PathHelper.hx",365,0xca1d8093)
            	HX_STACK_ARG(path,"path")
HXLINE( 367)		Bool _hx_tmp;
HXDLIN( 367)		Bool _hx_tmp1 = !(::StringTools_obj::startsWith(path,HX_("/",2f,00,00,00)));
HXDLIN( 367)		if (_hx_tmp1) {
HXLINE( 367)			_hx_tmp = ::StringTools_obj::startsWith(path,HX_("\\",5c,00,00,00));
            		}
            		else {
HXLINE( 367)			_hx_tmp = true;
            		}
HXDLIN( 367)		if (_hx_tmp) {
HXLINE( 369)			return true;
            		}
HXLINE( 373)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(PathHelper_obj,isAbsolute,return )

Bool PathHelper_obj::isRelative(::String path){
            	HX_STACK_FRAME("lime.tools.helpers.PathHelper","isRelative",0xa86e10fc,"lime.tools.helpers.PathHelper.isRelative","lime/tools/helpers/PathHelper.hx",380,0xca1d8093)
            	HX_STACK_ARG(path,"path")
HXLINE( 380)		return !(::lime::tools::helpers::PathHelper_obj::isAbsolute(path));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(PathHelper_obj,isRelative,return )

void PathHelper_obj::mkdir(::String directory){
            	HX_STACK_FRAME("lime.tools.helpers.PathHelper","mkdir",0x4afc3c49,"lime.tools.helpers.PathHelper.mkdir","lime/tools/helpers/PathHelper.hx",385,0xca1d8093)
            	HX_STACK_ARG(directory,"directory")
HXLINE( 387)		directory = ::StringTools_obj::replace(directory,HX_("\\",5c,00,00,00),HX_("/",2f,00,00,00));
HXLINE( 388)		HX_VARI( ::String,total) = HX_("",00,00,00,00);
HXLINE( 390)		::String _hx_tmp = directory.substr((int)0,(int)1);
HXDLIN( 390)		if ((_hx_tmp == HX_("/",2f,00,00,00))) {
HXLINE( 392)			total = HX_("/",2f,00,00,00);
            		}
HXLINE( 396)		HX_VARI( ::Array< ::String >,parts) = directory.split(HX_("/",2f,00,00,00));
HXLINE( 397)		HX_VARI( ::String,oldPath) = HX_("",00,00,00,00);
HXLINE( 399)		Bool _hx_tmp1;
HXDLIN( 399)		Bool _hx_tmp2 = (parts->length > (int)0);
HXDLIN( 399)		if (_hx_tmp2) {
HXLINE( 399)			Int _hx_tmp3 = parts->__get((int)0).indexOf(HX_(":",3a,00,00,00),null());
HXDLIN( 399)			_hx_tmp1 = (_hx_tmp3 > (int)-1);
            		}
            		else {
HXLINE( 399)			_hx_tmp1 = false;
            		}
HXDLIN( 399)		if (_hx_tmp1) {
HXLINE( 401)			oldPath = ::Sys_obj::getCwd();
HXLINE( 402)			::String _hx_tmp4 = (parts->__get((int)0) + HX_("\\",5c,00,00,00));
HXDLIN( 402)			::Sys_obj::setCwd(_hx_tmp4);
HXLINE( 403)			parts->shift();
            		}
HXLINE( 407)		{
HXLINE( 407)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 407)			while((_g < parts->length)){
HXLINE( 407)				HX_VARI( ::String,part) = parts->__get(_g);
HXDLIN( 407)				++_g;
HXLINE( 409)				Bool _hx_tmp5;
HXDLIN( 409)				if ((part != HX_(".",2e,00,00,00))) {
HXLINE( 409)					_hx_tmp5 = (part != HX_("",00,00,00,00));
            				}
            				else {
HXLINE( 409)					_hx_tmp5 = false;
            				}
HXDLIN( 409)				if (_hx_tmp5) {
HXLINE( 411)					Bool _hx_tmp6;
HXDLIN( 411)					if ((total != HX_("",00,00,00,00))) {
HXLINE( 411)						_hx_tmp6 = (total != HX_("/",2f,00,00,00));
            					}
            					else {
HXLINE( 411)						_hx_tmp6 = false;
            					}
HXDLIN( 411)					if (_hx_tmp6) {
HXLINE( 413)						hx::AddEq(total,HX_("/",2f,00,00,00));
            					}
HXLINE( 417)					hx::AddEq(total,part);
HXLINE( 419)					Bool _hx_tmp7 = !(::sys::FileSystem_obj::exists(total));
HXDLIN( 419)					if (_hx_tmp7) {
HXLINE( 421)						::lime::tools::helpers::LogHelper_obj::info(HX_("",00,00,00,00),(HX_(" - \x1b""[1mCreating directory:\x1b""[0m ",3e,ed,75,2c) + total));
HXLINE( 423)						::sys::FileSystem_obj::createDirectory(total);
            					}
            				}
            			}
            		}
HXLINE( 431)		if ((oldPath != HX_("",00,00,00,00))) {
HXLINE( 433)			::Sys_obj::setCwd(oldPath);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(PathHelper_obj,mkdir,(void))

::Array< ::String > PathHelper_obj::readDirectory(::String directory,::Array< ::String > ignore,::Array< ::String > paths){
            	HX_STACK_FRAME("lime.tools.helpers.PathHelper","readDirectory",0xb33c85d1,"lime.tools.helpers.PathHelper.readDirectory","lime/tools/helpers/PathHelper.hx",440,0xca1d8093)
            	HX_STACK_ARG(directory,"directory")
            	HX_STACK_ARG(ignore,"ignore")
            	HX_STACK_ARG(paths,"paths")
HXLINE( 442)		Bool _hx_tmp = ::sys::FileSystem_obj::exists(directory);
HXDLIN( 442)		if (_hx_tmp) {
HXLINE( 444)			Bool _hx_tmp1 = hx::IsNull( paths );
HXDLIN( 444)			if (_hx_tmp1) {
HXLINE( 446)				paths = ::Array_obj< ::String >::__new(0);
            			}
HXLINE( 452)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 454)				::sys::FileSystem_obj::readDirectory(directory);
            			}
            			catch( ::Dynamic _hx_e){
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic e = _hx_e;
HXLINE( 458)					return paths;
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
HXLINE( 462)			{
HXLINE( 462)				HX_VARI( Int,_g) = (int)0;
HXDLIN( 462)				HX_VARI( ::Array< ::String >,_g1) = ::sys::FileSystem_obj::readDirectory(directory);
HXDLIN( 462)				while((_g < _g1->length)){
HXLINE( 462)					HX_VARI( ::String,file) = _g1->__get(_g);
HXDLIN( 462)					++_g;
HXLINE( 464)					Bool _hx_tmp2 = hx::IsNotNull( ignore );
HXDLIN( 464)					if (_hx_tmp2) {
HXLINE( 466)						HX_VARI( Bool,filtered) = false;
HXLINE( 468)						{
HXLINE( 468)							HX_VARI( Int,_g2) = (int)0;
HXDLIN( 468)							while((_g2 < ignore->length)){
HXLINE( 468)								HX_VARI( ::String,filter) = ignore->__get(_g2);
HXDLIN( 468)								++_g2;
HXLINE( 470)								if ((filter == file)) {
HXLINE( 472)									filtered = true;
            								}
            							}
            						}
HXLINE( 478)						if (filtered) {
HXLINE( 478)							continue;
            						}
            					}
HXLINE( 482)					HX_VARI( ::String,path) = ((directory + HX_("/",2f,00,00,00)) + file);
HXLINE( 484)					try {
            						HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 486)						Bool _hx_tmp3 = ::sys::FileSystem_obj::isDirectory(path);
HXDLIN( 486)						if (_hx_tmp3) {
HXLINE( 488)							::lime::tools::helpers::PathHelper_obj::readDirectory(path,ignore,paths);
            						}
            						else {
HXLINE( 492)							paths->push(path);
            						}
            					}
            					catch( ::Dynamic _hx_e){
            						if (_hx_e.IsClass<  ::Dynamic >() ){
            							HX_STACK_BEGIN_CATCH
            							 ::Dynamic e1 = _hx_e;
HXLINE( 498)							return paths;
            						}
            						else {
            							HX_STACK_DO_THROW(_hx_e);
            						}
            					}
            				}
            			}
HXLINE( 504)			return paths;
            		}
HXLINE( 508)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(PathHelper_obj,readDirectory,return )

::String PathHelper_obj::relocatePath(::String path,::String targetDirectory){
            	HX_STACK_FRAME("lime.tools.helpers.PathHelper","relocatePath",0xcbdf7770,"lime.tools.helpers.PathHelper.relocatePath","lime/tools/helpers/PathHelper.hx",517,0xca1d8093)
            	HX_STACK_ARG(path,"path")
            	HX_STACK_ARG(targetDirectory,"targetDirectory")
HXLINE( 517)		Bool _hx_tmp;
HXDLIN( 517)		Bool _hx_tmp1 = !(::lime::tools::helpers::PathHelper_obj::isAbsolute(path));
HXDLIN( 517)		if (_hx_tmp1) {
HXLINE( 517)			_hx_tmp = (targetDirectory == HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 517)			_hx_tmp = true;
            		}
HXDLIN( 517)		if (_hx_tmp) {
HXLINE( 519)			return path;
            		}
            		else {
HXLINE( 521)			Bool _hx_tmp2 = ::lime::tools::helpers::PathHelper_obj::isAbsolute(targetDirectory);
HXDLIN( 521)			if (_hx_tmp2) {
HXLINE( 523)				::String _hx_tmp3 = ::Sys_obj::getCwd();
HXDLIN( 523)				return ::lime::tools::helpers::PathHelper_obj::combine(_hx_tmp3,path);
            			}
            			else {
HXLINE( 527)				targetDirectory = ::StringTools_obj::replace(targetDirectory,HX_("\\",5c,00,00,00),HX_("/",2f,00,00,00));
HXLINE( 529)				HX_VARI( ::Array< ::String >,splitTarget) = targetDirectory.split(HX_("/",2f,00,00,00));
HXLINE( 530)				HX_VARI( Int,directories) = (int)0;
HXLINE( 532)				while((splitTarget->length > (int)0)){
HXLINE( 534)					HX_VARI( ::String,_g) = ( (::String)(splitTarget->shift()) );
HXDLIN( 534)					Bool _hx_tmp4 = hx::IsNull( _g );
HXDLIN( 534)					if (_hx_tmp4) {
HXLINE( 546)						++directories;
            					}
            					else {
HXLINE( 534)						::String _hx_switch_0 = _g;
            						if (  (_hx_switch_0==HX_("",00,00,00,00)) ||  (_hx_switch_0==HX_(".",2e,00,00,00)) ){
HXLINE( 536)							goto _hx_goto_7;
            						}
            						if (  (_hx_switch_0==HX_("..",40,28,00,00)) ){
HXLINE( 542)							--directories;
HXDLIN( 542)							goto _hx_goto_7;
            						}
            						/* default */{
HXLINE( 546)							++directories;
            						}
            						_hx_goto_7:;
            					}
            				}
HXLINE( 552)				HX_VARI( ::String,adjust) = HX_("",00,00,00,00);
HXLINE( 554)				{
HXLINE( 554)					HX_VARI( Int,_g1) = (int)0;
HXDLIN( 554)					HX_VARI_NAME( Int,_g2,"_g") = directories;
HXDLIN( 554)					while((_g1 < _g2)){
HXLINE( 554)						++_g1;
HXLINE( 556)						hx::AddEq(adjust,HX_("../",ef,0f,23,00));
            					}
            				}
HXLINE( 560)				return (adjust + path);
            			}
            		}
HXLINE( 517)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(PathHelper_obj,relocatePath,return )

::Array< ::String > PathHelper_obj::relocatePaths(::Array< ::String > paths,::String targetDirectory){
            	HX_STACK_FRAME("lime.tools.helpers.PathHelper","relocatePaths",0x97a90b03,"lime.tools.helpers.PathHelper.relocatePaths","lime/tools/helpers/PathHelper.hx",567,0xca1d8093)
            	HX_STACK_ARG(paths,"paths")
            	HX_STACK_ARG(targetDirectory,"targetDirectory")
HXLINE( 569)		HX_VARI( ::Array< ::String >,relocatedPaths) = paths->copy();
HXLINE( 571)		{
HXLINE( 571)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 571)			HX_VARI( Int,_g) = paths->length;
HXDLIN( 571)			while((_g1 < _g)){
HXLINE( 571)				HX_VARI( Int,i) = _g1++;
HXLINE( 573)				::String _hx_tmp = paths->__get(i);
HXDLIN( 573)				::String _hx_tmp1 = ::lime::tools::helpers::PathHelper_obj::relocatePath(_hx_tmp,targetDirectory);
HXDLIN( 573)				relocatedPaths[i] = _hx_tmp1;
            			}
            		}
HXLINE( 577)		return relocatedPaths;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(PathHelper_obj,relocatePaths,return )

void PathHelper_obj::removeDirectory(::String directory){
            	HX_STACK_FRAME("lime.tools.helpers.PathHelper","removeDirectory",0x2899c1a3,"lime.tools.helpers.PathHelper.removeDirectory","lime/tools/helpers/PathHelper.hx",584,0xca1d8093)
            	HX_STACK_ARG(directory,"directory")
HXLINE( 584)		Bool _hx_tmp = ::sys::FileSystem_obj::exists(directory);
HXDLIN( 584)		if (_hx_tmp) {
HXLINE( 588)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 590)				::sys::FileSystem_obj::readDirectory(directory);
            			}
            			catch( ::Dynamic _hx_e){
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic e = _hx_e;
HXLINE( 594)					return;
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
HXLINE( 598)			{
HXLINE( 598)				HX_VARI( Int,_g) = (int)0;
HXDLIN( 598)				HX_VARI( ::Array< ::String >,_g1) = ::sys::FileSystem_obj::readDirectory(directory);
HXDLIN( 598)				while((_g < _g1->length)){
HXLINE( 598)					HX_VARI( ::String,file) = _g1->__get(_g);
HXDLIN( 598)					++_g;
HXLINE( 600)					HX_VARI( ::String,path) = ((directory + HX_("/",2f,00,00,00)) + file);
HXLINE( 602)					try {
            						HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 604)						Bool _hx_tmp1 = ::sys::FileSystem_obj::isDirectory(path);
HXDLIN( 604)						if (_hx_tmp1) {
HXLINE( 606)							::lime::tools::helpers::PathHelper_obj::removeDirectory(path);
            						}
            						else {
HXLINE( 610)							::sys::FileSystem_obj::deleteFile(path);
            						}
            					}
            					catch( ::Dynamic _hx_e){
            						if (_hx_e.IsClass<  ::Dynamic >() ){
            							HX_STACK_BEGIN_CATCH
            							 ::Dynamic e1 = _hx_e;
            						}
            						else {
            							HX_STACK_DO_THROW(_hx_e);
            						}
            					}
            				}
            			}
HXLINE( 618)			::lime::tools::helpers::LogHelper_obj::info(HX_("",00,00,00,00),(HX_(" - \x1b""[1mRemoving directory:\x1b""[0m ",86,14,0e,68) + directory));
HXLINE( 620)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 622)				::sys::FileSystem_obj::deleteDirectory(directory);
            			}
            			catch( ::Dynamic _hx_e){
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic e2 = _hx_e;
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(PathHelper_obj,removeDirectory,(void))

::String PathHelper_obj::safeFileName(::String name){
            	HX_STACK_FRAME("lime.tools.helpers.PathHelper","safeFileName",0xe8bfc0fa,"lime.tools.helpers.PathHelper.safeFileName","lime/tools/helpers/PathHelper.hx",631,0xca1d8093)
            	HX_STACK_ARG(name,"name")
HXLINE( 633)		HX_VARI( ::String,safeName) = ::StringTools_obj::replace(name,HX_(" ",20,00,00,00),HX_("",00,00,00,00));
HXLINE( 634)		return safeName;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(PathHelper_obj,safeFileName,return )

::String PathHelper_obj::searchForLibrary( ::lime::project::NDLL ndll,::String directoryName,::String filename){
            	HX_STACK_FRAME("lime.tools.helpers.PathHelper","searchForLibrary",0xe528c320,"lime.tools.helpers.PathHelper.searchForLibrary","lime/tools/helpers/PathHelper.hx",641,0xca1d8093)
            	HX_STACK_ARG(ndll,"ndll")
            	HX_STACK_ARG(directoryName,"directoryName")
            	HX_STACK_ARG(filename,"filename")
HXLINE( 641)		Bool _hx_tmp;
HXDLIN( 641)		Bool _hx_tmp1 = hx::IsNotNull( ndll->path );
HXDLIN( 641)		if (_hx_tmp1) {
HXLINE( 641)			_hx_tmp = (ndll->path != HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 641)			_hx_tmp = false;
            		}
HXDLIN( 641)		if (_hx_tmp) {
HXLINE( 643)			return ndll->path;
            		}
            		else {
HXLINE( 645)			Bool _hx_tmp2 = hx::IsNull( ndll->haxelib );
HXDLIN( 645)			if (_hx_tmp2) {
HXLINE( 647)				Bool _hx_tmp3;
HXDLIN( 647)				Bool _hx_tmp4 = hx::IsNotNull( ndll->extensionPath );
HXDLIN( 647)				if (_hx_tmp4) {
HXLINE( 647)					_hx_tmp3 = (ndll->extensionPath != HX_("",00,00,00,00));
            				}
            				else {
HXLINE( 647)					_hx_tmp3 = false;
            				}
HXDLIN( 647)				if (_hx_tmp3) {
HXLINE( 649)					HX_VARI( ::String,subdirectory) = HX_("ndll/",39,77,7f,98);
HXLINE( 651)					Bool _hx_tmp5 = hx::IsNotNull( ndll->subdirectory );
HXDLIN( 651)					if (_hx_tmp5) {
HXLINE( 653)						if ((ndll->subdirectory != HX_("",00,00,00,00))) {
HXLINE( 655)							subdirectory = (ndll->subdirectory + HX_("/",2f,00,00,00));
            						}
            						else {
HXLINE( 659)							subdirectory = HX_("",00,00,00,00);
            						}
            					}
HXLINE( 665)					return ::lime::tools::helpers::PathHelper_obj::combine(ndll->extensionPath,(((subdirectory + directoryName) + HX_("/",2f,00,00,00)) + filename));
            				}
            				else {
HXLINE( 669)					return filename;
            				}
            			}
            			else {
HXLINE( 673)				if ((ndll->haxelib->name == HX_("hxcpp",13,70,49,31))) {
HXLINE( 675)					HX_VARI( ::String,extension) = ::haxe::io::Path_obj::extension(filename);
HXLINE( 677)					Bool _hx_tmp6;
HXDLIN( 677)					if ((extension != HX_("a",61,00,00,00))) {
HXLINE( 677)						_hx_tmp6 = (extension == HX_("lib",45,4f,52,00));
            					}
            					else {
HXLINE( 677)						_hx_tmp6 = true;
            					}
HXDLIN( 677)					if (_hx_tmp6) {
HXLINE( 679)						::String _hx_tmp7 = ::lime::tools::helpers::PathHelper_obj::getHaxelib(ndll->haxelib,true,null());
HXDLIN( 679)						return ::lime::tools::helpers::PathHelper_obj::combine(_hx_tmp7,(((HX_("lib/",4a,0d,b3,47) + directoryName) + HX_("/",2f,00,00,00)) + filename));
            					}
            					else {
HXLINE( 683)						::String _hx_tmp8 = ::lime::tools::helpers::PathHelper_obj::getHaxelib(ndll->haxelib,true,null());
HXDLIN( 683)						return ::lime::tools::helpers::PathHelper_obj::combine(_hx_tmp8,(((HX_("bin/",88,f5,16,41) + directoryName) + HX_("/",2f,00,00,00)) + filename));
            					}
            				}
            				else {
HXLINE( 689)					HX_VARI_NAME( ::String,subdirectory1,"subdirectory") = HX_("ndll/",39,77,7f,98);
HXLINE( 691)					Bool _hx_tmp9 = hx::IsNotNull( ndll->subdirectory );
HXDLIN( 691)					if (_hx_tmp9) {
HXLINE( 693)						if ((ndll->subdirectory != HX_("",00,00,00,00))) {
HXLINE( 695)							subdirectory1 = (ndll->subdirectory + HX_("/",2f,00,00,00));
            						}
            						else {
HXLINE( 699)							subdirectory1 = HX_("",00,00,00,00);
            						}
            					}
HXLINE( 705)					::String _hx_tmp10 = ::lime::tools::helpers::PathHelper_obj::getHaxelib(ndll->haxelib,true,null());
HXDLIN( 705)					return ::lime::tools::helpers::PathHelper_obj::combine(_hx_tmp10,(((subdirectory1 + directoryName) + HX_("/",2f,00,00,00)) + filename));
            				}
            			}
            		}
HXLINE( 641)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(PathHelper_obj,searchForLibrary,return )

::String PathHelper_obj::standardize(::String path,hx::Null< Bool >  __o_trailingSlash){
Bool trailingSlash = __o_trailingSlash.Default(false);
            	HX_STACK_FRAME("lime.tools.helpers.PathHelper","standardize",0x68f5e351,"lime.tools.helpers.PathHelper.standardize","lime/tools/helpers/PathHelper.hx",712,0xca1d8093)
            	HX_STACK_ARG(path,"path")
            	HX_STACK_ARG(trailingSlash,"trailingSlash")
HXLINE( 714)		path = ::StringTools_obj::replace(path,HX_("\\",5c,00,00,00),HX_("/",2f,00,00,00));
HXLINE( 715)		path = ::StringTools_obj::replace(path,HX_("//",20,29,00,00),HX_("/",2f,00,00,00));
HXLINE( 716)		path = ::StringTools_obj::replace(path,HX_("//",20,29,00,00),HX_("/",2f,00,00,00));
HXLINE( 718)		Bool _hx_tmp;
HXDLIN( 718)		if (!(trailingSlash)) {
HXLINE( 718)			_hx_tmp = ::StringTools_obj::endsWith(path,HX_("/",2f,00,00,00));
            		}
            		else {
HXLINE( 718)			_hx_tmp = false;
            		}
HXDLIN( 718)		if (_hx_tmp) {
HXLINE( 720)			Int _hx_tmp1 = (path.length - (int)1);
HXDLIN( 720)			path = path.substr((int)0,_hx_tmp1);
            		}
            		else {
HXLINE( 722)			Bool _hx_tmp2;
HXDLIN( 722)			if (trailingSlash) {
HXLINE( 722)				_hx_tmp2 = !(::StringTools_obj::endsWith(path,HX_("/",2f,00,00,00)));
            			}
            			else {
HXLINE( 722)				_hx_tmp2 = false;
            			}
HXDLIN( 722)			if (_hx_tmp2) {
HXLINE( 724)				hx::AddEq(path,HX_("/",2f,00,00,00));
            			}
            		}
HXLINE( 728)		Bool _hx_tmp3;
HXDLIN( 728)		::String _hx_tmp4 = ::lime::tools::helpers::PlatformHelper_obj::get_hostPlatform();
HXDLIN( 728)		if ((_hx_tmp4 == HX_("windows",83,de,74,e8))) {
HXLINE( 728)			::String _hx_tmp5 = path.charAt((int)1);
HXDLIN( 728)			_hx_tmp3 = (_hx_tmp5 == HX_(":",3a,00,00,00));
            		}
            		else {
HXLINE( 728)			_hx_tmp3 = false;
            		}
HXDLIN( 728)		if (_hx_tmp3) {
HXLINE( 730)			::String _hx_tmp6 = path.charAt((int)0).toUpperCase();
HXDLIN( 730)			::String _hx_tmp7 = (_hx_tmp6 + HX_(":",3a,00,00,00));
HXDLIN( 730)			::String _hx_tmp8 = path.substr((int)2,null());
HXDLIN( 730)			path = (_hx_tmp7 + _hx_tmp8);
            		}
HXLINE( 734)		return path;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(PathHelper_obj,standardize,return )

::String PathHelper_obj::tryFullPath(::String path){
            	HX_STACK_FRAME("lime.tools.helpers.PathHelper","tryFullPath",0xe7336649,"lime.tools.helpers.PathHelper.tryFullPath","lime/tools/helpers/PathHelper.hx",741,0xca1d8093)
            	HX_STACK_ARG(path,"path")
HXLINE( 741)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 743)			return ::sys::FileSystem_obj::fullPath(path);
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
HXLINE( 747)				return ::lime::tools::helpers::PathHelper_obj::expand(path);
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE( 741)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(PathHelper_obj,tryFullPath,return )


PathHelper_obj::PathHelper_obj()
{
}

bool PathHelper_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"mkdir") ) { outValue = mkdir_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"escape") ) { outValue = escape_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"expand") ) { outValue = expand_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"combine") ) { outValue = combine_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"getHaxelib") ) { outValue = getHaxelib_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isAbsolute") ) { outValue = isAbsolute_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isRelative") ) { outValue = isRelative_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"standardize") ) { outValue = standardize_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"tryFullPath") ) { outValue = tryFullPath_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"haxelibPaths") ) { outValue = haxelibPaths; return true; }
		if (HX_FIELD_EQ(inName,"findTemplate") ) { outValue = findTemplate_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"relocatePath") ) { outValue = relocatePath_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"safeFileName") ) { outValue = safeFileName_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"findTemplates") ) { outValue = findTemplates_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"readDirectory") ) { outValue = readDirectory_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"relocatePaths") ) { outValue = relocatePaths_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"getLibraryPath") ) { outValue = getLibraryPath_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"removeDirectory") ) { outValue = removeDirectory_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"haxelibOverrides") ) { outValue = haxelibOverrides; return true; }
		if (HX_FIELD_EQ(inName,"getTemporaryFile") ) { outValue = getTemporaryFile_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"searchForLibrary") ) { outValue = searchForLibrary_dyn(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"getTemporaryDirectory") ) { outValue = getTemporaryDirectory_dyn(); return true; }
	}
	return false;
}

bool PathHelper_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"haxelibPaths") ) { haxelibPaths=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"haxelibOverrides") ) { haxelibOverrides=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *PathHelper_obj_sMemberStorageInfo = 0;
static hx::StaticInfo PathHelper_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &PathHelper_obj::haxelibOverrides,HX_HCSTRING("haxelibOverrides","\xc8","\xb5","\x5f","\xb5")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &PathHelper_obj::haxelibPaths,HX_HCSTRING("haxelibPaths","\xcf","\x7b","\x45","\x95")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void PathHelper_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PathHelper_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(PathHelper_obj::haxelibOverrides,"haxelibOverrides");
	HX_MARK_MEMBER_NAME(PathHelper_obj::haxelibPaths,"haxelibPaths");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PathHelper_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PathHelper_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(PathHelper_obj::haxelibOverrides,"haxelibOverrides");
	HX_VISIT_MEMBER_NAME(PathHelper_obj::haxelibPaths,"haxelibPaths");
};

#endif

hx::Class PathHelper_obj::__mClass;

static ::String PathHelper_obj_sStaticFields[] = {
	HX_HCSTRING("haxelibOverrides","\xc8","\xb5","\x5f","\xb5"),
	HX_HCSTRING("haxelibPaths","\xcf","\x7b","\x45","\x95"),
	HX_HCSTRING("combine","\x7f","\x2a","\x2e","\x7a"),
	HX_HCSTRING("escape","\x81","\x43","\xda","\xda"),
	HX_HCSTRING("expand","\x5a","\xee","\x72","\xc4"),
	HX_HCSTRING("findTemplate","\x93","\xd5","\xc5","\x99"),
	HX_HCSTRING("findTemplates","\x80","\x0b","\x55","\xf3"),
	HX_HCSTRING("getHaxelib","\xe9","\x3c","\xe2","\x57"),
	HX_HCSTRING("getLibraryPath","\x4a","\x25","\xd8","\x33"),
	HX_HCSTRING("getTemporaryFile","\x37","\x8a","\xad","\x14"),
	HX_HCSTRING("getTemporaryDirectory","\xd2","\xd0","\xe9","\xb6"),
	HX_HCSTRING("isAbsolute","\x81","\xe0","\x44","\x3e"),
	HX_HCSTRING("isRelative","\xd6","\xce","\x83","\xb0"),
	HX_HCSTRING("mkdir","\xaf","\x4c","\xb3","\x09"),
	HX_HCSTRING("readDirectory","\x37","\x6c","\xb3","\xa3"),
	HX_HCSTRING("relocatePath","\xca","\xdf","\x43","\x53"),
	HX_HCSTRING("relocatePaths","\x69","\xf1","\x1f","\x88"),
	HX_HCSTRING("removeDirectory","\x89","\x8d","\x63","\x51"),
	HX_HCSTRING("safeFileName","\x54","\x29","\x24","\x70"),
	HX_HCSTRING("searchForLibrary","\x7a","\x60","\xf1","\x6c"),
	HX_HCSTRING("standardize","\x37","\x44","\xe6","\x73"),
	HX_HCSTRING("tryFullPath","\x2f","\xc7","\x23","\xf2"),
	::String(null())
};

void PathHelper_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime.tools.helpers.PathHelper","\x88","\x40","\x87","\xc8");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &PathHelper_obj::__GetStatic;
	__mClass->mSetStaticField = &PathHelper_obj::__SetStatic;
	__mClass->mMarkFunc = PathHelper_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(PathHelper_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< PathHelper_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PathHelper_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PathHelper_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PathHelper_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void PathHelper_obj::__boot()
{
{
            	HX_STACK_FRAME("lime.tools.helpers.PathHelper","boot",0xe34405d8,"lime.tools.helpers.PathHelper.boot","lime/tools/helpers/PathHelper.hx",18,0xca1d8093)
HXLINE(  18)		haxelibOverrides =  ::haxe::ds::StringMap_obj::__new();
            	}
{
            	HX_STACK_FRAME("lime.tools.helpers.PathHelper","boot",0xe34405d8,"lime.tools.helpers.PathHelper.boot","lime/tools/helpers/PathHelper.hx",20,0xca1d8093)
HXLINE(  20)		haxelibPaths =  ::haxe::ds::StringMap_obj::__new();
            	}
}

} // end namespace lime
} // end namespace tools
} // end namespace helpers
