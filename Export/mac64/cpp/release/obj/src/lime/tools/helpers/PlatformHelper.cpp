// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_Input
#include <haxe/io/Input.h>
#endif
#ifndef INCLUDED_lime_project_Architecture
#include <lime/project/Architecture.h>
#endif
#ifndef INCLUDED_lime_tools_helpers_LogHelper
#include <lime/tools/helpers/LogHelper.h>
#endif
#ifndef INCLUDED_lime_tools_helpers_PlatformHelper
#include <lime/tools/helpers/PlatformHelper.h>
#endif
#ifndef INCLUDED_sys_io_Process
#include <sys/io/Process.h>
#endif

static const ::String _hx_array_data_1[] = {
	HX_("-m",a0,27,00,00),
};
namespace lime{
namespace tools{
namespace helpers{

void PlatformHelper_obj::__construct() { }

Dynamic PlatformHelper_obj::__CreateEmpty() { return new PlatformHelper_obj; }

hx::ObjectPtr< PlatformHelper_obj > PlatformHelper_obj::__new()
{
	hx::ObjectPtr< PlatformHelper_obj > _hx_result = new PlatformHelper_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic PlatformHelper_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< PlatformHelper_obj > _hx_result = new PlatformHelper_obj();
	_hx_result->__construct();
	return _hx_result;
}

::hx::EnumBase PlatformHelper_obj::hostArchitecture;

::String PlatformHelper_obj::hostPlatform;

::hx::EnumBase PlatformHelper_obj::_hostArchitecture;

::String PlatformHelper_obj::_hostPlatform;

::hx::EnumBase PlatformHelper_obj::get_hostArchitecture(){
            	HX_STACK_FRAME("lime.tools.helpers.PlatformHelper","get_hostArchitecture",0x0d9a3a3c,"lime.tools.helpers.PlatformHelper.get_hostArchitecture","lime/tools/helpers/PlatformHelper.hx",19,0x80af35c5)
HXLINE(  21)		Bool _hx_tmp = hx::IsNull( ::lime::tools::helpers::PlatformHelper_obj::_hostArchitecture );
HXDLIN(  21)		if (_hx_tmp) {
HXLINE(  23)			{
HXLINE(  23)				HX_VARI( ::String,_g) = ::lime::tools::helpers::PlatformHelper_obj::get_hostPlatform();
HXDLIN(  23)				::String _hx_switch_0 = _g;
            				if (  (_hx_switch_0==HX_("linux",f4,eb,01,75)) ||  (_hx_switch_0==HX_("mac",8f,0a,53,00)) ){
HXLINE(  41)					HX_VARI(  ::sys::io::Process,process) =  ::sys::io::Process_obj::__new(HX_("uname",40,51,e1,a6),::Array_obj< ::String >::fromData( _hx_array_data_1,1));
HXLINE(  42)					HX_VARI( ::String,output) = process->_hx_stdout->readAll(null())->toString();
HXLINE(  43)					process->_hx_stderr->readAll(null())->toString();
HXLINE(  44)					process->exitCode();
HXLINE(  45)					process->close();
HXLINE(  47)					Int _hx_tmp1 = output.indexOf(HX_("armv6",5c,b4,8b,25),null());
HXDLIN(  47)					if ((_hx_tmp1 > (int)-1)) {
HXLINE(  49)						::lime::tools::helpers::PlatformHelper_obj::_hostArchitecture = ::lime::project::Architecture_obj::ARMV6_dyn();
            					}
            					else {
HXLINE(  51)						Int _hx_tmp2 = output.indexOf(HX_("armv7",5d,b4,8b,25),null());
HXDLIN(  51)						if ((_hx_tmp2 > (int)-1)) {
HXLINE(  53)							::lime::tools::helpers::PlatformHelper_obj::_hostArchitecture = ::lime::project::Architecture_obj::ARMV7_dyn();
            						}
            						else {
HXLINE(  55)							Int _hx_tmp3 = output.indexOf(HX_("64",3e,2f,00,00),null());
HXDLIN(  55)							if ((_hx_tmp3 > (int)-1)) {
HXLINE(  57)								::lime::tools::helpers::PlatformHelper_obj::_hostArchitecture = ::lime::project::Architecture_obj::X64_dyn();
            							}
            							else {
HXLINE(  60)								::lime::tools::helpers::PlatformHelper_obj::_hostArchitecture = ::lime::project::Architecture_obj::X86_dyn();
            							}
            						}
            					}
HXLINE(  39)					goto _hx_goto_0;
            				}
            				if (  (_hx_switch_0==HX_("windows",83,de,74,e8)) ){
HXLINE(  27)					HX_VARI( ::String,architecture) = ::Sys_obj::getEnv(HX_("PROCESSOR_ARCHITEW6432",3d,ad,0b,ca));
HXLINE(  29)					Bool _hx_tmp4;
HXDLIN(  29)					Bool _hx_tmp5 = hx::IsNotNull( architecture );
HXDLIN(  29)					if (_hx_tmp5) {
HXLINE(  29)						Int _hx_tmp6 = architecture.indexOf(HX_("64",3e,2f,00,00),null());
HXDLIN(  29)						_hx_tmp4 = (_hx_tmp6 > (int)-1);
            					}
            					else {
HXLINE(  29)						_hx_tmp4 = false;
            					}
HXDLIN(  29)					if (_hx_tmp4) {
HXLINE(  31)						::lime::tools::helpers::PlatformHelper_obj::_hostArchitecture = ::lime::project::Architecture_obj::X64_dyn();
            					}
            					else {
HXLINE(  35)						::lime::tools::helpers::PlatformHelper_obj::_hostArchitecture = ::lime::project::Architecture_obj::X86_dyn();
            					}
HXLINE(  25)					goto _hx_goto_0;
            				}
            				/* default */{
HXLINE(  66)					::lime::tools::helpers::PlatformHelper_obj::_hostArchitecture = ::lime::project::Architecture_obj::ARMV6_dyn();
            				}
            				_hx_goto_0:;
            			}
HXLINE(  70)			::String _hx_tmp7 = ::Std_obj::string(::lime::tools::helpers::PlatformHelper_obj::_hostArchitecture).toUpperCase();
HXDLIN(  70)			::lime::tools::helpers::LogHelper_obj::info(HX_("",00,00,00,00),(HX_(" - \x1b""[1mDetected host architecture:\x1b""[0m ",25,8f,85,29) + _hx_tmp7));
            		}
HXLINE(  74)		return ::lime::tools::helpers::PlatformHelper_obj::_hostArchitecture;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(PlatformHelper_obj,get_hostArchitecture,return )

::String PlatformHelper_obj::get_hostPlatform(){
            	HX_STACK_FRAME("lime.tools.helpers.PlatformHelper","get_hostPlatform",0xae900b9c,"lime.tools.helpers.PlatformHelper.get_hostPlatform","lime/tools/helpers/PlatformHelper.hx",79,0x80af35c5)
HXLINE(  81)		Bool _hx_tmp = hx::IsNull( ::lime::tools::helpers::PlatformHelper_obj::_hostPlatform );
HXDLIN(  81)		if (_hx_tmp) {
HXLINE(  83)			 ::EReg _hx_tmp1 =  ::EReg_obj::__new(HX_("window",f0,93,8c,52),HX_("i",69,00,00,00));
HXDLIN(  83)			::String _hx_tmp2 = ::Sys_obj::systemName();
HXDLIN(  83)			Bool _hx_tmp3 = _hx_tmp1->match(_hx_tmp2);
HXDLIN(  83)			if (_hx_tmp3) {
HXLINE(  85)				::lime::tools::helpers::PlatformHelper_obj::_hostPlatform = HX_("windows",83,de,74,e8);
            			}
            			else {
HXLINE(  87)				 ::EReg _hx_tmp4 =  ::EReg_obj::__new(HX_("linux",f4,eb,01,75),HX_("i",69,00,00,00));
HXDLIN(  87)				::String _hx_tmp5 = ::Sys_obj::systemName();
HXDLIN(  87)				Bool _hx_tmp6 = _hx_tmp4->match(_hx_tmp5);
HXDLIN(  87)				if (_hx_tmp6) {
HXLINE(  89)					::lime::tools::helpers::PlatformHelper_obj::_hostPlatform = HX_("linux",f4,eb,01,75);
            				}
            				else {
HXLINE(  91)					 ::EReg _hx_tmp7 =  ::EReg_obj::__new(HX_("mac",8f,0a,53,00),HX_("i",69,00,00,00));
HXDLIN(  91)					::String _hx_tmp8 = ::Sys_obj::systemName();
HXDLIN(  91)					Bool _hx_tmp9 = _hx_tmp7->match(_hx_tmp8);
HXDLIN(  91)					if (_hx_tmp9) {
HXLINE(  93)						::lime::tools::helpers::PlatformHelper_obj::_hostPlatform = HX_("mac",8f,0a,53,00);
            					}
            				}
            			}
HXLINE(  97)			::String _hx_tmp10 = ::Std_obj::string(::lime::tools::helpers::PlatformHelper_obj::_hostPlatform).toUpperCase();
HXDLIN(  97)			::lime::tools::helpers::LogHelper_obj::info(HX_("",00,00,00,00),(HX_(" - \x1b""[1mDetected host platform:\x1b""[0m ",85,28,65,31) + _hx_tmp10));
            		}
HXLINE( 101)		return ::lime::tools::helpers::PlatformHelper_obj::_hostPlatform;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(PlatformHelper_obj,get_hostPlatform,return )


PlatformHelper_obj::PlatformHelper_obj()
{
}

bool PlatformHelper_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"hostPlatform") ) { outValue = inCallProp == hx::paccAlways ? get_hostPlatform() : hostPlatform; return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_hostPlatform") ) { outValue = _hostPlatform; return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"hostArchitecture") ) { outValue = inCallProp == hx::paccAlways ? get_hostArchitecture() : hostArchitecture; return true; }
		if (HX_FIELD_EQ(inName,"get_hostPlatform") ) { outValue = get_hostPlatform_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_hostArchitecture") ) { outValue = _hostArchitecture; return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"get_hostArchitecture") ) { outValue = get_hostArchitecture_dyn(); return true; }
	}
	return false;
}

bool PlatformHelper_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"hostPlatform") ) { hostPlatform=ioValue.Cast< ::String >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_hostPlatform") ) { _hostPlatform=ioValue.Cast< ::String >(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"hostArchitecture") ) { hostArchitecture=ioValue.Cast< ::hx::EnumBase >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_hostArchitecture") ) { _hostArchitecture=ioValue.Cast< ::hx::EnumBase >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *PlatformHelper_obj_sMemberStorageInfo = 0;
static hx::StaticInfo PlatformHelper_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::lime::project::Architecture*/ ,(void *) &PlatformHelper_obj::hostArchitecture,HX_HCSTRING("hostArchitecture","\x5b","\x50","\x6d","\xb4")},
	{hx::fsString,(void *) &PlatformHelper_obj::hostPlatform,HX_HCSTRING("hostPlatform","\x3b","\xe6","\xb7","\xce")},
	{hx::fsObject /*::lime::project::Architecture*/ ,(void *) &PlatformHelper_obj::_hostArchitecture,HX_HCSTRING("_hostArchitecture","\xba","\x3e","\xe8","\x4c")},
	{hx::fsString,(void *) &PlatformHelper_obj::_hostPlatform,HX_HCSTRING("_hostPlatform","\x1a","\x79","\x26","\xb1")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void PlatformHelper_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PlatformHelper_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(PlatformHelper_obj::hostArchitecture,"hostArchitecture");
	HX_MARK_MEMBER_NAME(PlatformHelper_obj::hostPlatform,"hostPlatform");
	HX_MARK_MEMBER_NAME(PlatformHelper_obj::_hostArchitecture,"_hostArchitecture");
	HX_MARK_MEMBER_NAME(PlatformHelper_obj::_hostPlatform,"_hostPlatform");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PlatformHelper_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PlatformHelper_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(PlatformHelper_obj::hostArchitecture,"hostArchitecture");
	HX_VISIT_MEMBER_NAME(PlatformHelper_obj::hostPlatform,"hostPlatform");
	HX_VISIT_MEMBER_NAME(PlatformHelper_obj::_hostArchitecture,"_hostArchitecture");
	HX_VISIT_MEMBER_NAME(PlatformHelper_obj::_hostPlatform,"_hostPlatform");
};

#endif

hx::Class PlatformHelper_obj::__mClass;

static ::String PlatformHelper_obj_sStaticFields[] = {
	HX_HCSTRING("hostArchitecture","\x5b","\x50","\x6d","\xb4"),
	HX_HCSTRING("hostPlatform","\x3b","\xe6","\xb7","\xce"),
	HX_HCSTRING("_hostArchitecture","\xba","\x3e","\xe8","\x4c"),
	HX_HCSTRING("_hostPlatform","\x1a","\x79","\x26","\xb1"),
	HX_HCSTRING("get_hostArchitecture","\x64","\xb5","\xd7","\xd2"),
	HX_HCSTRING("get_hostPlatform","\xc4","\xd2","\x56","\xd3"),
	::String(null())
};

void PlatformHelper_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime.tools.helpers.PlatformHelper","\x96","\x3a","\xe3","\x07");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &PlatformHelper_obj::__GetStatic;
	__mClass->mSetStaticField = &PlatformHelper_obj::__SetStatic;
	__mClass->mMarkFunc = PlatformHelper_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(PlatformHelper_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< PlatformHelper_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PlatformHelper_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PlatformHelper_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PlatformHelper_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace lime
} // end namespace tools
} // end namespace helpers
