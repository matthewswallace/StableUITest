// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_ru_stablex_TweenSprite
#include <ru/stablex/TweenSprite.h>
#endif
#ifndef INCLUDED_ru_stablex_ui_UIBuilder
#include <ru/stablex/ui/UIBuilder.h>
#endif
#ifndef INCLUDED_ru_stablex_ui_widgets_Box
#include <ru/stablex/ui/widgets/Box.h>
#endif
#ifndef INCLUDED_ru_stablex_ui_widgets_Text
#include <ru/stablex/ui/widgets/Text.h>
#endif
#ifndef INCLUDED_ru_stablex_ui_widgets_Widget
#include <ru/stablex/ui/widgets/Widget.h>
#endif


void Main_obj::__construct() { }

Dynamic Main_obj::__CreateEmpty() { return new Main_obj; }

hx::ObjectPtr< Main_obj > Main_obj::__new()
{
	hx::ObjectPtr< Main_obj > _hx_result = new Main_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Main_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Main_obj > _hx_result = new Main_obj();
	_hx_result->__construct();
	return _hx_result;
}

void Main_obj::main(){
            	HX_STACK_FRAME("Main","main",0xed0e206e,"Main.main","Main.hx",11,0x087e5c05)
HXLINE(   1)		{
HXLINE(   2)			::openfl::Lib_obj::current->stage->removeEventListener(HX_("enterFrame",f5,03,50,02),::ru::stablex::ui::UIBuilder_obj::skinQueue_dyn(),null());
HXLINE(   3)			::openfl::Lib_obj::current->stage->addEventListener(HX_("enterFrame",f5,03,50,02),::ru::stablex::ui::UIBuilder_obj::skinQueue_dyn(),null(),null(),null());
            		}
HXLINE(   2)		HX_VARI_NAME(  ::ru::stablex::ui::widgets::Text,_hx___ui__widget1,"__ui__widget1") =  ::ru::stablex::ui::widgets::Text_obj::__new();
HXLINE(   3)		Bool _hx_tmp = ::ru::stablex::ui::UIBuilder_obj::defaults->exists(HX_("Text",cd,f8,d2,37));
HXDLIN(   3)		if (_hx_tmp) {
HXLINE(   4)			HX_VARI( ::Array< ::String >,defs) = HX_("Default",a1,00,15,69).split(HX_(",",2c,00,00,00));
HXLINE(   5)			HX_VARI(  ::haxe::ds::StringMap,defFns) = ::ru::stablex::ui::UIBuilder_obj::defaults->get(HX_("Text",cd,f8,d2,37)).StaticCast<  ::haxe::ds::StringMap >();
HXLINE(   6)			{
HXLINE(   6)				HX_VARI( Int,_g1) = (int)0;
HXDLIN(   6)				HX_VARI( Int,_g) = defs->length;
HXDLIN(   6)				while((_g1 < _g)){
HXLINE(   6)					HX_VARI( Int,i) = _g1++;
HXLINE(   7)					::String _hx_tmp1 = defs->__get(i);
HXDLIN(   7)					HX_VARI(  ::Dynamic,defaultsFn) = defFns->get(_hx_tmp1);
HXLINE(   8)					Bool _hx_tmp2 = hx::IsNotNull( defaultsFn );
HXDLIN(   8)					if (_hx_tmp2) {
HXLINE(   8)						defaultsFn(_hx___ui__widget1);
            					}
            				}
            			}
            		}
HXLINE(  11)		_hx___ui__widget1->set_top((int)100);
HXLINE(  12)		_hx___ui__widget1->set_text(HX_("My first widget!",59,d4,e3,14));
HXLINE(  13)		_hx___ui__widget1->set_left((int)50);
HXLINE(  14)		Bool _hx_tmp3 = ::Std_obj::is(_hx___ui__widget1,hx::ClassOf< ::ru::stablex::ui::widgets::Widget >());
HXDLIN(  14)		if (_hx_tmp3) {
HXLINE(  15)			hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(_hx___ui__widget1)->_onInitialize();
            		}
HXLINE(  17)		Bool _hx_tmp4 = ::Std_obj::is(_hx___ui__widget1,hx::ClassOf< ::ru::stablex::ui::widgets::Widget >());
HXDLIN(  17)		if (_hx_tmp4) {
HXLINE(  18)			hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(_hx___ui__widget1)->_onCreate();
            		}
HXLINE(  13)		::openfl::Lib_obj::current->addChild(_hx___ui__widget1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Main_obj,main,(void))


Main_obj::Main_obj()
{
}

bool Main_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"main") ) { outValue = main_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Main_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Main_obj_sStaticStorageInfo = 0;
#endif

static void Main_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Main_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Main_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Main_obj::__mClass,"__mClass");
};

#endif

hx::Class Main_obj::__mClass;

static ::String Main_obj_sStaticFields[] = {
	HX_HCSTRING("main","\x39","\x38","\x56","\x48"),
	::String(null())
};

void Main_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Main","\x59","\x64","\x2f","\x33");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Main_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Main_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Main_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Main_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Main_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Main_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Main_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

