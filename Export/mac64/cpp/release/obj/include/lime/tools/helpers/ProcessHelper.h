// Generated by Haxe 3.3.0
#ifndef INCLUDED_lime_tools_helpers_ProcessHelper
#define INCLUDED_lime_tools_helpers_ProcessHelper

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(lime,tools,helpers,ProcessHelper)

namespace lime{
namespace tools{
namespace helpers{


class HXCPP_CLASS_ATTRIBUTES ProcessHelper_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef ProcessHelper_obj OBJ_;
		ProcessHelper_obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="lime.tools.helpers.ProcessHelper")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"lime.tools.helpers.ProcessHelper"); }
		static hx::ObjectPtr< ProcessHelper_obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~ProcessHelper_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("ProcessHelper","\x1d","\xe1","\x91","\x22"); }

		static void __boot();
		static Bool dryRun;
		static Int processorCores;
		static Int _processorCores;
		static void openFile(::String workingDirectory,::String targetPath,::String executable);
		static ::Dynamic openFile_dyn();

		static void openURL(::String url);
		static ::Dynamic openURL_dyn();

		static Int runCommand(::String path,::String command,::Array< ::String > args,hx::Null< Bool >  safeExecute,hx::Null< Bool >  ignoreErrors,hx::Null< Bool >  print);
		static ::Dynamic runCommand_dyn();

		static Int _runCommand(::String path,::String command,::Array< ::String > args);
		static ::Dynamic _runCommand_dyn();

		static ::String runProcess(::String path,::String command,::Array< ::String > args,hx::Null< Bool >  waitForOutput,hx::Null< Bool >  safeExecute,hx::Null< Bool >  ignoreErrors,hx::Null< Bool >  print);
		static ::Dynamic runProcess_dyn();

		static ::String _runProcess(::String path,::String command,::Array< ::String > args,Bool waitForOutput,Bool safeExecute,Bool ignoreErrors);
		static ::Dynamic _runProcess_dyn();

		static Int get_processorCores();
		static ::Dynamic get_processorCores_dyn();

};

} // end namespace lime
} // end namespace tools
} // end namespace helpers

#endif /* INCLUDED_lime_tools_helpers_ProcessHelper */ 
